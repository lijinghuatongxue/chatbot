## 问题还原

我们的甲方爸爸遇到了一点技术的问题，具体如下

有一个比较大的sql文件，sql文件是逻辑备份出来的。
导入的过程中出现了
```
 ERROR 1044（42000）：Access denied for user ‘username’@‘%’ to database ‘dbname’
```
应该是权限有问题？



甲方说的是，他们的普通用户只有select,create,insert,update,delete,alter,drop ，这些权限。还要求我们也给相同的权限测试，会不会出现这种情况?

当然是会出现的，因为谁知道是哪位普通用户导出来之前拥有什么权限，需要的权限肯定不止这些，后面的测试也证明绝非不止这些权限。



## 我的思考

我想，既然谁也不知道这个普通用户生前有什么什么权限才会导出这个SQL文件，不妨我们先给这个普通用户所有的权限，等导入完成之后再
取消不想给的权限。
或者直接用超级用户导入，假若有权限的话。（平安那边对权限控制比较严格）
要是不知道普通用户生前有什么权限，还控制普通用户的权限，还要把数据丝毫不差的导入进去，不存在的。


该怎么知道普通用户之前拥有什么权限

看下面

## 查看普通用户有什么权限

### 先查看普通用户分配了什么网段？
```
mysql> select user,host from mysql.user;
+------------------+-------------+
| user             | host        |
+------------------+-------------+
| back             | %           |
| root             | %           |
| shop             | %           |
| slave            | %           |
| tatata           | %           |
| zyd1             | %           |
| jumpserver       | 127.0.0.1   |
| deployop         | 192.168.1.% |
| debian-sys-maint | localhost   |
```
### 再看该网段的某个普通用户具体拥有什么权限
```
mysql> show grants for deployop@'192.168.1.%' ;
+------------------------------------------------------------------------------------------------------------------+
| Grants for deployop@192.168.1.%                                                                                  |
+------------------------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO 'deployop'@'192.168.1.%'                                                                   |
| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, LOCK TABLES ON `dbname`.* TO 'deployop'@'192.168.1.%' |
+------------------------------------------------------------------------------------------------------------------+
2 rows in set (0.00 sec)
```
- 可以看出该用户拥有SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, LOCK TABLES等权限对于dbname库


## 敲黑板！


用户在不同的区段可以拥有不同的密码及所授予的权限，无论是超级用户还是普通用户



## MYSQL导入方式


我所了解的导入有两种方式，不确定有什么稀奇古怪的导入方式
导入方式1:
        
​        
```
进入mysql，
        mysql -u user -p 
        use dbname；
        source /path/***.sql ;   
```
导入方式2:
        
```
命令行执行 
        mysql -u user -p dbname < /path/***.sql 
```

- 前者导入更快，兼容性理论上来说更强，会刷屏，时间慢
- 后者导入快，不刷屏，安安静静的。


## 取消权限？
```
mysql>  REVOKE INSERT ,UPDATE ON dbname.* FROM deployop@'192.168.1.%';
Query OK, 0 rows affected (0.01 sec)

mysql> flush privileges;
Query OK, 0 rows affected (0.01 sec)

```

再看现在是什么权限？
```
mysql> show grants for deployop@'192.168.1.%' ;
+--------------------------------------------------------------------------------------------------+
| Grants for deployop@192.168.1.%                                                                  |
+--------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO 'deployop'@'192.168.1.%'                                                   |
| GRANT SELECT, DELETE, CREATE, DROP, ALTER, LOCK TABLES ON `dbname`.* TO 'deployop'@'192.168.1.%' |
+--------------------------------------------------------------------------------------------------+
2 rows in set (0.00 sec)
```

insert 和 update 就没了

依此类推

## 总结

SQL文件在导入时使用的用户，也应该具有和当时导出这些SQL文件用户所具有的权限，缺一不可。


## 问题还原

我们的甲方爸爸遇到了一点技术的问题，具体如下

有一个比较大的sql文件，sql文件是逻辑备份出来的。
导入的过程中出现了
```
 ERROR 1044（42000）：Access denied for user ‘username’@‘%’ to database ‘dbname’
```
应该是权限有问题？

甲方说的是，他们的普通用户只有select,create,insert,update,delete,alter,drop ，这些权限。还要求我们也给相同的权限测试，会不会出现这种情况?

当然是会出现的，因为谁知道是哪位普通用户导出来之前拥有什么权限，需要的权限肯定不止这些，后面的测试也证明绝非不止这些权限。



## 我的思考

我想，既然谁也不知道这个普通用户生前有什么什么权限才会导出这个SQL文件，不妨我们先给这个普通用户所有的权限，等导入完成之后再
取消不想给的权限。
或者直接用root导入，假若有权限的话。
要是不知道普通用户生前有什么权限，还控制普通用户的权限，还要把数据丝毫不差的导入进去，那不是巧妇难为无米之炊吗。


该怎么知道普通用户之前拥有什么权限

看下面

## 查看普通用户有什么权限

### 先查看普通用户分配了什么网段？
```
mysql> select user,host from mysql.user;
+------------------+-------------+
| user             | host        |
+------------------+-------------+
| back             | %           |
| root             | %           |
| shop             | %           |
| slave            | %           |
| tatata           | %           |
| zyd1             | %           |
| jumpserver       | 127.0.0.1   |
| deployop         | 192.168.1.% |
| debian-sys-maint | localhost   |
```
### 再看该网段的某个普通用户具体拥有什么权限
```
mysql> show grants for deployop@'192.168.1.%' ;
+------------------------------------------------------------------------------------------------------------------+
| Grants for deployop@192.168.1.%                                                                                  |
+------------------------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO 'deployop'@'192.168.1.%'                                                                   |
| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, LOCK TABLES ON `dbname`.* TO 'deployop'@'192.168.1.%' |
+------------------------------------------------------------------------------------------------------------------+
2 rows in set (0.00 sec)
```
- 可以看出该用户拥有SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, LOCK TABLES等权限对于dbname库


## 敲黑板！


用户在不同的区段可以拥有不同的密码及所授予的权限，无论是超级用户还是普通用户



## MYSQL导入方式


我所了解的导入有两种方式，不确定有什么稀奇古怪的导入方式
导入方式1:
        
​        
```
进入mysql，
        mysql -u user -p 
        use dbname；
        source /path/***.sql ;   
```
导入方式2:
        
```
命令行执行 
        mysql -u user -p dbname < /path/***.sql 
```

- 前者导入更快，兼容性理论上来说更强，会刷屏，时间慢
- 后者导入快，不刷屏，安安静静的。


## 取消权限？
```
mysql>  REVOKE INSERT ,UPDATE ON dbname.* FROM deployop@'192.168.1.%';
Query OK, 0 rows affected (0.01 sec)

mysql> flush privileges;
Query OK, 0 rows affected (0.01 sec)

```

再看现在是什么权限？
```
mysql> show grants for deployop@'192.168.1.%' ;
+--------------------------------------------------------------------------------------------------+
| Grants for deployop@192.168.1.%                                                                  |
+--------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO 'deployop'@'192.168.1.%'                                                   |
| GRANT SELECT, DELETE, CREATE, DROP, ALTER, LOCK TABLES ON `dbname`.* TO 'deployop'@'192.168.1.%' |
+--------------------------------------------------------------------------------------------------+
2 rows in set (0.00 sec)
```

insert 和 update 就没了

依此类推

## 总结

SQL文件在导入时使用的用户，也应该具有和当时导出这些SQL文件用户所具有的权限，缺一不可。

## End ===============================================基础=============================================
 ## 查看数据库
 show databases;
 
 ## 简单建立数据库
 create database lijinghua;     #这样直接建立所采用的字符集和编译安装指定的字符集相同
 
 ## 指定字符集建库
 CREATE DATABASE oldgirl CHARACTER SET gbk COLLATE gbk_chinese_ci;  ### COLLATE为校队规则


 ## 查看建库语句
 show create database oldgirl\G
 
 ## 修改字符集
 ALTER DATABASE oldgirl CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
 
 ## 删库
 drop database lijinghua;
 
 ## 切库
 use lijinghua;
 
 ## 查看当前所在的库
 select database();
 
 ## 查看库里的表
 show tables;
 
 ## 查看用户
 select user,host from mysql.user;
 
 ## 查看表的字段
 desc lijinghua;
 
 ## 进入mysql中使用linux命令？
 mysql> system pwd
/root

 
 
 ==============================================创建用户=============================================

## 限制网段创建用户及授权所有权限
CREATE USER 'rootziyoudao'@'172.18.252.%' IDENTIFIED BY '123456';
grant all privileges on *.* to 'rootziyoudao' identified by '123456';
flush privileges;
 
## 不限制网段创建用户及授权database1查询权限
CREATE USER 'rootziyoudao'@'%' IDENTIFIED BY '123456';
grant select on database1.* to 'rootziyoudao' identified by '123456';
flush privileges;
 
## 运维人员常用
grant all on *.* to 'rootziyoudao'@'localhost' identified by '123456';
flush privileges;

## 注意
 其实用户可主机域都可以不带单引号的，但是密码必须加单引号，另外的话，创建用户不需要flush privileges。
 
=============================================删除用户===============================================

## drop删除
drop user 用户名@'%';

## delete删除
如果drop删除不了用户，很可是是用户或主机部分是特殊字符或大写内容等，此时可以用下面方式删除，以bbs用户，172.16.1.%主机为例，具体处理命令及操作过程为：

delete from mysql.user where user='bbs' and host='172.16.1.%'; 
flush privileges;


==============================================更改密码==============================================
 
## 跳表(重启)
 skip-grant-tables
 
## MySQL5.7更改密码
 
 
 use mysql;
 update user set authentication_string=PASSWORD("这里输入你要改的密码") where User='root'; #更改密码
 update user set plugin="mysql_native_password"; #如果没这一行可能也会报一个错误，因此需要运行这一行
 flush privileges; #更新所有操作权限

 use mysql;
 update user set authentication_string=PASSWORD("123456") where User='root'; 
 update user set plugin="mysql_native_password"; 
 flush privileges; 

#登录进去 还需要重新set下密码
 SET PASSWORD = PASSWORD('123456');
 flush privileges; 
 
 
## MySQL5.6及以下
 
update mysql.user set password=password('123456') where user='root' and host='localhost';
flush privileges;

update mysql.user set password=password('123456') where user='root' and host='%';
flush privileges;


GRANT ALL PRIVILEGES ON *.* TO root@"%" IDENTIFIED BY "123456" WITH GRANT OPTION; 
flush privileges;	


 =============================================查看=========================================================

MySQL的变量分为以下两种：

1）系统变量：配置MySQL服务器的运行环境，可以用show variables查看

2）状态变量：监控MySQL服务器的运行状态，可以用show status查看
 
## 查看所有存在的用户及授权的地址范围
1.   SELECT DISTINCT CONCAT('User: ''',user,'''@''',host,''';') AS query FROM mysql.user;

2.   select user,host from mysql.user;


## 查看用户拥有什么权限（注意区段等）

show grants for dbuser@'%';

show grants for dbuser@'localhost';

注意哦，不同的区段可以拥有不同的密码及所授予的权限

 

## 查看binlog

只查看第一个binlog文件的内容
show binlog events;

查看指定binlog文件的内容
show binlog events in 'mysql-bin.000002';

查看当前正在写入的binlog文件
show master status\G

获取binlog文件列表
show binary logs; 
 

 ==============================================授权=========================================================
 
## 远程授权用户所有权限
 
GRANT ALL PRIVILEGES ON *.* TO root@"%" IDENTIFIED BY "swl19960706" WITH GRANT OPTION; 
flush privileges;	
 
## 远程授权用户查询权限
grant select on *.* to @'%' identified by "123456" WITH GRANT OPTION ;
flush privileges;	
 
## 限制网段授权用户权限

grant select,create,insert,update,delete,alter,drop,lock tables  on dbname.* to deployop@'192.168.1.%' identified by 'password'; 
flush privileges;
 

## 花样授权操作

### 给个别的库权限

grant select,create,insert,update,delete,alter,drop,lock tables  on dbname.* to deployop@localhost identified by 'memect'; 
flush privileges;

### 给连接外网权限
grant select,create,insert,update,delete,alter,drop,lock tables  on dbname.* to deployop@'%' identified by 'memect'; 
flush privileges;

### 给所有的库权限
*·*

grant select,create,insert,update,delete,alter,drop,lock tables  on  *.* to deployop@'localhost' identified by 'memect'; 
flush privileges;

 ===========================================取消授权======================================================
 ## 收回权限(当然要先知道他有什么权限)
 REVOKE INSERT ON *.* FROM rootziyoudao@localhost;
 flush privileges;
 
 ## 注意
 我们可以在一些场景下取消删除的权限
 revoke create,drop on *.* from 'rootziyoudao'@'172.16.1.%';
 
 
 ## 5.7.22 新版mysql密码过于简单报警

### 临时
set global validate_password_policy=0;

set global validate_password_length=4;

### 永久
那就写在配置文件里面
validate_password_policy=0
validate_password_length=4



 
 for name in `mysql -e "show databases;"|sed 1d`
do
 mysqldump -uroot -p'oldboy123' -B $name
done



## 添加用户
CREATE USER root WITH PASSWORD 'swl19960706' ;
## 授权用户
GRANT ALL PRIVILEGES ON database lijinghua to root;

2017年10月25日[运维][备份]投研系统数据库备份记录


0前言

投研系统数据库位于192.168.0.7上，192.168.0.23是投研系统的从库（实时复制投研系统DB），本次备份使用192.168.0.23的投研系统数据库。

压缩后的数据库为2.5G，实际文件应该为11G左右。

主要参考文档：https://www.postgresql.org/docs/9.5/static/backup-dump.html


1备份主要操作

切换到postgres用户下执行：

pg_dump -h 127.0.0.1 -p 5429 -U labs -d 投研系统 | gzip > touyan_db_backup_20171025.gz

#touyan_db_backup_20171025.gz：备份文件名


2本地测试恢复

切换到postgres用户

执行：

gunzip -c filenam.gz | psql dbname


注意本地的数据库最好是一个空库。




## 修改postgresql postgres密码
ALTER USER postgres WITH PASSWORD 'password';


## 添加用户
CREATE USER user WITH PASSWORD 'password'; 

## 赋予权限某个库给某个用户
GRANT ALL PRIVILEGES ON database exampledb to dbuser;



# Pyecharts
##  环境
python 3.5.2

## 依赖库
requests
lxml

## 安装依赖库
`pip install  lxml`

`pip install  requests` 


## 放脚本

```
(papa) [root@pa2 first]#python ll.py 

name: ['肖申克的救赎 The Shawshank Redemption']

导演: ['弗兰克·德拉邦特']

主演: ['蒂姆·罗宾斯', '摩根·弗里曼', '鲍勃·冈顿', '威廉姆·赛德勒', '克兰西·布朗', '吉尔·贝罗斯', '马克·罗斯顿', '詹姆斯·惠特摩', '杰弗里·德曼', '拉里·布兰登伯格', '尼尔·吉恩托利', '布赖恩·利比', '大卫·普罗瓦尔', '约瑟夫·劳格诺', '祖德·塞克利拉', '保罗·麦克兰尼', '芮妮·布莱恩', '阿方索·弗里曼', 'V·J·福斯特', '弗兰克·梅德拉诺', '马克·迈尔斯', '尼尔·萨默斯', '耐德·巴拉米', '布赖恩·戴拉特', '唐·麦克马纳斯']

时长: ['142分钟']

(papa) [root@pa2 first]#cat ll.py 

import requests

from lxml import etree

url='https://movie.douban.com/subject/1292052/'

data=requests.get(url).text

s=etree.HTML(data)

film=s.xpath('//*[@id="content"]/h1/span[1]/text()')

actor=s.xpath('//*[@id="info"]/span[1]/span[2]/a/text()')

director=s.xpath('//*[@id="info"]/span[3]/span[2]/a/text()')

time=s.xpath('//*[@id="info"]/span[13]/text()')

print('name:',  film)

print('导演:' , actor)

print('主演:' , director)

print('时长:' , time)

```




## 只爬第一页的书名？

```
(papa) [root@pa2 first]#python book_first.py
['追风筝的人', '解忧杂货店', '小王子', '白夜行', '围城', '三体', '挪威的森林', '嫌疑人X的献身', '活着', '红楼梦', '百年孤独', '不能承受的生命之轻', '看见', '达·芬奇密码', '平凡的世界（全三部）', '三体Ⅱ', '三体Ⅲ', '简爱（英文全本）', '哈利·波特与魔法石', '天才在左 疯子在右', '送你一颗子弹', '傲慢与偏见', '我们仨', '飘', '倾城之恋']
```

### 修改后

```
(papa) [root@pa2 first]#python book_first.py
追风筝的人
解忧杂货店
小王子
白夜行
围城
三体
挪威的森林
嫌疑人X的献身
活着
红楼梦
百年孤独
不能承受的生命之轻
看见
达·芬奇密码
平凡的世界（全三部）
三体Ⅱ
三体Ⅲ
简爱（英文全本）
哈利·波特与魔法石
天才在左 疯子在右
送你一颗子弹
傲慢与偏见
我们仨
飘
倾城之恋


```

### 看看怎么写的

```
(papa) [root@pa2 first]#vim book_first.py 
(papa) [root@pa2 first]#cat book_first.py
import requests
from lxml import etree
url='https://book.douban.com/top250'
data=requests.get(url).text

s=etree.HTML(data)
file=s.xpath('//*[@id="content"]/div/div[1]/div/table/tr/td[2]/div[1]/a/@title')

#print(file)   #用for循环的方式可以改变成一列

for title in file:
print(title)
```

## 多页

# python_requests
啪啪啪啪虫
## 安装

py2 和 py3 都可以，py3需要安装Twisted


pip install Scrapy





## python3 安装Twisted

Could not find a version that satisfies the requirement Twisted>=13.1.0 (from Scrapy) (from versions: )
No matching distribution found for Twisted>=13.1.0 (from Scrapy)

原因是没有安装Twisted，还有要注意的是，要下载对应版本的

地址：https://twistedmatrix.com/Releases/Twisted/

wget https://pypi.python.org/packages/source/T/Twisted/Twisted-15.2.1.tar.bz2


tar -xjvf Twisted-15.2.1.tar.bz2
cd Twisted-15.2.1
python setup.py install# 引用豆瓣源
pip install django -i https://pypi.douban.com/pypi

# 用当前python 创建一个虚拟环境
virtualenv -p python3 django_env

apt-get -y install python3-venv && python3 -m venv py3

## python 安装依赖加快速度
pip install -r requirements.txt -i https://pypi.douban.com/simple



## py37 需要安装依赖

sudo apt-get update -y                                                                             
sudo apt-get dist-upgrade -y 
sudo apt-get install build-essential python-dev python-setuptools python-pip python-smbus -y
sudo apt-get install libncursesw5-dev libgdbm-dev libc6-dev -y 
sudo apt-get install zlib1g-dev libsqlite3-dev tk-dev -y
sudo apt-get install libssl-dev openssl -y 
sudo apt-get install libffi-dev -y


## 生成静态
python manage.py collectstatic

## 导入模块到文件
pip freeze > requirements.txt

## 退出

deactivate
## 写数据
python manage.py makemigrations

python manage.py migrate



DateField
    DateTimeField 区别


## 写入json 在开发服务器中，载入数据集

python manage.py loaddata ./apps/*/fixtures/*.json

如果载入失败可以清空当前数据库中的数据

python manage.py flush



13121828727

## Python2 开启http
python -m SimpleHTTPServer 6767

python -m http.server 6767


b0ebd4ccab4902d4a16cad967a55f4b0


virtualenv venv --python=python3.5

## 重要文件含义

blog: 项目的容器。

manage.py: 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。

HelloWorld/__init__.py: 一个空文件，告诉 Python 该目录是一个 Python 包。

HelloWorld/settings.py: 该 Django 项目的设置/配置。

HelloWorld/urls.py: 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站"目录"。

HelloWorld/wsgi.py: 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。



## ## 



##  ik分词



      curl -XPUT http://localhost:9200/index2
      curl 'http://localhost:9200/index2/_analyze?analyzer=ik_max_word&pretty=true' -d '{"text":"我是中国人"}'

curl 'http://192.168.80.10:9200/zhouls/_analyze?pretty=true' -d '{"text":"sdsk  sd sdjsk"}'
ctrl+d: 删除当前字符。
ctrl+h: 删除之前的字符。
ctrl+u: 删除整行。
ctrl+k: 删除当前到文本末尾的字符。
ctrl+w: 删除光标前的单词。
ctrl+t: 交换当前光标和前一个位置，互换。



## ��װ����������
����ʹ��Postfix�������ʼ�,�ڰ�װ�ڼ���ѡ��'Internet Site'. ��Ҳ������sendmai���� ����SMTP���� �� ʹ��SMTP�����ʼ�.

�� Centos 6 �� 7 ϵͳ��, ����������ϵͳ����ǽ���濪��HTTP��SSH�˿�.

apt-get install curl openssh-server ca-certificates postfix
## ���GitLab�ֿ�,����װ����������(��gitlab��װԴ��ӵ�apt�У�Ȼ��ͨ��apt-get��װ������Ƚ�aptԴ�޸ĳɹ��ڵ�)
curl -sS http://packages.gitlab.cc/install/gitlab-ce/script.deb.sh | sudo bash
apt-get install gitlab-ce -y  #�Ƚ���,Ҫ����

## ����GitLab (�ڴ�Ҫ��)
gitlab-ctl reconfigure
 
## ���������ip

 
## ci --runner

���Gitlab�Ĺٷ�Դ��

# For Debian/Ubuntu
curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash

# For CentOS
curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash
��װ

# For Debian/Ubuntu
sudo apt-get -y install gitlab-ci-multi-runner

# For CentOS
sudo yum -y install gitlab-ci-multi-runner


## ע��һ��
gitlab-ci-multi-runner register

�ο����� https://blog.csdn.net/xl_lx/article/details/78329019



## �޸���Ŀpath
cd /opt/gitlab/embedded/service/gitlab-rails/config 

�޸� gitlab.yml

## GitLab settings 
gitlab: 
## Web server settings (note: host is the FQDN, do not include http://) 
host: 192.168.1.106 
port: 90 
https: false


## .gitlab-ci.yml

before_script:
- rm -rf py35env 

stages:
- pylinttests
- unittests

pylinttests:
  stage: pylinttests
  script:
    - virtualenv -p python3.5 py35env #����Python���⻯����
    - py35env/bin/python -m pip install -r requirements.txt #��װ�������
    - py35env/bin/python test.py pylinttests #���е�Ԫ����
  tags:
    - shell  #ָ��tagΪshel��runner����


unittests:
  stage: unittests
  script:
    - virtualenv -p python3.5 py35env
    - py35env/bin/python -m pip install -r requirements.txt
    - py35env/bin/coverage run --source=entity test.py unittests #ִ�в���
    - py35env/bin/coverage report 
  tags:
    - shell








    ---

stages:
  - build
  - test
  - deploy

before_script:

  - echo "begin"



after_script:
  - echo "hello"



build1:
  script:
    - cp build.shx build.sh
    - sh build.sh
    - rm build.sh
  only:
    - feature/deployment
  when: manual


developerTask:
  script:
    - export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
    - cd /opt/projects/wenyinkuaiti_project/wenyinkuaiti
    - git reset --hard
    - git checkout developer
    - git pull origin developer
    - git show
    - cd /opt/projects/wenyinkuaiti_project/wenyinkuaiti/frontend
    - cp src/config.json.dev.example src/config.json
    - npm i --registry=https://registry.npm.taobao.org
    - npm run build
    - supervisorctl reread
    - supervisorctl update
    - supervisorctl restart kuait_developer_backend8882
  only:
    - developer


masterTask:
  script:
    - cd /git/bare_wykuaiti_local/wenyinkuaiti_loc
    - git reset --hard
    - git checkout master
    - git pull origin master
    - git push onlyoffice master
  only:
    - master

## ע��
runnerע���ʱ��Ҳ��Ҫsudo


## gitlab runner ���н���
vim /etc/gitlab-runner/config.toml

concurrent = 8







#echo "1">>tmp
#exec git update-server-info
#echo "2">>tmp
#HOMEPAGE_DIR=/opt/projects/tianfeng-fluidity-management.bak/
unset GIT_DIR
#echo "3">>tmp
cd  /opt/projects/tianfeng-fluidity-management.bak/
git reset --hard
git checkout master
git pull origin  master
sed -i "s/192.168.0.101:8000/47.94.130.153:8080/g" /opt/projects/tianfeng-fluidity-management.bak/.webpackrc.js
sed -i "s/192.168.0.101:8000/47.94.130.153:8000/g" /opt/projects/tianfeng-fluidity-management.bak/.roadhogrc.mock.js
cp -rf /opt/projects/tianfeng-fluidity-management.bak/* /opt/projects/tianfeng-fluidity-management
cd /opt/projects/tianfeng-fluidity-management
npm install
node_pid=`netstat -lntup |grep node |awk '{print $7}' |tr -d [a-z][/]`
kill $node_pid
sudo service supervisor restart



docker restart gzhfront && docker exec -d gzhfront /bin/bash -c "cd /workspace && yarn && yarn start"

usermod -a -G sudo <username>
yum -y install supervisor

%sudo	ALL=(ALL:ALL) ALL


flask

unset GIT_DIR
#echo "3">>tmp
cd  /tmp/mabo_bak/
git reset --hard
git checkout master
git pull origin  master
cp -rf /tmp/mabo_bak/* /opt/mabo
cd /opt/mabo/
id=`netstat -lntup |grep /opt/mabo/env/bin/flask  |awk '{print $7}' |tr -d [a-z][/]`
kill $id
export FLASK_APP=app.py
sudo service supervisor restart



#echo "1">>tmp
#exec git update-server-info
#echo "2">>tmp
#HOMEPAGE_DIR=/opt/projects/tianfeng-fluidity-management.bak/
unset GIT_DIR
#echo "3">>tmp
cd  /opt/projects/tianfeng-fluidity-management.bak/
git reset --hard
git checkout master
git pull origin  master
sed -i "s/192.168.0.101:8000/47.94.130.153:8080/g" /opt/projects/tianfeng-fluidity-management.bak/.webpackrc.js
sed -i "s/192.168.0.101:8000/47.94.130.153:8000/g" /opt/projects/tianfeng-fluidity-management.bak/.roadhogrc.mock.js
cp -rf /opt/projects/tianfeng-fluidity-management.bak/* /opt/projects/tianfeng-fluidity-management
cd /opt/projects/tianfeng-fluidity-management
npm install
node_pid=`netstat -lntup |grep node |awk '{print $7}' |tr -d [a-z][/]`
kill $node_pid
sudo service supervisor restart


[program:mabo] ; �������ƣ��� supervisorctl ��ͨ�����ֵ���Գ������һϵ�еĲ���
command= export FLASK_APP=app.py &&  flask run
autorestart=True ; �����쳣�˳����Զ�����
autostart=True ; �� supervisord ������ʱ��Ҳ�Զ�����
redirect_stderr=True ; �� stderr �ض��� stdout��Ĭ�� false
user=labs ; ���ĸ��û�����
directory=/opt/mabo; ���������Ŀ¼
stdout_logfile_maxbytes = 20MB ; stdout ��־�ļ���С��Ĭ�� 50MB
stdout_logfile_backups = 20 ; stdout ��־�ļ�������
stdout_logfile=/tmp/python.log




#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".
echo "1">>tmp
#exec git update-server-info
echo "2">>tmp
HOMEPAGE_DIR=/opt/projects/guzhuan2_project/guzhuan2/
unset GIT_DIR
echo "3">>tmp
cd  /opt/projects/guzhuan2_project/guzhuan2/
git reset --hard
git checkout master
git pull origin  master
 docker restart gzhfront && docker exec -d gzhfront /bin/bash -c "cd /workspace && yarn && yarn start"# Node环境部署

 

## Node下载与安装

https://nodejs.org/dist/

 

 ![node](https://s1.ax1x.com/2018/08/14/PgO6h9.png)

 

 

 

 

 

 

### 下载编译过的包

```
 wget https://nodejs.org/dist/v8.11.3/node-v8.11.3-linux-x64.tar.gz
```

### 解压

```
tar xf node-v8.11.3-linux-x64.tar.gz
```

### 移动到一个顺眼的位置

```
sudo mv node-v8.11.3-linux-x64 /usr/local/nodejs
```

 

### 做个系统软链接

```
sudo ln -s /usr/local/nodejs/bin/node /usr/local/bin/node
sudo ln -s /usr/local/nodejs/bin/npm /usr/local/bin/npm
```

 

### 看下版本

 

```
lijinghua@test:/usr/local$ node —version
v8.11.3
```

 

```
lijinghua@test:/usr/local$ npm —version
5.6.0
```

 

- 有时会出现一个问题，npm版本和我们前端er要求的版本不一致，一般是低于我们要的版本，那就做升级

 

### 升级姿势

```
npm install npm@latest -g   #升级到最新

npm install npm@6.3.0  -g   #升级到指定版本
```

## 效果图



![for](https://s1.ax1x.com/2018/08/03/P0779J.png)

## 要知道的

ccat，它和cat的区别就是当我cat一个文件的时候ccat可以根据文件的格式来高亮输出。就和上图一样

## 安装

### 下载包（可能需要代理）

ubuntu软件源里面是没有的，所以我就介绍一个通用的安装方法吧，首先下载二进制文件
 `wget https://github.com/jingweno/ccat/releases/download/v1.1.0/linux-amd64-1.1.0.tar.gz`

### 解压

` tar -zxvf linux-amd64-1.1.0.tar.gz`

###  移动到二进制文件目录

 `cd linux-amd64-1.1.0`
 `sudo mv ccat /usr/local/bin`

### 赋予可执行权限

 `sudo chmod +x /usr/local/bin/ccat`
 之后就可以和cat一样执行命令了

======到这里ccat就可以用了

## 直接替代cat？

如果你觉得ccat比cat好，而且我以后不想使用cat了，想用ccat来代替cat，那么我就可以设置一个别名，在.zshrc文件中加入下面这一行，

如果你用bash的那么就在.bashrc中加入下面这一行

### 配置文件改下

 `alias cat=ccat`

### 配置文件生效

 `source ~/.zshrc`

## End



 

 

 

 

 ## Centos完全离线安装Docker

## 要了解的

1.docker需要依赖 libcgroup库
2.docker需要依赖device-mapper系列 并且该系列包版本号大于1.02.79
3.本次安装的是Centos 6.7，理论上来说Centos7系列更好安装

## 检查当前机器环境依赖
```
[root@localhost lijinghua]# rpm -qa |grep libcgroup  #检查当前机器有没有libcgroup环境，没有的话就rpm安装
```

```
[root@localhost lijinghua]# rpm -qa |grep device-mapper
device-mapper-event-libs-1.02.117-7.el6.x86_64
device-mapper-libs-1.02.117-7.el6.x86_64
device-mapper-event-1.02.117-7.el6.x86_64
device-mapper-persistent-data-0.6.2-0.1.rc7.el6.x86_64
device-mapper-1.02.117-7.el6.x86_64
```

没有哪个环境就装哪个


### 安装libcgroup
```
[root@localhost lijinghua]# rpm -ivh libcgroup-* --force --nodeps
warning: libcgroup-0.40.rc1-16.el6.i686.rpm: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEY
Preparing...                ########################################### [100%]
   1:libcgroup              ########################################### [ 20%]
   2:libcgroup              ########################################### [ 40%]
   3:libcgroup-devel        ########################################### [ 60%]
   4:libcgroup-pam          ########################################### [ 80%]
   5:libcgroup-pam          ########################################### [100%]
```
参数解释

安装rpm文件, 文件名为libcgroup- 开头的  不检查依赖并且忽略错误

### 再检查

```
[root@localhost lijinghua]# rpm -qa |grep libcgroup
libcgroup-pam-0.40.rc1-16.el6.x86_64
libcgroup-0.40.rc1-16.el6.x86_64
libcgroup-0.40.rc1-16.el6.i686
libcgroup-devel-0.40.rc1-16.el6.x86_64
libcgroup-pam-0.40.rc1-16.el6.i686
```

这两个重要的环境依赖都有了之后呢，就安装 docker的rpm包

```
[root@localhost lijinghua]# rpm -ivh docker-engine-1.7.1-1.el6.x86_64.rpm 
warning: docker-engine-1.7.1-1.el6.x86_64.rpm: Header V4 RSA/SHA1 Signature, key ID 2c52609d: NOKEY
Preparing...                ########################################### [100%]
   1:docker-engine          ########################################### [100%]
```

##  查看docker版本

```
[root@localhost lijinghua]# docker --version 
Docker version 1.7.1, build 786b29d

```

## 启动

```
[root@localhost lijinghua]# service docker start 
Starting cgconfig service:                                 [  OK  ]
Starting docker:                                    [  OK  ]
[root@localhost lijinghua]# ps -ef |grep docker 
root      42147      1  5 06:39 pts/1    00:00:00 /usr/bin/docker -d
root      42262  41264  0 06:39 pts/1    00:00:00 grep docker
```

##  包在哪里下载？

一般Centos的环境基础包，都在官网对应的系统镜像附件都有

http://vault.centos.org/

docker的包

https://yum.dockerproject.org/repo/main/

## End
## 为什么用uWSGI+Django
python manage.py runserver 这种的更适合测试环境的使用，
要想让Django服务的更好，就需要结合uWSGI+Nginx了。


## uWSGI+Django比单独使用Django的好处：
1. 支持的并发量更高
2. 方便管理多进程，发挥多核的优势
3. 提升性能，因为uwsgi协议比WSGI协议有优势



## 安装nginx

略


## 安装uWSGI

### pip安装
pip install uwsgi

### 源码包安装
```
wget https://files.pythonhosted.org/packages/a2/c9/a2d5737f63cd9df4317a4acc15d1ddf4952e28398601d8d7d706c16381e0/uwsgi-2.0.17.1.tar.gz
tar xf uwsgi-2.0.17.1.tar.gz
cd uwsgi-2.0.17.1/

make  #直接make
```


### 测试一下uwsgi安装成功否？

vim test.py #编辑文件

def application(env, start_response):
    start_response('200 OK', [('Content-Type','text/html')])
    return "Hello World"

uwsgi --http :8001 --wsgi-file test.py  #执行命令，前提是端口未被占用

此时访问8001端口，就可以看到 Hello World 



## 连接uwsgi与Django

###先测试 django自身能不能用？


python manage.py runserver 0:8001

浏览器打开地址输入 IP：8001

OK的话继续下一步

## 编写wsgi.py文件


编写django_wsgi.py文件，将其放在与文件manage.py同一个目录下。


vim django_wsgi.py

#!/usr/bin/env python
# coding: utf-8

import os
import sys

reload(sys)
sys.setdefaultencoding('utf8') # 将系统的编码设置为UTF8

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mysite.settings")#mysite替换为自己的项目名

from django.core.handlers.wsgi import WSGIHandler
application = WSGIHandler()


## 连接Django和uwsgi

通过Django与uwsgi就已经可以形成一个简单的web服务器了 
编写完成django_wsgi.py文件后执行：

uwsgi --http :8000 --chdir path/to/yoursite --module django_wsgi



这样，就可以在浏览器中的8000端口访问Django程序了。 
所有的请求都是经过uwsgi传递给Django程序的。 

注意到，此时是访问不了js/css静态文件的！这些静态文件将交给Nginx直接处理


## 编写配置文件连接uwsgi与Nginx

## uwsgi配置
为了实现Nginx与uWSGI的连接，两者之间将采用soket来通讯方式

将使用uWSGI配置文件的方式来改进uWSGI的启动方式

将要让Nginx采用8077端口与uWSGI通讯，请确保此端口没有被其它程序采用。

下面编写uwsgi的配置文件 
新建一个XML文件：djangochina_socket.xml，与manage.py在同一级目录

vim djangochina_socket.xml


<uwsgi>
    <socket>:8077</socket>
    <chdir>path/to/yoursite</chdir>
    <module>django_wsgi</module>
    <processes>4</processes> <!-- 进程数 --> 
    <daemonize>uwsgi.log</daemonize>
</uwsgi>

## Nginx配置

upstream django {
    # server unix:///path/to/your/mysite/mysite.sock; # for a file socket
    server 127.0.0.1:8001; # for a web port socket (we'll use this first)
}

--# configuration of the server

server {
    # the port your site will be served on
    listen      80;
    # the domain name it will serve for
    server_name 域名; # substitute your machine's IP address or FQDN
    charset     utf-8;

    # max upload size
    client_max_body_size 75M;   # adjust to taste

    # Django media
    location /media  {
        alias /path/to/your/mysite/media;  # your Django project's media files - amend as required
    }

    location /static {
        alias /path/to/your/mysite/static; # your Django project's static files - amend as required
    }

    # Finally, send all non-media requests to the Django server.
    location / {
        uwsgi_pass  django;
        include     /path/to/your/mysite/uwsgi_params; # the uwsgi_params file you installed
    }
}





## 重新加载nginx

略






## 参考
https://www.cnblogs.com/Xjng/p/aa4dd23918359c6414d54e4b972e9081.html

Web协议出现顺序： 
CGI -> FCGI -> WSGI -> uwsgi

CGI，最早的协议
FCGI，比CGI快
WSGI，Python专用的协议
uwsgi，比FCGI和WSGI都快，是uWSGI项目自有的协议，主要特征是采用二进制来存储数据，之前的协议都是使用字符串，所以在存储空间和解析速度上，都优于字符串型协议.



uwsgi --http :8000 --chdir /srv/www/databankinfo.com/projectdatabank/ --wsgi-file wsgi.py

uwsgi --http :8000 --chdir /srv/www/databankinfo.com/projectdatabank/ --wsgi-file full/path/wsgi.py
# 安装postgreSQL
add-apt-repository "deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main"
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
apt-get update
apt-get install postgresql-9.6
psql --version

###
1)安装完会自动启动
2）自动生成postgres用户作为管理员，密码随机，自行修改;生成一个postgres数据库，用户名为postgres，密码随机。


2.给postgres用户修改密码：postgres
1)登录客户端：sudo -u postgres psql（使用默认用户postgres登录客户端，psql为打开客户端的工具）
2）postgres=# ALTER USER postgres WITH PASSWORD 'postgres';

3.修改ubuntu操作系统的postgres用户的密码（密码要与数据库用户postgres的密码相同）
1) 删除PostgreSQL用户密码
   sudo passwd -d postgres  \清空用户密码的意思
2）设置PostgreSQL系统用户的密码：postgres
   sudo -u postgres passwd
## 安装 zsh
略
## 安装 oh my zsh 


sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
 

sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"

## 若报错
编辑 .zshrc文件
ZSH_DISABLE_COMPFIX=true   ##第一行然后 


source .zshrc
## 环境准备

centos7

关闭防火墙

systemctl stop firewalld.service
systemctl disable firewalld.service
sed -i 's#SELINUX=enforcing#SELINUX=disabled#g' /etc/selinux/config
setenforce 0

## 下载安装包 

wget https://github.com/lifei6671/mindoc/releases/download/v0.10.1/mindoc_linux_amd64.zip


## 解压
unzip mindoc_linux_amd64.zip -d mindoc


## 数据库连接配置等


cd mindoc 

vim conf/app.conf   #实际上里面可多配置了


---------------------------------------------------------------------------------
#支持MySQL和sqlite3两种数据库，如果是sqlite3 则 db_database 标识数据库的物理目录
db_adapter=mysql
db_host=127.0.0.1
db_port=3306
db_database=mindoc_db
db_username=root
db_password=mimamimamima
---------------------------------------------------------------------------

## 初始化数据库
./mindoc_linux_amd64 install    

## 安装mindoc daemon
./mindoc_linux_amd64 service install   

## 启动服务
systemctl start mindocd.service   

## 添加到开机自启动
systemctl enable mindocd.service 

## 检查服务运行状态
systemctl status mindocd.service 
## 检查端口开启状态
netstat -lntup|grep 8181
tcp6       0      0 :::8181                 :::*                    LISTEN      1632/mindoc_linux_a





## 浏览器查看

ip+8181

初始账号密码 admin 123456

https://s1.ax1x.com/2018/06/24/P9Rc3F.jpg





## 导出文档功能(非必须)


## 安装依赖库
yum install -y libXrender libXext zlib fontconfig freetype libGL  libXcomposite  

## 创建测试文件

echo '123' >test.txt   #创建测试文件


## 确保已正确安装上述依赖，再执行一下命令安装Calibre：
wget -nv -O- https://download.calibre-ebook.com/linux-installer.py | sudo python -c "import sys; main=lambda:sys.stderr.write('Download failed\n'); exec(sys.stdin.read()); main()"







# 下载安装

## 下载地址
[链接]: https://www.postgresql.org/ftp/source/


## 获取源码包
```
 wget https://ftp.postgresql.org/pub/source/v9.6.4/postgresql-9.6.4.tar.gz
```

## 解压
```
 tar xf postgresql-9.6.4.tar.gz 
```

## 安装需要的依赖

readline 

zlib 

make 

gcc

```
apt-get install libreadline6 libreadline6-dev make gcc  zlib1g.dev zlib1g -y
```



## 编译

```
 cd postgresql-9.6.4/ &&  ./configure --prefix=/usr/local/postgresql && make && make install
```

出现这个为ok

PostgreSQL installation complete

## 添加postgres用户

```
adduser postgres
```



##  环境变量的配置

```
su postgres
```

vim .bashrc  

```
#export PS1='[\u@\h \W]\$'
PGHOME=/usr/local/postgresql
export PGHOME
PGDATA=/home/data/postgresql   #这里的数据存储目录，在这里配置的话，后续初始化则不需要多谢，默认不写使用默认配置
export PGDATA
PATH=$PATH:$HOME/.local/bin:$HOME/bin:$PGHOME/bin
export PATH 
```

### 立即生效

```
source .bashrc
```

## 数据目录及日志文件配置

```
mkdir /home/data/postgresql -p
chown -R postgres:postgres /home/data/postgresql
```



## 二进制文件拷贝

```
cp /usr/local/postgresql/bin/* /usr/bin/
chmod +x /usr/bin/pg*
chmod +x /usr/bin/ps*
```

## 数据库初始化

```
/usr/local/postgresql/bin/initdb  
```

```
[postgres@pa2 postgresql]$initdb
The files belonging to this database system will be owned by user "postgres".
This user must also own the server process.

The database cluster will be initialized with locale "en_US.utf8".
The default database encoding has accordingly been set to "UTF8".
The default text search configuration will be set to "english".

fixing permissions on existing directory /home/data/postgresql ... ok
creating subdirectories ... ok
selecting default max_connections ... 100
selecting default shared_buffers ... 32MB
creating configuration files ... ok
creating template1 database in /home/data/postgresql/base/1 ... ok
initializing pg_authid ... ok
initializing dependencies ... ok
creating system views ... ok
loading system objects' descriptions ... ok
creating collations ... ok
creating conversions ... ok
creating dictionaries ... ok
setting privileges on built-in objects ... ok
creating information schema ... ok
loading PL/pgSQL server-side language ... ok
vacuuming database template1 ... ok
copying template1 to template0 ... ok
copying template1 to postgres ... ok

WARNING: enabling "trust" authentication for local connections
You can change this by editing pg_hba.conf or using the option -A, or
--auth-local and --auth-host, the next time you run initdb.

Success. You can now start the database server using:
```



## 开启

在postgres用户操作

```
pg_ctl -D /home/data/postgresql   start
```

## 关闭 

在postgres用户操作

```
pg_ctl -D /home/data/postgresql -m fast    stop
```

“-m fast”选项立即断开会话而不是
等待会话发起的断开


## 重启

```
在postgres用户操作
pg_ctl restart -m fast
```

## 检查下端口
```
[root@pa2 ~]# netstat -lntup 
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1/systemd           
tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      3951/java           
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      22565/nginx: master 
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1800/sshd           
tcp        0      0 127.0.0.1:5432          0.0.0.0:*               LISTEN      10157/postmaster     #在这里
```





# 使用

## 修改密码步骤

默认密码是随机的，我们进入数据库里面直接再改一个

```
su postgres                              #切换postgres用户
psql                                     #进入数据库
ALTER USER postgres WITH PASSWORD '密码';   #修改用户postgres的密码，必须以分号结束
```



## 配置文件在哪儿？


配置文件都在数据储存的目录里面，就是我的 /home/data/postgresql

包括postgresql.conf和pg_hba.conf

然后配置下远程连接及postgres用户权限等等



## 关于连接配置

```
vim pg_hba.conf

···
"local" is for Unix domain socket connections only  # 翻译：“本地”仅适用于Unix域套接字连接
local     all     postgres                                      trust
···

重启
```

这里的trust 和 md5 将会决定你切换到postgres用户之后能不能psql 直接进入到pg数据库
### 远程（http）访问配置

要想远程访问，需要修改两处配置，需要重启postgresql

```
1.
vim postgresql.conf  # 该文件作用和 mysql数据库里面的 /etc/my.cnf类似

listen_addresses = '*'

2.
vim pg_hba.conf

host  all  all 0.0.0.0/0 md5          #代表任何一个ip都能连接

#注意：这个配置是我测试用的，线上生产用请谨慎配置

重启
```



##  信任指定服务器连接

pg_hba.conf ip段配置示范

```
# IPv4 local connections:

host    all            all      127.0.0.1/32      md5
host    all            all      10.211.55.6/32（需要连接的服务器IP）  md5
重启
```





## 概念

一个web服务器面对的是外部世界。它能直接从文件系统提供文件 (HTML, 图像， CSS等等)。然而，它无法 [*](http://uwsgi-docs-zh.readthedocs.io/zh_CN/latest/tutorials/Django_and_nginx.html#id3)直接*与Django应用通信；它需要借助一些工具的帮助，这些东西会运行运用，接收来自web客户端（例如浏览器）的请求，然后返回响应。

一个Web服务器网关接口（Web Server Gateway Interface） - WSGI - 就是干这活的。 [WSGI](http://wsgi.org/) 是一种Python标准。

uWSGI是一种WSGI实现。在这个教程中，我们将设置uWSGI，让它创建一个Unix socket，并且通过WSGI协议提供响应到web服务器。最后，我们完整的组件栈看起来将是这样的:

```
the web client <-> the web server <-> the socket <-> uwsgi <-> Django
```

如下图



![uwsgi](https://s1.ax1x.com/2018/08/01/PwIMDO.png)



## uWSGI的主要特点

1. 超快的性能，支持的并发量更高
2. 低内存占用（实测为apache2的mod_wsgi的一半左右）
3. 多app管理，方便管理多进程，发挥多核的优势
4. 详尽的日志功能（可以用来分析app性能和瓶颈）
5. 高度可定制（内存大小限制，服务一定次数后重启等）

## 易混淆的概念

uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换。

### WSGI / uwsgi / uWSGI 这三个概念

1. WSGI是一种Web服务器网关接口。它是一个Web服务器（如nginx，uWSGI等服务器）与web应用（如用Flask框架写的程序）通信的一种规范。
2. uwsgi是一种线路协议而不是通信协议，在此常用于在uWSGI服务器与其他网络服务器的数据通信。
3. 而uWSGI是实现了uwsgi和WSGI两种协议的Web服务器。
4. uwsgi协议是一个uWSGI服务器自有的协议，它用于定义传输信息的类型（type of information），每一个uwsgi packet前4byte为传输信息类型描述，它与WSGI相比是两样东西。





## 在你开始设置uWSGI之前

### 把uWSGI安装到你的virtualenv中

#### pip安装

```
pip install uwsgi
```

当然，有其他安装uWSGI的方式，但这种方式如其他方式效果一样。

#### 源码包安装

```
wget https://files.pythonhosted.org/packages/a2/c9/a2d5737f63cd9df4317a4acc15d1ddf4952e28398601d8d7d706c16381e0/uwsgi-2.0.17.1.tar.gz
tar xf uwsgi-2.0.17.1.tar.gz
cd uwsgi-2.0.17.1/
make  #直接make
```

## uWSGI和Django基础测试

创建一个名为 `test.py` 文件:

```
# test.py
def application(env, start_response):
    start_response('200 OK', [('Content-Type','text/html')])
    return [b"Hello World"] # python3
    #return ["Hello World"] # python2
```

注解

需要考虑到，对于Python 3，需要 `bytes()` 。

### 运行uWSGI试试？

```
uwsgi --http :8000 --wsgi-file test.py
```

选项表示:

- `http :8000`: 使用http协议，端口8000
- `wsgi-file test.py`: 加载指定的文件，test.py

当浏览器访问8000端口时，这将直接提供一个’hello world’消息。 访问:

```
http://ip:8000
```

来看一看。如果是这样，那么意味着以下的组件栈正常:

```
the web client <-> uWSGI <-> Python
```

### 测试你的Django项目

现在，我们想让uWSGI做同样的事，但是返回一个Django站点而不是 `test.py` 模块。

如果你还没有这样做，那么请确保你的 `mysite` 项目实际上正常工作:

```
python manage.py runserver 0.0.0.0:8000
```

### uWSGI运行下Django？

而如果正常，则使用uWSGI来运行它:

```
uwsgi --http :8000 --module mysite.wsgi
```

- `module mysite.wsgi`: 加载指定的wsgi模块

将你的浏览器指向该服务器；如果站点出现，那么意味着uWSGI可以为你虚拟环境中的Django应用服务，而这个栈工作正常:

```
the web client <-> uWSGI <-> Django
```

通常我们不会让浏览器直接与uWSGI通信。那是web服务器的工作，这是个穿针引线的活。



### 部署静态文件

在运行nginx之前，你必须收集所有的Django静态文件到静态文件夹里。首先，必须编辑mysite/settings.py，添加:

```
STATIC_ROOT = os.path.join(BASE_DIR, "static/")
```

然后运行

```
python manage.py collectstatic
```

## Nginx配置文件

### 为你的站点配置nginx

你会需要 `uwsgi_params` 文件，可用在uWSGI发行版本的 `nginx` 目录下，或者从<https://github.com/nginx/nginx/blob/master/conf/uwsgi_params> 找到。

将其拷贝到你的项目目录中。一会儿，我们将告诉nginx引用它。

现在，创建一个名为django_nginx.conf的nginx子配置文件，然后将这个写入到它里面:

```
# configuration of the server
server {
    # the port your site will be served on
    listen      80;
    # the domain name it will serve for
    
    
    ==============以上负载均衡使用=====================
    server_name 58.87.104.82; # substitute your machine's IP address or FQDN
    charset     utf-8;

    # max upload size
    client_max_body_size 75M;   # adjust to taste

    # Django media
    location /media  {
        alias /path/to/your/mysite/media;  # your Django project's media files - amend as required
    }

    location /static {
        alias /tmp/my-first-blog-master/static; # your Django project's static files - amend as required
    }

    # Finally, send all non-media requests to the Django server.
    location / {
    
        uwsgi_pass  unix:/tmp/my-first-blog-master/mysite.sock;#这里写生成的sock位置
        include     /usr/local/nginx/conf/uwsgi_params; # the uwsgi_params file you installed  #这里写nginx主配置文件同目录下的uwsgi_params，全路径
        access_log  /var/log/nginx/dj_access.log  ;
    }
}
```

### 重载Nginx

/pull/path/nginx -s reload 



## Nginx与uWSGI连接

### 使用Unix socket而不是端口

目前，我们使用了一个TCP端口socket，因为它简单些，但事实上，使用Unix socket会比端口更好 - 开销更少。

编辑 `django_nginx.conf`, 修改它以匹配:

```
server unix:///path/to/your/mysite/mysite.sock; # for a file socket你生成的sock在哪里就写哪里，不论是命令行还是ini配置文件生成。
# server 127.0.0.1:8001; # for a web port socket (we'll use this first)
```

这次， `socket` 选项告诉uWSGI使用哪个文件。

###  使用uwsgi和nginx运行Django应用

### 命令行运行我们的Django应用（重点）

```
uwsgi --socket mysite.sock --module mysite.wsgi --chmod-socket=666
```

现在，命令行版的uwsgi+django+nginx就ok了

### 配置uWSGI的ini文件

我们可以将用在uWSGI上的相同的选项放到一个文件中，然后告诉 uWSGI使用该文件运行。这使得管理配置更容易。

创建一个名为 ``mysite_uwsgi.ini`` 的文件:

```
# uwsig使用配置文件启动
[uwsgi]
# 项目目录
#socket = 127.0.0.1:9090
chdir=/tmp/my-first-blog-master
# 指定项目的application
module=mysite.wsgi
#wsgi-file =/tmp/my-first-blog-master/django_wsgi.py
# 指定sock的文件路径（尽量在tmp下）       
socket=/tmp/my-first-blog-master/mysite.sock
#socket=/tmp/uwsgi.sock
#virtualenv =/opt/py3/
#pythonpath = /opt/py3/bin/
## 进程个数       
workers=8
pidfile=/tmp/uwsgi.pid
# 指定IP端口       
#http=127.0.0.1:8000
# 指定静态文件
#static-map=/static=/opt/proj/teacher/static
# 启动uwsgi的用户名和用户组
uid=root
gid=root
chmod-socket    = 666
# 启用主进程
master=true
# 自动移除unix Socket和pid文件当服务停止的时候
#vacuum=true
# 序列化接受的内容，如果可能的话
thunder-lock=true
# 启用线程
enable-threads=true
# 设置自中断时间
#harakiri=30
# 设置缓冲
post-buffering=4096
# 设置日志目录
daemonize=/tmp/uwsgi.log
```

### 运行uswgi

```
uwsgi --ini mysite_uwsgi.ini # 运行之后会在配置文件指定位置处生成sock
```

ok，现在ini配置文件版本的uwsgi+nginx+django已完成



## Emperor模式(不必要)

uWSGI可以运行在’emperor’模式。在这种模式下，它会监控uWSGI配置文件目录，然后为每个它找到的配置文件生成实例 (‘vassals’)。

每当修改了一个配置文件，emperor将会自动重启 vassal.

```
# create a directory for the vassals
sudo mkdir /etc/uwsgi
sudo mkdir /etc/uwsgi/vassals
# symlink from the default config directory to your config file
sudo ln -s /path/to/your/mysite/mysite_uwsgi.ini /etc/uwsgi/vassals/
# run the emperor
uwsgi --emperor /etc/uwsgi/vassals --uid www-data --gid www-data
```

你或许需要使用sudo来运行uWSGI:

```
sudo uwsgi --emperor /etc/uwsgi/vassals --uid www-data --gid www-data
```

选项表示:

- `emperor`: 查找vassals (配置文件)的地方
- `uid`: 进程一旦启动后的用户id
- `gid`: 进程一旦启动后的组id

检查站点；它应该在运行。

#### 系统启动时运行uWSGI

编辑 `/etc/rc.local` 然后在”exit 0”行前添加:

```
/usr/local/bin/uwsgi --emperor /etc/uwsgi/vassals --uid www-data --gid www-data --daemonize /var/log/uwsgi-emperor.log
```



## 注意

出错注意看日志，看uwsgi错误日志，假如是命令行的话，会实时输出日志。





## End## 下载包
```
wget https://neo4j.com/artifact.php?name=neo4j-community-3.4.7-unix.tar.gz
# 解压neo4j包
tar xf artifact.php?name=neo4j-community-3.4.7-unix.tar.gz
```
修改配置文件（进入到目录）

```
cd conf
vim neo4j.conf
```
## 添加下面第一条打开对外访问
```
dbms.connectors.default_listen_address=0.0.0.0  #打开对外访问
dbms.connector.bolt.address=0.0.0.0:7687  #
dbms.security.auth_enabled=false    #不使用密码访问
```
## 启动neo4j
```
./bin/neo4j start    #停止的话是stop

➜  neo4j-community-3.4.7 ./bin/neo4j start
Active database: graph.db
Directories in use:
  home:         /root/neo4j-community-3.4.7
  config:       /root/neo4j-community-3.4.7/conf
  logs:         /root/neo4j-community-3.4.7/logs
  plugins:      /root/neo4j-community-3.4.7/plugins
  import:       /root/neo4j-community-3.4.7/import
  data:         /root/neo4j-community-3.4.7/data
  certificates: /root/neo4j-community-3.4.7/certificates
  run:          /root/neo4j-community-3.4.7/run
Starting Neo4j.
Started neo4j (pid 31203). It is available at http://0.0.0.0:7474/
There may be a short delay until the server is ready.
See /root/neo4j-community-3.4.7/logs/neo4j.log for current status.
```




# Yum安装
```
cd /tmp
wget http://debian.neo4j.org/neotechnology.gpg.key
rpm --import neotechnology.gpg.key
```
```
cat <<EOF>  /etc/yum.repos.d/neo4j.repo
[neo4j]
name=Neo4j Yum Repo
baseurl=http://yum.neo4j.org/stable
enabled=1
gpgcheck=1
EOF
```
## 安装
```
yum install neo4j -y
```



# ubuntu安装
略## 下载地址 
https://sourceforge.net/projects/zabbix/files/ZABBIX%20Latest%20Stable/3.4.7/zabbix-3.4.7.tar.gz/download

## 创建用户
```
groupadd -r zabbix && useradd -s /sbin/nologin -g zabbix -r zabbix
```


## 编译安装
解压,进入目录
开始编译

```
tar xf zabbix-3.4.7.tar.gz
cd zabbix-3.4.7

./configure --prefix=/usr/local/zabbix/ --enable-server \
--enable-agent --with-mysql=/usr/local/mysql/bin/mysql_config \
--with-net-snmp --with-libcurl \
 --with-libxml2 --enable-proxy --enable-snmp --with-mbstring

./configure --prefix=/usr/local/zabbix/  --enable-agent --with-libcurl  --with-libxml2 --enable-proxy 

make && make install
```



## 启动文件优化
```
 cp /root/zabbix-3.4.7/misc/init.d/fedora/core5/zabbix_* /etc/init.d/ 
 cd  /etc/init.d/ 
 sed -i 's/ZABBIX_BIN=\"\/usr\/local\//&zabbix\//' zabbix_server  
 sed -i 's/ZABBIX_BIN=\"\/usr\/local\//&zabbix\//' zabbix_agentd
```



## 数据库配置

```
mysql -uroot -p password

create database zabbix default charset utf8;
GRANT ALL PRIVILEGES ON *.* TO zabbix@'localhost' IDENTIFIED BY 'zabbix' WITH GRANT OPTION;
FLUSH PRIVILEGES;
```


## 导入原始数据
```
mysql  -uroot -p  zabbix </root/zabbix-3.4.7/database/mysql/schema.sql s
mysql  -uroot -p  zabbix < /root/zabbix-3.4.7/database/mysql/images.sql 
mysql  -uroot -p  zabbix <  /root/zabbix-3.4.7/database/mysql/data.sql 
```



## 复制站点目录

复制zabbix自带的网站配置文件到你的web服务器站点下面,然后为zabbix配置一个站点文件,我的是在/www/下

```
cp -fr /root/zabbix-3.4.7/frontends/php /www/zabbix

chown -R www.www /www/zabbix
```


## zabbix配置文件

zabbix_server.conf,如若配置错误,可能会开启失败

```
[root@local etc]# cat zabbix_server.conf |grep -v ^# |grep -v ^$
LogFile=/tmp/zabbix_server.log
DBName=zabbix
DBUser=root
DBPassword=swl19960706
 ListenIP=127.0.0.1
Timeout=4
LogSlowQueries=3000
AlertScriptsPath=/usr/local/zabbix/alertscripts  #脚本存放位置
```




## 开启

```
/etc/init.d/zabbix_server start     #服务端

/etc/init.d/zabbix_agentd start     #客户端
```



## 检测zabbix服务端与客户端键值连接

```
zabbix_get -s 127.0.0.1 -p 10050 -k "system.cpu.load[all,avg1]"

zabbix_get -s 127.0.0.1 -p 10050 -k "key"
```



##  查看端口

```
[root@local etc]#   netstat -lntup |grep 1005
tcp        0      0 0.0.0.0:10050               0.0.0.0:*                   LISTEN      14201/zabbix_agentd 
tcp        0      0 127.0.0.1:10051             0.0.0.0:*                   LISTEN      31403/zabbix_server 
```



##  配置nginx

略 #和配置普通php站点一样

## 浏览器检验

输入域名 

End

## 常用脚本积累

```
UserParameter=blog_http,  awk '{print $1}'  /var/log/nginx/ta_access.log |sort  |wc -l
UserParameter=blog_pv_jump,  awk '{print $1}'  /var/log/nginx/ta_access.log |sort  |wc -l
UserParameter=all_pv_jump,  awk '{print $1}'  /var/log/nginx/* |sort  |uniq -c  |wc -l
UserParameter=tcp_num, netstat |grep ^tcp |wc -l
#url监控
UserParameter=user_url, curl -I  http://192.168.0.42:6788/t/m/ 2>/dev/null  |head -1 |awk '{print $2}'
Timeout=8
```

### 小问题

2>/dev/null  排除多余的字符串或者警告信息，让zabbix更好的读取

```

curl -I  http://192.168.0.42:6788/t/m/ 2>/dev/null  |head -1 |awk '{print $2}'
```





## py脚本媒介

Python2.7

使用规范

python name.py lijinghua 【】【】 #lijinghua是微信企业版已经注册的用户

```
#!/usr/bin/python2.7
#_*_coding:utf-8 _*_
#auther:火星小刘

import requests,sys,json
import urllib3
urllib3.disable_warnings()

reload(sys)
sys.setdefaultencoding('utf-8')

def GetToken(Corpid,Secret):
    Url = "https://qyapi.weixin.qq.com/cgi-bin/gettoken"
    Data = {
        "corpid":Corpid,
        "corpsecret":Secret
    }
    r = requests.get(url=Url,params=Data,verify=False)
    Token = r.json()['access_token']
    return Token

def SendMessage(Token,User,Agentid,Subject,Content):
    Url = "https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=%s" % Token
    Data = {
        "touser": User,                                 # 企业号中的用户帐号，在zabbix用户Media中配置，如果配置不正常，将按部门发送。
        #"totag": Tagid,                                # 企业号中的标签id，群发使用（推荐）
        #"toparty": Partyid                             # 企业号中的部门id，群发时使用。
        "msgtype": "text",                              # 消息类型。
        "agentid": 1000004,                             # 企业号中的应用id。
        "text": {
            "content": Subject + '\n' + Content
        },
        "safe": "0"
    }
    r = requests.post(url=Url,data=json.dumps(Data),verify=False)
    return r.text


if __name__ == '__main__':
    User = sys.argv[1]                                                              # zabbix传过来的第一个参数
    Subject = sys.argv[2]                                                           # zabbix传过来的第二个参数
    Content = sys.argv[3]                                                           # zabbix传过来的第三个参数

    Corpid = "ww13ab866295fd5e46"                                                   # CorpID是企业号的标识
    Secret = "Eh7gKI38NFYfCZZCrY5Uod9dWQ3p1PAISzGZUUbd6TQ"     # Secret是管理组凭证密钥
    #Tagid = "1"                                                                     # 通讯录标签ID
    Agentid = "1000004"                                                                   # 应用ID
    #Partyid = "1"                                                                  # 部门ID

    Token = GetToken(Corpid, Secret)
    Status = SendMessage(Token,User,Agentid,Subject,Content)
    print Status
```

# 环境

Python2.7 

pip install jieba

# 代码

```
# coding:utf-8

import sys
reload(sys)
sys.setdefaultencoding( "utf-8" )

import jieba
from jieba import analyse

def segment(input, output):
    input_file = open(input, "r")
    output_file = open(output, "w")
    while True:
        line = input_file.readline()
        if line:
            line = line.strip()
            seg_list = jieba.cut(line)
            segments = ""
            for str in seg_list:
                segments = segments + " " + str
            segments = segments + "\n"
            output_file.write(segments)
        else:
            break
    input_file.close()
    output_file.close()

if __name__ == '__main__':
    if 3 != len(sys.argv):
        print "Usage: ", sys.argv[0], "input output"
        sys.exit(-1)
    segment(sys.argv[1], sys.argv[2]);
```

# 测试样本

```
(py2) ➜  ~ cat zhenhuanzhuan.txt 
序文--不过是「情」

    在键盘上敲落一个个文字的时候，窗外有大雨过后的清新。站在十二楼的落地玻璃窗前往外看，有大片大片开阔的深绿蔓延。

　　我喜欢这个有山有水的小城，所以在这样一个烦热的下午，背负着窒闷的心情不顾一切逃出暂居的城市，来到这里，在写完了一个整整写了三年多的故

　　终于，写完了《后宫：甄嬛传》的最后一本，第七本。七，是我喜欢的一个数字。甄嬛的故事，最后一个字，是我在初夏的某日坐在师大某个小宾馆的

　　这是我的第一部长篇，自己也轻吁一口气，居然写了那么长，那么久。
　　可是完结的那一刻，我心里一点也不快活。因?是我自己，把我喜爱的清，把我理想中温润如玉的男子，写到玉碎斑驳。
```

# 测试

```
(py2) ➜  ~ python  ./ppp.py zhenhuanzhuan.txt zhenhuanzhuan.segment
Building prefix dict from the default dictionary ...
Loading model from cache /tmp/jieba.cache
Loading model cost 0.243 seconds.
Prefix dict has been built succesfully.
(py2) ➜  ~ head zhenhuanzhuan.segment 
 序文 - - 不过 是 「 情 」

 在 键盘 上 敲落 一个个 文字 的 时候 ， 窗外 有 大雨 过后 的 清新 。 站 在 十二楼 的 落地 玻璃窗 前往 外看 ， 有 大片大片 开阔 的 深绿 蔓延 。

 　 　 我 喜欢 这个 有山有水 的 小城 ， 所以 在 这样 一个 烦热 的 下午 ， 背负着 窒闷 的 心情 不顾一切 逃出 暂居 的 城市 ， 来到 这里 ， 在 写 完 了 一个 整整 写 了 三年 多 的 故事 之后 。

 　 　 终于 ， 写 完 了 《 后宫 ： 甄 嬛 传 》 的 最后 一本 ， 第七 本 。 七 ， 是 我 喜欢 的 一个 数字 。 甄 嬛 的 故事 ， 最后 一个 字 ， 是 我 在 初夏 的 某日 坐在 师大 某个 小 宾馆 的 房间 里 写下 的 。 这个 故事 ， 自我 在 母校 时始 ， 又 于 母校 终 ， 像 一个 有始有终 的 圆圈 ， 终于 完结 了 。

 　 　 这 是 我 的 第一部 长篇 ， 自己 也 轻吁 一口气 ， 居然 写 了 那么 长 ， 那 久 。
 　 　 可是 完结 的 那一刻 ， 我 心里 一点 也 不 快活 。 因 ? 是 我 自己 ， 把 我 喜爱 的 清 ， 把 我 理想 中 温润 如玉 的 男子 ， 写 到 玉碎 斑驳 。
```

# chatrebot
# 词云图



## 正常的图

<p align="center">
  <img src="https://s1.ax1x.com/2018/10/17/idhTzQ.png" alt="正常"/>
</p>

## 桃心背景图



<p align="center">
  <img src="https://s1.ax1x.com/2018/10/17/idhHMj.png" alt="桃心背景"/>
</p>

## 两个命令

`soffice  --headless --convert-to pdf  *****.pptx`

`unoconv -f pdf *****.pptx`

### 安装soffice

`sudo apt-get -y  install libreoffice`

### 安装 unoconv

`sudo apt-get -y  install unoconv`



dadao 项目涉及到的ppt pdf格式转换，unoconv转化ppt到pdf始终有瑕疵，可能是我手滑删掉的东西导致,没有深究。

## 二者占用资源及消耗时间对比

据我所知，这个服务经常因为负载高而崩掉，来对比下，实验环境在一台1c2G内存的机器

贴上二者转换同一个ppt的时间及占用资源



### soffice 

![soffice](https://s1.ax1x.com/2018/08/16/PRhwjg.jpg)

```
[root@pa3 tmp]# time soffice  --headless --convert-to pdf 世嘉科技（002796）_高级版报告_20180815.pptx
convert /tmp/世嘉科技（002796）_高级版报告_20180815.pptx -> /tmp/世嘉科技（002796）_高级版报告_20180815.pdf using filter : impress_pdf_Export

real    0m4.741s
user    0m4.353s
sys     0m0.144s
```



占用时间4.7s，内存占用约100M，cpu激增100%以上



### unoconv

![soffice](https://s1.ax1x.com/2018/08/16/PRhDBj.jpg)



```
[root@pa3 tmp]# time unoconv -f pdf 世嘉科技（002796）_高级版报告_20180815.pptx

real    0m5.640s
user    0m4.634s
sys     0m0.191s
```



占用时间5.6s，内存占用大概100M，cpu激增100%以上





### 个人理解：

1. soffice更适合单兵作战，因为它不适合多进程运行，更适合有队列控制的服务
2. unoconv可以多进程运行
3. soffice和unoconv对于同一个文件，前者稍微快一点，占用资源相当。## jenkins 安装 gitlab plugin  

安装成功立即生效



jenkins == 》〉 系统管理 == 》〉 系统设置 == 》 gitlab设置 

Connection name 随便写

Gitlab host URL  == gitlab的根域名

 Credentials（证书）  add添加  需要token（从gitlab获得，看下一步）



## gitlab获得token方法

去主settings === >> Access Tokens ======>> name 随便写，过期日期不可缺少，还有下面的选项

，点击生成之后请复制到一个地方，刷新页面之后会消失

![WX20180906-155757](/Users/adou/Downloads/WX20180906-155757.png)



## 测试 jenkins与gitlab连接

点击Test Connectino

返回 seccess 



![jenkins连接gitlab测试](/Users/adou/Downloads/jenkins连接gitlab测试.png)

## jenkins项目开始

![新建任务](/Users/adou/Downloads/新建任务.png)

![新建一个项目](/Users/adou/Downloads/新建一个项目.png)



描述写一下

源码管理 === 》 git。（这里需要上传公钥到gitlab）

















## 关于安全

主机被入侵，它会干什么？

1. 挖矿

1. 疯狂发包影响你主机正常工作

1. 假若这台主机公钥在其他主机集群上，它会干什么坏事？

1. 现在已经把病毒文件全部删除了，但是过一天或者一周，会不会病毒重启？定时任务？

1. 病毒的处理：先删掉病毒文件，及产生的目录，再把病毒进程批量杀死，云主机的话，强迫症可以直接初始化磁盘回炉再造



  ## 查看资源占用

  #### 使用内存前10
```
ps aux | sort -k4nr | head -n 10
```
  #### 使用cpu前10
```
ps aux | sort -k3nr | head -n 10
```
## 批量杀死？(灵活运用哦)
```
command |awk '{print $2}' |xargs kill -9

```
## 流量进出
  #### 查看流量进出
```
iftop 
```

  #### 查看进程出入流量必杀器
```
nethogs
```
## 定时任务
```
crontab -l 
at

```
- 注意：linux上定时任务有两个，一个是 crontab 一个是at
at命令看这里
```
[root@10-254-182-240 ~]# at -t "201805041820"
at> \rm -f 888
at> <EOT>
job 2 at Fri May  4 18:20:00 2018
```
at的进程
```
[root@10-254-182-240 ~]# ps -ef |grep atd
root      2982     1  0 May04 ?        00:00:00 /usr/sbin/atd -f
```## 前面的话

市面上常见的.tar、.gz 、.tar.gz、.tgz、.bz2、.tar.bz2、.Z、. tar.Z、.zip、.rar这10种压缩文件
Linux下最常用的打包程序就是tar了，使用tar程序打出来的包我们常称为tar包，tar包文件的命令通常都是以.tar结尾的。生成tar包后，就可以用其它的程序来进行压缩了

## tar命令小结


### 参数

-c: 建立压缩档案 
-x：解压 
-t：查看内容 
-r：向压缩归档文件末尾追加文件 
-u：更新原压缩包中的文件

这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。

-z：有gzip属性的 
-j：有bz2属性的 
-Z：有compress属性的 
-v：显示所有过程 
-O：将文件解开到标准输出 


下面的参数-f是必须的

-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。 

### 基本使用

```
tar -cf all.tar *.jpg #这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。 
```

```
tar -rf all.tar *.gif

tar -cf all.tar *.jpg
#这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包 ，-f指定包的文件名。
```

```
tar -rf all.tar *.gif
#这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。
```

```
tar -uf all.tar logo.gif
#这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。
```

```
tar -tf all.tar
#这条命令是列出all.tar包中所有文件，-t是列出文件的意思
```



### 调用其他

以上就是tar的最基本的用法。为了方便用户在打包解包的同时可以压缩或解压文件，tar提供了一种特殊的功能。这就是tar可以在打包或解包的同时调用其它的压缩程序，比如调用gzip、bzip2等

####  调用gzip

```
.tar.gz格式

解压: tar zxvf file.tar.gz
压缩: tar zcvf file.tar.gz dir 
```



#### 调用bzip2

​	

```
.bz2
压缩	 tar -cjf all.tar.bz2 dir
解压	 tar -xjf all.tar.bz2
```


​	

#### 调用compress

compress也是一个压缩程序，但是好象使用compress的人不如gzip和bzip2的人多。.Z结尾的文件就是bzip2压缩的结果。与 compress相对的解压程序是uncompress。tar中使用-Z这个参数来调用compress

```
.tar.Z 

压缩：   tar -czf all.tar.Z  dir
解压：   tar -xzf all.tar.Z
```


​	
### 要知道的参数

-a或--ascii 使用ASCII文字模式。 
-c或--stdout或--to-stdout 把压缩后的文件输出到标准输出设备，不去更动原始文件。 
-d或--decompress或----uncompress 解开压缩文件。 
-f或--force 强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接。 
-h或--help 在线帮助。 
-l或--list 列出压缩文件的相关信息。 
-L或--license 显示版本与版权信息。 
-n或--no-name 压缩文件时，不保存原来的文件名称及时间戳记。 
-N或--name 压缩文件时，保存原来的文件名称及时间戳记。 
-q或--quiet 不显示警告信息。 
-r或--recursive 递归处理，将指定目录下的所有文件及子目录一并处理。 
-S<压缩字尾字符串>或----suffix<压缩字尾字符串> 更改压缩字尾字符串。 
-t或--test 测试压缩文件是否正确无误。 
-v或--verbose 显示指令执行过程。 
-V或--version 显示版本信息。 
-<压缩效率> 压缩效率是一个介于1－9的数值，预设值为"6"，指定愈大的数值，压缩效率就会愈高。 
--best 此参数的效果和指定"-9"参数相同。 
--fast 此参数的效果和指定"-1"参数相同。

### 其余格式

#### .tar格式

解压：tar xvf file.tar
打包: tar cvf file.tar dir  #(注:tar是打包,不是压缩!) 

#### .gz格式

解压: gunzip file.gz
指定位置解压: gzip -d file.gz
压缩: gzip file

#### .bz2格式

解压: bzip2 -d file.bz2
解压: bunzip2 file.bz2
压 缩: bzip2 -z file 

#### .bz格式


解压: bzip2 -d file.bz
解压: bunzip2 file.bz 

#### .tar.tgz格式

解压: tar zxvf file.tar.tgz
压缩: tar zcvf file.tar.tgz file 

#### .zip格式

解压: unzip file.zip -d dir
压缩打包: zip -r file.zip dir 

#### .rar格式

需要安装 

```
wget https://www.rarlab.com/rar/rarlinux-x64-5.6.b4.tar.gz
tar xf rarlinux-x64-5.6.b4.tar.gz
cd rar/
make 

压缩： rar a  all.rar dir 
解压： rar e  all.rar
```


参数 （贴几个常用的，因为确实太多了，a和e不需要加-）

a               添加文件到压缩文件
e               解压压缩文件到当前目录
-w<路径>        指定工作目录



#### .tar.xz格式

先用xz解压，在用tar解压，貌似也可以

注意：

xz需要安装

ubuntu ：apt-get -y install xz-utils
Centos ：yum -y install xz xz-devel
但是我试了，以上两种官方的，都不行，还是编译吧

下载地址： http://download.chinaunix.net/down.php?id=33115&ResourceID=13078&site=1
tar -xjf xz-5.0.3.tar.bz2 
cd xz-5.0.3/
./configure 
make && make install 

使用：

压缩：xz -z file

解压：xz -d file


## 关于解压

.tar 用 tar –xvf 解压
.gz 用 gzip -d或者gunzip 解压
.tar.gz和*.tgz 用 tar –xzf 解压
.bz2 用 bzip2 -d或者用bunzip2 解压
.tar.bz2用tar –xjf 解压
.Z 用 uncompress 解压
.tar.Z 用tar –xzf 解压
.rar 用 unrar e解压
.zip 用 unzip 解压

.tar.xz用xz解压，在用tar解压


再补充吧## ls
-A  通-a，但不列出"."和".."

## cp 

-R -r 递归复制该目录及其子目录内容
-p  连同档案属性一起复制过去
-s  生成快捷方式
-a  将档案的所有特性都一起复制

## scp 

-r 递归复制


## rmdir 删除空目录

-v  显示执行过程
-p  若自父目录删除后父目录为空则一并删除

## cat 

-E  在结束行提示$

## more 
 按页查看文章内容，从前向后读取文件，因此在启动时就加载整个文件
 

+n  从第n行开始显示
-n  每次查看n行数据
+/String    搜寻String字符串位置，从其前两行开始查看
-c  清屏再显示
-p  换页时清屏


## less 
 可前后移动地逐屏查看文章内容，在查看前不会加载整个文件


-m  显示类似于more命令的百分比
-N  显示行号
/   字符串：向下搜索“字符串”的功能
?   字符串：向上搜索“字符串”的功能
n   重复前一个搜索（与 / 或 ? 有关）
N   反向重复前一个搜索（与 / 或 ? 有关）
b   向前翻一页
d   向后翻半页
u   向前翻半页
-i  忽略搜索时的大小写（在搜索大文件时比vim好用）
-s  将连续多个空行压缩成一行显示


## nl 
 将输出内容自动加上行号 

-b 
-b a 不论是否有空行，都列出行号（类似 cat -n) 
-b t 空行则不列行号（默认） 


## pgrep
遍历目前正在运行的进程然后列出符合查找规则的进程ID（PID）

一个骚操作

pgrep server |xargs kill -9 


## grep 

-c  只输出匹配行的计数
和 wc -l 类似，但是直接用grep 来做大文件的运算的话，没有awk来的快

## users

显示当前登录系统的用户


## lastlog 
查看每个用户最后的登陆时间


## finger

查看用户信息

-s 显示用户的注册名、实际姓名、终端名称、写状态、停滞时间、登录时间等信息
-l 除了用-s选项显示的信息外，还显示用户主目录、登录shell、邮件状态等信息，以及用户主目录下的.plan、.project和.forward文件的内容。
-p 除了不显示.plan文件和.project文件以外，与-l选项相同

## alias

alias rm ='not use rm' #临时添加别名


unalias rm     #清除别名，若想继续使用别名，则重新source /etc/profile



## useradd 
useradd -M -s /sbin/nologin nginx

-M：不创建家目录
-s：指定用户登陆时使用的shell，nologin就是登陆不了


## passwd

管道设置密码
echo "mima" | passwd --stdin lijinghua



## userdel 
删除用户

-r 用户文件一并删除



## usermod 

修改用户的相关属性

-L  冻结密码
-U  解冻密码
-g  修改用户所属组  usermod -g group user 


## groupmod

修改组信息

-n  修改既有的组名


## chfn
 修改个人信息


## mount 

-ro 采用只读方式挂接设备
-rw 采用读写方式挂接设备


## wc 

统计指定文件中的字节数、字数、行数, 并将统计结果显示输出


-w filename 报告单词数 

## env 

显示环境变量 

## export 

把普通变量变成环境变量 


## read

-p  接提示字符
-t  接等待的秒数

## diff 

比较单个文件或者目录内容

-b 　不检查空格字符的不同。
-B 　不检查空白行。
-i  不检查大小写
-q  仅显示差异而不显示详细信息
diff a b > parch.log 比较两个文件的不同并产生补丁



## date 

显示或设定系统的日期与时间

%H 小时(以00-23来表示)。 
%M 分钟(以00-59来表示)。 
%P AM或PM。
%D 日期(含年月日)
%U 该年中的周数。
date -s "2015-10-17 01:01:01" #时间设定
date +%Y%m%d         #显示前天年月日
date --date='2 days ago' #显示两天以前的日期
date -d '2 weeks'  # 2周后的日期


## ping
测试与目标主机的连通性

-q  只显示最后的结果


## paste 
合并文件，需确保合并的两文件行数相同


[root@10-254-182-240 ~]# cat 999 
44
4444
4444
666
[root@10-254-182-240 ~]# cat 888 
3432
2324
2323
2324
[root@10-254-182-240 ~]# paste 999 888
44	3432
4444	2324
4444	2323
666	2324



## 关于命令行

ctrl -k  清除光标右边的内容 
ctrl +h  清除光标之前的
# pipenv
@(Django相关)

```bash
# 用python3 安装 pipenv
sudo pip3 install pipenv
# 如果没有pip3就先装一下
sudo apt-get -y install python3-pip
# 初始化一个虚拟环境 /home/memect/.local/share/virtualenvs/memect-Y1BuaAdw
pipenv --python 3.6


# 开发环境，非生产环境需要的的安装包
pipenv install pytest --dev
# 开发和生产环境都需要的包
pipenv install pytest

# 安装指定版本
pipenv install requests==2.13.0
```
https://github.com/pypa/pipfile
> pipfile 文件 高级写法的大概介绍

https://www.jetbrains.com/help/pycharm/using-pipfile.html
> pycharm 安装 pipfile

https://www.jetbrains.com/help/pycharm/pipenv.html
> pycharm 配置 pipenv interpreter

https://docs.pipenv.org/basics/
> 基本用法
```python
[[source]]
url = "https://pypi.org/simple"
verify_ssl = false
name = "pypi"

[packages]
django = "==2.1.0"
django-model-utils = "==3.1.2"
django-cors-headers = "==2.2.0"
django-import-export = "*"
djangorestframework-jwt = "*"
django-filter = "==1.1.0"
pyexcel = "*"
pyexcel-xls = "*"
pyexcel-xlsx = "*"
celery = "==4.1.1"
redis = "*"
"psycopg2" = "==2.7.4"
djangorestframework = "==3.8.2"


[dev-packages]
drf-yasg = "*"
django-extensions = "*"

[requires]
python_version = "3.6"
```
 
pycharm 配置
> File | Settings | Project interpreter | add
 
existing 选之前初始化好的环境

> File | Settings | Tools | Python Integrated Tools
![Alt text](./1534823304984.png)
```bash
pipenv install --dev
```## 注释 <!-- -->
`<!--     我是注释 -->`


## 换行 <br />
`<p> i love u, <br /> because <br /> u is beautiful. </p>`

换行字符之间用 
`<br />`    隔开 

## 图片 <img

`<img src="test.jpg" width="1200" height="800" />`

## 链接 <a 
`<a href="https://www.lijinghua.club">This is a link</a>`


## 居中排列 
`<h1 align="center"> 居中 </h1>`

## body颜色

`<body bgcolor=green > 绿色 </body>`

## 水平线

`<hr />`

## 解决乱码现象

<meta charset="utf-8">
     <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
</head>


## 预格式文本
使用 pre 标签对空行和空格进行控制
<pre>
这是
预格式文本。
它保留了      空格
和换行。
</pre>

## 粗体字
<b>注释：</b>这些标签常用于显示计算机/编程代码。

## 长引用
<blockquote>
这是长的引用
</blockquote>

## 短引用
<q>
这是短的引用。
</q>

## 下划线
<ins>
下划线
</ins>

## 删除线
<del>
删除线
</del>





## 













《1》
我们无法确定 HTML 被显示的确切效果。屏幕的大小，以及对窗口的调整都可能导致不同的结果。

对于 HTML，您无法通过在 HTML 代码中添加额外的空格或换行来改变输出的效果。

当显示页面时，浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格。需要注意的是，HTML 代码中的所有连续的空行（换行）也被显示为一个空格



《2》


## 样式背景颜色示范

`<body style="background-color:yellow">`
`<h2 style="background-color:red">This is a heading</h2>`
`<p style="background-color:green">This is a paragraph.</p>`

## 字体，颜色，字体尺寸
font-family   文本的字体系列
color         颜色
font-size     字体尺寸

## 字体中英文对比
宋体 SimSun
黑体 SimHei
微软雅黑 Microsoft YaHei
微软正黑体 Microsoft JhengHei
新宋体 NSimSun
新细明体 PMingLiU
细明体 MingLiU
标楷体 DFKai-SB
仿宋 FangSong
楷体 KaiTi
仿宋_GB2312 FangSong_GB2312
楷体_GB2312 KaiTi_GB2312

宋体：SimSuncss中中文字体（font-family）的英文名称
Mac OS的一些：
华文细黑：STHeiti Light [STXihei]
华文黑体：STHeiti
华文楷体：STKaiti
华文宋体：STSong
华文仿宋：STFangsong
儷黑 Pro：LiHei Pro Medium
儷宋 Pro：LiSong Pro Light
標楷體：BiauKai
蘋果儷中黑：Apple LiGothic Medium
蘋果儷細宋：Apple LiSung Light
Windows的一些：
新細明體：PMingLiU
細明體：MingLiU
標楷體：DFKai-SB
黑体：SimHei
新宋体：NSimSun
仿宋：FangSong
楷体：KaiTi
仿宋_GB2312：FangSong_GB2312
楷体_GB2312：KaiTi_GB2312
微軟正黑體：Microsoft JhengHei
微软雅黑体：Microsoft YaHei
装Office会生出来的一些：
隶书：LiSu
幼圆：YouYuan
华文细黑：STXihei
华文楷体：STKaiti
华文宋体：STSong
华文中宋：STZhongsong
华文仿宋：STFangsong
方正舒体：FZShuTi
方正姚体：FZYaoti
华文彩云：STCaiyun
华文琥珀：STHupo
华文隶书：STLiti
华文行楷：STXingkai
华文新魏：STXinwei


## 文本对齐

<h1 style="text-align:center">This is a heading</h1>



## 前面的话

```
cpu属性值说明：

%user：CPU处在用户模式下的时间百分比。

%nice：CPU处在带NICE值的用户模式下的时间百分比。

%system：CPU处在系统模式下的时间百分比。

%iowait：CPU等待输入输出完成时间的百分比。

%steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。

%idle：CPU空闲时间百分比。
```

## 综合

### dstat

```
结合了vmstat，iostat，ifstat，netstat以及更多的信息
实时显示统计情况
在分析和排障时可以通过启用监控项并排序
模块化设计
使用python编写的，更方便扩展现有的工作任务
容易扩展和添加你的计数器（请为此做出贡献）
包含的许多扩展插件充分说明了增加新的监控项目是很方便的
可以分组统计块设备/网络设备，并给出总数
可以显示每台设备的当前状态
极准确的时间精度，即便是系统负荷较高也不会延迟显示
显示准确地单位和和限制转换误差范围
用不同的颜色显示不同的单位
显示中间结果延时小于1秒
支持输出CSV格式报表，并能导入到Gnumeric和Excel以生成图形


参数


-c ：显示CPU系统占用，用户占用，空闲，等待，中断，软件中断等信息
-C ：当有多个CPU时候，此参数可按需分别显示cpu状态，例：-C 0,1 是显示cpu0和cpu1的信息
-n ：显示网络状态
-N eth1,total：有多块网卡时，指定要显示的网卡
-l ：显示负载统计量
-m ：显示内存使用率（包括used，buffer，cache，free值）
-r ：显示I/O请求情况
-s ：显示交换分区使用情况
-y ：系统状态
-t ：将当前时间显示在第一行
-p ：显示进程状态。
-g ：显示页面使用情况
--fs ：显示文件系统统计数据（包括文件总数量和inodes值）
--nocolor ：不显示颜色（有时候有用）
--socket ：显示网络统计数据
--tcp ：显示常用的TCP统计
--udp ：显示监听的UDP接口及其当前用量的一些动态数据
--disk-util ：显示某一时间磁盘的忙碌状况
--freespace ：显示当前磁盘空间使用率
--proc-count ：显示正在运行的程序数量
--top-bio ：指出块I/O最大的进程
--top-cpu ：图形化显示CPU占用最大的进程
--top-io ：显示正常I/O最大的进程
--top-mem ：显示占用最多内存的进程
--output ：输出.csv文件


#### 输出csv文件
dstat --output /tmp/sampleoutput.csv -cdngy

系统状态
dstat -y

---system--

 int  csw    #中断数    上下文切换数
```

### top

#### 系统平均运行时间和负载

前几行水平显示了不同系统参数的概括

top命令的顶部显示与uptime命令相似的输出，这些字段显示：

- 当前时间
- 系统已运行的时间
- 当前登录用户的数量
- 相应最近5、10和15分钟内的平均负载。

可以使用’l’命令切换uptime的显示。

#### 任务

第二行显示的是任务或者进程的总结。进程可以处于不同的状态。这里显示了全部进程的数量。除此之外，还有正在运行、睡眠、停止、僵尸进程的数量（僵尸是一种进程的状态）。

这些进程概括信息可以用’t’切换显示

#### CPU状态



us, user： 运行(未调整优先级的) 用户进程的CPU时间

sy，system: 运行内核进程的CPU时间

ni，niced：运行已调整优先级的用户进程的CPU时间

wa，IO wait: 用于等待IO完成的CPU时间

hi：处理硬件中断的CPU时间

si: 处理软件中断的CPU时间

st：这个虚拟机被hypervisor偷去的CPU时间（译注：如果当前处于一个hypervisor下的vm，实际上hypervisor也是要消耗一部分CPU处理时间的）。

可以按t图像化显示

 #### 内存使用

第一行是物理内存使用，第二行是虚拟内存使用(交换空间)。

物理内存显示如下:全部可用内存、空闲内存、已使用内存、缓冲内存。相似地：交换部分显示的是：全部、空闲、已使用和缓冲交换空间。

可以使用m图像化显示

#### 字段|列

在横向列出的系统属性和状态下面，是以列显示的进程。不同的列代表下面要解释的不同属性。

**PID**           进程ID，进程的唯一标识符

**USER**        进程所有者的实际用户名。

**PR**             进程的调度优先级。这个字段的一些值是’rt’。这意味这这些进程运行在实时态。

**NI  **          进程的nice值（优先级）。越小的值意味着越高的优先级。

**VIRT**          进程使用的虚拟内存。

**RES**            驻留内存大小。驻留内存是任务使用的非交换物理内存大小。

**SHR**           SHR是进程使用的共享内存。

**S**

这个是进程的状态。它有以下不同的值:

- D – 不可中断的睡眠态。
- R – 运行态
- S – 睡眠态
- T – 被跟踪或已停止
- Z – 僵尸态

**%CPU** 自从上一次更新时到现在任务所使用的CPU时间百分比。

**%MEM** 进程使用的可用物理内存百分比。

**TIME+** 任务启动后到现在所使用的全部CPU时间，精确到百分之一秒。

**COMMAND** 运行进程所使用的命令。

还有许多在默认情况下不会显示的输出，它们可以显示进程的页错误、有效组和组ID和其他更多的信息。

 #### 交互

##### 刷新页面

'空格' or ‘回车’

默认三秒刷新页面

##### 帮助 

'h'

##### 切换交替显示模式                   

'A' 

这个命令在全屏和交替模式间切换。在交替模式下会显示4个窗口（译注：分别关注不同的字段）:

1. Def （默认字段组）
2. Job （任务字段组）
3. Mem （内存字段组）
4. Usr （用户字段组）

这四组字段共有一个独立的可配置的概括区域和它自己的可配置任务区域。4个窗口中只有一个窗口是当前窗口。当前窗口的名称显示在左上方。（译注：只有当前窗口才会接受你键盘交互命令）

 我们可以用’a’和’w’在4个 窗口间切换。’a’移到后一个窗口，’w’移到前一个窗口。用’g’命令你可以输入一个数字来选择当前窗口。

##### 触发粗体显示

'B'

一些重要信息会以加粗字体显示。这个命令可以切换粗体显示。

##### 设置刷新时间

'd' or 's'

当按下’d’或’s’时，你将被提示输入一个值（以秒为单位），它会以设置的值作为刷新间隔。如果你这里输入了1，top将会每秒刷新

##### 切换负载，任务，内存信息显示

'l' 't' 'm'

##### 字段管理

'f'

##### 反向|常规排序

'R'

##### 显示进程完整路径

'c'

##### 显示空闲任务

'i'

##### 数视图

'V'

##### 改变配色

'Z'

按了大写Z之后，按1，回车，将会选择红色配色，以此类推

##### 颜色开关

'z'

##### 切换高亮信息

'x' 'y'

'x’将排序字段高亮显示（纵列）；’y’将运行进程高亮显示（横行

##### 制定特定用户

'u'

##### 设置最大显示任务的数量

'n' or  '#'

##### 传递结束信号

'k'

k一按下去，会让你输入一个将要被杀死的进程的pid，如若不输入任何pid，将会杀死当前出现的第一个

#### 参数

-b 批处理模式，以批处理模式启动top，在想用top输出保存文件是很有效

-c 命令/程序名触发，这个选项会以上次记住的程序/命令显示的状态显示（是否显示完整路径）。

-d 设置延迟间隔

-i 显示空闲进程

-n 设置迭代数量，将会在n次之后自动退出，若不写该参数，虽然也会执行，但是不会自动退出

-p 监控特定的pid 

-u 监控特定的用户

-U 监控特定的UID



### htop 









 

 

 

 

 

 

 

 

 

 

 

 

 

#Shell
# shell
2016-05-12 ~ 2016-05-22
所有案例均出自《Linux命令行与shell脚本编程大全案例》一书，作为学习shell的一个见证
王
smbpasswd 属于samba套件，能够实现添加或删除samba用户和为用户修改密码

217773

-a：向smbpasswd文件中添加用户； 
-c：指定samba的配置文件； 
-x：从smbpasswd文件中删除用户； 
-d：在smbpasswd文件中禁用指定的用户； 
-e：在smbpasswd文件中激活指定的用户； 
-n：将指定的用户的密码置空。

====================================================================================
统计
1.根据访问IP统计UV

awk '{print $1}'  access.log|sort | uniq -c |wc -l

2.统计访问URL统计PV

awk '{print $7}' access.log|wc -l

3.查询访问最频繁的URL

awk '{print $7}' access.log|sort | uniq -c |sort -n -k 1 -r|more

4.查询访问最频繁的IP

awk '{print $1}' access.log|sort | uniq -c |sort -n -k 1 -r|more

5.根据时间段统计查看日志

cat  access.log| sed -n '/14\/Mar\/2015:21/,/14\/Mar\/2015:22/p'|more


netstat -n |grep ^tcp |awk '{print $6}' |sort |uniq  -c| sort -n -k 1 -r
  580 ESTABLISHED
     62 TIME_WAIT
     38 FIN_WAIT2
     16 FIN_WAIT1
      4 LAST_ACK
      3 CLOSE_WAIT
	  
SYN_RECV        //一个连接请求已经到达，等待确认

ESTABLISHED     //正常数据传输状态/当前并发连接数

FIN_WAIT2       //另一边已同意释放

ITMED_WAIT          //等待所有分组死掉

CLOSING         //两边同时尝试关闭

TIME_WAIT       //另一边已初始化一个释放

LAST_ACK        //等待所有分组死掉
l
=============================================================================================================打印机

打印机：运行\\10.1.59.210  之后查看 开始菜单，设备和打印机
打印扫描：Ctrl +r mstsc 10.1.59.210 用户ww 密码123456 桌面佳能扫描图标 
投影 win + p
公司台式电脑DNS：首选211.167.230.100 备用114.114.114.114

============================================================================================================内存与cpu查看
使用内存前10
ps aux | sort -k4nr | head -n 10
使用cpu前10
ps aux | sort -k3nr | head -n 10
=============================================================================================================查看命令完整路径
查看命令完整路径(以sshd为例)
1   pidof sshd    #选择下面第一个
   26294 21941 21915 19768 19766 7356 7355 7353 7351

   ls -al 26294


2  查端口 
fuser -n tcp 80

#fuser -n tcp 80
80/tcp:              14198 14199 14200 14201 14202 14203 14207 14208 23044

ps -ef |grep 23044  #最后一个
==================================================================================================================samba添加新用户
samba添加新用户

useradd  user               #创建一个用户
cd /home/user               #cd到home该用户下面
smbpasswd -a user           #给用户来一个密码

=====================================================================================================================查找大文件

=====================================================================================

git reset --hard HEAD^   退回到上一个版本
git checkout --file         表示丢弃工作区的修改退回原始状态
git checkout file            // 由于是通过文件系统删除的所以可以通过checkout恢复
git checkout --file         // 表示丢弃工作区的修改退回原始状态(不包括以及添加到暂存区的修改
git log --graph --pretty=oneline --abbrev-commit                 //查看分支的提交情况

=======================================================================================
检查mysql主配置文件在哪里
#先找到命令路径
#然后
/usr/libexec/mysqld --verbose --help |grep -A 1 'Default options'

====================================================================================


查看公网地址
curl ifconfig.me

==================================================================================

内存不够了 
echo 3 > /proc/sys/vm/drop_caches

==========================================================================
优化yum源
#!/bin/sh
 yum -y install wget
\mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak
 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 
yum clean all && yum makecache


yum repolist

yum repolist all

======================================================
查看php编译路径(前面是php开启路径
/usr/local/webserver/php/bin/php -r 'phpinfo();'|more
两个重要的配置文件
/php/etc/php.ini
/php/etc/php-fpm.conf

whereis php-cgi


====================================================

李哥电话 : 13611381171

=================================
vim /etc/fstab
sysfs                   /sys                    sysfs   defaults        0 0
proc                    /proc                   proc    defaults        0 0
LABEL=SWAP-sda2         swap                    swap    defaults        0 0
172.16.1.196:/data0/web  /data0                 nfs     rw,soft,intr    0 0

mount -a   #重新挂载

=====================================
getconf ARG_MAX

=================================
pip下载

wget https://bootstrap.pypa.io/get-pip.py --no-check-certificate

python get-pip.py

===================================
主从分离

查询最大连接数
set global read_only=1;

====================
yum安装时 出现 database disk image is malformed 的错误，Google后发现是yum的数据缓存出问题了，解决办法如下
估计是由于yum的原数据损坏导致的，与rpm的数据库损坏类似，前者会导致更新不能正常执行，后者会导致安装失败并出现乱码，前者的解决参见yum更新和rpm安装包问题(rpmdb: PANIC: Invalid argument)，
后者的错误可以通过一下方法解决：
终端，依次输入：


yum clean metadata
yum clean dbcache
yum makecache

========================
设置初始密码
mysqld_safe --skip-grant-tables &
===========================
mysqldump -B --master-data=2 --single-transaction lijinghua |gzip>/data/backup/lijinghua_$(date +%F).sql.gz


===========================
mysqlddump备份避免输入密码(定时任务
[mysqldump]
user=username---- 我的是root
password=password----我的是1qazxsw2

#修改权限
chmod 600 .my.cnf
=================================


E: dpkg 被中断,您必须手工运行 sudo dpkg --configure -a解决此问题 

rm /var/lib/dpkg/updates/*  
或者还需要
apt-get update 
=================================
ubuntu安装 openssl时报错

 !!! OpenSSL is not properly installed on your system. !!!
  !!! Can not include OpenSSL headers files.            !!!
解决:
 apt-get install openssl 
 apt-get install libssl-dev
 
 ===========================
 
 mysql5.7 root密码
 
 
 忘记密码
 配置文件中mysqld模块加入以下一行
 skip-grant-tables
 重启登录直接回车,之后再把这一行取消掉
 
 set password for 'root'@'localhost'=password('123456');
  flush privileges; 
  
 use mysql;
 update user set authentication_string=PASSWORD("这里输入你要改的密码") where User='root'; #更改密码
 update user set plugin="mysql_native_password"; #如果没这一行可能也会报一个错误，因此需要运行这一行
 flush privileges; #更新所有操作权限

 use mysql;
 update user set authentication_string=PASSWORD("@AS55sadd55SFknzyd") where User='root'; 
 update user set plugin="mysql_native_password"; 
 flush privileges; 

 #就算登录进去 还需要重新set下密码
 SET PASSWORD = PASSWORD('@AS55sadd55SFknzyd');
  flush privileges; 
 
 
CHANGE MASTER TO
MASTER_HOST  ="",
MASTER_USER  ="slave",
MASTER_PASSWORD  ="111111",
MASTER_LOG_FILE  ="mysql-bin.000003",
MASTER_LOG_POS  = 1992;

 ===========================
 
 cmake 编译安装 重新编译 
 
 cd (源码目录)
 rm -f CMakeCache.txt
 make clean
 
 ==================================
ubuntu下编译安装将服务加入系统服务
#以mysql为例
cp support-files/mysql.server /etc/init.d/mysql
update-rc.d mysql defaults
update-rc.d mysql start 2 3 4 5 . stop 0 1 6

 ==================================
 没见过的添加用户方式(添加redis用户,且不创建家目录)
 
 adduser --system --group --no-create-home redis
 
 ==================
 show slave status \G;  sql线程和io线程 出错的可能解决办法
 
 mysql>stop slave;

mysql>SET GLOBAL SQL_SLAVE_SKIP_COUNTER=1;

mysql>START SLAVE; 

======================
导出数据前需要在 主数据库上 

 flush tables with read locak;

 ===================
 
 mysql5.7的一些优化
关于MySQL 5.7的并行复制建立在组提交的基础上，所有在主库上能够完成 Prepared 的语句表示没有数据冲突，
就可以在 Slave 节点并行复制。

查看组
 show global variables like '%group_commit%';
 

 主库 
 set global binlog_group_commit_sync_delay=10;
 
 
 
 从库配置文件添加
 slave-parallel-type=LOGICAL_CLOCK
slave-parallel-workers=4

或者 在线添加
 stop slave;
 set global slave_parallel_type='LOGICAL_CLOCK';
  set global slave_parallel_workers=4;
  start slave;
   show variables like 'slave_parallel_%';
   
 从库配置文件添加
 在 MySQL 5.7 中，推荐将 master-info-repository 和 relay-log-info-repository 设置为 TABLE ，来减小这部分的开销。
 
 master-info-repository = table
relay-log-info-repository = table
relay-log-recovery = ON

 ================================================================
 将mysql设置为只读
mysql> flush tables with read lock;
mysql> set global read_only=1;

将MySQL从只读设置为读写状态的命令：
mysql> unlock tables;
mysql> set global read_only=0;

设置为只读
set global read_only=1;
 
 上锁
 flush tables with read lock;
 解锁
 unlock tables;
 
CREATE USER 'repl'@'%' IDENTIFIED BY '123456';
GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';
 flush privileges; 

CHANGE MASTER TO
MASTER_HOST='172.18.252.146',
MASTER_USER='slave',
MASTER_PASSWORD='111111',
MASTER_LOG_FILE='mysql-bin.000064',
MASTER_LOG_POS=175463;

 ===============================
 
 ubuntu 下第一次使用crontab若手滑没有选择vim编辑器,莫慌
 请输入select-editor  选择3
 
==============================
生成密钥命令
ssh-keygen -t rsa

=============================mysql性能測試
测试: 
**********测试CPU:
sysbench --test=cpu --cpu-max-prime=2000 run
*********测试线程：
sysbench  --test=threads --num-threads=500 --thread-yields=100 --thread-locks=4 run
测试IO：--num-threads 开启的线程     --file-total-size 总的文件大小
1，prepare阶段，生成需要的测试文件，完成后会在当前目录下生成很多小文件。
sysbench --test=fileio --num-threads=16 --file-total-size=2G --file-test-mode=rndrw prepare     
2，run阶段
sysbench --test=fileio --num-threads=20 --file-total-size=2G --file-test-mode=rndrw run
3，清理测试时生成的文件
sysbench --test=fileio --num-threads=20 --file-total-size=2G --file-test-mode=rndrw cleanup
**********测试内存：
sysbench --test=memory --memory-block-size=8k --memory-total-size=1G run
测试 mutex   
sysbench --test=mutex --num-threads=1000 --mutex-num=1000 --mutex-locks=100000 --mutex-loops=10000 run
 
 *********测试OLTP
 1，prepare阶段，生成需要的测试表
 sysbench --test=oltp --mysql-table-engine=innodb --mysql-host=127.0.0.1 --mysql-db=test666 --oltp-table-size=1000000 --mysql-user=root --mysql-password=123456 prepare
 2，run阶段
 sysbench --num-threads=16 --test=oltp --mysql-table-engine=innodb --mysql-host=127.0.0.1 --mysql-db=test666 --oltp-table-size=100000  --num-threads=4  --mysql-user=root --mysql-password=123456 run
 3，清理测试时生成的测试表
 sysbench --num-threads=16 --test=oltp --mysql-table-engine=innodb --mysql-host=127.0.0.1 --mysql-db=test666 --oltp-table-size=1000000  --mysql-user=root --mysql-password=123456 cleanup
 
 ===================
 查看binlog
 
 SHOW BINARY LOGS;
 
 -==================
 
 
 
 
 lock
 sysbench --test=mutex --mutex-num=5000000 --mutex-locks=100000 --mutex-loops=100000 --num-threads=8 --max-requests=5000000 run
 
 读内存
 sysbench --test=memory --memory-access-mode=rnd --memory-total-size=16G --memory-block-size=4096  -memory-oper=read  --num-threads=8 --max-requests=50000 run
 写内存
sysbench --test=memory --memory-access-mode=rnd --memory-total-size=16G --memory-block-size=4096 --memory-oper=write --num-threads=8 --max-requests=50000 run

io测试
sysbench --test=fileio --init-rng=on --file-num=10 --num-threads=4 --file-total-size=4G --max-requests=10000 --file-block-size=8192  --file-test-mode=rndrw run

OLTP事务性测试
sysbench --mysql-user=root --test=oltp --mysql-host=localhost --mysql-socket=/usr/local/mysql/mysql.sock   --oltp-test-mode=complex --mysql-table-engine=innodb --oltp-table-size=1000000 --mysql-db=test \
 --oltp-table-name=sb_test_1kw --num-threads=4 --max-requests=1000000 run


============================
cmake 重新编译 需要删除一下文件
rm ./cmake_install.cmake
rm -r ./CMakeFiles
rm ./Makefile
rm ./CMakeCache.txt

========================================
mysql导入.sql文件
方法一:
mysql> use databaseName;  
mysql> set names utf8;  
mysql> source /home/abc/abc.sql;
方法二：
mysql -u用户名 -p密码 数据库名 < 数据库名.sql
#mysql -uabc_f -p abc < abc.sql


 
 =========================================
mysqldup -uroot -p  --default-character-set=utf8 -P3306 --opt   --max_allowed_packet=1048576 --net_buffer_length=16384  --single-transaction -A   > /home/mysql`date +%Y%m%d%H%M%S`.sql

mysql加上以下三个参数导入速度将大大增加
-e 使用包括几个VALUES列表的多行INSERT语法; 
--max_allowed_packet=XXX 客户端/服务器之间通信的缓存区的最大大小; 
--net_buffer_length=XXX  TCP/IP和套接字通信缓冲区大小,创建长度达net_buffer_length的行

===================================== ==================查询数据库信息
线程
show status like 'Threads%';

连接
show variables like '%max_connections%';

服务器曾经最大的连接数
show global status like 'Max_used_connections';

使用什么引擎
 show engines;
 
 当前打开的连接的数量
 show global status like 'Threads_connected' ;
 ======================================检查端口是否开启
 nc -zv localhost 80
 
 ====================================查看当前服务器的ip  地址详细信息
 curl ipinfo.io
 
 ====================================pv 命令 炫酷 电影打字效果
 echo "Tecmint [dot] com is the world's best website for qualitative Linux article" | pv -qL 1
 
 
 
 ====================================mysqldump备份出错
 
 
mysql_upgrade -u root -p --force

===================================mysql主从出错
Last_IO_Error: error connecting to master 'repl@172.18.252.146:3306' - retry

mysql重新建立账号,从库分别建立连接
======================================= ubuntu报错Syntax error: "(" unexpected解决方法

如果脚本语法没错的话,请看下面
代码对于标准bash而言没有错，因为Ubuntu为了加快开机速度，用dash代替了传统的bash，是dash在捣鬼。
解决方法是 取消dash
sudo dpkg-reconfigure dash
在选择项中选No，即可。

 ====================================mysql 查看数据库所有用户权限
 SELECT DISTINCT CONCAT('User: ''',user,'''@''',host,''';') AS query FROM mysql.user;

 
 =======================================授予用户所有权限
 GRANT ALL ON d3307.* TO user@’192.168.52.%’ IDENTIFIED BY ‘password’ WITH GRANT OPTION ;
 
 
GRANT ALL PRIVILEGES ON *.* TO shop@"%" IDENTIFIED BY "shop123"; 
FLUSH PRIVILEGES;
 
 GRANT ALL PRIVILEGES ON *.* TO zentao2@"%" IDENTIFIED BY "123456"; 
FLUSH PRIVILEGES;
 
 
 ===============================================两台主机之间用户 组文件错乱.apt报错 
unknown group 'ssl-cert' in statoverride file
 这个文件 删除相应的组或用户
 vim /var/lib/dpkg/statoverride

 
 --------------------------编译安装cmake
 wget https://cmake.org/files/v3.10/cmake-3.10.0.tar.gz
 tar xf cmake-3.10.0.tar.gz 
 ./bootstrap
make -j8
make install
=============================命令行登录mysql报Segmentation fault错误是怎么回事

进入源码包 修改这个文件 cmd-line-utils/libedit/terminal.c 
把terminal_set方法中的 char buf[TC_BUFSIZE]; 这一行注释,再把 area = buf;改为 area = NULL;
更改后如下 然后重新编译
protected int 
terminal_set(EditLine *el, const char *term) 
{ 
int i; 
/*char buf[TC_BUFSIZE];*/ 
char *area; 
const struct termcapstr *t; 
sigset_t oset, nset; 
int lins, cols; 
--phpfensi.com 
(void) sigemptyset(&nset); 
(void) sigaddset(&nset, SIGWINCH); 
(void) sigprocmask(SIG_BLOCK, &nset, &oset); 

area = NULL; 

root   @AS55sadd55SFkn
zyd1  FSd123@sfDVV5@61DV
shop  knsS@F616@3SDFdjf

==================================================找出僵尸进程
ps -A -o stat,ppid,pid,cmd | grep -e '^[Zz]'

==================================================按要求找出一些进程
ps -A -o stat,ppid,pid,cmd 

=======================================================locate 和 	slocate
locate命令和slocate命令都用来查找文件或目录。 locate命令其实是find -name的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库/var/lib/locatedb，这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库。
======================================================查看nginx并发命令

 netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a,S[a]}'

 ===============================================查看nginx并发脚本
 while : ;do  netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a,S[a]}'  && echo >> /tmp/ceshi.txt ; sleep 1; done; 
 
grep ESTABLISHED /tmp/ceshi.txt |awk '{print $2}' |sort  -n |tail -1

=================================================脚本放在后台运行,且退出远端控制台脚本继续执行
nohup sh ./yace.sh &

============================================脚本在后台运行,但退出远端控制台脚本也会退出
sh ./yace.sh &
===============================================命令行翻译

 git clone https://github.com/soimort/translate-shell && cd translate-shell
 ll
 make && make install 
 trans english
 history
==============================================php参数优化 ,应对高并发
pm.max_children ：静态方式下开启的php-fpm进程数量，在动态方式下他限定php-fpm的最大进程数（这里要注意pm.max_spare_servers的值只能小于等于pm.max_children）
pm.start_servers：动态方式下的起始php-fpm进程数量。
pm.min_spare_servers：动态方式空闲状态下的最小php-fpm进程数量。
pm.max_spare_servers：动态方式空闲状态下的最大php-fpm进程数量。

举例
pm.max_children = 1000
pm.start_servers = 600
pm.min_spare_servers = 200
pm.max_spare_servers = 1000

设置公式
pm.start_servers =  pm.min_spare_servers +(pm.max_spare_servers -  pm.min_spare_servers ) / 2

============================================================查看php相关参数需要往站点目录添加的代码
<?php phpinfo(); ?>
或者
<?php
    echo phpinfo();

取任意不为index.php的文件名字

==================================================mysql备份压缩及还原 
备份mysqldump --single-transaction -hlocalhost  --all-databases --triggers --routines --events -P3306 -uroot -pxxxx |gzip >test.tar.gz

还原gunzip < test.tar.gz |mysql -hlocalhost -uroot -pxxxxx

==================================================================centos和ubuntu 编译安装zabbix会出现的问题及解决

在Ubuntu系统中，安装zabbix进行configure时会遇到以下几个依赖性问题。
1 configure: error: MySQL library not found
the problem is not installed mysql-devel
#apt-get install libghc6-hsql-mysql-dev (ubuntu )
2 configure: error: Jabber library not found
the problem is not installed jabber lib
#apt-get install libphp-jabber
#apt-get install libnet-jabber-loudmouth-perl
#apt-get install jabber-dev
#apt-get install libiksemel-dev (* this packet important)
3 configure: error: Not found curl Library
the problem is not installed libcurl4-openssl-dev
#apt-get install libcurl4-openssl-dev
4 configure: error : Not found NET-SNMP library
#apt-get install libsnmp-dev
#apt-get install snmp  

在CentOS系统中，安装zabbix进行configure时会遇到以下4个主要问题
1 configure: error: MySQL library not found
the problem is not installed mysql-devel
#yum install mysql-devel
2 configure: error: Jabber library not found
the problem is not installed jabber lib
#wget http://iksemel.googlecode.com/files/iksemel-1.4.tar.gz
下载完成后解压、配置、安装：
tar zxvf iksemel-1.4.tar.gz
cd iksemel-1.4
configure
make
make install
之后对zabbix进行configure还是会遇到这个问题，那么将jabber目录指定即可：#./configure --enable-server --enable-agent --with-mysql --with-net-snmp --with-jabber=/usr/local/ --with-libcurl
3 configure: error: Not found curl Library
#yum install curl-devel (此项未经测试)
4 configure: error : Not found NET-SNMP library
yum install net-snmp-devel


=================================================================查看磁盘io负载
iostat -d -x -k 1

==================================================================java配置
#删除之前所有的java包
#先查找
rpm -qa|grep java
#删除(示例)
yum -y remove tzdata-java-2017c-1.el7.noarch
#创建java包存放目录
mkdir /usr/java
cd  /usr/java
#官网下载java的 gz包rz上传然后解压
tar -zxvf jdk-9.0.1_linux-x64_bin.tar.gz
删除掉这个包
rm -rf   jdk-9.0.1_linux-x64_bin.tar.gz
#编辑环境变量(文件最后放入,注意文件路径)
vim /etc/profile (放入)
#set java environment
JAVA_HOME=/usr/java/jdk
CLASSPATH=$JAVA_HOME/lib/
PATH=$PATH:$JAVA_HOME/bin
export PATH JAVA_HOME CLASSPATH
#生效
source /etc/profile
===========================================================命令行获取mysql信息
 mysql -uroot  -p -e "show processlist"
 
===========================================================	了解一个命令或程序在执行前会做什么  maybe
#Centos安装pip
yum install epel-release -y
yum install python-pip -y
>>>>>>在 Fedora 上：sudo dnf install epel-release
sudo dnf install python-pip
>>>>>>在 Debian，Ubuntu，Linux Mint 上：sudo apt-get install python-pip
>>>>>>在 SUSE、 openSUSE 上：sudo zypper install python-pip
#安装maype
pip install maybe

#示范 
[root@pa1 ~]#maybe rm -rf /tmp/jna--1712433994
maybe has prevented rm -rf /tmp/jna--1712433994 from performing 1 file system operations:

  delete /tmp/jna--1712433994

Do you want to rerun rm -rf /tmp/jna--1712433994 and permit these operations? [y/N] n

============================================================安装locat
#安装 
 yum install mlocate -y
#初始化(可能要一会,给他点时间)
updatedb


在卸载gitlab然后再次安装执行sudo gitlab-ctl reconfigure的时候往往会出现：ruby_block[supervise_redis_sleep] action run，会一直卡无法往下进行！

解决方案：

1、按住CTRL+C强制结束；

2、运行：sudo systemctl restart gitlab-runsvdir；

3、再次执行：sudo gitlab-ctl reconfigure


============================================================glibc-2.14编译出错
#configure: error: you must configure in a separate build directory
#这个只要回到上一级目录执行 configure 就可以了：

cd ../
./glibc-2.14/configure ```````继续编译


============================================================git初始化仓库时fatal: remote origin already exists.

因为此目录已经初始化过了,删掉就可以重新初始化了
 git remote rm origin
============================================================tab补全
可能原因有两个：
1.查看使用的shell
echo $SHELL
如果不是/bin/shell
查看  ls -l /bin/sh
如果该软连接的不是/bin/shell
执行 ln -sf  /bin/bash /bin/sh
2.查看当前用户主目录下.bashrc
比如： vi /root/.bashrc
按shift+g  跳到最后一行   
看一下语句是否被注释：
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi
如果注释了，则去掉注释
保存退出后  执行  source /root/.bashrc即可
=====================================================================finger 查找并显示用户登录信息
#需要yum安装(centos)
yum install -y finger

#示范

[root@pa1 ~]#finger www
Login: www            			Name: 
Directory: /home/www                	Shell: /sbin/nologin
Never logged in.
No mail.
No Plan.

#查看
[root@pa1 ~]#grep www /etc/passwd
www:x:1001:1001::/home/www:/sbin/nologin

======================================================================= iptables  安全(请按需求来!!!)
 iptables -A INPUT -s  172.18.252.0/24  -p tcp --dport 80 -j ACCEPT
 iptables -A INPUT -p TCP --dport  80  -j REJECT
  /etc/init.d/iptables save
  
=======================================================================yum安装错误
There are unfinished transactions remaining. You might consider running yum-complete-transaction first to finish them
使用Yum安装东西时，如果有强制退出过yum或yum异常结束，再下次使用yum命令时会提示：

#安装 yum-complete-transaction
yum -y install yum-utils
#清除yum缓存
yum clean all
#执行清理未完成事务
yum-complete-transaction --cleanup-only

======================================================================git创建一个新的仓库准确步骤
正确步骤：
1. git init //初始化仓库

2. git add .(文件name) //添加文件到本地仓库

3. git commit -m "first commit" //添加文件描述信息

4. git remote add origin + 远程仓库地址 //链接远程仓库，创建主分支

5. git pull origin master // 把本地仓库的变化连接到远程仓库主分支

6. git push -u origin master //把本地仓库的文件推送到远程仓库
 
OK

 git remote rm origin
=====================================================================不锁表mysql主从同步

本来的步骤
1. 主库锁库
FLUSH TABLES WITH READ LOCK;
2.线上数据库数据提取
mysqldump -uroot -p  --default-character-set=utf8 -P3306 --opt     --single-transaction  zyd1   > /home/666.sql
3.开始迁移数据到从库(scp传送过去)
#scp /home/  root@172.18.252.145:/home/mysqlbak/
scp /home/  root@172.18.252.147:/root/
4.新库删除之前的数据(看情况,有时候直接覆盖掉就可以)
mysql -uroot -p
drop database zyd1;
create database zyd1;
5.从库停掉主从连接
登录到数据库;
stop slave;
reset slave;
6.从库开始导入主库传送过来的文件
mysql -uroot -p zyd1 < *.sql 
7.主库查看现在的binlog文件和位置(找出File和Position)
show master status; 
8.从库开始主从账号连接(灵活使用~~~~~~)

CHANGE MASTER TO
MASTER_HOST='172.18.252.146',
MASTER_USER='slave',
MASTER_PASSWORD='111111',
MASTER_LOG_FILE='mysql-bin.000077',
MASTER_LOG_POS=807343661;
9.开启从库slave
start slave;
10. 查看从库主从状态
show slave status \G
11.主库解锁
UNLOCK TABLES;

================后来新玩法*********不锁库手动主从连接

少了第1步,11步,和第6步

前提:认识几个必要的参数
--skip-lock-tables 不锁表
--master-data=2 在导出的时候同时生成binlog文件名和位置在导出的文件开头。这个很重要。因此第4步也不需要执行了，binlog的文件和位置可以从这里拿到。
--single-transaction 通过将导出操作封装在一个事务内来使得导出的数据是一个一致性快照

用这些参数~~~~~
mysqldump  -uroot -p --skip-lock-tables --single-transaction --flush-logs --hex-blob --master-data=2   dataname   > /home/666.sql

最后把主从连接配置那里binlog文件和位置替换成导出的文件开头找到的那个带有注释的file和position就好了。



1.线上数据库数据提取
mysqldump -uroot -p  --default-character-set=utf8 -P3306 --opt     --single-transaction  zyd1   > /home/666.sql
2.开始迁移数据到从库(scp传送过去)
#scp /home/  root@172.18.252.145:/home/mysqlbak/
scp /home/  root@172.18.252.147:/root/
3.新库删除之前的数据(看情况,有时候直接覆盖掉就可以)
mysql -uroot -p
drop database zyd1;
create database zyd1;
4.从库停掉主从连接
登录到数据库;
stop slave;
reset slave;
5.从库开始导入主库传送过来的文件
mysql -uroot -p zyd1 < *.sql 
6.找出file和position
head -30 导出文件

7.从库开始主从账号连接(灵活使用~~~~~~)

CHANGE MASTER TO
MASTER_HOST='172.18.252.146',
MASTER_USER='slave',
MASTER_PASSWORD='111111',
MASTER_LOG_FILE='mysql-bin.000081',
MASTER_LOG_POS=154;
8.开启从库slave
start slave;
9. 查看从库主从状态
show slave status \G

================================================================winsock windows问题

1.我们在开始菜单栏中的附件中找到“命令提示符”，然后点击右键选择“以管理员身份运行”。
2.在命令行中我们输入：“NETSH WINSOCK RESET CATALOG”。
3.敲击回车之后，会出现如图示界面。提示你重置winsock目录成功。需重启电脑完成重置。



==============================================================shell脚本比较大小
整数比较
-eq     等于,如:if ["$a" -eq "$b" ]
-ne     不等于,如:if ["$a" -ne "$b" ]
-gt     大于,如:if ["$a" -gt "$b" ]
-ge    大于等于,如:if ["$a" -ge "$b" ]
-lt      小于,如:if ["$a" -lt "$b" ]
-le      小于等于,如:if ["$a" -le "$b" ]
<  小于(需要双括号),如:(("$a" < "$b"))
<=  小于等于(需要双括号),如:(("$a" <= "$b"))
>  大于(需要双括号),如:(("$a" > "$b"))
>=  大于等于(需要双括号),如:(("$a" >= "$b"))

===============================================================centos7关闭防火墙
#查看当前防火墙状态
iptables -L
 firewall-cmd --state
 #清空iptables规则
  iptables -F
 #关闭iptables
 systemctl stop firewalld.service
 systemctl disable firewalld.service 
 #关闭sexlinux
 setenforce 0

 ===============================================================开启某项服务,iPv4没有开启成功
 WARNING: IPv4 forwarding is disabled. Networking will not work.
 #解决
  vi /etc/sysctl.conf
添加如下代码：
    net.ipv4.ip_forward=1
	重启network服务
# systemctl restart network

=================================================================ubuntu关闭防火墙
1、关闭ubuntu的防火墙

 ufw disable

2开启防火墙
ufw enable

3卸载了iptables
apt-get remove iptables

4、关闭ubuntu中的防火墙的其余命令
    iptables -P INPUT ACCEPT
    iptables -P FORWARD ACCEPT
    iptables -P OUTPUT ACCEPT
    iptables -F

================================================================ubuntu重启网络
/etc/init.d/network restart

================================================================use `--no-check-certificate'.
然后砸门就添加上这个参数

===================================================================centos6邮件服务器

当然首先要在163邮箱设置下
这里的密码指的是安全码


先vim /etc/mail.rc

set from=18629359835@163.com smtp=smtp.163.com
set smtp-auth-user=18629359835 smtp-auth-password=swl521521521 smtp-auth=login


===================================================================vmwave密钥 
5A02H-AU243-TZJ49-GTC7K-3C61N

===================================================================vmware启动失败
Win 10 vmware12 无法打开内核设备“\\.\Global\vmx86”: 系统找不到指定的文件。你想要在安装 VMware Workstation 前重启吗?

打开vmware12后出现内核错误，查了一下，在自己的win10下面应该是如下的解决方法：
1. 找到c:\windows\system32\cmd.exe 文件，右击选择以管理员身份运行
2. 输入以下的命令并回车
net start vmci
net start vmx86
net start VMnetuserif
3. 改变vmware几种服务的启动方式为：
sc config vmci start= auto
sc config vmx86 start= auto
sc config VMnetuserif start= auto
这一点儿与win7下面的有所不同，特此提醒，win7下面的是：
sc config vmci=auto
sc config vmx86=auto
sc config VMnetuserif=auto


======================================================================epol优化

CentOS/RHEL 5 ：
rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-5.noarch.rpm


CentOS/RHEL 6 ：
rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm


CentOS/RHEL 7 ：
rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm


======================================================================打包war包

jar -cvf xxxx.war ./*

=================================================================================vmware 连接xshell 较慢

现在和大家分享一下，因为在登录时，需要反向解析dns，因此，修改linux配置文件，
vi   /etc/ssh/sshd_config 

将其注释去掉，并将yes改为no，即可解决。

vi /etc/ssh/sshd_config
将#UseDNS yes 改为：
UseDNS no

然后重启sshd服务，service sshd restart

=============================================================================端口转发
配置端口转发将80端口请求转发至8080
 
iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080


service iptables save          # 如果防火墙重新启动，该命令就会失效，可以使用下面的命令把该规则保存到iptables里面


=========================================================================MySQL事件计划

首先查看计划事件是否开启:

mysql> show variables like '%scheduler%';
+-----------------+-------+
| Variable_name   | Value |
+-----------------+-------+
| event_scheduler | OFF   | 
+-----------------+-------+
1 row in set (0.00 sec)

若返回Value值是ON，则表示已经开启，若返回时OFF值表示没有开启。此时需要到mysql配置文件my.cnf新增一项，在mysqld后面添加event_scheduler = on（或是event_scheduler = 1），保存后重启mysql服务器即可。
 
 
临时开启 
 
SET GLOBAL event_scheduler = ON;
 
SET @@global.event_scheduler =ON;
 
SET GLOBAL event_scheduler = 1;         #0表示关闭
 
SET @@global.event_scheduler = 1;


永久开启

在配置文件 my.cnf [mysqld]模块下,需要重启数据库

event_scheduler=ON   # 或者=1


======================================================================vmware 网卡

Device eth0 does not seem to be present,delaying initialization

##
rm -rf /etc/udev/rules.d/70-persistent-net.rules
reboot
service network restart


======================================================================查看一个进程运行了多久

ps -o etime -p 16430  #这个进程总共运行时间 etime表示运行的时间
ps -o lstart -p 16430    #这个进程的启动时间,lstart 表示启动的时间

ps -eo pid,lstart,etime,cmd | grep mysql   #这个是总和


root@pa2:~#  ps -eo pid,lstart,etime,cmd | grep mysql
 6771 Tue Apr  3 10:40:05 2018       31:40 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/usr/local/mysql/var --pid-file=/usr/local/mysql/var/pa2.pid
 7298 Tue Apr  3 10:40:05 2018       31:40 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/usr/local/mysql/var --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/usr/local/mysql/var/pa2.err --open-files-limit=65535 --pid-file=/usr/local/mysql/var/pa2.pid --socket=/tmp/mysql.sock --port=3306
 8686 Tue Apr  3 11:11:45 2018       00:00 grep --color=auto mysql

=====================================================================gitlib修改域名

vim /etc/gitlab/gitlab.rb

external_url '你的网址'

sudo gitlab-ctl reconfigure


===================================================================切换普通用户命令行出问题 -bash-4.1$

解决方案：
1.在新建用户的～目录下新建或者更改.bash_profile；这个过程中可能需要root用户来新建或者修改
2.在.bash_profile中添加以下内容：export PS1='[\u@\h \W]\$'
3.在新建用户下运行一下命令：source ~/.bash_profile

===========================================================禁止使用rm 
alias rm ='echo do not use rm command'
echo "alias rm='echo donot use rm command'" >> /etc/profile
source /etc/profile

Centos的话

alias rm ='echo do not use rm command'
echo "alias rm='echo donot use rm command'" >> /etc/profile
vim /root/.bashrc (注释掉rm那一行)

source /etc/profile


===========================================================阿里云数据盘挂载

配置步骤：云服务器ECS---文件存储NAS---选择文件系统ID---点击需要挂载存储的ID进行配置---获取到挂载地址---web主机进行mount挂载

 mount -t nfs4 0afa6493fb-rhv46.cn-hangzhou.nas.aliyuncs.com:/ /alidata/www/wordpress/wp-content/uploads/


https://blog.csdn.net/liyubao5311/article/details/45536941



==============================================================mysqldump错误
-- Warning: Skipping the data of table mysql.event. Specify the --events option explicitly.


加上 --events参数

mysqldump: Got error: 1449: The user specified as a definer ('tatata'@'%') does not exist when using LOCK TABLES

解决:加上-x参数


经以上排查，确认应该是schedule 数据库在使用状态，所以导出数据时报错，在mysqldump时使用 -x 选项解决此问题。

--lock-all-tables，-x

在开始导出之前，提交请求锁定所有数据库中的所有表，以保证数据的一致性。这是一个全局读锁，并且自动关闭 --single-transaction 和 --lock-tables 选项。


========================================================同步阿里云时间


ntpdate ntp1.aliyun.com



=========================================================慢查询及没有索引的查询mysql设置


## 临时 
#开启
set global slow_query_log = ON;
#设置超时时间
set GLOBAL long_query_time = 1;



## 永久开启

vim /etc/my.cnf

slow_query_log = ON
long_query_time = 1

log-queries-not-using-indexes #没有索引的查询也将会被记录


#关于慢查询的参数slow_query_log_file ，它指定慢查询日志文件的存放路径，系统默认会给一个缺省的文件host_name-slow.log（如果没有指定参数slow_query_log_file的话）

#慢查询存放位置及是否开启查询

show variables  like '%slow_query_log%';

#检查没有索引的查询是不是正在被记录

show variables like 'log_queries_not_using_indexes';


=====================================================================nginx状态

location /nginx_status {
    # Turn on nginx stats
    stub_status on;
    # I do not need logs for stats
    access_log   off;
    # Security: Only allow access from 192.168.1.100 IP #
    #allow 192.168.1.100;
    # Send rest of the world to /dev/null #
    #deny all;
}


=================================================================定时任务 at 安装
## 安葬
	yum -y install at 
## 开启
service atd start

## 示范 

[root@10-254-182-240 ~]# at -t "201805041820"
at> \rm -f 888
at> <EOT>
job 2 at Fri May  4 18:20:00 2018

## 其他的写法

at 5pm+3 days

at 17:20 tomorrow
 
## 参考链接

http://www.cnblogs.com/peida/archive/2013/01/05/2846152.html

================================================================= 系统最大文件打开数
#当前最大打开数
ulimit -n 

#系统支持的最大打开数

cat /proc/sys/fs/file-max

=================================================================  自定义登录欢迎信息
vim /etc/motd


=============================================Command "python setup.py egg_info" failed with error code 1 in /tmp/pip-install-iTsq29/maybe/



python -m pip install --upgrade --force pip  

pip install setuptools==33.1.1

================================================================= vim全局替换

:%s/vivian/sky/g

=================================================================== mysql主从，从库延迟插入

CHANGE MASTER TO MASTER_DELAY = 10;



====================================================================== 看外网ip

curl ip.gs
curl https://ip.cn
curl ifconfig.me
================================================== 查找哪个命令属于哪个软件包

[root@pa2 ~]# which netstat 
/usr/bin/netstat
[root@pa2 ~]# rpm -qf  "/usr/bin/netstat"
net-tools-2.0-0.22.20131004git.el7.x86_64

================================================增加swap分区
## 增加的swap为2G
dd if=/dev/zero of=/home/swap bs=1024 count=2048000

## 格式化/home/swap文件
mkswap /home/swap

## swapon命令把/home/swap文件分区划成swap分区
swapon /home/swap

## 添加开机自动挂载

echo " /home/swap    swap     swap    default     0 0"  >> /etc/fstab 

## 重启
reboot
================================================= ps 新用法
列出类似程序树的程序显示
ps -axjf

找出与 cron 与 syslog 这两个服务有关的 PID 号码
ps aux | egrep '(cron|syslog)'

======================================================curl网站取状态码

curl -I -m 5 -s -w "%{http_code}\n" -o /dev/null  www.baidu.com

=========================================================shell dash 错误

 unexpected operator

因为Ubuntu默认的sh是连接到dash的,又因为dash跟bash的不兼容所以出错了.执行时可以把sh换成bash文件名.sh来执行.成功.dash是什么东西,查了一下,应该也是一种shell,貌似用户对它的诟病颇多。
修改sh默认连接到bash的一种方法：
sudo dpkg-reconfigure dash
选择no 即可！





========================================================================判断是否为root用户

[[ $EUID -ne 0 ]] && echo -e "[${red}Error${plain}] This script must be run as root!" && exit 




=======================================================================top导出
top -b  -n 3  > /tmp/top.txt

==============================================================postgresql命令行操作
1)
echo "sql语句" | psql -h 主机 -p 端口 -U 用户名  



２)
psql -c "sql语句"　-h 主机 -p 端口 -U 用户名  


3)
psql -f 文件名.sql -h 主机 -p 端口 -U 用户名  

echo "select tags,board,companycode,updatetime from 公众公司 where board='A股' order by updatetime desc limit 10;" |psql -h 127.0.0.1  -p 5432 -U postgres  -d  memect
=========================================================5.7.22 mysql密码过于简单报警解决


 ## 5.7.22 新版mysql密码过于简单报警

### 临时
set global validate_password_policy=0;

set global validate_password_length=4;

### 永久
那就写在配置文件里面
validate_password_policy=0
validate_password_length=4


=======================================================Linux查看inode哪个目录占用最多
find / -xdev -printf '%h\n' | sort | uniq -c | sort -k 1 -n |tail


=======================================================加快make 速度
#四核机器
make -j8   

======================================================== ubuntu添加源出错，
The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 40976EAF437D05B5 NO_PUBKEY 3B4FE6ACC0B21F32



gpg --keyserver keyserver.ubuntu.com --recv 3B4FE6ACC0B21F32^C
gpg --export --armor 3B4FE6ACC0B21F32  |  apt-key add -



docker export 7691a814370e > ubuntu.tar

cat ubuntu.tar | sudo docker import - test/ubuntu:v1.0




==============================软硬链接区别

1. 软链接可以跨文件系统，比如你要链接一个windows共享文件夹下的某文件至linux里，软链接可以，而硬链接不行，硬的只能在一个分区里
2. 硬链接的文件 inode的值一样，相当于复制了一个属性什么斗一样的文件
3. 软链接，是产生一个很小的具有新inode的文件，有点类似win中的“快捷方式”，它存放的是指向源文件路径的指针，是个全新的文件 
4. 删除一个硬链接文件，源文件不受影响，删除硬链接的源文件，该文件的硬连接也不受影响，他还是实质存在的
5. 删除一个软连接，源文件不受影响，删除软链接的源文件，会导致该软链接指向的地方是一个空壳，使用会受影响
6. 软链接可以链接目录，硬的则不行




===================================ppt和pdf格式转换


soffice  --headless --convert-to pdf  *****.pptx --outdir /dir

unoconv -f pdf *****.pptx



==============================显示正在运行的服务
service --status-all | grep running



===============================================error：failed to push some refs to  git的pull出错
这个问题是因为远程库与本地库不一致造成的，那么我们把远程库同步到本地库就可以了
git pull --rebase origin master

==================================================postgresql 删除库提示有连接？
select pg_terminate_backend(pid) from  (select pid from pg_stat_activity where datname = 'dbname'  ) a;


=================================================安装 oh my zsh
apt-get -y install zsh
sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
卸载： uninstall_oh_my_zsh

==============================================git忽略特殊文件和文件夹

在根目录下创建 文件 .gitignore 里面写入声明，哪些文件不上传

## 示范

# Python:
*.py[cod]
*.so
*.egg
*.egg-info
dist
build

# My configurations:
db.ini
deploy_key_rsa

============================================================ ssh 保持长连接

ssh 长时间不用断开问题

ssh服务器的配置文件/etc/ssh/sshd_config里面

ClientAliveInterval指定了服务器端向客户端请求消息的时间间隔, 默认是0，不发送。而ClientAliveInterval 60表示每分钟发送一次，然后客户端响应，这样就保持长连接了

永久解决

    #服务端
    vim /etc/ssh/sshd_config
    
    ClientAliveInterval 60
    
    service sshd restart
    

临时解决

    ssh -o ServerAliveInterval=60 uersname@ip -p port



================================================



dbms.connectors.default_listen_address=0.0.0.0
dbms.connector.bolt.address=0.0.0.0:7687
dbms.security.auth_enabled=false








=============================neo4j安装部署部分

wget https://neo4j.com/artifact.php?name=neo4j-community-3.4.7-unix.tar.gz
解压neo4j包
tar xf artifact.php?name=neo4j-community-3.4.7-unix.tar.gz

修改配置文件（进入到目录）

cd conf
vim neo4j.conf
#添加这三个
dbms.connectors.default_listen_address=0.0.0.0  #打开对外访问
dbms.connector.bolt.address=0.0.0.0:7687  
dbms.security.auth_enabled=false    #不使用密码访问

启动neo4j
./bin/neo4j start


================================python写入数据部分


source 引用python依赖

直接运行python脚本写数据

python visualize_company.py 

注意：visualize_company.py 和主要客户供应商_shortname.json这两个文件需要在同一个目录，不然就需要更改代码，在代码visualize_company.py的倒数第二行

数据写入缓慢，大约需要一个小时，在2c8G内存机器上




 pg_dump -U postgres -h localhost  -f back.sql  dbname

 psql -d newdatabase -U postgres -f back.sql


导入恢复数据库(sql文件是pg_dump导出的文件就行，可以是整个数据库，也可以只是单个表，也可以只是结构等)：

psql -h localhost -U postgres -d databasename < /tmp/databasename.bak.yyyymmdd.sql


导出单个表
pg_dump -h localhost -U postgres -t language  -a dbname  > language_data.sql

导入单个表
psql -h localhost -p 5433 -U postgres -d dbname  < language_data.sql



CREATE TABLE language (userid character(32), language text);

INSERT INTO language
        (userid, language)
        VALUES
        (bd95786295a089105d6611e8b6600050, zh)
        ON CONFLICT (userid) DO UPDATE
        SET language = EXCLUDED.language


        ALTER TABLE language 
ADD PRIMARY KEY (userid); 
 
 ## 梯子
 地址：http://192.168.0.1/cgi-bin/luci/;stok=e211e0b1899678270913660d8ccb68c9/admin/services/shadowsocks
 账号：root 
 密码：2015mem11ect










## 阿里云子账号
 https://enterprise.console.aliyun.com/#/resource/group/rg-acfmyrc7cbyfecy/resources?ownerId=&_k=qffvct

https://signin.aliyun.com/login.htm


lijinghua@memect.onaliyun.com


===========================================快提，飞梭相关
通用账号

vipuser01 memect6589
vipuser02 memect3513
vipuser03 memect7141
vipuser04 memect7953
vipuser05 memect8325

## 快提地址
ssh lijinghua@47.95.145.126 -p 12021
sudo密码：Swl19960706

## 飞梭地址
ssh lijinghua@101.200.162.35 -p 12021

sudo密码：Swl19960706


## wordpress地址
ssh lijinghua@101.201.38.27  -p 12021
sudo密码：lijinghua


#白驹
ssh lijinghua@39.107.236.194

密码：lijinghua

## 梯子，美国

104.238.132.212
j,L1nP7!#9ggrAcL


## 扑天雕项目所在地址
192.168.0.42
用户名  lijinghua 密码lijinghua    有sudo权限


## 测试机器

47.93.8.183

ssh lijinghua@47.93.8.183 -p 12021

密码： Swl19960706 


## 跳板机
ssh -p 22222 maxinlei@xajs2.irs01.com
密码：LGENj5LO




## 文因内部人员管理联动quip 账号密码

http://192.168.0.42:6788/admin/

账号 memect 
密码 wenyin100years



##  vpn 股转3机器
47.92.220.19
n11q@d1v
root

# apikey

28163f3d102c8ce0adb7f03f4af39257


# 三星账号密码
admin
sec00000

# wifi
https://192.168.0.42:8443/manage/site/default/settings/wlans/5a6e915c9c4ee302197f9c06


liukun
20180129Dog！


# neeq3
47.92.220.19
root
n11q@d1v##  apt安装失败提示apt-get -f install，解决办法？

```
 apt-get --fix-broken install
```

## 显示docker版本信息
	docker version
## 显示 Docker 系统信息，包括镜像和容器数
	docker info
## 搜索镜像
	docker search <image> # 在docker index中搜索image
## 下载镜像
	docker pull <image>  # 从docker registry server 中下拉image
## 查看镜像 
    docker images： # 列出images
    docker images -a # 列出所有的images（包含历史）
    docker rmi  <image ID>： # 删除一个或多个image
## 查看当前所有正在运行的container
    docker ps 
## 查看最近一次启动的容器
    docker ps -l 
## 列出所有的container（包含历史，即运行过的container）
    docker ps -a 
## 列出最近一次运行的container ID
    docker ps -q 
## 查看容器状态
	docker stats
## 查看容器状态快照
	docker stats --no-stream
## 查看docker实例运行日志，确保正常运行
	docker logs $CONTAINER_ID
## 查看image或container的底层信息
	docker inspect $CONTAINER_ID         #这个可以看到容器的挂载目录以及网络状况，很实用
## 进入到容器
    docker exec  -ti  容器名 /bin/bash             解释>>>>>>          -t 在容器里生产一个伪终端       -i 对容器内的标准输入 (STDIN) 进行交互
    docker exec -ti my_phpfpm /bin/bash
## 使用nsenter(注意看格式,只需要变化容器名字)
	PID=`docker inspect --format "{{ .State.Pid }}" my_nginx`
	nsenter --target $PID --mount --uts --ipc --net --pid
## docker attach是Docker自带的命令
## 通过docker attach进入
	docker attach  容器ID
## 从本地移除一个或多个指定的容器
	docker rm  container ID
## 从本地移除一个或多个指定的镜像
	docker rmi   镜像名
## 导出docker镜像至本地
	docker save  images > /opt/images.tar.gz
## 导入本地镜像到docker镜像库
	docker load < /opt/nginx.tar.gz
## 极端方式停止容器(风险大,不推荐)
### 先列出所有容器ID
```
docker ps -a -q
```


### 批量杀死
```
docker kill $(docker ps -a -q)
```


## 删除正在运行的容器
```
docker rm -f  容器名(ID)   #参数 -f 在很多地方都是强制性质

```

## 容器退出时就能够自动清理容器内部的文件系统
```
docker --rm
```
显然，--rm选项不能与-d同时使用，即只能自动清理foreground容器，不能自动清理detached容器
注意，--rm选项也会清理容器的匿名data volumes。
所以，执行docker run命令带--rm命令选项，等价于在容器退出后，执行docker rm -v。

## docker服务重启时容器自动重启

```
--restart=always
```



​	
​	
​	
​	
​	
​	
​	
​	
# 创建一个Dockerfile文件

创建一个有意义的目录

```
mkdir -p  /dockerfile/nginx
cd /dockerfile/nginx 
```



# create Dockerfile  file 

(注意首字母大写)

```
touch Dockerfile
```



# 编辑 Dockerfile

```
vim Dockerfile
#来源 ubuntu系统(我用的是ubuntu)
FROM ubuntu
#维护者信息
MAINTAINER lijinghua woshilijinghua@gmail.com
#先更新源
RUN apt-get update
#下载nginx
RUN apt-get install -y nginx 
#下载vim(日后好编辑)
RUN apt-get install -y  vim
#添加本地文件(当然,已经提前写好的,这是我站点子配置文件)
ADD xiaofupai.conf /etc/nginx/sites-enabled/xiaofupai.conf
ADD toupiao.conf  /etc/nginx/sites-enabled/toupiao.conf
#卷的挂载
VOLUME /www 
#给个端口
EXPOSE 80
#
RUN echo "daemon off;" >> /etc/nginx/nginx.conf
#
CMD ["nginx"]
```



## 重头戏来了
```
docker build -t mynginx:v2 .
```



mynginx 代表build完之后的镜像名字

V2 版本号


## Dockerfile简介
Dockerfile是为快速构建docker image而设计的，当你使用dockerbuild 命令的时候，docker 会读取当前目录下的命名为Dockerfile(首字母大写)的纯文本文件并执行里面的指令构建出一个docker image。
Dockerfile 由一行行命令语句组成，并且支持以#开头的注释行。指令是不区分大小写的，但是通常我们都大写(规矩你懂得,当然你也可以不遵守,谁让你倔呢)

## Dockerfile的组成因素
基础镜像信息
维护者信息
镜像操作指令
容器启动时执行指令
## 介绍Dockerfile里面的部分指令用途
 FROM                  ------------     指定基础镜像
 MAINTAINER   ------------     指定维护者信息
 RUN                     ------------     RUN后面加上命令
 ADD                     ------------     COPY文件,会自动解压
 WORKDIR          ------------     设置当前工作目录
 VOLUME            ------------      设置卷,挂载主机目录
 EXPOSE              ------------      指定对外的端口
 RUN                    ------------       指定容器启动后要干的事情
 
 ## 指令详解
 # FROM
 格式:FROM<image>或FROM<image>:<tag>
 解释：FROM是Dockerfile里的第一条指令（必须是），后面跟有效的镜像名（如果该镜像你的本地仓库没有则会从远程仓库Pull取）。然后后面的其它指令将在FROM的镜像中执行
 # MAINTAINER
格式：MAINTAINER <name> <mail>
解释：指定维护者信息。

# RUN
格式：RUN <command>或 RUN["executable", "param1", "param2"]
解释：运行命令，命令较长使可以使用\来换行。推荐使用上面数组的格式

#CMD
格式：
   CMD ["executable","param1","param2"] 使用 exec 执行，推荐方式；
   CMD command param1 param2 在 /bin/sh 中执行，提供给需要交互的应用；
CMD ["param1","param2"] 提供给ENTRYPOINT的默认参数；
解释：
   CMD指定容器启动是执行的命令，每个Dockerfile只能有一条CMD命令，如果指定了多条，只有最后一条会被执行。如果你在启动容器的时候也指定的命令，那么会覆盖Dockerfile构建的镜像里面的CMD命令。
 
# ENTRYPOINT
格式：
   ENTRYPOINT ["executable", "param1","param2"]
   ENTRYPOINT command param1 param2（shell中执行）。
解释：和CMD类似都是配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。
每个 Dockerfile 中只能有一个 ENTRYPOINT，当指定多个时，只有最后一个起效。ENTRYPOINT没有CMD的可替换特性，也就是你启动容器的时候增加运行的命令不会覆盖ENTRYPOINT指定的命令。
所以生产实践中我们可以同时使用ENTRYPOINT和CMD，例如：
ENTRYPOINT ["/usr/bin/rethinkdb"]
CMD ["--help"]
 
# USER
格式：USER daemon
解释：指定运行容器时的用户名和UID，后续的RUN指令也会使用这里指定的用户。
 
# EXPOSE
格式：EXPOSE<port> [<port>...]
解释：设置Docker容器内部暴露的端口号，如果需要外部访问，还需要启动容器时增加-p或者-P参数进行分配。
 
# ENV
格式：ENV<key> <value>
ENV <key>=<value> ...
解释：设置环境变量，可以在RUN之前使用，然后RUN命令时调用，容器启动时这些环境变量都会被指定
 
# ADD
格式：
   ADD <src>... <dest>
ADD ["<src>",... "<dest>"]
解释：将指定的<src>复制到容器文件系统中的<dest>
所有拷贝到container中的文件和文件夹权限为0755,uid和gid为0
如果文件是可识别的压缩格式，则docker会帮忙解压缩
 
# VOLUME
格式：VOLUME ["/data"]
解释：可以将本地文件夹或者其他container的文件夹挂载到container中。
 
# WORKDIR
格式：WORKDIR/path/to/workdir
解释：切换目录，为后续的RUN、CMD、ENTRYPOINT 指令配置工作目录。
可以多次切换(相当于cd命令)，
也可以使用多个WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如
WORKDIR /a
WORKDIR b
WORKDIR c
RUN pwd
则最终路径为 /a/b/c。
 
# ONBUILD
ONBUILD 指定的命令在构建镜像时并不执行，而是在它的子镜像中执行
 
# ARG
格式：ARG<name>[=<default value>]
解释：ARG指定了一个变量在docker build的时候使用，可以使用--build-arg <varname>=<value>来指定参数的值，不过如果构建的时候不指定就会报错。


zz













# 安装nginx php mysql

## 拉取官方镜像

```
docker pull nginx
docker pull php:5.6-fpm
docker pull  mysql
```



## 使用php镜像运行容器

```
docker run -d -v /var/nginx/www/html:/usr/share/nginx  -p 9000:9000 --link my_mysql:mysql --name my_phpfpm php:5.6-fpm 
```



## 使用mysql镜像运行容器

```
docker run -d -p 3307:3307 -e MYSQL_ROOT_PASSWORD=swl123456  -v /var/lib/mysql:/var/lib/mysql --name my_mysql mysql
```



## 使用nginx镜像运行容器

(这里注意,我的nginx容器要和php容器互联,mysql容器外网连接,其实可以通过内网连接的,我没搞,待下次)

```
docker run -d -p 80:80  --name my_nginx  --link my_phpfpm:my_phpfpm -v   /var/nginx/www/html:/usr/share/nginx  --volumes-from my_phpfpm  nginx
```



## 进入容器中

```
docker exec -ti my_phpfpm /bin/bash
docker exec -ti my_mysql  /bin/bash
docker exec -ti my_nginx  /bin/bash
```



## 进入容器后的必要操作
```
#php
安装vim
apt-get -y update
apt-get -y install vim
然后更改用户用户组(设置为和nginx一样的)
#nginx
安装vim
apt-get -y update
apt-get -y install vim
vim /etc/nginx/nginx.conf 
查看用户是否为nginx,我是设置为nginx,你们随意,但是要注意容器中是否有你改的这个用户
vim /etc/nginx/conf.d/xiaofupai.conf (我知道你们喜欢看详细的,那我就贴出来给你们看,其中其中大部分是默认的,主要是设置了站点目录和用户)

站点目录权限给足
chmod -R 755  目录
chown -R nginx.nginx 目录

#mysql
mysql重要的就是设置root远程登录,开启远程登录,好了,我知道你们都会

reload一下
service nginx reload
php和mysql则需要重启(是我没找到reload的方法)
```



## 补充:

#热更新(进入容器后)

```
service nginx reload
```


#php

```
docker-php-ext-install -help #查看系统自带可安装扩展，并进行追加
```

示范:

```
docker-php-ext-install pdo
```


解释:
-d 让容器在后台运行 
-p 添加主机到容器的端口映射 
-v 添加目录映射，即主机上的/var/nginx/www/html和容器中/var/www/html目录是同步的 
–link 与另外一个容器建立起联系，这样我们就可以在当前容器中去使用另一个容器里的服务。
这里如果不指定–link参数其实也是可以得，因为容易本身也是有ip的且唯一，所以我们也可以直接利用ip去访问容器。

-e 设置环境变量，这里是设置mysql的root用户的初始密码，这个必须设置 
–name 容器的名字，随便取，但是必须唯一
-t 在容器里生产一个伪终端 
-i 对容器内的标准输入 (STDIN) 进行交互


docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=swl123456  -v /var/lib/mysql:/var/lib/mysql --name my_mysql mysql

/usr/share/nginx# 环境 

内核的版本必须大于3.10

# 安装docker

```
yum install -y epel-release
yum install docker-io # 安装docker
```



# 配置文件 /etc/sysconfig/docker
## 加入开机启动

```
chkconfig docker on  
```


# 启动docker服务
```
service docker start 

## 查看启动情况

ps -ef |grep docker
```

## 查看docker的版本号，包括客户端、服务端、依赖的Go等

```
docker version
```



## 查看系统(docker)层面信息，包括管理的images, containers数等

```
docker info
```

# 配置docker国内加速器(不然得下载到明年,时间宝贵啊)

```
#阿里云docker加速地址申请地址https://cr.console.aliyun.com/    (打开这个链接就明白了,选择你的服务器版本)

sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://p0usl3vw.mirror.aliyuncs.com"]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker
```


## docker 编码问题

```
docker run -i -t ubuntu env LANG=C.UTF-8 /bin/bash

# 编写 Dockerfile加上 http://ju.outofmemory.cn/entry/133027
ENV LANG=C.UTF-8
```

## 需要修改iptables主机上的规则以允许来自Docker容器的连接。像这样的事情会做的伎俩：

iptables -A INPUT -i docker0 -j ACCEPT

## 导出一个容器出来
docker export 7691a814370e > ubuntu.tar


### 导入一个容器
cat ubuntu.tar | sudo docker import - test/ubuntu:v1.0   /bin/bash

也可以通过指定 URL 或者某个目录来导入，例如
```
 docker import http://example.com/exampleimage.tgz example/imagerepo
 ```
注：用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。
这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。

## 命令行往容器里面传送指令
 docker exec -it Container_name /bin/bash -c "source /etc/profile && java -jar neeq-es-0.0.1-SNAPSHOT.jar"

## docker  容器使用root权限

进入容器参数加上 --user root 

比如 
```
docker exec -ti --user root  new_es  /bin/bash
```

## 普通用户使用docker，不加sudo
```
当前用户添加到docker属组即可
sudo gpasswd -a ${USER} docker
```
退出重新登录下# 容器退出时就能够自动清理容器内部的文件系统

```
docker --rm
```

显然，--rm选项不能与-d同时使用，即只能自动清理foreground容器，不能自动清理detached容器
注意，--rm选项也会清理容器的匿名data volumes。
所以，执行docker run命令带--rm命令选项，等价于在容器退出后，执行docker rm -v。

# docker服务重启时容器自动重启

```
--restart=always
```

# Mysql 编码问题

```
--character-set-server=utf8 --collation-server=utf8_bin
```



# 环境



```
root@233:~# docker-co
docker-compose          docker-containerd       docker-containerd-ctr   docker-containerd-shim
root@233:~# docker-compose --version
docker-compose version 1.16.1, build 6d1ac21
root@233:~# docker --version
Docker version 17.03.2-ce, build f5ec1e2
```

# docker-compose.yml

```
root@233:~# cat docker-compose.yml
version: '3'
services:
  gitlab:
    image: 'twang2218/gitlab-ce-zh:11.0.3'
    # build: .
    container_name: 'gitlab'
    restart: 'always'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    ports:
      - '8081:80'
      - '4443:443'
      - '2222:22'
    volumes:
      - '/home/docker/gitlab/config:/etc/gitlab'
      - '/home/docker/gitlab/logs:/var/log/gitlab'
      - '/home/docker/gitlab/data:/var/opt/gitlab'
networks:
  app_net:
    driver: 'bridge'
    ipam:
      driver: 'default'
```

# run

```
docker-compose up -d
```

## 示意图



![excel](https://s1.ax1x.com/2018/08/13/Pg3EeP.jpg)

## pull源码下来

- 本文档代码的位置都在/opt/projects/excel_project 

## 先pull下Python3.7的镜像

`bash docker_build.sh `



看下shell里面写的什么？

```
cat 

#！ /bin/bash
 docker pull python:3.7           #pull下Python3.7的镜像
 docker build -t python37:excel .    #这里定义镜像名字与Tag，后面compose会用到这个build好的镜像
```

看下build出来的是什么？

```
root@iZ2ze33pmk2jcn4l201z9hZ:/opt# docker images
REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE
node                        excel               3926be036825        2 hours ago         999 MB
python37                    excel    # 他在这里          ff03fa1dfb67        5 hours ago         1.12 GB
```



## 启动 docker-compose

`docker-compose up -d  # -d代表挂起`，这将会启动所有写在docker-compase.yaml里面的服务



### docker-compose.yaml配置文件解释

```
cat docker-compose.yaml

version: '2'                                
services:
  web:                      
    ports:
      - "3003:3000"                         #端口映射 前面的是服务器端口，后面的是容器端口
    restart: always                         #在容器挂掉之后自动重启
    volumes:
      - /opt/projects/excel_project/excel:/opt/excel     #挂载卷 前者对应服务器目录，后者对应容器目录，以此类推
    working_dir: /opt/excel                 #工作目录
    command:       
        - /bin/bash
        - -c
        - |
          npm install --registry=https://registry.npm.taobao.org  
          npm start    # 这里写进入容器工作目录之后需要进行的命令，注意格式，比如Node环境需要的node install

    image: node:8     # 根据版本需求来引用镜像


  app:
    volumes:
      - /opt/projects/excel_project/excel_to_json:/opt/excel_to_json
    ports:
      - "23333:23333"
    restart: always
    working_dir: /opt/excel_to_json
    image: python37:excel       #这里引用的是前面build好的镜像 
    command:
        - /bin/bash
        - -c
        - |
          sleep 10    #这里的睡十秒是有讲究的，这里写的所有的命令 都是并行运行的，可能这会PG数据库都还没有建立好表关系
          python3 manage.py makemigrations
          python3 manage.py migrate
          python3 manage.py runserver 0:23333
    depends_on:
      - pgdb            #这里的pgdb作为PG库连接Django的HOST，后面会写出测试Django联通PG库的方法
  pgdb:
    image: postgres:9.5
    volumes:
       - /opt/projects/excel_project/db:/var/lib/postgresql/data
    restart: always
    ports:
       - "5432:5432"
    environment:
      POSTGRES_PASSWORD: wenyin100years       #这里是PG库的一些设置
      POSTGRES_USER: wenyin
      POSTGRES_DB: tianfeng
```

### 测试后端连接数据库

```
root@papa:/tmp/excel/src# docker  ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS     NAMES
e7f42bad9297        node:excel          "/bin/bash -c 'npm..."   8 minutes ago       Up 8 minutes        0.0.0.0:3003->3000/tcp     root_web_1
04b37eaa7b7b        python37:excel      "/bin/bash -c 'sle..."   11 minutes ago      Up 8 minutes        0.0.0.0:23333->23333/tcp   root_app_1
2a685c280730        postgres            "docker-entrypoint..."   11 minutes ago      Up 8 minutes        5432/tcp     root_pgdb_1



root@papa:/tmp/excel/src# docker exec -ti root_app_1 /bin/bash   #这里是进入PG库里面的命令

root@04b37eaa7b7b:/tmp/excel_to_json# ping root_pgdb_1       #ping一下？ ok
PING root_pgdb_1 (172.20.0.2) 56(84) bytes of data.
64 bytes from root_pgdb_1.root_default (172.20.0.2): icmp_seq=1 ttl=64 time=0.097 ms
64 bytes from root_pgdb_1.root_default (172.20.0.2): icmp_seq=2 ttl=64 time=0.068 ms
64 bytes from root_pgdb_1.root_default (172.20.0.2): icmp_seq=3 ttl=64 time=0.068 ms
^C
--- root_pgdb_1 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 1998ms
rtt min/avg/max/mdev = 0.068/0.077/0.097/0.017 ms
```



## 善后

主要容器服务都启动了，接下来就需要改一下需要灵活修改的地方

比如 前端连接 Django的配置文件，Django连接PG数据库的配置



 前面有介绍这个

```
volumes: 
	- /opt/projects/excel_project/excel:/opt/excel     #挂载卷 前者对应服务器目录，后者对应容器目录，以此类推
```



我们直接进入容器对应服务器的目录来修改这些 

`cd /opt/projects/excel_project/excel`



## --link参数依旧可以用


## 环境

docker启动一个db容器，数据目录 -v 挂载到主机上，可以备份数据到这个目录，这个目录和主机指定目录相通，未雨绸缪，以防万一。



## 使用方法

```
docker run -itd -p 8000:4555 --link pg:pgdb  -v /root/quip_org_project:/opt/ --name py  image_id    #启动一个后端服务，他需要与db通信


```



### 检测

必要的时候需要检测一下后端环境与db的连接是否畅通

pgdb在这里充当的是host的角色，其他的参数比如端口，密码什么的还需要你自己设置啊

#### 上代码

```
root@iZ2ze2xim85w29dthlhc5mZ:~# docker exec -ti 80974358ea31 /bin/bash
root@80974358ea31:/# ping pgdb         #这里pgdb充当的是host
PING pgdb (172.18.0.2): 56 data bytes
64 bytes from 172.18.0.2: icmp_seq=0 ttl=64 time=0.102 ms
64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.085 ms
64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.089 ms
^C--- pgdb ping statistics ---
3 packets transmitted, 3 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.085/0.092/0.102/0.000 ms
```



### 解释

pg 代表已经启动的一个数据库容器名字

pgdb 是我们起的一个别名，但是这个别名只对我们将要启动的这个容器有效

# 介绍

此方法对于mac，ubuntu，及Centos通用

采用下载二进制文件方式使用这个命令，系统自带的源是没有这个得



# 下载包安装

```
wget https://github.com/jingweno/ccat/releases/download/v1.1.0/linux-amd64-1.1.0.tar.gz
```



## 其他版本的看这里

```
https://github.com/jingweno/ccat/release
```


接着解压

```
tar -zxvf linux-amd64-1.1.0.tar.gz
```


移动到二进制文件目录

```
cd linux-amd64-1.1.0
sudo mv ccat /usr/bin/ccat
```

接着给这个文件赋予可执行权限

```
sudo chmod +x /usr/bin/ccat
```


之后就可以和cat一样执行命令了

# 使用

如果你觉得ccat比cat好，而且我以后不想使用cat了，想用ccat来代替cat，两个方法

## 别名

```
vim ~/.bashrc #注意，我使用的是bash

alias cat=ccat #添加此列
```


之后使配置文件生效

```
source ~/.bashrc
```


接着直接输入cat就相当于使用ccat了

 ## 再者就是直接覆盖掉之前的cat二进制命令

```
cp -f /usr/bin/ccat /usr/bin/cat
```



# 前面的话



ETL，是英文 Extract-Transform-Load 的缩写，用来描述将数据从来源端经过抽取（extract）、转换（transform）、加载（load）至目的端的过程。



 DataX 是一个异构数据源离线同步工具，致力于实现包括关系型数据库(MySQL、Oracle等)、HDFS、Hive、MaxCompute(原ODPS)、HBase、FTP等各种异构数据源之间稳定高效的数据同步功能。





# 环境准备

- Linux
- [JDK(1.8以上，推荐1.8)](http://www.oracle.com/technetwork/cn/java/javase/downloads/index.html)
- [Python(推荐Python2.6.X)](https://www.python.org/downloads/)
- [Apache Maven 3.x](https://maven.apache.org/download.cgi) (Compile DataX)
- 两台数据库

```
➜  ~ mvn -v
Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00)
Maven home: /usr/local/maven
Java version: 1.8.0_20, vendor: Oracle Corporation, runtime: /usr/java/jdk/jre
Default locale: en_US, platform encoding: ANSI_X3.4-1968
OS name: "linux", version: "4.4.0-130-generic", arch: "amd64", family: "unix"
➜  ~ java -version
java version "1.8.0_181"
Java(TM) SE Runtime Environment (build 1.8.0_181-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)
➜  ~ python -V
Python 2.7.12
```



# 下载与解压

[源地址](https://github.com/alibaba/DataX)：https://github.com/alibaba/DataX



```
➜  ~ wget http://datax-opensource.oss-cn-hangzhou.aliyuncs.com/datax.tar.gz
➜  ~ tar xf datax.tar.gz
```



# 自检

```
➜  cd /datax
➜  datax  python ./bin/datax.py ./job/job.json

DataX (DATAX-OPENSOURCE-3.0), From Alibaba !
Copyright (C) 2010-2017, Alibaba Group. All Rights Reserved.

2018-10-20 22:52:33.019 [main] INFO  VMInfo - VMInfo# operatingSystem class => sun.management.OperatingSystemImpl
2018-10-20 22:52:33.042 [main] INFO  Engine - the machine info  =>

​```
osInfo:	Oracle Corporation 1.8 25.181-b13
jvmInfo:	Linux amd64 4.4.0-130-generic
cpu num:	1

totalPhysicalMemory:	-0.00G
freePhysicalMemory:	-0.00G
maxFileDescriptorCount:	-1
currentOpenFileDescriptorCount:	-1

GC Names	[Copy, MarkSweepCompact]

MEMORY_NAME                    | allocation_size                | init_size
Eden Space                     | 273.06MB                       | 273.06MB
Code Cache                     | 240.00MB                       | 2.44MB
Survivor Space                 | 34.13MB                        | 34.13MB
Compressed Class Space         | 1,024.00MB                     | 0.00MB
Metaspace                      | -0.00MB                        | 0.00MB
Tenured Gen                    | 682.69MB                       | 682.69MB
​```

2018-10-20 22:52:33.093 [main] INFO  Engine -
{
	"content":[
		{
			"reader":{
				"name":"streamreader",
				"parameter":{
					"column":[
						{
							"type":"string",
							"value":"DataX"
						},
						{
							"type":"long",
							"value":19890604
						},
						{
							"type":"date",
							"value":"1989-06-04 00:00:00"
						},
						{
							"type":"bool",
							"value":true
						},
						{
							"type":"bytes",
							"value":"test"
						}
					],
					"sliceRecordCount":100000
				}
			},
			"writer":{
				"name":"streamwriter",
				"parameter":{
					"encoding":"UTF-8",
					"print":false
				}
			}
		}
	],
	"setting":{
		"errorLimit":{
			"percentage":0.02,
			"record":0
		},
		"speed":{
			"byte":10485760
		}
	}
}

2018-10-20 22:52:33.183 [main] WARN  Engine - prioriy set to 0, because NumberFormatException, the value is: null
2018-10-20 22:52:33.189 [main] INFO  PerfTrace - PerfTrace traceId=job_-1, isEnable=false, 
···········
DataX Process was killed ! you did ?
➜  datax
```





# 怎样获取标准json格式？



jdbcUrl防乱码处理  "jdbcUrl": ["jdbc:mysql://127.0.0.1:3306/database_name?characterEncoding=utf8"], 

## mysql 到 mysql

```
python datax.py  -r mysqlreader -w mysqlwriter
```



## postgres到mysql

```
➜  bin python datax.py  -r postgresqlreader -w mysqlwriter

DataX (DATAX-OPENSOURCE-3.0), From Alibaba !
Copyright (C) 2010-2017, Alibaba Group. All Rights Reserved.


Please refer to the postgresqlreader document:
     https://github.com/alibaba/DataX/blob/master/postgresqlreader/doc/postgresqlreader.md

Please refer to the mysqlwriter document:
     https://github.com/alibaba/DataX/blob/master/mysqlwriter/doc/mysqlwriter.md

Please save the following configuration as a json file and  use
     python {DATAX_HOME}/bin/datax.py {JSON_FILE_NAME}.json
to run the job.

{
    "job": {
        "content": [
            {
                "reader": {
                    "name": "postgresqlreader",
                    "parameter": {
                        "connection": [
                            {
                                "jdbcUrl": [],
                                "table": []
                            }
                        ],
                        "password": "",
                        "username": ""
                    }
                },
                "writer": {
                    "name": "mysqlwriter",
                    "parameter": {
                        "column": [],
                        "connection": [
                            {
                                "jdbcUrl": "",
                                "table": []
                            }
                        ],
                        "password": "",
                        "preSql": [],
                        "session": [],
                        "username": "",
                        "writeMode": ""
                    }
                }
            }
        ],
        "setting": {
            "speed": {
                "channel": ""
            }
        }
    }
}
➜  bin
```



# 使用

```
➜  bin python datax.py   *.json
```



#  栗子补充

*mysql数据库测试* 

## mysql插入数据

### 写入表字段

```
mysql> use test1;
Database changed
mysql> show tables;
+-----------------+
| Tables_in_test1 |
+-----------------+
| table1          |
+-----------------+
1 row in set (0.00 sec)


mysql> CREATE TABLE IF NOT EXISTS `table1`
(    `runoob_id`  VARCHAR(100) NOT NULL,  
     `runoob_title` VARCHAR(100) NOT NULL,   
     `runoob_author` VARCHAR(40) NOT NULL,    
     `submission_date` VARCHAR(40) NOT NULL ,    
     `runoob` VARCHAR(40) NOT NULL )
;


CREATE TABLE test_bak(
   runoob_id  VARCHAR(100) NOT NULL,
   runoob_title           VARCHAR(100)    NOT NULL,
   runoob_author            VARCHAR(100)     NOT NULL,
   submission_date        CHAR(50) NOT NULL ,
   runoob    VARCHAR(40)     NOT NULL
);  
```

### json参考格式

```
{
    "job": {
        "setting": {
            "speed": {
                "channel": 1
            }
        },
        "content": [
            {
                 "reader": {
                    "name": "streamreader",
                    "parameter": {
                        "column" : [
                            {
                                "value": "DataX",
                                "type": "string"
                            },
                            {
                                "value": 19880808,
                                "type": "long"
                            },
                            {
                                "value": "1988-08-08 08:08:08",
                                "type": "date"
                            },
                            {
                                "value": true,
                                "type": "bool"
                            },
                            {
                                "value": "test",
                                "type": "bytes"
                            }
                        ],
                        "sliceRecordCount": 10000
                    }
                },
                "writer": {
                    "name": "mysqlwriter",
                    "parameter": {
                        "username": "root",
                        "password": "Swl19960706",
                        "column": [
                            "runoob_id",
                            "runoob_title",
			    "runoob_author",
			    "submission_date",
			    "runoob"
                        ],
                        "preSql": [
                        ],
                        "connection": [
                            {
                                "jdbcUrl": "jdbc:mysql://127.0.0.1:3306/test1",
                                "table": [
                                    "table1"
                                ]
                            }
                        ]
                    }
                }
            }
        ]
    }
}
```

### 截图

<a href="https://imgchr.com/i/iDQw34"><img src="https://s1.ax1x.com/2018/10/22/iDQw34.png" alt="iDQw34.png" border="0" /></a>





## postgres插入数据



### 写入表字段

```
 CREATE TABLE test_bak(
   runoob_id  VARCHAR(100) NOT NULL,
   runoob_title           VARCHAR(100)    NOT NULL,
   runoob_author            VARCHAR(100)     NOT NULL,
   submission_date        CHAR(50) NOT NULL ,
   runoob    VARCHAR(40)     NOT NULL
);
```



### json参考格式

```
{
    "job": {
        "setting": {
            "speed": {
                "channel": 1
            }
        },
        "content": [
            {
                 "reader": {
                    "name": "streamreader",
                    "parameter": {
                        "column" : [
                            {
                                "value": "DataX",
                                "type": "string"
                            },
                            {
                                "value": 19880808,
                                "type": "long"
                            },
                            {
                                "value": "1988-08-08 08:08:08",
                                "type": "date"
                            },
                            {
                                "value": true,
                                "type": "bool"
                            },
                            {
                                "value": "test",
                                "type": "bytes"
                            }
                        ],
                        "sliceRecordCount": 1000
                    }
                },
                "writer": {
                    "name": "postgresqlwriter",
                    "parameter": {
                        "username": "postgres",
                        "password": "password",
                        "column": [
                            "runoob_id",
                            "runoob_title",
			    "runoob_author",
			    "submission_date",
			    "runoob"
                        ],
                        "preSql": [
                        ],
                        "connection": [
                            {
                                "jdbcUrl": "jdbc:postgresql://ip/test1",
                                "table": [
                                    "test_bak"
                                ]
                            }
                        ]
                    }
                }
            }
        ]
    }
}
```

## postgres导入到mysql

```
{
    "job": {
        "setting": {
            "speed": {
                 "byte": 1048576
            },
                "errorLimit": {
                "record": 0,
                "percentage": 0.02
            }
        },
        "content": [
            {
                "reader": {
                    "name": "postgresqlreader",
                    "parameter": {
                        "username": "postgres",
                        "password": "swl19960706",
                        "column": [
				            "runoob_id",
                            "runoob_title",
                            "runoob_author",
                            "submission_date",
                            "runoob"
                        ],
                        "connection": [
                            {
                                "table": [
                                    "test_bak"
                                ],
                                "jdbcUrl": [
     "jdbc:postgresql://116.196.116.227:5432/test1"
                                ]
                            }
                        ]
                    }
                },
			                "writer": {
                    "name": "mysqlwriter",
                    "parameter": {
                        "column": [
                            "*"
                        ],
                        "connection": [
                            {
                                "jdbcUrl": "jdbc:mysql://127.0.0.1:3306/test1",
                                "table": ["table1"]
                            }
                        ],
                        "password": "Swl19960706",
                        "preSql": [],
                        "session": [],
                        "username": "root",
                        "writeMode": "insert"
                    }
                }
            }
        ]
}
    }
```



## 环境

perf 命令安装好 

Flame Graph项目clone下来



## 克隆项目

项目位置 <https://github.com/brendangregg/FlameGraph>

```
git clone <https://github.com/brendangregg/FlameGraph.git
```

 

## 以perf为例，看一下flamegraph的使用方法：

### 第一步

```
perf record -e cpu-clock -g -p $pid   #这里获取的是某个进程
or
perf record -e cpu-clock -g top      #这里获取的是top命令所获得的数据
```

Ctrl+c结束执行后，在当前目录下会生成采样数据perf.data.

### 第二步

用perf script工具对perf.data进行解析

```
perf script -i perf.data &> perf.unfold
```



### 第三步

将perf.unfold中的符号进行折叠：

```
./FlameGraph/stackcollapse-perf.pl perf.unfold &> perf.folded
```



### 第四步

生成svg图：

```
./FlameGraph/flamegraph.pl perf.folded > perf.svg
```



## 效果图



<p align="center">
  <img src="https://s1.ax1x.com/2018/10/17/id6ipn.png" alt="火焰图"/>
</p>## 熟悉所有关于Install的 姿势 ing ....

# apt

```
sudo add-apt-repository ppa:webupd8team/java
sudo apt update
sudo apt install -y oracle-java8-installer
sudo apt install -y oracle-java8-set-default
java -version
```



# yum

```
wget -c --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm

sudo yum localinstall -y jdk-8u131-linux-x64.rpm
java -version
```

## 直接运行docker run

    docker run -d -p 8080:8080 -p 1521:1521 -v /data/db/:/u01/app/oracle sath89/oracle-12c
    
    Docker ps

默认密码账号 system / oracle 或者 sys / oracle

## 进入容器

```
[root@Docker ~]# docker exec -it 3ceb1ae8637e /bin/bash 
root@3ceb1ae8637e:/# 
root@3ceb1ae8637e:/# ss -nlpt
State      Recv-Q Send-Q        Local Address:Port          Peer Address:Port 
LISTEN     0      128                       *:42983                    *:*     
LISTEN     0      128                       *:8080                     *:*     
LISTEN     0      128                       *:1521                     *:*     
```



## 接下来登陆数据库

```
# sqlplus system/oracle@//localhost:1521/xe

SQL*Plus: Release 12.1.0.2.0 Production on Fri May 18 09:27:11 2018

Copyright (c) 1982, 2014, Oracle.  All rights reserved.

Last Successful login time: Fri May 18 2018 09:26:42 +00:00

Connected to:
Oracle Database 12c Standard Edition Release 12.1.0.2.0 - 64bit Production


# 查看sid
SQL> show parameter service_name

NAME                     TYPE    VALUE

------

service_names                string  xe
SQL> 
```



## sid

```
select instance_name from  V$instance;
or
ps -ef |grep oracle
```



# 本地图形化连接oracle

我使用的是 Navicat Premium

![](https://s1.ax1x.com/2018/10/16/iayBDS.md.png)



默认密码账号 system / oracle 或者 sys / oracle





##  连接到Oracle企业管理控制台

地址 http://localhost:8080/em
user: sys
password: oracle
connect as sysdba: true







##  1、修改用户的密码

```
-- 查看用户的proifle是哪个，一般是default：
SELECT username,PROFILE FROM dba_users;

-- 查看指定概要文件（如default）的密码有效期设置：
SELECT * FROM dba_profiles s WHERE s.profile='DEFAULT' AND resource_name='PASSWORD_LIFE_TIME';

-- 将密码有效期由默认的180天修改成“无限制”：修改之后不需要重启动数据库，会立即生效。
ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;

-- 修改用户SYSTEM 密码
alter user SYSTEM identified by "****password****";
```





##     2、解锁用户的方法

```
-- 解锁方法
alter user SYSTEM account unlock;
```

# 下载解压源码包

下载地址 https://www.mongodb.com/download-center#community

```
wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.4.9.tgz
```

```
tar xf mongodb-linux-x86_64-3.4.9.tgz
mkdir -p /opt/mongodb
mkdir -p /opt/mongodb/db    #db存储目录
mkdir -p /opt/mongodb/logs  #日志存储目录
mv mongodb-linux-x86_64-3.4.9/* /opt/mongodb/
```

# 二进制启动文件配置

*方案很多*

*1.直接复制二进制文件到/usr/bin下面然后加权，系统直接调用*

*2.编辑环境变量，我这里采用后者*

```
vim ~/.bashrc

export MONGODB_HOME=/opt/mongodb/bin
export PATH=$MONGODB_HOME:$PATH
export PATH

source ~/.bashrc
```

## 检验

```
[root@zyd ~]#mongo --version
MongoDB shell version v3.4.9
git version: 876ebee8c7dd0e2d992f36a848ff4dc50ee6603e
allocator: tcmalloc
modules: none
build environment:
    distarch: x86_64
    target_arch: x86_64
```



# 给个启动配置文件



注意，我这里是简化的配置文件，测试使用，比较全的配置文件在这里 https://github.com/lijinghuatongxue/Linux/blob/master/DB/mongodb%E5%8D%95%E6%9C%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3.md

```
vim mongodb.conf

dbpath=/opt/mongodb/db
logpath=/opt/mongodb/logs/mongodb.log
port=27017
fork=true               #以守护进程方式运行，默认为false
nohttpinterface=true    #是否禁止http接口，默认为false
bind_ip = 127.0.0.1     #绑定监听的ip
```



# 启动

```
mongod -f mongodb.conf
```

启动之后可以查看一下启动日志

在这里

tail -30 /opt/mongodb/logs/mongodb.log



# End

后续会总结配置文件





# 下载安装

## 下载地址
[链接]: https://www.postgresql.org/ftp/source/


## 获取源码包
```
 wget https://ftp.postgresql.org/pub/source/v9.6.4/postgresql-9.6.4.tar.gz
```

## 解压
```
 tar xf postgresql-9.6.4.tar.gz 
```

## 安装需要的依赖

readline 

zlib 

make 

gcc

```
apt-get install libreadline6 libreadline6-dev make gcc  zlib1g.dev zlib1g -y
```



## 编译

```
 cd postgresql-9.6.4/
 ./configure --prefix=/usr/local/postgresql
 make && make install
```

出现这个为ok

PostgreSQL installation complete

## 添加postgres用户

```
adduser postgres
```



##  环境变量的配置

```
su postgres
```

vim .bashrc  

```
#export PS1='[\u@\h \W]\$'
PGHOME=/usr/local/postgresql
export PGHOME
PGDATA=/home/data/postgresql   #这里的数据存储目录，在这里配置的话，后续初始化则不需要多谢，默认不写使用默认配置
export PGDATA

PATH=$PATH:$HOME/.local/bin:$HOME/bin:$PGHOME/bin

export PATH 
```

### 立即生效

```
source .bashrc
```

## 数据目录及日志文件配置

```
mkdir /home/data/postgresql -p
chown -R postgres:postgres /home/data/postgresql
```



## 二进制文件拷贝

```
cp /usr/local/postgresql/bin/* /usr/bin/

chmod +x /usr/bin/pg*

chmod +x /usr/bin/ps*
```

## 数据库初始化

```
/usr/local/postgresql/bin/initdb  
```

```
[postgres@pa2 postgresql]$initdb
The files belonging to this database system will be owned by user "postgres".
This user must also own the server process.

The database cluster will be initialized with locale "en_US.utf8".
The default database encoding has accordingly been set to "UTF8".
The default text search configuration will be set to "english".

fixing permissions on existing directory /home/data/postgresql ... ok
creating subdirectories ... ok
selecting default max_connections ... 100
selecting default shared_buffers ... 32MB
creating configuration files ... ok
creating template1 database in /home/data/postgresql/base/1 ... ok
initializing pg_authid ... ok
initializing dependencies ... ok
creating system views ... ok
loading system objects' descriptions ... ok
creating collations ... ok
creating conversions ... ok
creating dictionaries ... ok
setting privileges on built-in objects ... ok
creating information schema ... ok
loading PL/pgSQL server-side language ... ok
vacuuming database template1 ... ok
copying template1 to template0 ... ok
copying template1 to postgres ... ok

WARNING: enabling "trust" authentication for local connections
You can change this by editing pg_hba.conf or using the option -A, or
--auth-local and --auth-host, the next time you run initdb.

Success. You can now start the database server using:
```



## 开启

在postgres用户操作

```
pg_ctl -D /home/data/postgresql   start
```

## 关闭 

在postgres用户操作

```
pg_ctl -D /home/data/postgresql -m fast    stop
```

“-m fast”选项立即断开会话而不是
等待会话发起的断开


## 重启

```
在postgres用户操作
pg_ctl restart -m fast
```

## 检查下端口
```
[root@pa2 ~]# netstat -lntup 
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1/systemd           
tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      3951/java           
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      22565/nginx: master 
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1800/sshd           
tcp        0      0 127.0.0.1:5432          0.0.0.0:*               LISTEN      10157/postmaster     #在这里
```





# 使用

## 修改密码步骤

默认密码是随机的，我们进入数据库里面直接再改一个

```
su postgres                              #切换postgres用户
psql                                     #进入数据库
ALTER USER postgres WITH PASSWORD '密码';   #修改用户postgres的密码，必须以分号结束
```



## 配置文件在哪儿？


配置文件都在数据储存的目录里面，就是我的 /home/data/postgresql

包括postgresql.conf和pg_hba.conf

然后配置下远程连接及postgres用户权限等等



## 关于连接配置

```
vim pg_hba.conf

···
"local" is for Unix domain socket connections only  # 翻译：“本地”仅适用于Unix域套接字连接
local     all     postgres                                      trust
···

重启
```

这里的trust 和 md5 将会决定你切换到postgres用户之后能不能psql 直接进入到pg数据库
### 远程（http）访问配置

要想远程访问，需要修改两处配置，需要重启postgresql

```
1.
vim postgresql.conf  # 该文件作用和 mysql数据库里面的 /etc/my.cnf类似

listen_addresses = '*'

2.
vim pg_hba.conf

host  all  all 0.0.0.0/0 md5          #代表任何一个ip都能连接

#注意：这个配置是我测试用的，线上生产用请谨慎配置

重启
```



##  信任指定服务器连接

pg_hba.conf ip段配置示范

```
# IPv4 local connections:

host    all            all      127.0.0.1/32      md5
host    all            all      10.211.55.6/32（需要连接的服务器IP）  md5
重启
```





# 前期环境准备

系统：centos7.4 64位

用户：root

# 看效果？

![WechatIMG583](https://s1.ax1x.com/2018/09/20/imL2h6.jpg)

## 进入Python项目自动载入python虚拟环境

```
echo "source /opt/py3/bin/activate" > /opt/project_name/.env  
```

## 字符集支持中文，日志里面打印了中文

```
localedef -c -f UTF-8 -i zh_CN zh_CN.UTF-8
export LC_ALL=zh_CN.UTF-8
echo 'LANG="zh_CN.UTF-8"' > /etc/locale.conf
```

## 防火墙（临时关闭）

```
systemctl stop firewalld.service
setenforce 0 
```

## Python3安装并载入虚拟环境

```
wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tar.xz && tar xvf Python-3.6.1.tar.xz  && cd Python-3.6.1 && ./configure && make && make install

cd /opt && python3 -m venv py3 && source /opt/py3/bin/activate
```

## 必要依赖包安装

```
yum -y install wget sqlite-devel xz gcc automake zlib-devel openssl-devel epel-release git
```

## 自动载入 Python 虚拟环境配置

此项仅为懒癌晚期的人员使用，防止运行 Jumpserver 时忘记载入 Python 虚拟环境导致程序无法运行。使用autoenv

```
cd /opt
git clone https://github.com/kennethreitz/autoenv.git
echo 'source /opt/autoenv/activate.sh' >> ~/.bashrc
source ~/.bashrc
```



# 安装jumpserver

## Clone项目

```
cd /opt/
git clone https://github.com/jumpserver/jumpserver.git && cd jumpserver && git checkout master
echo "source /opt/py3/bin/activate" > /opt/jumpserver/.env  # 进入 jumpserver 目录时将自动载入 python 虚拟环境

```

## 安装依赖 RPM 包

```
cd /opt/jumpserver/requirements
yum -y install $(cat rpm_requirements.txt)  # 如果没有任何报错请继续
```



## 安装 Redis

Jumpserver 使用 Redis 做 cache 和 celery broke

```
yum -y install redis
systemctl enable redis
systemctl start redis

# centos6
$ yum -y install redis
$ chkconfig redis on
$ service redis start
```

## 安装 Python 库依赖

```
pip install -r requirements.txt -i https://pypi.douban.com/simple
```

## 安装数据库

```
# centos7上安装mariadb
yum -y install mariadb mariadb-devel mariadb-server 
systemctl enable mariadb
systemctl start mariadb
```

### 创建数据库 Jumpserver 并授权

```
$ mysql
> create database jumpserver default charset 'utf8';
> grant all on jumpserver.* to 'jumpserver'@'127.0.0.1' identified by 'swl19960706';
> flush privileges;
```

## 修改 Jumpserver 配置文件

```
cd /opt/jumpserver
cp config_example.py config.py
vi config.py

# 注意对齐，不要直接复制本文档的内容，实际内容以文件为准，本文仅供参考
```

## 生成数据库表结构和初始化数据

```
 cd /opt/jumpserver/utils
 bash make_migrations.sh
```

## 运行 Jumpserver

```
cd /opt/jumpserver
./jms start all  # 后台运行使用 -d 参数./jms start all -d

#新版本更新了运行脚本，使用方式./jms start|stop|status|restart all  后台运行请添加 -d 参数
```

运行不报错，请浏览器访问 <http://ip:8080/> 

默认账号: admin 密码: admin 

页面显示不正常先不用处理，继续往下操作，后面搭建 nginx 代理后即可正常访问，原因是因为 django 无法在非 debug 模式下加载静态资源





# 安装 SSH Server 和 WebSocket Server: Coco

继续引用之前的python虚拟环境

## 下载或 Clone 项目

新开一个终端，别忘了 source /opt/py3/bin/activate

```
cd /opt
source /opt/py3/bin/activate
git clone https://github.com/jumpserver/coco.git && cd coco && git checkout master
echo "source /opt/py3/bin/activate" > /opt/coco/.env  # 进入 coco 目录时将自动载入 python 虚拟环境

# 首次进入 coco 文件夹会有提示，按 y 即可
# Are you sure you want to allow this? (y/N) y
```

## 安装依赖

```
cd /opt/coco/requirements
yum -y  install $(cat rpm_requirements.txt)
pip install -r requirements.txt -i https://pypi.python.org/simple
```

## **修改配置文件并运行** 

```
cd /opt/coco
cp conf_example.py conf.py  # 如果 coco 与 jumpserver 分开部署，请手动修改 conf.py
vi conf.py


./cocod start -d  # 后台运行使用 -d 参数./cocod start -d

# 新版本更新了运行脚本，使用方式./cocod start|stop|status|restart  后台运行请添加 -d 参数
# 注意对齐，不要直接复制本文档的内容
```

# 安装 Web Terminal 前端: Luna

Luna 已改为纯前端，需要 Nginx 来运行访问

访问（<https://github.com/jumpserver/luna/releases>）下载对应版本的 release 包，直接解压，不需要编译

## 解压 Luna

```
cd /opt
wget https://github.com/jumpserver/luna/releases/download/1.4.1/luna.tar.gz
tar xvf luna.tar.gz
chown -R root:root luna
```

## 安装运行 Nginx

```
yum -y install nginx

# 我的子配置文件贴上来

server {
    listen 80;  # 代理端口，以后将通过此端口进行访问，不再通过8080端口

    client_max_body_size 100m;  # 录像上传大小限制

    location /luna/ {
        try_files $uri / /index.html;
        alias /opt/luna/;  # luna 路径，如果修改安装目录，此处需要修改
    }

    location /media/ {
        add_header Content-Encoding gzip;
        root /opt/jumpserver/data/;  # 录像位置，如果修改安装目录，此处需要修改
    }

    location /static/ {
        root /opt/jumpserver/data/;  # 静态资源，如果修改安装目录，此处需要修改
    }

    location /socket.io/ {
        proxy_pass       http://localhost:5000/socket.io/;  # 如果coco安装在别的服务器，请填写它的ip
        proxy_buffering off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        access_log off;
    }

    location /guacamole/ {
        proxy_pass       http://localhost:8081/;  # 如果guacamole安装在别的服务器，请填写它的ip
        proxy_buffering off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        access_log off;
    }

    location / {
        proxy_pass http://localhost:8080;  # 如果jumpserver安装在别的服务器，请填写它的ip
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}


nginx -t   # 确保配置没有问题, 有问题请先解决

# CentOS 7
systemctl start nginx
systemctl enable nginx
```

服务启动后，访问的是nginx最新代理的jumpserber的IP+端口

如果部署过程中没有接受应用的注册，需要到Jumpserver 会话管理-终端管理 接受 Coco Guacamole 等应用的注册。

# 测试连接

```
如果登录客户端是 macOS 或 Linux ，登录语法如下
$ ssh -p2222 admin@192.168.244.144
$ sftp -P2222 admin@192.168.244.144
密码: admin

如果登录客户端是 Windows ，Xshell Terminal 登录语法如下
$ ssh admin@192.168.244.144 2222
$ sftp admin@192.168.244.144 2222
密码: admin
如果能登陆代表部署成功

# sftp默认上传的位置在资产的 /tmp 目录下
# windows拖拽上传的位置在资产的 Guacamole RDP上的 G 目录下
```

## 环境需求

开启iptables服务


## 脚本内容
'''
#!/bin/bash
STEP=2 #间隔的秒数，不能大于60 ，请仔细看这里定义的作用
Port="80"  
#web 服务器端口默认80
https="443"
#https的话
con="200"
#http连接最高数量
for (( i = 0; i < 60; i=(i+STEP) )); do
        i=$((i++))
        WEBPORT=$Port
        CONNECT=`netstat -ntu | grep :$WEBPORT|wc -l`
        echo $WEBPORT
        echo $CONNECT
        IP=`netstat -ntu | grep :$WEBPORT | awk '{print $5}' | cut -d: -f1 | awk '{++ip[$1]} END {for(i in ip) print ip[i],"\t",i}' | sort -nr |awk '{print $2}'|head -1`
        if [ $CONNECT -gt $con  ];then
        echo 999
        echo `date +%y-%m-%d-%H:%M:%S`  $IP CONNECT=$CONNECT >> /tmp/deny.ip
                for  (( i = 0; i < 60; i=(i+STEP) )); do
                        i=$((i++))
                        /usr/sbin/iptables -L -n |grep DROP |grep $IP
                                if [ $? -eq 0 ];then
                                        break
                                fi
                        /usr/sbin/iptables -I INPUT -p tcp -s $IP  --dport $WEBPORT -i eth0 -j DROP

                done
        fi
        sleep $STEP
done  
for (( i = 0; i < 60; i=(i+STEP) )); do
        i=$((i++))
        WEBPORT2=$https
        CONNECT2=`netstat -ntu | grep :$WEBPORT|wc -l`
        echo $WEBPORT2
        echo $CONNECT2
        IP=`netstat -ntu | grep :$WEBPORT2 | awk '{print $5}' | cut -d: -f1 | awk '{++ip[$1]} END {for(i in ip) print ip[i],"\t",i}' | sort -nr |awk '{print $2}'|head -1`
        if [ $CONNECT2 -gt $con  ];then
        echo 999
        echo `date +%y-%m-%d-%H:%M:%S`  $IP CONNECT=$CONNECT2 >> /tmp/deny.ip
        #作为日志存在该文件里面
                for  (( i = 0; i < 60; i=(i+STEP) )); do
                        i=$((i++))
                        /usr/sbin/iptables -L -n |grep DROP |grep $IP
                                if [ $? -eq 0 ];then
                                        break
                                fi
                        /usr/sbin/iptables -I INPUT -p tcp -s $IP  --dport $WEBPORT2 -i eth0 -j DROP

                done
        fi
        sleep $STEP
done

  
exit 0 


'''

## 定时任务 

crontab -e
#必须是一分钟执行一次该脚本
*/1 * * * * sh /server/scripts/safe.sh > /dev/null 2>&1 &
#多久清空iptables，自己定时间
*/10 * * * *   /usr/sbin/iptables -F > /dev/null 2>&1 &



# 字符问题

check LANG and LC_* environment variables



解决：

```
postgres@pa4:~$ LC_ALL="en_US.UTF-8"
postgres@pa4:~$ LC_CTYPE="en_US.UTF-8"
```

# python嗅探子域名

```
(py3) ➜  git clone https://github.com/TheRook/subbrute.git
(py3) ➜  cd subbrute
(py3) ➜  subbrute git:(master) ✗ ./subbrute.py lijinghua.club -o lijinghua.names
lijinghua.club
www.lijinghua.club
blog.lijinghua.club
img.lijinghua.club
·····
```



# es的ik中文分词测试

```
curl -XPUT http://localhost:9200/index2
curl 'http://localhost:9200/index2/_analyze?analyzer=ik_max_word&pretty=true' -d '{"text":"我是中国人"}'
```



# truncate删除一个表里的所有内容

使用 TRUNCATE TABLE 删除所有行
若要删除表中的所有行，则 TRUNCATE TABLE 语句是一种快速、无日志记录的方法。该语句总是比不带条件的 DELETE 语句要快，因为 DELETE 语句要记录对每行的删除操作，而 TRUNCATE TABLE 语句只记录整个数据页的释放。TRUNCATE TABLE 语句立即释放由该表的数据和索引占用的所有空间。所有索引的分发页也将释放。

与 DELETE 语句相同，使用 TRUNCATE TABLE 清空的表的定义，同其索引和其它相关的对象一起仍保留在数据库中。必须使用 DROP TABLE 语句才能除去表的定义。

```
TRUNCATE TABLE table_name ;
```

# Mac上安装wget



```
/usr/bin/ruby -e "$(curl -fsSL http://raw.githubusercontent.com/Homebrew/install/master/install)"

#注意权限
sudo chown user.user /usr/local/Cellar/openssl
brew install wget

```

# 安装pip新姿势

```
python get-pip.py
```



2018.10.16

nginx 配置文件汇总实践

ELK 搭建完善，写文档

Linux系统自检shell脚本

zabbix监控报警细节完善，写文档

Oracle 语句

shell 不断进阶

LVS实践，写文档
# git忽略上传特殊文件和文件夹

在根目录下创建 文件 

```
touch .gitignore  #里面写入声明，哪些文件不上传
```

示范

```
*.py[cod]
*.so
*.egg
*.egg-info
dist
build
mysite/myapp
db.ini
deploy_key_rsa
```

然后git add上传这个文件让git识别

# SSH长时间连接服务器后不操作，导致连接断开

## 原理

ssh服务器的配置文件/etc/ssh/sshd_config里面

ClientAliveInterval指定了服务器端向客户端请求消息的时间间隔, 默认是0，不发送。而ClientAliveInterval 60表示每分钟发送一次，然后客户端响应，这样就保持长连接了

## 永久解决

```
#服务端
vim /etc/ssh/sshd_config

ClientAliveInterval 60

service sshd restart

```

## 临时解决

```
ssh -o ServerAliveInterval=60 uersname@ip -p port
```

# postgresql 删除库提示有连接？
```
select pg_terminate_backend(pid) from  (select pid from pg_stat_activity where datname = 'dbname'  ) a;
```
#  文件切割
split 命令 可以将一个大文件分割成很多个小文件。
```
split -l 10 test.txt -d -a 3 file 
#将 test.txt 文件每 10 行切分一次，使用 file 作为前缀，数字作为后缀，后缀长度为 3
```
# Nginx简单防爬虫配置

```
    ...
    location / {
        if ($http_user_agent ~* "python|curl|java|wget|httpclient|okhttp") {
            return 503;
        }
        # 正常处理
        ...
    }
    ...
```

变量`$http_user_agent`是一个可以直接在`location`中引用的Nginx变量。`~*`表示不区分大小写的正则匹配，通过`python`就可以过滤掉80%的Python爬虫。

# Ubuntu 64位安装 OpenOffice

```
wget sourceforge.net/projects/openofficeorg.mirror/files/4.1.1/binaries/en-GB/Apache_OpenOffice_4.1.1_Linux_x86-64_install-deb_en-GB.tar.gz
tar -xzvf Apache_OpenOffice_4.1.1_Linux_x86-64_install-deb_en-GB.tar.gz
cd en-GB/DEBS
sudo dpkg -i *.deb
cd desktop-integration
sudo dpkg -i *.deb
```
# 进入Python项目自动载入python虚拟环境

从Github下载源码

```
cd /opt
git clone https://github.com/kennethreitz/autoenv.git 
echo 'source /opt/autoenv/activate.sh' >> ~/.bashrc 
source ~/.bashrc
```

具体的项目环境配置下

```
echo "source /opt/py3/bin/activate" > /opt/project_name/.env  
```

第一次进入项目，需要选择 yes

# Linux查看显卡信息

```
lspci | grep -i vga
```

# Zabbix忘记密码

```
#进入数据库
mysql> use zabbix;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed

#查看数据有那些表

mysql> show tables;

#查看是否存放用户、密码信息

mysql> select * from users;

#更改密码为zabbix
mysql> update  users set passwd=md5("password") where userid='1';
Query OK, 0 rows affected (0.01 sec)
Rows matched: 1  Changed: 0  Warnings: 0
```

# Ubuntu 安装中文包

```
locale #查看系统已经安装的语言包
apt-get install language-pack-zh-hant language-pack-zh-hans -y
dpkg-reconfigure locales 
```

# 服务器获取外网地址

## 只返回IP地址

```
curl ip.6655.com/ip.aspx
curl whatismyip.akamai.com
wget -qO - ifconfig.co
curl icanhazip.com
dig +``short` `myip.opendns.com @resolver1.opendns.com
curl ident.me
curl v4.ident.me
curl curlmyip.com
curl ifconfig.me
curl inet-ip.info
```

 ## 返回IP和地区

```
curl ip.cn
curl cip.cc
curl ip.gs
```

# vim中文乱码

vim ～/.vimrc

```
set encoding=utf-8 nobomb  

set termencoding=utf-8   

set fileencodings=utf-8,gbk,utf-16le,cp1252,iso-8859-15,ucs-bom   

set fileformats=unix,dos,mac
```

```
source ～/.vimrc
```

# mac终端使用密钥连接服务器

先cd到密钥所在目录

```
ssh -i "zyd.rsa" root@126.66.666
```

# zabbix 取值排除多余的结果

2>/dev/null  排除多余的字符串或者警告信息，让zabbix更好的读取结果

```
curl -I  http://192.168.0.42:6788/t/m/ 2>/dev/null  |head -1 |awk '{print $2}'
```

##  为敏捷工作而生



<p align="center">
  <img src="https://s1.ax1x.com/2018/10/05/i8WDRf.png" alt="Linux logo"/>
</p>





# elasticsearch ik分词插件

https://github.com/medcl/elasticsearch-analysis-ik/releases/



# RPM包下载地址

http://www.rpmfind.net/linux/rpm2html/

# 网易开源镜像站

http://mirrors.163.com/

# 阿里云开源镜像及软件站点

https://mirrors.aliyun.com

# 中科大开源镜像站点

http://mirrors.ustc.edu.cn/

# 一些免费下载的包

http://download.freenas.org/distfiles/

# Centos官方系统镜像站点

http://vault.centos.org/

# Centos7和Centos6 系统的一些基础包

http://mirror.centos.org/centos/7/os/x86_64/Packages/

http://mirror.centos.org/centos/6/os/i386/Packages/



# tf的bazel

https://github.com/bazelbuild/bazel/releases

# oracle 12c下载链接

http://download.oracle.com/otn/linux/oracle12c/122010/linuxx64_12201_database.zip?AuthParam=1539073789_8fa23e8a37d974ccf05ce3ddc8e25213## 关于服务器备份策略

备份这东西，出事了就明白它有多重要了，就像人，总是在失去后才知道珍惜

  #### 数据库备份

1.数据库备份，包括测试站和正式站，全备和增倍，增倍就是拷贝binlog日志，频率自己控制
  #### 配置文件备份
2.在运行的服务的配置文件
  #### 定时任务备份
3.当前定时任务备份，为什么备份这个？crontab -r 了解一下
  #### 持续进程项目及代码仓库备份
4.jenkins构建任务备份及gitlab代码仓库配置及代码备份
  #### 安全方面
5.安全方面，秒级备份历史记录文件及登录日志还有iptables规则，命令行文件是/root/.bash_history，登录日志在/var/log/wtmp，登录日志打开用cat等一般命令打开会乱码，用who打开

  #### 待补充
## 网络情况

### 一览？

    netstat -n |grep ^tcp |awk '{print $6}' |sort |uniq  -c| sort -n -k 1 -r
      580 ESTABLISHED
         62 TIME_WAIT
         38 FIN_WAIT2
         16 FIN_WAIT1
          4 LAST_ACK
          3 CLOSE_WAIT

### 当前并发数？



    root@front:~# netstat -n |grep ^tcp |awk '{print $6}' |sort |uniq  -c| sort -n -k 1 -r |grep ESTAB |awk '{print $1}'
    599


​	
​	
### 一些解释

ESTABLISHED     //正常数据传输状态/当前并发连接数

FIN_WAIT2       //另一边已同意释放

ITMED_WAIT          //等待所有分组死掉

CLOSING         //两边同时尝试关闭

TIME_WAIT       //另一边已初始化一个释放

LAST_ACK        //等待所有分组死掉


想要单独查看上面这些，请参考上面这条命令


## 阿里云查看外网ip 

```
curl ip.cn
```


## 关于安全

主机被入侵，它会干什么？

1. 挖矿

1. 疯狂发包影响你主机正常工作

1. 假若这台主机公钥在其他主机集群上，它会干什么坏事？

1. 现在已经把病毒文件全部删除了，但是过一天或者一周，会不会病毒重启？定时任务？

1. 病毒的处理：先删掉病毒文件，及产生的目录，再把病毒进程批量杀死，云主机的话，强迫症可以直接初始化磁盘回炉再造



  ## 查看资源占用

  #### 使用内存前10
```
ps aux | sort -k4nr | head -n 10
```
  #### 使用cpu前10
```
ps aux | sort -k3nr | head -n 10
```
## 批量杀死？(灵活运用哦)
```
command |awk '{print $2}' |xargs kill -9

```
## 流量进出
  #### 查看流量进出
```
iftop 
```

  #### 查看进程出入流量必杀器
```
nethogs
```
## 定时任务
```
crontab -l 
at

```
- 注意：linux上定时任务有两个，一个是 crontab 一个是at
at命令看这里
```
[root@10-254-182-240 ~]# at -t "201805041820"
at> \rm -f 888
at> <EOT>
job 2 at Fri May  4 18:20:00 2018
```
at的进程
```
[root@10-254-182-240 ~]# ps -ef |grep atd
root      2982     1  0 May04 ?        00:00:00 /usr/sbin/atd -f
```## 关于web日志访问

  #### 根据访问IP统计UV
```
awk '{print $1}'  access.log|sort | uniq -c |wc -l
```
  #### 统计访问URL统计PV
```
awk '{print $7}' access.log|wc -l
```
  #### 查询访问最频繁的URL
```
awk '{print $7}' access.log|sort | uniq -c |sort -n -k 1 -r|more
```
  #### 查询访问最频繁的IP
```
awk '{print $1}' access.log|sort | uniq -c |sort -n -k 1 -r|more
```
  #### 根据时间段统计查看日志
```
sed -n access.log '/14\/Mar\/2015:21/,/14\/Mar\/2015:22/p'|more
```



  #### 状态码个数统计
```
awk '{print $9}'  file |sort |grep 状态码 |wc -l
```

## 关于计数
  #### wc
```
wc -l 
```
  
```
wc -w 
#统计指定文件中的字数 并将统计结果显示输出
#适用场景你们想下，比如写主从监控脚本，输出内容要有几个yes才算达标？
```

  #### grep
```
grep -c   
#只输出匹配行的计数
#我测试了下，grep -c 对于大文件比awk+wc -l组合统计出结果的速度较快，后者因为是两个命令吗，可能要计算两次，小可爱们可以试一下
```
- 用法：
```
[root@10-254-182-240 ~]# egrep -c "\##" 9999999.txt
30
```
  #### 统计字符串的个数
```
awk  '{s+=gsub(/字符串/,"&")}END{print s}' file

awk -v RS="@#$j" '{print gsub(/字符串/,"&")}' file

grep -o '字符串' file |wc -l
```




## 网络情况

### 一览？

    netstat -n |grep ^tcp |awk '{print $6}' |sort |uniq  -c| sort -n -k 1 -r
      580 ESTABLISHED
         62 TIME_WAIT
         38 FIN_WAIT2
         16 FIN_WAIT1
          4 LAST_ACK
          3 CLOSE_WAIT

### 当前并发数？

    root@front:~# netstat -n |grep ^tcp |awk '{print $6}' |sort |uniq  -c| sort -n -k 1 -r |grep ESTAB |awk '{print $1}'
    599

### 一些解释

ESTABLISHED     //正常数据传输状态/当前并发连接数

FIN_WAIT2       //另一边已同意释放

ITMED_WAIT          //等待所有分组死掉

CLOSING         //两边同时尝试关闭

TIME_WAIT       //另一边已初始化一个释放

LAST_ACK        //等待所有分组死掉
  # ping出ip

域名=ip

```
➜  ~ ping www.lijinghua.club -c 5
PING www.lijinghua.club (59.110.172.131) 56(84) bytes of data.
64 bytes from 59.110.172.131: icmp_seq=1 ttl=47 time=51.0 ms
64 bytes from 59.110.172.131: icmp_seq=2 ttl=47 time=51.0 ms
64 bytes from 59.110.172.131: icmp_seq=3 ttl=47 time=51.0 ms
64 bytes from 59.110.172.131: icmp_seq=4 ttl=47 time=51.0 ms
64 bytes from 59.110.172.131: icmp_seq=5 ttl=47 time=51.0 ms

--- www.lijinghua.club ping statistics ---
5 packets transmitted, 5 received, 0% packet loss, time 4004ms
rtt min/avg/max/mdev = 51.006/51.035/51.089/0.032 ms
```



# python 

## builtwith库

python提供了builtwith库，会返回一些它获取到的服务，比如web服务，

本文环境 python 2.7 

官网提供的格式我用2.7版本的python有些问题

>>> ```
>>> ➜  ~ python
>>> Python 2.7.12 (default, Dec  4 2017, 14:50:18)
>>> [GCC 5.4.0 20160609] on linux2
>>> Type "help", "copyright", "credits" or "license" for more information.
>>> 
>>> > > > import builtwith
>>> > > > builtwith.parse('http://www.biaodianfu.com/')
>>> > > > {u'blogs': [u'PHP', u'WordPress'], u'font-scripts': [u'Font Awesome'], u'web-servers': [u'Nginx'], u'javascript-frameworks': [u'jQuery'], u'programming-languages': [u'PHP'], u'marketing-automation': [u'Yoast SEO'], u'web-frameworks': [u'Twitter Bootstrap'], u'cms': [u'WordPress'], u'cache-tools': [u'WordPress Super Cache']}
>>> > > > builtwith.parse('http://www.lijinghua.club/')
>>> > > > {u'web-servers': [u'Nginx']}
>>> > > > builtwith.parse('http://blog.lijinghua.club/')
>>> > > > {u'javascript-frameworks': [u'jQuery'], u'web-servers': [u'Nginx']}
>>> > > > builtwith.parse('http://img.lijinghua.club/')
>>> > > > {u'web-servers': [u'Nginx']}
>>> ```



## wad库

环境 python 2.7 

```
➜  WAD git:(master) pip install --upgrade pip
➜  WAD git:(master) wad -u https://pypi.python.org/
{
    "https://pypi.org/": [
        {
            "type": "web-servers", 
            "app": "Nginx", 
            "ver": "1.13.9"
        }, 
        {
            "type": "font-scripts", 
            "app": "Google Font API", 
            "ver": null
        }
    ]
}
➜  WAD git:(master) wad -u https://lijinghua.club/ 
{
    "https://lijinghua.club/": [
        {
            "type": "web-servers", 
            "app": "Nginx", 
            "ver": null
        }
    ]
}
```



# nmap 扫描

左边的是扫描出来的服务，下面是扫描出来的端口

扫描出的信息很多，有最基本的web服务是什么，猜测下该机器是什么内核，仔细看

<img src="https://s1.ax1x.com/2018/10/19/iw5MRO.png" alt="iw5MRO.png" border="0" />





# 嗅探子域名

```
(py3) ➜  git clone https://github.com/TheRook/subbrute.git

(py3) ➜  cd subbrute

(py3) ➜  subbrute git:(master) ✗ ./subbrute.py lijinghua.club -o lijinghua.names

lijinghua.club

www.lijinghua.club

blog.lijinghua.club

img.lijinghua.club

·····
```



# builtwith网站提供的服务

地址：https://builtwith.com/



<a href="https://imgchr.com/i/iwIwA1"><img src="https://s1.ax1x.com/2018/10/19/iwIwA1.md.png" alt="iwIwA1.png" border="0" /></a>





<a href="https://imgchr.com/i/iwIbuQ"><img src="https://s1.ax1x.com/2018/10/19/iwIbuQ.md.jpg" alt="iwIbuQ.jpg" border="0" /></a>



# 现在存在的问题

我们可能ping出该域名的ip，查出但是不能揪出其背后的服务架构，可能根据nmap扫描出的端口猜测下用了什么服务（但是常用端口可以更改），小体量的服务可能所有的服务都在同一台机器，稍微大一点的网站都会db与web分离，准确性有待提高



## 找出ip所在的机器在云上还是物理机器



地址：http://ip.cn

<a href="https://imgchr.com/i/iwoEU1"><img src="https://s1.ax1x.com/2018/10/19/iwoEU1.md.png" alt="iwoEU1.png" border="0" /></a>

## nmap ip出来的端口

```
➜  ~ nmap 66.66.**.**

Starting Nmap 7.01 ( https://nmap.org ) at 2018-10-19 13:30 CST
Nmap scan report for 118.24.197.55
Host is up (0.0012s latency).
Not shown: 996 closed ports
PORT     STATE    SERVICE
22/tcp   open     ssh
25/tcp   filtered smtp
800/tcp  open     mdbs_daemon
3306/tcp filtered mysql
```

## 关于命令组合

### && 

1 命令之间使用 && 连接，实现逻辑与的功能。
2 只有在 && 左边的命令返回真（命令返回值 $? == 0），&& 右边的命令才会被执行。
3 只要有一个命令返回假（命令返回值 $? == 1），后面的命令就不会被执行。

###  ||

1 命令之间使用 || 连接，实现逻辑或的功能。
2 只有在 || 左边的命令返回假（命令返回值 $? == 1），|| 右边的命令才会被执行。这和 c 语言中的逻辑或语法功能相同，即实现短路逻辑或操作。
3 只要有一个命令返回真（命令返回值 $? == 0），后面的命令就不会被执行。

#### 两个案例：

案例1

```
killall php-fpm &&  /usr/local/php/sbin/php-fpm 

```

上面这个命令是 杀死php所有进程，并重新启动 php ，但是php进程要是很多，killall 不能立刻杀死所有的进程，后面的php开启也不会执行，这样可能酿成大问题，所以，要想确保万无一失，就用kill -9 杀死pid，再重启，像这样

```
ps -ef |grep php  |grep -v grep |awk '{print $2}'|xargs kill -9 && /www/web/php/sbin/php-fpm
```

案例2

```
rm ~/Desktop/1.txt && echo "success" || echo "fail"
```


如果 ~/Desktop 目录下存在文件 1.txt，将输出 success 提示信息；否则输出 fail 提示信息

###  ;

1 命令之间使用;,不论前面的命令是否成功，;后面的依旧会执行
2 一条命令需要独占一个物理行，如果需要将多条命令放在同一行，命令之间使用命令分隔符（;）分隔。执行的效果等同于多个独立的命令单独执行的效果


​	
​	
### {}

1 表示在当前 shell 中将多个命令作为一个整体执行。需要注意的是，使用 () 括起来的命令在执行前面都不会切换当前工作目录，也就是说命令组合都是在当前工作目录下被执行的，尽管命令中有切换目录的命令。


示范：

```
[root@pa1 tmp]#\rm ~/Desktop/1.txt || {cd ~/Desktop/;ls -a;echo "fail"}
rm: cannot remove ‘/root/Desktop/1.txt’: No such file or directory
-bash: cd: /root/Desktop/: No such file or directory                            #没有这个文件，执行||后面的
.                                                   header.html          php-fpm.sock
..                                                  hsperfdata_root      sess_fc6cleqmbkejpsje96t40q7o86  #ls -a 
fail                                    #输出 fail
```

### （）

1 括号中的命令将会新开一个子shell顺序执行，所以括号中的变量不能够被脚本余下的部分使用。括号中多个命令之间用分号隔开，最后一个命令可以没有分号，各命令和括号之间不必有空格
	
​	
​	
## 关于后台运行

```
&                 --------------窗口关闭后台运行会取消
nohup command &   --------------窗口关闭后台运行继续，会输出一个文件 nohup.out
screen            --------------窗口关闭后台继续运行，比nohup稳定
```




## 查看当前有多少在后台运行的命令

```
jobs   #列出由ctrl+z，&，nohup命令调到后台的程序

screen -ls  #列出当前所有由screen调到后台的程序
```



## 后台命令拉到前台继续

```
screen -r yourname # 回到yourname这个进程

fg                 #将后台中的命令调至前台继续运行

bg                 #将一个在后台暂停的命令，变成继续执行
```




## 怎么杀死后台运行的

### jobs

```
jobs -l #显示后台挂起的程序pid及状态 （kill pid）
```



### screen  

```
screen -ls  #列出当前所有由screen调到后台的程序
screen -r pid （直接ctrl+c退出）
或者直接命令行找到pid ，kill掉
```



## 查看某个进程开启的时间

```
ps -o lstart -p  pid 
```



## 查看这个命令会运行多久？

```
time command 
```



## 查看这个命令在执行前会做什么？

```
maybe

[root@pa2 ~]# !maybe
maybe rm -f root.txt 
maybe has prevented rm -f root.txt from performing 1 file system operations:

  delete /root/root.txt

Do you want to rerun rm -f root.txt and permit these operations? [y/N] y
```



拉到前台继续看输出的话，得看你是怎么放到后面的，解铃还需系铃人
有的是& 有的是 nohup 还有screen ，除了screen，这些后台的东西，都可以用fg加 序号继续在前台执行## 前面的话

市面上常见的.tar、.gz 、.tar.gz、.tgz、.bz2、.tar.bz2、.Z、. tar.Z、.zip、.rar这10种压缩文件
Linux下最常用的打包程序就是tar了，使用tar程序打出来的包我们常称为tar包，tar包文件的命令通常都是以.tar结尾的。生成tar包后，就可以用其它的程序来进行压缩了

## tar命令小结


### 参数

-c: 建立压缩档案 
-x：解压 
-t：查看内容 
-r：向压缩归档文件末尾追加文件 
-u：更新原压缩包中的文件

这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。

-z：有gzip属性的 
-j：有bz2属性的 
-Z：有compress属性的 
-v：显示所有过程 
-O：将文件解开到标准输出 


下面的参数-f是必须的

-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。 

### 基本使用

```
tar -cf all.tar *.jpg #这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。 
```

```
tar -rf all.tar *.gif

tar -cf all.tar *.jpg
#这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包 ，-f指定包的文件名。
```

```
tar -rf all.tar *.gif
#这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。
```

```
tar -uf all.tar logo.gif
#这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。
```

```
tar -tf all.tar
#这条命令是列出all.tar包中所有文件，-t是列出文件的意思
```



### 调用其他

以上就是tar的最基本的用法。为了方便用户在打包解包的同时可以压缩或解压文件，tar提供了一种特殊的功能。这就是tar可以在打包或解包的同时调用其它的压缩程序，比如调用gzip、bzip2等

####  调用gzip

```
.tar.gz格式

解压: tar zxvf file.tar.gz
压缩: tar zcvf file.tar.gz dir 
```



#### 调用bzip2

​	

```
.bz2
压缩	 tar -cjf all.tar.bz2 dir
解压	 tar -xjf all.tar.bz2
```


​	

#### 调用compress

compress也是一个压缩程序，但是好象使用compress的人不如gzip和bzip2的人多。.Z结尾的文件就是bzip2压缩的结果。与 compress相对的解压程序是uncompress。tar中使用-Z这个参数来调用compress

```
.tar.Z 

压缩：   tar -czf all.tar.Z  dir
解压：   tar -xzf all.tar.Z
```


​	
### 要知道的参数

-a或--ascii 使用ASCII文字模式。 

-c或--stdout或--to-stdout 把压缩后的文件输出到标准输出设备，不去更动原始文件。 

-d或--decompress或----uncompress 解开压缩文件。 

-f或--force 强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接。 

-h或--help 在线帮助。 

-l或--list 列出压缩文件的相关信息。 

-L或--license 显示版本与版权信息。 

-n或--no-name 压缩文件时，不保存原来的文件名称及时间戳记。 

-N或--name 压缩文件时，保存原来的文件名称及时间戳记。 

-q或--quiet 不显示警告信息。 

-r或--recursive 递归处理，将指定目录下的所有文件及子目录一并处理。 

-S<压缩字尾字符串>或----suffix<压缩字尾字符串> 更改压缩字尾字符串。 

-t或--test 测试压缩文件是否正确无误。 

-v或--verbose 显示指令执行过程。 

-V或--version 显示版本信息。 

-<压缩效率> 压缩效率是一个介于1－9的数值，预设值为"6"，指定愈大的数值，压缩效率就会愈高。 

--best 此参数的效果和指定"-9"参数相同。 

--fast 此参数的效果和指定"-1"参数相同。

### 其余格式

#### .tar格式

解压：tar xvf file.tar
打包: tar cvf file.tar dir  #(注:tar是打包,不是压缩!) 

#### .gz格式

解压: gunzip file.gz
指定位置解压: gzip -d file.gz
压缩: gzip file

#### .bz2格式

解压: bzip2 -d file.bz2
解压: bunzip2 file.bz2
压 缩: bzip2 -z file 

#### .bz格式


解压: bzip2 -d file.bz
解压: bunzip2 file.bz 

#### .tar.tgz格式

解压: tar zxvf file.tar.tgz
压缩: tar zcvf file.tar.tgz file 

#### .zip格式

解压: unzip file.zip -d dir
压缩打包: zip -r file.zip dir 

#### .rar格式

需要安装 

```
wget https://www.rarlab.com/rar/rarlinux-x64-5.6.b4.tar.gz
tar xf rarlinux-x64-5.6.b4.tar.gz
cd rar/
make 

压缩： rar a  all.rar dir 
解压： rar e  all.rar
```


参数 （贴几个常用的，因为确实太多了，a和e不需要加-）

a               添加文件到压缩文件
e               解压压缩文件到当前目录
-w<路径>        指定工作目录



#### .tar.xz格式

先用xz解压，在用tar解压，貌似也可以

注意：

xz需要安装

ubuntu ：apt-get -y install xz-utils
Centos ：yum -y install xz xz-devel
但是我试了，以上两种官方的，都不行，还是编译吧

下载地址： http://download.chinaunix.net/down.php?id=33115&ResourceID=13078&site=1
tar -xjf xz-5.0.3.tar.bz2 
cd xz-5.0.3/
./configure 
make && make install 

使用：

压缩：xz -z file

解压：xz -d file


## 关于解压

.tar 用 tar –xvf 解压
.gz 用 gzip -d或者gunzip 解压
.tar.gz和*.tgz 用 tar –xzf 解压
.bz2 用 bzip2 -d或者用bunzip2 解压
.tar.bz2用tar –xjf 解压
.Z 用 uncompress 解压
.tar.Z 用tar –xzf 解压
.rar 用 unrar e解压
.zip 用 unzip 解压

.tar.xz用xz解压，在用tar解压


再补充吧## 关于服务器备份策略

备份这东西，出事了就明白它有多重要了，就像人，总是在失去后才知道珍惜

  #### 数据库备份

1.数据库备份，包括测试站和正式站，全备和增倍，增倍就是拷贝binlog日志，频率自己控制
  #### 配置文件备份
2.在运行的服务的配置文件
  #### 定时任务备份
3.当前定时任务备份，为什么备份这个？crontab -r 了解一下
  #### 持续进程项目及代码仓库备份
4.jenkins构建任务备份及gitlab代码仓库配置及代码备份
  #### 安全方面
5.安全方面，秒级备份历史记录文件及登录日志还有iptables规则，命令行文件是/root/.bash_history，登录日志在/var/log/wtmp，登录日志打开用cat等一般命令打开会乱码，用who打开

  #### 待补充```
[client]

# =======================================================CLIENT

socket                  =/usr/local/mysql/mysql.sock
port                           = 3306

[mysqldump]
quick

[mysqld]

# ======================================================GENERAL

# 服务器标识id(用于主从复制)

server_id               = 1

# 操作mysql的系统用户名

user   = mysql
#默认字符
character_set_server    =utf8mb4
#gtid_mode              =on                 
basedir                 =/usr/local/mysql
datadir                 =/home/MysqlData

# mysql socket连接文件

socket                  =/usr/local/mysql/mysql.sock

# 记录mysql进程的文件

pid-file                =/usr/local/mysql/mysql.pid

# MyISAM

# 索引缓冲区大小

key_buffer_size         = 1024M

# 自动检查和修复没有适当关闭的MyISAM表

#myisam-recover = FORCE,BACKUP

# MyISAM表发生变化时重新排序所需要的缓冲区大小

#myisam-sort-buffer-size=  128M

# 重建索引时所允许的最大临时文件大小

#myisam-max-sort-file-size  =  10G

# 设置网络传输中一次消息传输量的最大值，取值范围为1MB~1GB,必须设置为1024的倍数

max_allowed_packet      = 160M

#每个线程的堆栈大小
thread_stack            = 192K

#线程缓存
thread_cache_size       = 200

#session级别
binlog_cache_size       = 512M

# 单个查询能够使用的缓冲区大小

query-cache-limit  = 4M

# SQL模式(在生产环境要设置为严格模式，可以防止非法数据的插入)

sql-mode   = STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_AUTO_VALUE_ON_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ONLY_FULL_GROUP_BY

#==========================================default settings===============

# 系统时间和当前时间一致

sysdate-is-now = 1
#服务器时区
default-time-zone = system 

# 二进制日志是否同步写入磁盘(1表示每次每写入，是最安全的，但也是最慢的)

sync_binlog             =1

# 日志有效时间

expire-logs-days   = 14

# 默认存储引擎

default-storage-engine = InnoDB

#=======================================提升性能开关

# 线程并发数，一般设置为核数的2倍，如8核的CPU可以设置为16

#thread_concurrency     = 2
#所有线程打开的表的数目。增大该值可以增加mysqld需要的文件描述符的数量
#table_cache = 512 

# innodb文件IO线程数(与cpu有关)

#innodb-file-io-threads =  4

# innodb并发线程数(与CPU核数相关)

#innodb-thread-concurrency  =  8

# 打开文件描述符的限制(至少在大于 table-open-cache*2+InnoDB表的数量)

open-files-limit   = 65535

#=====================================安全

# 避免MySQL外部锁定

external-locking = FALSE

# 连接地址限制

bind-address		= 0.0.0.0

#=========================================连接 

# 每个主机在连接请求异常中断的最大次数，当超过该次数，则禁止host的连接请求，直到服务器重启或flush hosts;命令清空该host的相关信息

#max-connect-errors = 6000

# mysql最大进程连接数

max_connections         = 3000
#连接超时之前的最大秒数,在Linux平台上，该超时也用作等待服务器首次回应的时间
connect-timeout = 10
#等待关闭连接的时间
wait_timeout            = 288000
#关闭连接之前，允许interactive_timeout（取代了wait_timeout）秒的不活动时间。客户端的会话wait_timeout变量被设为会话interactive_timeout变量的值
interactive_timeout     = 288000



# CACHES AND LIMITS

#====================================log 

#超过多少天的binlog删除
expire_logs_days        = 10
max_binlog_size         = 1G
#路径相对于datadir，开启binlog
log-bin                 = mysql-bin
#二进制日志格式
binlog_format           =mixed

# 是否记录未使用索引的查询

log-queries-not-using-indexes  = 1

# 是否开启慢查询日志

slow-query-log = 1

# 慢查询日志文件位置

slow-query-log-file= /home/MysqlData/mysql-slow.log
#错误日志
log-error               = /home/MysqlData/mysql.err
#当不用中继日志时，删除他们。这个操作有SQL线程完成
relay-log-purge = 1 

# 内存临时表大小(超过其大小会写入磁盘)

tmp-table-size = 32M

# 可创建的内存表大小

max-heap-table-size= 32M

# 是否将查询结果放到查询缓存中

query-cache-type   = 0

# 单个查询能够使用的缓冲区大小

query_cache_limit       = 4M

# 查询缓存大小(在写入量大的系统，建议关闭)

query-cache-size   = 0
#查询缓存分配的最小块大小
query_cache_min_res_unit = 2K 

# 服务器线程缓存大小，类似于缓存池，1G内存建议为8，2G内存建议为16，4G以上可以配置更大

query_cache_size        = 1024M
#线程缓存
thread_cache_size       = 150

#innodb_thread_concurrency = 0

#session级别
binlog_cache_size = 1M 

#explicit_defaults_for_timestamp=true

# 线程并发数，一般设置为核数的2倍，如8核的CPU可以设置为16

#thread-concurrency = 1

# 表缓存区大小，应该与max_connections设置相关

#table-cache= 614

# 表定义信息缓存(从.frm文件中获取的)

#table-definition-cache = 1024

# 打开表(文件描述符)的缓存数量

#table-open-cache   = 1024

# 读入缓冲区大小

#read-buffer-size   = 1M

# 随机读缓冲区大小

#read-rnd-buffer-size   = 16M

# 批量插入缓冲区大小

#bulk-insert-buffer-size= 64M

# 用于排序的缓冲区大小

#sort-buffer-size   = 2M

# 表间关联的缓冲区大小

#join-buffer-size   = 2M



# ====================================================INNODB

#innodb刷新日志和数据的模式，有

#innodb-flush-method= O_DIRECT

# 为提高性能，可以以循环方式将日志文件写入到多个文件， 两组事物日志

innodb-log-files-in-group  = 2

# 日志缓存区大小

innodb-log-buffer-size =  16M

# innodb日志文件大小

innodb-log-file-size   = 256M

# 提交事务后将日志写入磁盘的频率

innodb-flush-log-at-trx-commit = 1

# 每个innodb表使用一个数据文件

innodb-file-per-table  = 1

# innodb缓存池大小

innodb-buffer-pool-size= 1G
#innodb主线程刷新缓存池中的数据，使脏数据比例小于90%
innodb_max_dirty_pages_pct = 90 

# 在MySQL暂时停止响应新请求前，短时间内的多少个请求可以被存在堆栈中

back_log = 600

# 设置事务的隔离级别，可以使用READ-UNCOMMITED 读未提交，READ-COMMITED 读已提交；REPEATABLE-READ 可重复读；SERIALIZABLE 串行

#transaction_isolcation = READ-COMMITED

# 表名都小写

#lower_case_table_names =  1

#==================================================从服务器优化
slave-net-timeout = 600 #从服务器也能够处理网络连接中断。但是，只有从服务器超过slave_net_timeout秒没有从主服务器收到数据才通知网络中断
net_read_timeout = 30 #从服务器读取信息的超时
net_write_timeout = 60 #从服务器写入信息的超时
net_retry_count = 10 #如果某个通信端口的读操作中断了，在放弃前重试多次
net_buffer_length = 16384 #包消息缓冲区初始化为net_buffer_length字节，但需要时可以增长到

 #复制时忽略数据库及表
replicate-wild-ignore-table = mysql.%
#复制时忽略数据库及表
replicate-wild-ignore-table = test.% 
#开启log-slave-updates参数后，从库从主库复制的数据会写入log-bin日志文件里。这也是该参数的功能
log-slave-updates       = 1
#skip_slave_start 该选项能够阻止备库在崩溃后自动启动复制，崩溃后启动复制，数据可能不一致
skip_slave_start        =1 
#该选项会阻止任何没有特权权限的线程修改数据
read_only = 1   

#skip-grant-tables
[mysqlsafe]
```

```
systemLog:
   # verbosity: 0  #日志等级，0-5，默认0
   # quiet: false  #限制日志输出，
   # traceAllExceptions: true  #详细错误日志
   # syslogFacility: user #记录到操作系统的日志级别，指定的值必须是操作系统支持的，并且要以--syslog启动
   path: /opt/mongodb/logs/mongodb.log  #日志路径。
   logAppend: false #启动时，日志追加在已有日志文件内还是备份旧日志后，创建新文件记录日志, 默认false
   logRotate: rename #rename/reopen。rename，重命名旧日志文件，创建新文件记录；reopen，重新打开旧日志记录，需logAppend为true
   destination: file #日志输出方式。file/syslog,如果是file，需指定path，默认是输出到标准输出流中
   timeStampFormat: iso8601-local #日志日期格式。ctime/iso8601-utc/iso8601-local, 默认iso8601-local
   # component: #各组件的日志级别
   #    accessControl:
   #       verbosity: <int>
   #    command:
   #       verbosity: <int>

processManagement:
   fork: true #以守护进程运行 默认false
   pidFilePath: /tmp/mongo.pid
   # pidFilePath: <string> #PID 文件位置

net:
   port: 27017 #监听端口，默认27017
   bindIp: 127.0.0.1 #绑定监听的ip，deb和rpm包里有默认的配置文件(/etc/mongod.conf)里面默认配置为127.0.0.1,若不限制IP，务必确保认证安全，多个Ip用逗号分隔
   maxIncomingConnections: 65536 #最大连接数，可接受的连接数还受限于操作系统配置的最大连接数
   wireObjectCheck: true #校验客户端的请求，防止错误的或无效BSON插入,多层文档嵌套的对象会有轻微性能影响,默认true
   ipv6: false #是否启用ipv6,3.0以上版本始终开启
   unixDomainSocket: #unix socket监听，仅适用于基于unix的系统
      enabled: false #默认true
      pathPrefix: /tmp #路径前缀，默认/temp
      filePermissions: 0700 #文件权限 默认0700
   http: #警告 确保生产环境禁用HTTP status接口、REST API以及JSON API以防止数据暴露和漏洞攻击
      enabled: false #是否启用HTTP接口、启用会增加网络暴露。3.2版本后停止使用HTTP interface
      JSONPEnabled: false #JSONP的HTTP接口
      RESTInterfaceEnabled: false #REST API接口
   # ssl: #估计用不到，所以没有自己看
   #    sslOnNormalPorts: <boolean>  # deprecated since 2.6
   #    mode: <string>
   #    PEMKeyFile: <string>
   #    PEMKeyPassword: <string>
   #    clusterFile: <string>
   #    clusterPassword: <string>
   #    CAFile: <string>
   #    CRLFile: <string>
   #    allowConnectionsWithoutCertificates: <boolean>
   #    allowInvalidCertificates: <boolean>
   #    allowInvalidHostnames: <boolean>
   #    disabledProtocols: <string>
   #    FIPSMode: <boolean>

security:
   authorization: enabled # enabled/disabled #开启客户端认证
   javascriptEnabled:  true #启用或禁用服务器端JavaScript执行
   # keyFile: <string> #密钥路径
   # clusterAuthMode: <string> #集群认证方式
   # enableEncryption: <boolean>
   # encryptionCipherMode: <string>
   # encryptionKeyFile: <string>
   # kmip:
   #    keyIdentifier: <string>
   #    rotateMasterKey: <boolean>
   #    serverName: <string>
   #    port: <string>
   #    clientCertificateFile: <string>
   #    clientCertificatePassword: <string>
   #    serverCAFile: <string>
   # sasl:
   #    hostName: <string>
   #    serviceName: <string>
   #    saslauthdSocketPath: <string>


# setParameter: #设置参数
#    <parameter1>: <value1>
#    <parameter2>: <value2>

storage:
   dbPath: /opt/mongodb/db #数据库，默认/data/db,如果使用软件包管理安装的查看/etc/mongod.conf
   indexBuildRetry: true #重启时，重建不完整的索引
   # repairPath: <string>  #--repair操作时的临时工作目录，默认为dbPath下的一个_tmp_repairDatabase_<num>的目录
   journal:
      enabled: true #启动journal,64位系统默认开启，32位默认关闭
      # commitIntervalMs: <num> #journal操作的最大时间间隔，默认100或30
   directoryPerDB: true #使用单独的目录来存储每个数据库的数据,默认false,如果需要更改，要备份数据，删除掉dbPath下的文件，重建后导入数据
   # syncPeriodSecs: 60 #使用fsync来将数据写入磁盘的延迟时间量,建议使用默认值
   engine: wiredTiger #存储引擎，mmapv1/wiredTiger/inMemory 默认wiredTiger
   wiredTiger:
      engineConfig: #wt引擎配置
         cacheSizeGB: 2 #看服务器情况来进行设置
         directoryForIndexes: true #索引是否按数据库名进行单独存储
      collectionConfig:
         blockCompressor: zlib #压缩配置
      indexConfig:
         prefixCompression: true #索引配置
   # mmapv1:
   #    preallocDataFiles: <boolean>
   #    nsSize: <int>
   #    quota:
   #       enforced: <boolean>
   #       maxFilesPerDB: <int>
   #    smallFiles: <boolean>
   #    journal:
   #       debugFlags: <int>
   #       commitIntervalMs: <num>
   # wiredTiger:
   #    engineConfig:
   #       cacheSizeGB: <number>  #缓存大小
   #       journalCompressor: <string> #数据压缩格式 none/snappy/zlib
   #       directoryForIndexes: <boolean> #将索引和集合存储在单独的子目录下，默认false
   #    collectionConfig:
   #       blockCompressor: <string> #集合数据压缩格式
   #    indexConfig:
   #       prefixCompression: <boolean> #启用索引的前缀压缩
   # inMemory:
   #    engineConfig:
   #       inMemorySizeGB: <number>

operationProfiling: #性能分析
   slowOpThresholdMs: 100 #认定为查询速度缓慢的时间阈值，超过该时间的查询即为缓慢查询，会被记录到日志中, 默认100
   mode: off #operationProfiling模式 off/slowOp/all 默认off

# replication: #复制集相关
#    oplogSizeMB: <int>
#    replSetName: <string>
#    secondaryIndexPrefetch: <string>
#    enableMajorityReadConcern: <boolean>
# sharding: #集群分片相关
#    clusterRole: <string>
#    archiveMovedChunks: <boolean>

# auditLog:
#    destination: <string>
#    format: <string>
#    path: <string>
#    filter: <string>

# snmp:
#    subagent: <boolean> #当设置为true，SNMP作为代理运行
#    master: <boolean> #当设置为true，SNMP作为主服务器运行

# basisTech:
#    rootDirectory: <string>
```

## 拒绝任意网络访问主机的 6666端口

```
iptables -A INPUT -p TCP -s 0.0.0.0/0 --dport 6666 -j REJECT
```

## 丢弃任意网络访问主机的 6666端口

```
iptables -A INPUT -p TCP -s 0.0.0.0/0 --dport 6666 -j DROP
```

## 接受任意网络访问主机的 6666端口
```
iptables -A INPUT -p TCP -s 0.0.0.0/0 --dport 6666 -j ACCEPT
```



## 禁止ping
```
iptables -A INPUT -p icmp --icmp-type echo-request -j DROP	 ### 向INPUT链追加规则：抛弃来自其他机器的imcp-request数据
```



## 禁止响应外部ping
```
iptables -A OUTPUT -p icmp --icmp-type echo-reply -j DROP	 ### 向OUTPUT链追加规则：抛弃本机对外发出的icmp-reply数据
```



## 允许外部ping入
```
iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT	 ### 向INPUT链追加规则：接受来自其他机器的imcp-request数据
```



## 允许响应外部ping入
```
iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT	 ### 向OUTPUT链追加规则：接受本机对外发出的icmp-reply数据
```



## 接受其他机器向本机873端口发送的TCP
```
iptables -A INPUT -p tcp --dport 873 -j ACCEPT	 ### 向INPUT链追加规则：接受其他机器向本机873端口发送的TCP数据
```



## 拒绝其他所有机器的80端口响应
```
 iptables -A INPUT -p TCP --dport  80  -j REJECT
```



## 允许发送dns

```
iptables -A OUTPUT -p udp --dport 53 -j ACCEPT	 ### 向INPUT链追加规则：允许本机通过53端口对外发送UDP数据
```


## vim删除光标至行尾的内容

d$

## vim复制和粘贴

yy 复制

p 粘贴至当前行之后
P 粘贴至当前行之前

### vim 替换 （命令模式）

### 将光标当前行中第一个出现的lijinghua替换为admin，没有则不替换

:s/lijinghua/admin/



### 将光标当前行中所有的lijinghua替换为admin

:s/lijinghua/admin/g 



### 将第三行至第五行之间的所有lijinghua替换为bin 

:3,5 s/lijinghua/bin/g



### 将所有行的lijinghua替换为admin

:% s/lijinghua/admin/g 




## vim 保存或退出

保存 :x

另存为 :w b.txt

## vim 忽略大小写

:set ignorecase 



## 账户安全


### 创建账户及组

```
useradd 

-M 不创建家目录
-s 设置账户的登录shell，默认为bash

-c 设置账号描述信息，一般为账号全称
-d 设置账号家目录，默认为/home/用户名
-e 设置失效日期
-g 设置用户的基本组
-G 设置账户的附加组，多个附加组之间用逗号隔开
-u 指定账户UID 
```

```


useradd -s /sbin/nologin -M nginx   ##创建无法登录系统且没有家目录的用户 nginx 

useradd -c test -d  /home/lijinghua -e 2018-11-11 -g root -G bin,mail,adm  lijinghua  
#创建普通账户，名称为lijinghua，描述信息为test，失效日期为2018-11-11，账户的基本组为root，附加组为bin，mail，adm
```



### 修改账户及组

```
passwd

-l 锁定账户，仅root可使用此选项
--stdin 从文件或管导读取密码
-u 解锁账户
-d 快速清除账户密码
```

#### 举个栗子

```
echo "qwer123" | passwd --stdin lijinghua 
```

### usermod 

-e 修改用户失效日期 

-d 修改用户家目录 

---与useradd参数类似


## 重要概念

工作区和暂存区

工作区: 就是我们通$ git init 创建的代码库的所有文件但是不包括 .git文件(版本库) 

暂存区: 我们通过git add ./*/*Xxx/Xxxx* 添加的修改,都是进入到暂存区了,肉眼不可见 通过  git status  可以看到修改的状态，修改只能在被add 到暂存区以后才能被提交

Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快

## 展示帮助信息

```
git help -g
```

## 将所有以Hello开头的文件的修改添加到暂存区 

```
git add Hello*   
```

```
git add Hello?   #将以Hello开头后面只有一位的文件的修改提交到暂存区 例如:Hello1.txt,HelloA.java 如果是HelloGit.txt或者Hello.java是不会被添加的
git add *lijinghua  # 将以Controller结尾的文件的所有修改添加到暂存区
```

## 配置邮箱和名字

```
 git config --global user.name "username" 

 git config --global user.email "mail@mail.com"
```



## 查看仓库的状态

```
git status
```



## 将所有修改添加到暂存区

```
git add .
```



## 将暂存区的修改提交到仓库 

```
git commit -m "注释"
```

## 查看git的commit信息,每次提交的信息包括注视在内,从最新提交到最久提交

```
git log
```



## 将commit 信息简化成一行显示 ,git log 简化

```
git log --pretty=oneline
```



## 退回到相对于当前版本的上一个版本 HEAD 表示当前版本

```
git reset --hard HEAD^ 
```



## 退回到相对于当前版本的上上一个版本  HEAD 代表当前版本

```
git reset --hard HEAD^^
```



## 退回到相对于当前版本的上 100 个版本去  HEAD 表示当前版本

```
git reset --hard HEAD~100
```



## 退回到指定的版本,这里不需要全部写commit id  Git 回去自动适配

```
git reset --hard 676767676
```



## 在退回到旧版本之后可以查看旧版本之前的提交日志

```
git reflog   
```

## 回到远程仓库的状态

抛弃本地所有的修改，回到远程仓库的状态。

```
git fetch --all && git reset --hard origin/master
```

## 重设第一个commit

也就是把所有的改动都重新放回工作区，并**清空所有的commit**，这样就可以重新提交第一个commit了

```
git update-ref -d HEAD
```

## 展示工作区和暂存区的不同

输出**工作区**和**暂存区**的different(不同)。

```
git diff
```

还可以展示本地仓库中任意两个commit之间的文件变动：

```
git diff <commit-id> <commit-id>
```

## 展示暂存区和最近版本的不同

输出**暂存区**和本地最近的版本(commit)的different(不同)。

```
git diff --cached
```

## 展示暂存区、工作区和最近版本的不同

输出**工作区**、**暂存区** 和本地最近的版本(commit)的different(不同)。

```
git diff HEAD
```

## 快速切换分支

```
git checkout -
```

## 删除已经合并到master的分支

```
git branch --merged master | grep -v '^\*\|  master' | xargs -n 1 git branch -d
```

## 展示本地分支关联远程仓库的情况

```
git branch -vv
```

## 关联远程分支

关联之后，`git branch -vv`就可以展示关联的远程分支名了，同时推送到远程仓库直接：`git push`，不需要指定远程仓库了。

```
git branch -u origin/mybranch
```

或者在push时加上`-u`参数

```
git push origin/mybranch -u
```

## 列出所有远程分支

-r参数相当于：remote

```
git branch -r
```

## 列出本地和远程分支

-a参数相当于：all

```
git branch -a
```

## 创建分支

```
git branch  <branch-name>
```

## 创建并切换到本地分支

```
git checkout -b <branch-name>
```

## 创建并切换到远程分支

```
git checkout -b <branch-name> origin/<branch-name>
```

## 删除本地分支

```
git branch -d <local-branchname>
```

## 删除远程分支

```
git push origin --delete <remote-branchname>
```

或者

```
git push origin :<remote-branchname>
```

## 重命名本地分支

```
git branch -m <new-branch-name>
```

## 查看标签

```
git tag
```

展示当前分支的最近的tag

```
git describe --tags --abbrev=0
```

## 本地创建标签

```
git tag <version-number>
```

默认tag是打在最近的一次commit上，如果需要指定commit打tag：

```
$ git tag -a <version-number> -m "v1.0 发布(描述)" <commit-id>
```

## 推送标签到远程仓库

首先要保证本地创建好了标签才可以推送标签到远程仓库：

```
git push origin <local-version-number>
```

一次性推送所有标签，同步到远程仓库：

```
git push origin --tags
```

## 删除本地标签

```
git tag -d <tag-name>
```

## 删除远程标签

删除远程标签需要**先删除本地标签**，再执行下面的命令：

```
git push origin :refs/tags/<tag-name>
```

## 切回到某个标签

一般上线之前都会打tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：

```
git checkout -b branch_name tag_name
```

## 放弃工作区的修改

```
git checkout <file-name>
```

放弃所有修改：

```
git checkout .
```

## 恢复删除的文件

```
git rev-list -n 1 HEAD -- <file_path> #得到 deleting_commit

git checkout <deleting_commit>^ -- <file_path> #回到删除文件 deleting_commit 之前的状态
```

## 回到某一个commit的状态，并重新增添一个commit

```
git revert <commit-id>
```

## 回到某个commit的状态，并删除后面的commit

和revert的区别：reset命令会抹去某个commit id之后的所有commit

```
git reset <commit-id>  #默认就是-mixed参数。

git reset –mixed HEAD^  #回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。

git reset –soft HEAD~3  #回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可   

git reset –hard <commit-id>  #彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容
```

## 修改上一个commit的描述

```
git commit --amend
```

## 查看commit历史

```
git log
```

## 查看某段代码是谁写的

blame的意思为‘责怪’，你懂的。

```
git blame <file-name>
```

## 显示本地执行过git命令

就像shell的history一样

```
git reflog
```

## 修改作者名

```
git commit --amend --author='Author Name <email@address.com>'
```

## 修改远程仓库的url

```
git remote set-url origin <URL>
```

## 增加远程仓库

```
git remote add origin <remote-url>
```

## 列出所有远程仓库

```
git remote -v
```

## 查看两个星期内的改动

```
git whatchanged --since='2 weeks ago'
```

## 把A分支的某一个commit，放到B分支上

这个过程需要`cherry-pick`命令，[参考](http://sg552.iteye.com/blog/1300713#bc2367928)

```
git checkout <branch-name> && git cherry-pick <commit-id>
```

## 给git命令起别名

简化命令

```
git config --global alias.<handle> <command>

比如：git status 改成 git st，这样可以简化命令

git config --global alias.st status
```

## 存储当前的修改，但不用提交commit

详解可以参考[廖雪峰老师的git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000)

```
git stash
```

## 保存当前状态，包括untracked的文件

untracked文件：新建的文件

```
git stash -u
```

## 展示所有stashes

```
git stash list
```

## 回到某个stash的状态

```
git stash apply <stash@{n}>
```

## 回到最后一个stash的状态，并删除这个stash

```
git stash pop
```

## 删除所有的stash

```
git stash clear
```

## 从stash中拿出某个文件的修改

```
git checkout <stash@{n}> -- <file-path>
```

## 展示所有tracked的文件

```
git ls-files -t
```

## 展示所有untracked的文件

```
git ls-files --others
```

## 展示所有忽略的文件

```
git ls-files --others -i --exclude-standard
```

## 强制删除untracked的文件

可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的untracked文件。`clean`命令，**注意两点**：

1. clean后，删除的文件无法找回
2. 不会影响tracked的文件的改动，只会删除untracked的文件

```
git clean <file-name> -f
```

## 强制删除untracked的目录

可以用来删除新建的目录，**注意**:这个命令也可以用来删除untracked的文件。详情见上一条

```
git clean <directory-name> -df
```

## 展示简化的commit历史

```
git log --pretty=oneline --graph --decorate --all
```

## 把某一个分支到导出成一个文件

```
git bundle create <file> <branch-name>
```

## 从包中导入分支

新建一个分支，分支内容就是上面`git bundle create`命令导出的内容

```
git clone repo.bundle <repo-dir> -b <branch-name>
```

## 执行rebase之前自动stash

```
git rebase --autostash
```

## 从远程仓库根据ID，拉下某一状态，到本地分支

```
git fetch origin pull/<id>/head:<branch-name>
```

## 详细展示一行中的修改

```
git diff --word-diff
```

## 清除gitignore文件中记录的文件

```
git clean -X -f
```

## 展示所有alias和configs

**注意：** config分为：当前目录（local）和全局（golbal）的config，默认为当前目录的config

```
git config --local --list (当前目录)
git config --global --list (全局)
```

## 展示忽略的文件

```
git status --ignored
```

## commit历史中显示Branch1有的，但是Branch2没有commit

```
git log Branch1 ^Branch2
```

## 在commit log中显示GPG签名

```
git log --show-signature
```

## 删除全局设置

```
git config --global --unset <entry-name>
```

## 新建并切换到新分支上，同时这个分支没有任何commit

相当于保存修改，但是重写commit历史

```
git checkout --orphan <branch-name>
```

## 展示任意分支某一文件的内容

```
git show <branch-name>:<file-name>
```

## clone下来指定的单一分支

```
git clone -b <branch-name> --single-branch https://github.com/user/repo.git
```

## 忽略某个文件的改动

关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动

```
git update-index --assume-unchanged path/to/file
```

恢复 track 指定文件的改动

```
git update-index --no-assume-unchanged path/to/file
```

## 忽略文件的权限变化

不再将文件的权限变化视作改动

```
git config core.fileMode false
```

## 以最后提交的顺序列出所有Git分支

最新的放在最上面

```
git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/
```

## 在commit log中查找相关内容

通过grep查找，given-text：所需要查找的字段

```
git log --all --grep='<given-text>'
```

## 把暂存区的指定file放到工作区中

不添加参数，默认是-mixed

```
git reset <file-name>
```

## 强制推送

```
git push -f <remote-name> <branch-name>
```## 前面的话

```
cpu属性值说明：

%user：CPU处在用户模式下的时间百分比。

%nice：CPU处在带NICE值的用户模式下的时间百分比。

%system：CPU处在系统模式下的时间百分比。

%iowait：CPU等待输入输出完成时间的百分比。

%steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。

%idle：CPU空闲时间百分比。
```

## 综合

### dstat

```
结合了vmstat，iostat，ifstat，netstat以及更多的信息
实时显示统计情况
在分析和排障时可以通过启用监控项并排序
模块化设计
使用python编写的，更方便扩展现有的工作任务
容易扩展和添加你的计数器（请为此做出贡献）
包含的许多扩展插件充分说明了增加新的监控项目是很方便的
可以分组统计块设备/网络设备，并给出总数
可以显示每台设备的当前状态
极准确的时间精度，即便是系统负荷较高也不会延迟显示
显示准确地单位和和限制转换误差范围
用不同的颜色显示不同的单位
显示中间结果延时小于1秒
支持输出CSV格式报表，并能导入到Gnumeric和Excel以生成图形


参数


-c ：显示CPU系统占用，用户占用，空闲，等待，中断，软件中断等信息
-C ：当有多个CPU时候，此参数可按需分别显示cpu状态，例：-C 0,1 是显示cpu0和cpu1的信息
-n ：显示网络状态
-N eth1,total：有多块网卡时，指定要显示的网卡
-l ：显示负载统计量
-m ：显示内存使用率（包括used，buffer，cache，free值）
-r ：显示I/O请求情况
-s ：显示交换分区使用情况
-y ：系统状态
-t ：将当前时间显示在第一行
-p ：显示进程状态。
-g ：显示页面使用情况
--fs ：显示文件系统统计数据（包括文件总数量和inodes值）
--nocolor ：不显示颜色（有时候有用）
--socket ：显示网络统计数据
--tcp ：显示常用的TCP统计
--udp ：显示监听的UDP接口及其当前用量的一些动态数据
--disk-util ：显示某一时间磁盘的忙碌状况
--freespace ：显示当前磁盘空间使用率
--proc-count ：显示正在运行的程序数量
--top-bio ：指出块I/O最大的进程
--top-cpu ：图形化显示CPU占用最大的进程
--top-io ：显示正常I/O最大的进程
--top-mem ：显示占用最多内存的进程
--output ：输出.csv文件


#### 输出csv文件
dstat --output /tmp/sampleoutput.csv -cdngy

系统状态
dstat -y

---system--

 int  csw    #中断数    上下文切换数
```

### top

#### 系统平均运行时间和负载

前几行水平显示了不同系统参数的概括

top命令的顶部显示与uptime命令相似的输出，这些字段显示：

- 当前时间
- 系统已运行的时间
- 当前登录用户的数量
- 相应最近5、10和15分钟内的平均负载。

可以使用’l’命令切换uptime的显示。

#### 任务

第二行显示的是任务或者进程的总结。进程可以处于不同的状态。这里显示了全部进程的数量。除此之外，还有正在运行、睡眠、停止、僵尸进程的数量（僵尸是一种进程的状态）。

这些进程概括信息可以用’t’切换显示

#### CPU状态



us, user： 运行(未调整优先级的) 用户进程的CPU时间

sy，system: 运行内核进程的CPU时间

ni，niced：运行已调整优先级的用户进程的CPU时间

wa，IO wait: 用于等待IO完成的CPU时间

hi：处理硬件中断的CPU时间

si: 处理软件中断的CPU时间

st：这个虚拟机被hypervisor偷去的CPU时间（译注：如果当前处于一个hypervisor下的vm，实际上hypervisor也是要消耗一部分CPU处理时间的）。

可以按t图像化显示

 #### 内存使用

第一行是物理内存使用，第二行是虚拟内存使用(交换空间)。

物理内存显示如下:全部可用内存、空闲内存、已使用内存、缓冲内存。相似地：交换部分显示的是：全部、空闲、已使用和缓冲交换空间。

可以使用m图像化显示

#### 字段|列

在横向列出的系统属性和状态下面，是以列显示的进程。不同的列代表下面要解释的不同属性。

**PID**           进程ID，进程的唯一标识符

**USER**        进程所有者的实际用户名。

**PR**             进程的调度优先级。这个字段的一些值是’rt’。这意味这这些进程运行在实时态。

**NI  **          进程的nice值（优先级）。越小的值意味着越高的优先级。

**VIRT**          进程使用的虚拟内存。

**RES**            驻留内存大小。驻留内存是任务使用的非交换物理内存大小。

**SHR**           SHR是进程使用的共享内存。

**S**

这个是进程的状态。它有以下不同的值:

- D – 不可中断的睡眠态。
- R – 运行态
- S – 睡眠态
- T – 被跟踪或已停止
- Z – 僵尸态

**%CPU** 自从上一次更新时到现在任务所使用的CPU时间百分比。

**%MEM** 进程使用的可用物理内存百分比。

**TIME+** 任务启动后到现在所使用的全部CPU时间，精确到百分之一秒。

**COMMAND** 运行进程所使用的命令。

还有许多在默认情况下不会显示的输出，它们可以显示进程的页错误、有效组和组ID和其他更多的信息。

 #### 交互

##### 刷新页面

'空格' or ‘回车’

默认三秒刷新页面

##### 帮助 

'h'

##### 切换交替显示模式                   

'A' 

这个命令在全屏和交替模式间切换。在交替模式下会显示4个窗口（译注：分别关注不同的字段）:

1. Def （默认字段组）
2. Job （任务字段组）
3. Mem （内存字段组）
4. Usr （用户字段组）

这四组字段共有一个独立的可配置的概括区域和它自己的可配置任务区域。4个窗口中只有一个窗口是当前窗口。当前窗口的名称显示在左上方。（译注：只有当前窗口才会接受你键盘交互命令）

 我们可以用’a’和’w’在4个 窗口间切换。’a’移到后一个窗口，’w’移到前一个窗口。用’g’命令你可以输入一个数字来选择当前窗口。

##### 触发粗体显示

'B'

一些重要信息会以加粗字体显示。这个命令可以切换粗体显示。

##### 设置刷新时间

'd' or 's'

当按下’d’或’s’时，你将被提示输入一个值（以秒为单位），它会以设置的值作为刷新间隔。如果你这里输入了1，top将会每秒刷新

##### 切换负载，任务，内存信息显示

'l' 't' 'm'

##### 字段管理

'f'

##### 反向|常规排序

'R'

##### 显示进程完整路径

'c'

##### 显示空闲任务

'i'

##### 数视图

'V'

##### 改变配色

'Z'

按了大写Z之后，按1，回车，将会选择红色配色，以此类推

##### 颜色开关

'z'

##### 切换高亮信息

'x' 'y'

'x’将排序字段高亮显示（纵列）；’y’将运行进程高亮显示（横行

##### 制定特定用户

'u'

##### 设置最大显示任务的数量

'n' or  '#'

##### 传递结束信号

'k'

k一按下去，会让你输入一个将要被杀死的进程的pid，如若不输入任何pid，将会杀死当前出现的第一个

#### 参数

-b 批处理模式，以批处理模式启动top，在想用top输出保存文件是很有效

-c 命令/程序名触发，这个选项会以上次记住的程序/命令显示的状态显示（是否显示完整路径）。

-d 设置延迟间隔

-i 显示空闲进程

-n 设置迭代数量，将会在n次之后自动退出，若不写该参数，虽然也会执行，但是不会自动退出

-p 监控特定的pid 

-u 监控特定的用户

-U 监控特定的UID



### htop 









 

 

 

 

 

 

 

 

 

 

 

 

 

# cp

-v 显示复制进度

# ipcs

**ipcs命令**用于报告Linux中进程间通信设施的状态，显示的信息包括消息列表、共享内存和信号量的信息

```
-a：显示全部可显示的信息；
-q：显示活动的消息队列信息；
-m：显示活动的共享内存信息；
-s：显示活动的信号量信息。
```

# ps

## 找出僵尸进程

```
ps -A -o stat,ppid,pid,cmd | grep -e '^[Zz]'
```

# cpio

主要是用来建立或者还原备份档的工具程序，cpio命令可以复制文件到归档包中，或者从归档包中复制文件。



waiting..











# type

**type命令**用来显示指定命令的类型，判断给出的指令是内部指令还是外部指令

## 参数

```
-t：输出“file”、“alias”或者“builtin”，分别表示给定的指令为“外部指令”、“命令别名”或者“内部指令”；
-p：如果给出的指令为外部指令，则显示其绝对路径；
-a：在环境变量“PATH”指定的路径中，显示给定指令的信息，包括命令别名。
```

## 对比which

```
root@host:~# which cd          #内建指令则不输出
root@host:~# type -t cd        #内部指令
builtin
root@host:~# type -a cd        #没有别名则只显示是内部指令还是外部指令
cd is a shell builtin
root@host:~# type -a cp 
cp is /bin/cp
root@host:~# type cp        
cp is /bin/cp
root@host:~# type -t cp          #外部指令
file

root@host:~# type -a ls         #显示出ls的别名
ls is aliased to `ls --color=auto'
ls is /bin/ls
```

# wget

**wget命令**用来从指定的URL下载文件。wget非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用

### 继续执行上次终端的任务，断点续传

```
wget -c url
```

### 将下载下来的文件以不同的文件名字保存

```
wget -o  file url
```

### 限制速度

```
wget --limit-rate=300k url
```

### 后台下载，后台

```
wget -o  url
```

### 失败后增加尝试次数

```
wget --tries=40 url
```

### 测试下载链接是否有效

```
wget --spider url
```

### 下载指定格式文件

```
wget -r -A.pdf url
```

### 下载/镜像/克隆整个网站到本地

```
wget --mirror -p --convert-links -P . URL
```

### 把下载信息存入日志

```
wget -o download.log URL
```

### FTP下载

```
wget ftp-url
wget --ftp-user=USERNAME --ftp-password=PASSWORD url
```



# lspic







# printenv 

打印出当前的环境变量



```
postgres@pa4:~$ printenv
XDG_SESSION_ID=10976
TERM=xterm-256color
SHELL=/bin/bash
HISTSIZE=3000
SSH_CLIENT=221.219.137.90 53936 22
OLDPWD=/root
SSH_TTY=/dev/pts/3
ZSH=/root/.oh-my-zsh
USER=postgres
LSCOLORS=Gxfxcxdxbxegedabagacad
MAIL=/var/mail/postgres
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/var/lib/postgresql/.local/bin:/var/lib/postgresql/bin:/usr/local/postgresql/bin:/var/lib/postgresql/.local/bin:/var/lib/postgresql/bin:/usr/local/postgresql/bin
PWD=/var/lib/postgresql
LANG=en_US.utf8
PGHOME=/usr/local/postgresql
SHLVL=2
HOME=/var/lib/postgresql
LESS=-R
LOGNAME=postgres
SSH_CONNECTION=221.219.137.90 53936 172.30.0.3 22
LC_CTYPE=en_US.UTF-8
PGDATA=/home/data/postgresql
PROMPT_COMMAND=history -a;
XDG_RUNTIME_DIR=/run/user/0
HISTTIMEFORMAT=%F %T
_=/usr/bin/printenv
```



```
postgres@pa4:~$ printenv  LANG
en_US.utf8
```


=========================Shell变量====================================


## 删除变量 

```
unset  变量
```




## shell位置变量

$1         运行shell程序的第一个参数

$2         运行shell程序的第二个参数

$num       依次类推，但是最多只能到$9

$#         代表shell程序的所有参数的个数

$* $@      将所有的参数作为一个整体，但是有更细微的区别

$*将所有的参数作为一个整体，$@将所有的参数分别作为个体对待

$$         代表当前进程的ID号码  

$?         代码程序的退出代码(一般0代表程序执行成功，非0代表命令执行失败)

## 一个脚本

```
[root@pa2 tmp]# sh 6666.sh lijinghua sunwangli niecongcong duanyuxi
lijinghua   >>>>我是第一个参数
sunwangli   >>>>我是第二个参数
4   >>>>我是参数的总数
lijinghua sunwangli niecongcong duanyuxi   >>>>我是所有参数的内容
lijinghua sunwangli niecongcong duanyuxi   >>>>我是所有参数的内容，但是我把所有参数作为一个个体来看待
23384   >>>>我是当前执行shell进程的ID号码
0   >>>>我是当前程序的退出代码
```

```
[root@pa2 tmp]# cat 6666.sh 

#!/bin/bash
echo	"$1   >>>>我是第一个参数"
echo	"$2   >>>>我是第二个参数"
echo	"$#   >>>>我是参数的总数"
echo	"$*   >>>>我是所有参数的内容"
echo	"$@   >>>>我是所有参数的内容，但是我把所有参数作为一个个体来看待"
echo	"$$   >>>>我是当前执行shell进程的ID号码"
echo	"$?   >>>>我是当前程序的退出代码"
```


​	

## 变量的展开替换

### 返回值

##### 否则返回

${name:-word}         如果name存在且非null，否则返回word

##### 否则设置

${name:=word}         如果name存在且非null，否则设置为word

##### 否则显示

${name:?message}      如果name存在且非null，则返回name:message

##### 返回word，否则返回null

${name:+word}         如果name存在且非null，则返回word，否则返回null


​	
### 删除和替换

${varible#key}                从头开始删除关键词，执行最短匹配

${varible##key}               从头开始删除关键词，执行最长匹配

${varible%key}                从尾开始删除关键词，执行最短匹配

${varible%%key}               从尾开始删除关键词，执行最长匹配

${variable/old/new}           将old替换为new，仅替换第一个出现的old

${variable//old/new}          将old替换为new，替换所有出现的old



### 示范

```
[root@pa2 ~]# usr=$(head -1 /etc/passwd)   #将$（）中的变量赋值给usr
[root@pa2 ~]# echo $usr
root:x:0:0:root:/root:/bin/bash 
[root@pa2 ~]# echo ${usr#*:}             
x:0:0:root:/root:/bin/bash
[root@pa2 ~]# echo ${usr##*:}
/bin/bash
[root@pa2 ~]# echo ${usr%:*}
root:x:0:0:root:/root
[root@pa2 ~]# echo ${usr%%:*}
root
[root@pa2 ~]# echo ${usr/root/admin}
admin:x:0:0:root:/root:/bin/bash
[root@pa2 ~]# echo ${usr//root/admin}
admin:x:0:0:admin:/admin:/bin/bash
```





## 再一个脚本

```
#!/bin/bash
foo() {
    # Whatever. An error occurred and I'm returning -1
    return -1
}
bar() {
    foo
    if [ "$?" = "-1" ]; then
        # -1 is my "error code" and I'm returning it
        exit -1
    fi
}
bar # Calls the "bar" function
```




===================================bash数组=========================================

## 前面的话

bash提供了一堆数组变量的功能，数组中的所有变量都会被编录成索引
数组的索引是从0开始的整数，且没有大小限制，一般有两种方法创建数组变量


## 怎么定义

1. name[subscript]=value  

subscript必须是大于或者等于0的整数

2. name=(value1 value2 value3 valuen)

declare -a <name> 可以预定义一个空数组变量



## 怎么调用

数组定义完成之后，我们使用${name[subscript]}来调用数组变量的值，如果subscript是@或者*符号，则将调用所有的数组成员

使用${#name[subscript]}可以返回${name[subscript]}的长度，如果subscript是*或者@，则返回数组中元素的个数

## 示例

```
[root@local ~]#name[1]=lijinghua
[root@local ~]#name[2]=niecongcong
[root@local ~]#echo ${name[1]},${name[2]}
lijinghua,niecongcong



[root@local ~]#num=(1 2 3 4 5 66666)
[root@local ~]#echo ${num[2]}
3
[root@local ~]#echo ${num[2]} ${num[4]}
3 5
[root@local ~]#echo ${num[2]}:${num[4]}
3:5

[root@local ~]#echo ${num[*]}
1 2 3 4 5 66666
[root@local ~]#echo ${num[@]}
1 2 3 4 5 66666

[root@local ~]#echo ${#num[5]}   #返回长度
5

[root@local ~]#echo ${#num[@]}   #数组中元素的个数
6


```

## 环境需求

开启iptables服务


## 脚本内容

```
#!/bin/bash
STEP=2 #间隔的秒数，不能大于60 ，请仔细看这里定义的作用
Port="80"  
#web 服务器端口默认80
https="443"
#https的话
con="200"
#http连接最高数量
for (( i = 0; i < 60; i=(i+STEP) )); do
        i=$((i++))
        WEBPORT=$Port
        CONNECT=`netstat -ntu | grep :$WEBPORT|wc -l`
        echo $WEBPORT
        echo $CONNECT
        IP=`netstat -ntu | grep :$WEBPORT | awk '{print $5}' | cut -d: -f1 | awk '{++ip[$1]} END {for(i in ip) print ip[i],"\t",i}' | sort -nr |awk '{print $2}'|head -1`
        if [ $CONNECT -gt $con  ];then
        echo 999
        echo `date +%y-%m-%d-%H:%M:%S`  $IP CONNECT=$CONNECT >> /tmp/deny.ip
                for  (( i = 0; i < 60; i=(i+STEP) )); do
                        i=$((i++))
                        /usr/sbin/iptables -L -n |grep DROP |grep $IP
                                if [ $? -eq 0 ];then
                                        break
                                fi
                        /usr/sbin/iptables -I INPUT -p tcp -s $IP  --dport $WEBPORT -i eth0 -j DROP

​```
            done
    fi
    sleep $STEP
​```

done  
for (( i = 0; i < 60; i=(i+STEP) )); do
        i=$((i++))
        WEBPORT2=$https
        CONNECT2=`netstat -ntu | grep :$WEBPORT|wc -l`
        echo $WEBPORT2
        echo $CONNECT2
        IP=`netstat -ntu | grep :$WEBPORT2 | awk '{print $5}' | cut -d: -f1 | awk '{++ip[$1]} END {for(i in ip) print ip[i],"\t",i}' | sort -nr |awk '{print $2}'|head -1`
        if [ $CONNECT2 -gt $con  ];then
        echo 999
        echo `date +%y-%m-%d-%H:%M:%S`  $IP CONNECT=$CONNECT2 >> /tmp/deny.ip
        #作为日志存在该文件里面
                for  (( i = 0; i < 60; i=(i+STEP) )); do
                        i=$((i++))
                        /usr/sbin/iptables -L -n |grep DROP |grep $IP
                                if [ $? -eq 0 ];then
                                        break
                                fi
                        /usr/sbin/iptables -I INPUT -p tcp -s $IP  --dport $WEBPORT2 -i eth0 -j DROP

​```
            done
    fi
    sleep $STEP
​```

done

exit 0 
```




## 定时任务 

crontab -e

```
#必须是一分钟执行一次该脚本
*/1 * * * * sh /server/scripts/safe.sh > /dev/null 2>&1 &
#多久清空iptables，自己定时间
*/10 * * * *   /usr/sbin/iptables -F > /dev/null 2>&1 &
```


一、公使用docker几次概况。

平安项目：主机环境是redhat，没有外网，安装一些依赖包需要自己下载rmp包，还有解决安装包依赖的问题，所以使用了docker的方案。快速解决程序开发环境与部署环境不一致的情况。

文因快提：涉及4个项目，项目之间存在依赖关系，代码存在不同的版本，每次部署都需要重新安装依赖环境，重新部署，采用docker化部署。快速提供程序运行环境。

数据流水线：数据流水线涉及多个模块儿，爬虫程序（新三板，主板），分类程序，pdf2xml，pdf2txt，以及各种常用的api。原计划做微服务后做整体的工作迁移，解决程序迁移问题。

简答数据：需要部署三套环境不同的环境，NAS，Imac，ubuntu，各个环境之间差异性大，docke解决开发环境与部署环境不一致，提高部署效率，提高程序可移植性。

二、为什么推荐docker部署项目

内部：保持运行环境一致性，避免本地开发环境与实际运行环境不一致的情况，提高内部部署效率。

外部：提高部署效率，确保一次部署成功，避免额外的部署风险。

综上希望做一些docker培训工作，逐步的完成部署的docker化，推进devops，尽力确保外部的数据都是用公告。

三、什么是docker？

虚拟化：虚拟化（Virtualization）技术最早出现在 20 世纪 60 年代的 IBM 大型机系统，在70年代的 System 370 系列中逐渐流行起来。商业化依赖于X86服务器。软件代表：VMWARE WORKSTATION。

传统的VM虚拟化解决方案依赖于硬件，可以提高服务器日常利用率不高的问题。

docker类似于进程级别的虚拟化。docker借助Linux的内核特性，如：控制组（Control Group）、命名空间（Namespace）等，并直接调用操作系统的系统调用接口。从而降低每个容器的系统开销，并实现降低容器复杂度、启动快、资源占用小等特征。

![img](https://www.docker.com/sites/default/files/VM%402x.png)

![img](https://www.docker.com/sites/default/files/Container%402x.png)

四、docker基本概念

1安装docker

我们安装CE版本

<https://docs.docker.com/install/linux/docker-ce/ubuntu/> 

注意事项，类似与pip install 使用豆瓣源一样，实际部署环境，docker更新本地源，下载很多的镜像，

/etc/docker/daemon.json

{   "registry-mirrors": [     "https://registry.docker-cn.com"   ] }

\------

对于使用 macOS 的用户，在任务栏点击 Docker for mac 应用图标 -> Perferences... -> Daemon -> Registry mirrors。在列表中填写加速器地址 https://registry.docker-cn.com。修改完成之后，点击 Apply & Restart 按钮，Docker 就会重启并应用配置的镜像地址了。

2镜像与容器。

类与对象。

镜像就是已经在代码中定义好的类，

容器就是代码中实例化的类型。

docker images 

可以看到系统中有哪些镜像？

![img](https://note.youdao.com/yws/public/resource/40cfcd2797c88c9cc48ff905a6834fcb/xmlnote/WEBRESOURCEd41d6ac12eec9b703ef46736e0a0e37b/26915)

镜像中有几个关键的部分。

REPOSITORY:TAG（仓库：标签）

举例，对于postgesql 的docker镜像而言，postgesql有很多版本，所有的版本就组成了postges的仓库，对应的版本是就是tag。

对于内部而言，建议，仓库就是对应的项目名称，tag就是代码对应的tag。

建议操作：jianda:v1.0_YYYY_MM_DD

docker tag IMAGEID(镜像id) REPOSITORY:TAG（仓库：标签）

容器：

docker ps 之后，可以看到系统中有正在运行哪些容器。

![img](https://note.youdao.com/yws/public/resource/40cfcd2797c88c9cc48ff905a6834fcb/xmlnote/WEBRESOURCEf9d5b7cfe092d55bdf796e54fe777410/26927)

docker 可以看到挡墙系统环境中正在运行的容器。

docker ps -a 可以看到已经停止运行的容器。

![img](https://note.youdao.com/yws/public/resource/40cfcd2797c88c9cc48ff905a6834fcb/xmlnote/WEBRESOURCEf0fb36c5dbe04f4171aecdc1631145f1/26936)

docker run 命令可以从镜像实例化一个容器。

五、Dockerfile

如何定义一个镜像，通过DocKerfile定义一个镜像。

FROM ubuntu:16.04  

ENV LANG C.UTF-8

RUN apt-get update -y && apt-get upgrade -y &&  apt-get install -y build-essential && apt-get install -y git && apt-get install -y libpq-dev && apt-get -y install python3 && apt-get -y install python3-pip  && apt-get install -y virtualenv && apt-get install -y language-pack-en

RUN mkdir /opt/projects

WORKDIR /opt/projects

\#wenyinkuaiti

RUN mkdir /opt/projects/uploads && mkdir /opt/projects/output

COPY ./pypy3 /opt/projects/pypy3

COPY ./MemectExtractor/requirements.txt /opt/projects/MemectExtractor_requirements.txt

COPY ./wenyinkuaiti/requirements.txt /opt/projects/wenyinkuaiti_requirements.txt

COPY ./pdfanalyzer2/requirements.pypy3.txt /opt/projects/pdfanalyzer2_requirements.pypy3.txt

RUN pypy3/bin/pypy3 -m ensurepip && pypy3/bin/pip3 install -r pdfanalyzer2_requirements.pypy3.txt

RUN virtualenv -p python3 env_MemectExtractor && env_MemectExtractor/bin/pip install -r MemectExtractor_requirements.txt -i https://pypi.douban.com/simple

RUN virtualenv -p python3 env_wenyinkuaiti && env_wenyinkuaiti/bin/pip install -r wenyinkuaiti_requirements.txt -i <https://pypi.douban.com/simple>

几个重要的点：

1，初始化的命令的几个docker命令。

FROM，ENV，RUN，COPY，WORKDIR

FROM 是一个代表从某个镜像版本为基础构建镜像。在简单数据总可以进一步解释。

ENV LANG C.UTF-8  代表设置当前环境的编码，如果不设置，可能遇到汉字编码问题报错的问题。

RUN 代表执行DOCKER命令。

RUN /opt/projects 在docker内部创建一个/opt/projects目录。

WORKDIR /opt/projects 设置docker中的工作目录是 /opt/projects即当前目录。

其他的创建PYTHON 的虚拟化环境，提前准备好项目的requirements.txt ，提前做好项目依赖的python依赖包。

更多dockerfile的命令知识参考：<https://docs.docker.com/develop/develop-images/dockerfile_best-practices/>

写好dockerfile 之后可以build一个镜像。

docker build -t ubuntu:neeq . -f Dockerfile_neeq 

六、docker run 的参数 

docker run 可以实例化一个docker 镜像，将一个镜像变成一个容器，可以增加很多参数。

比较重要的就是网络情况和存储的情况。

网络的情况：

目前文因使用的是bridge和host模式，

bridge模式：是docker默认的网络模式，可以保证容器之间进行通信，获得一个内部IP地址。

host模式：主机模式可以直接使用主机的网络，获取主机网络的一个ip地址。

存储情况：

docker对于docker的建议，它只是一个程序的运行环境，不要让他涉及存储数据。

docker有两种管理数据的方式：

一种是数据集（Volumes）

另一种是挂载主机目录（Bind mounts）我们推荐使用关在主机目录的方式。

![img](https://docs.docker.com/storage/images/types-of-mounts-bind.png)

​	docker	run	-d	-P	\

​				--name	web	\

​				#	-v	/src/webapp:/opt/webapp	\

​				--mount	type=bind,source=/src/webapp,target=/opt/webapp	\

​				training/webapp	\

​				python	app.py

上面的命令加载主机的	 	/src/webapp	 	目录到容器的	 	/opt/webapp	 目录。这个功能在进行测试

的时候十分方便,比如用户可以放置一些程序到本地目录中,来查看容器是否正常工作。

注意事项：本地目录的路径必须是绝对路径。

以前使用	 	-v	 	参数时如果本地目录不存在	Docker	会自动为

你创建一个文件夹,现在使用	 	--mount	 	参数时如果本地目录不存在,Docker	会报错。

目的是，保证实际代码保留在

七、Docker 网络访问

容器中可以运行一些网络应用,要让外部也可以访问这些应用,可以通过	 	-P	 	或	 	-p	 	参数来

指定端口映射。

docker	run	-d	-p	5000:5000	training/webapp	python	app.py

八、实际文件讲解

简答的docker镜像，涉及项目，postgesql数据库把数据库和程序放到一同打包成为一个镜像。

九、回顾

1，将docker做一个基础环境，提供程序所需的基础环境。

2，所需要的数据目录挂载在本地目录中，方便数据更新。

3，新开项目多进行docker测试，以后项目的一些配置文件，可以设置一个docker专用的配置文件，保证镜像是开箱即用。

推荐的文档：

<https://yeasy.gitbooks.io/docker_practice/>     docker从入门到实践

<http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html>       阮一峰的docker的介绍

<https://docs.docker.com/>   docker入门官方文档

 # 安装配置

- 安装 Django

```
pip install django
```

## 创建项目

- 创建一个 Django 项目

```
django-admin.exe startproject mysite
```

- 项目文件组织

```
mysite
    │  db.sqlite3              # sql-lite数据库文件
    │  manage.py               # 管理 Django 项目的命令行工具
    │
    └─mysite                   # 目录包含你的项目，它是一个纯 Python 包
            settings.py        # Django 项目的配置文件
            urls.py            # Django 项目的 URL 声明，就像你网站的“目录”，路由的入口
            wsgi.py            # 作为你的项目的运行在 WSGI 兼容的Web服务器上的入口文件
            __init__.py        # 一个空文件，告诉 Python 这个目录应该被认为是一个 Python 包
```

- 设置时区和语言

```
LANGUAGE_CODE = 'zh-Hans'
TIME_ZONE = 'Asia/Shanghai'
```

## 创建应用

- 创建一个应用，在 Django 中每个应用都是一个 Python 包，并且遵循相同的约定。

```
python manage.py startapp polls
```

- 应用文件组织

```
polls                      # APP 名称
    │  admin.py            # 数据库如果希望被后台看到，需要在这个文件下进行注册
    │  apps.py             # 配置当前 APP
    │  models.py           # 创建该 APP 下可能使用到的数据库
    │  tests.py            # 实现某些测试驱动
    │  views.py            # 实现对应的功能函数，访问 Django 网站页面其实是访问这些视图函数
    │  __init__.py         # 声明目录是一个包
    │
    └─migrations
            __init__.py    # 声明目录是一个包
```

## 启动项目

- 启动项目

```
cd mysite
python manage.py runserver 0:80        # 0 是 0.0.0.0 的简写
```

# 视图配置

DJango 接收用户请求以后，可以使用一个函数来构建响应，这种模式叫 ：FBV，也可以使用类来构建响应，这种模式叫 CBV 模式。

## 视图函数的用法

- 编辑应用目录下的 `views.py` 文件，这是就是一个简单的视图。

```
from django.http import HttpResponse

def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")
```

- 配置 URL 路由信息，它将用户访问的 URL 地址映射到一个函数，由函数处理。

```
from django.contrib import admin
from django.urls import path,include
from app01 import views                 # 在此处引入视图 views 模块

urlpatterns = [
    path('admin/', admin.site.urls),
    path('index/', views.index),        # 一个参数即从网站根开始匹配的 URL 地址，第二个是转交给的视图函数
]
```

## 视图类的用法

请求到达类，会首先执行 `dispatch` 方法，它会根据用户HTTP请求方法来分配给不同的类方法，可用方法有：`['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace']`，如果我们需要当然可以重写 `dispatch` 方法，并且可以在请求分配之前和之后做一些事情。

- 编写视图类，必须继承 View 类，在类的方法中写不同请求方法的处理流程。

```
from django.views import View
from django.shortcuts import render

class index(View):
    
    def dispatch(self, request, *args, **kwargs):
        print('before')
        result = super().dispatch(request,*args,**kwargs)
        print('after')
        return result
    
    def get(self,request):
        return render(request,'home.html')

    def post(self,request):
        return render(request,'home.html')
```

- 增加视图类的路由，编辑 `urls.py` ，添加 `URL` 和 视图类，但注意视图类格式必须是： `views.类名.as_view()`。

```
urlpatterns = [
    path('admin/', admin.site.urls),
    path('index/',views.index),
    path('login/',views.index.as_view()),
]
```

## 为响应增加头部

- 为响应报文的头部增加信息

```
from django.http import HttpResponse

def index(request):
    
    res = HttpResponse("Hello, world. You're at the polls index.")
    res['key'] = 'values'
    return res
```

## 视图中使用模板

一般我们需要用 HTML 页面文件响应用户请求，在 Django 中 HTML 文件称作模板文件，放在项目根目录下的 `templates` 目录里，所以需要修改项目的 `setting.py` 文件，让 `django` 能够从这个目录下寻找 HTML 文件。

- 在项目根目录新建目录 `templates` 目录，编辑 `setting.py` 文件，在 `DIRS` 加入模板目录位置。

```
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],           # 在这里配置上 HTML 文件的目录路径
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
```

- 在视图函数中使用`render(request,'file.html')`函数 `django` 会从 `templates` 目录里找到 HTML 文件并返回给客户端。

```
from django.shortcuts import render
from django.shortcuts import HttpResponse

def login(request):
    return render(request,'login.html')
```

## 静态文件配置

在 HTML 文件里一定有大量的 `CSS、JS` 文件，这些文件作为 HTML 的一部分，客户端也需要下载到本地才能渲染 HTML 文件，所以需要配置静态文件的访问。

- 在项目根目录新建 `static` 目录，在 `setting` 文件中配置静态目录的路径

```
STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR,'static'),
)
```

- 在 HTML 文件中引用静态文件，这样客户端在访问页面的时候就会自动下载这些需要的静态文件来渲染页面了

```
<link rel="stylesheet" href="/static/commons.css">
<script src="/static/jquery-1.12.4.js"></script>
```

## 媒体文件配置

- 在项目根目录新建 `upload` 目录，在 `setting` 文件中配置静态目录的路径

```
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')
MEDIA_URL = '/uploads/'
```

- 在 urls.py 中使用 urlpatterns + 媒体文件配置

```
urlpatterns = [
    path('admin/', admin.site.urls),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
```

- 使用方式

```
在HTML文件中使用：/uploads/2018-6-25.jpg 这样的方式来引用文件
```

## 获取客户端表单

- 用户浏览到网页后，在网页上输入表单，服务器如何接收？下面是响应给用户的 HTML 的内容，内部包含了两个表单。

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <link rel="stylesheet" href="/static/commons.css">
    <script src="/static/jquery-1.12.4.js"></script>
    <style>
        lable{
            width: 80;
            text-align: right;
            display: inline-block;
        }
    </style>
</head>
<body style="background-color: bisque">
    <form action="/login/" method="post">                            <!--将表单又发回了这个URL-->
        <p>
            <label for="username" >用户名：</label>
            <input id="username" name="user" type="text"/>           <!--表单1-->
        </p>
        <p>
            <label for="password">密码：</label>
            <input id="password" name="pwd" type="text"/>            <!--表单2-->
        </p>
        <p>
            篮球：<input type="checkbox" name="favor" value="1"/>
            足球：<input type="checkbox" name="favor" value="2"/>
            排球：<input type="checkbox" name="favor" value="3"/>
        </p>
        <input type="submit" value="提交" />
    </form>
</body>
</html>
```

- 配置项目配置文件 `setting` ，暂时禁用 跨站请求过滤的中间件

```
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
```

- 在服务器端的 views 函数内，request 包含了这次请求的所有信息，包括用户提交的表单

```
from django.shortcuts import render
from django.shortcuts import HttpResponse

def login(request):
    print(request.POST.get('user',none))         # 取得表单1
    print(request.POST.get('pwd',none))          # 取得表单2 
    print(request.POST.getlist('favor',none))    # 取得多选框的多有值
    return render(request,'login.html')
```

## 请求地址重定向

如果需要将用户的请求重定向到新的链接，需要使用 `redirect()` 函数

- 如果用户名密码正确则跳转

```
from django.shortcuts import redirect

def index(request):
	return redirect('http://www.baidu.com')
```

## 接收上传的文件

- HTML 文件中使用 `form` 表单来获取用户上传的文件时，必须设置一个属性：`enctype="multipart/form-data"`。

```
<form action="/upload/" method="POST" enctype="multipart/form-data">
    <input type="file" name="file"/>
    <input type="submit" value="提交"/>
</form>
```

- 在项目根目录新建 `upload` 目录，用来接收用户上传的文件

```
mkdir -p upload
```

- 在视图函数中接收用户上传的文件到 `upload` 目录中

```
from django.shortcuts import render,HttpResponse,redirect

def upload(request):
    if request.method == 'GET':
        return render(request,'upload.html')
    else:
        user_file = request.FILES.get('file')
        with open('upload/' + user_file.name,'wb') as local_file:
            for chunk in user_file.chunks():
                local_file.write(chunk)
        return HttpResponse('ok')
```

## 文章分页的原理

- 分页原理

```
USER_LIST = []                                    # 模拟文章数据

for i in range(1,999):                            # 模拟文章数据
    temp = {'name':'root'+str(i),'age':i}
    USER_LIST.append(temp)

def index(request):
    per_page_count = 10                           # 每页的文章数
    current_page = int(request.GET.get('p',1)）   # 通过 GET 请求指定页面

    start = (current_page - 1) * per_page_count   # 设置页面起始位置
    end = current_page * per_page_count           # 设置页面结束位置

    data = USER_LIST[start:end]                   # 对数据进行切片

    prev_pager = current_page - 1                 # 网页上的上一页功能
    next_pager = current_page + 1                 # 网页的下一个功能

    return render(request,'index.html',{'user_list':data,'prev_pager':prev_pager,'next_pager':next_pager})
```

- 模板文件

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <ul>
        {% for row in user_list %}
            <li>{{ row.name }} {{ row.age }}</li>
        {% endfor %}
    </ul>
    <a href="/?p={{ prev_pager }}">上一页</a>
    <a href="/?p={{ next_pager }}">下一页</a>
</body>
</html>
```

## Django分页模块

- 页面视图

```
def index1(request):
    from django.core.paginator import PageNotAnInteger, EmptyPage, Paginator

    current_page = request.GET.get('p')                          # 通过 GET 请求指定页面

    paginator = Paginator(USER_LIST,10)                          # 生成分页对象

    try:
        posts = paginator.page(current_page)                     # 指定页码
    except PageNotAnInteger:                                     # 如果指定的页码不存在
        posts = paginator.page(1)                                # 将页面重置到第一页
    except EmptyPage:                                            # 如果请求的超出页码范围
        posts = paginator.page(paginator.num_pages)              # 将页面重置到最后一页
    return render(request, 'index1.html',{'posts': posts})       # 将页码切片数据传给模板
```

- 模板文件

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <ul>
        {% for row in posts.object_list %}
            <li>{{ row.name }} {{ row.age }}</li>
        {% endfor %}
    </ul>
    {% if posts.has_previous %}           <!--如果存在上一页-->
        <a href="/index1?p={{ posts.previous_page_number }}">上一页</a>
    {% else %}                            <!--如果不存在下一页-->
        <a href="#">上一页</a>
    {% endif %}
    
    {% if posts.has_next %}               <!--如果存在下一页-->
        <a href="/index1?p={{ posts.next_page_number }}">下一页</a>
    {% else %}                            <!--如果不存在下一页-->
        <a href="#">下一页</a>
    {% endif %}
    
    <span>
        {{ posts.number }} / {{ posts.paginator.num_pages }}
    </span>
</body>
</html>
```

- Paginator 对象

| 属性         | 含义               |
| ------------ | ------------------ |
| `per_page`   | 每页显示的条目数量 |
| `count`      | 数据总个数         |
| `num_pages`  | 总页数             |
| `page_range` | 总页数的索引范围   |
| `page`       | `page` 对象        |

- Page 对象

| 属性                   | 含义                                 |
| ---------------------- | ------------------------------------ |
| `has_next`             | 是否有下一页                         |
| `next_page_number`     | 下一页页码                           |
| `has_previous`         | 是否有上一页                         |
| `previous_page_number` | 上一页页码                           |
| `object_list`          | 分页之后的数据列表，已经切片好的数据 |
| `number`               | 当前页                               |
| `paginator`            | `Paginator`对象                      |

### 扩展Django分页

- 继承 Paginator 新增功能pager_num_range，在上一页与下一页的中间显示页页码序列

```
from django.core.paginator import PageNotAnInteger, EmptyPage, Paginator


class CustomPaginator(Paginator):
    def __init__(self, current_page, per_page_num, *args, **kwargs):
        self.current_page = int(current_page)
        self.per_page_num = int(per_page_num)
        super().__init__(*args, **kwargs)

    def pager_num_range(self):
        if self.num_pages < self.per_page_num:                                        # 如果总页数小于页码序列数
            return range(1, self.num_pages + 1)                                       # 返回1到总页数
        part = int(self.per_page_num / 2)                                             # 页码序列数的一半的数字
        if self.current_page <= part:                                                 # 如果当前页码小于号码页的一半
            return range(1, self.per_page_num + 1)                                    # 返回1到页码序列数
        if (self.current_page + part) > self.num_pages:                               # 如果当前页面加页码序列数的一半大于总页数
            return range(self.num_pages - self.per_page_num + 1, self.num_pages + 1)  # 返回总页数减去页码序列数+1 到 总页数+1
        return range(self.current_page - part, self.current_page + part + 1)          # 返回当前页码减页码序列数的一半，当前页码+页码序列数+1


def index1(request):
    current_page = request.GET.get('p',1)

    paginator = CustomPaginator(current_page, 11, USER_LIST, 10)                      # 传入当前页码，和页码序列数，数据，和分页大小

    try:
        posts = paginator.page(current_page)
    except PageNotAnInteger:
        posts = paginator.page(1)
    except EmptyPage:
        posts = paginator.page(paginator.num_pages)
    return render(request, 'index1.html', {'posts': posts})
```

- 模板文件

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <ul>
        {% for row in posts.object_list %}
            <li>{{ row.name }} {{ row.age }}</li>
        {% endfor %}
    </ul>
    {% if posts.has_previous %}
        <a href="/index1?p={{ posts.previous_page_number }}">上一页</a>
    {% else %}
        <a href="#">上一页</a>
    {% endif %}
    
    {% for i in posts.paginator.pager_num_range %}
        {% if i == posts.number %}
            <a href="/index1?p={{ i }}" style="font-size: 25px;">{{ i }}</a>
        {% else %}
            <a href="/index1?p={{ i }}">{{ i }}</a>
        {% endif %}
    {% endfor %}
    
    {% if posts.has_next %}
        <a href="/index1?p={{ posts.next_page_number }}">下一页</a>
    {% else %}
        <a href="#">下一页</a>
    {% endif %}
    
    <span>
        {{ posts.number }} / {{ posts.paginator.num_pages }}
    </span>
</body>
</html>
```

- 效果：<http://127.0.0.1:8000/index1?p=12>

```
* root111 111
* root112 112
* root113 113
* root114 114
* root115 115
* root116 116
* root117 117
* root118 118
* root119 119
* root120 120
上一页 7 8 9 10 11 12 13 14 15 16 17 下一页 12 / 100
```

# 模板使用

- 相关配置

项目的 `settings.py` 文件的 `TEMPLATES` 配置段有一个名字为 `APP_DIRS` 配置，当它为为 True 时候，Django会在每个 `INSTALLED_APPS` 文件夹中寻找 `templates` 子目录，接下来在 APP的目录新建一个 `templates` 就可以把HTML文件放在里面了。

## render函数

`render()` 函数可以接收第三个参数，它是一个字典的参数。

- 模板语言

### for循环

- 列表的遍历

```
USERLIST = [
    {'name':'yangjinheng','age':29,'gender':'M'},
    {'name':'zhengpengli','age':29,'gender':'F'},
    {'name':'yangzhongxiao','age':27,'gender':'M'},
    {'name':'liying','age':25,'gender':'F'},
]

render(request, 'home.html', {'userlist': USERDICT})

{% for dict in userlist %}        # 遍历列表
    {{ dict.name }}               # 访问字典
    {{ dict.agr }}                # 访问字典
    {{ dict.gender }}             # 访问字典
{% endfor %}
```

- 字典的遍历

```
USERDICT = {
    'k1':'V1',
    'k2':'V2',
    'k3':'V3',
}

render(request, 'home.html', {'userlist': USERDICT})

{{% userlist.k1 %}}                 # 直接访问字典的值

{% for keys in userlist.keys %}
    {{ keys }}                      # 遍历字典的键
{% endfor %}

{% for values in userlist.values %}
    {{ values }}                    # 遍历字典的值
{% endfor %}

{% for items in userlist.items %}
    {{ items }}                     # 字典的键值
{% endfor %}

{% for k,v in userlist.items %}
    {{ k }} {{ v }}                 # 字典的键值分离
{% endfor %}
```

### if 语句

- 模板中的 if 语句的使用，它可以嵌套在其他语句中，或者自身嵌套

```
{% if age %}
    <a>有年龄</a>
    {% if age >16 %}
        <a>老男人</a>
    {% else %}
        <a>小鲜肉</a>
    {% endif %}
{% else %}
    <a>数据</a>
{% endif %}
```

## 模板的引用

在项目的 templates 目录内新建一个 include 目录，在这个目录内放入 模板的代码片段，方便引用和重用。

- 例如：templates/include/page.html

```
{% if posts.has_previous %}
    <a href="/index1?p={{ posts.previous_page_number }}">上一页</a>
{% else %}
    <a href="#">上一页</a>
{% endif %}

{% if posts.has_next %}
    <a href="/index1?p={{ posts.next_page_number }}">下一页</a>
{% else %}
    <a href="#">下一页</a>
{% endif %}

<span>
    {{ posts.number }} / {{ posts.paginator.num_pages }}
</span>
```

- 使用 include 引入外部的模板文件

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <ul>
        {% for row in posts.object_list %}
            <li>{{ row.name }} {{ row.age }}</li>
        {% endfor %}
    </ul>
    {% include 'include/page.html'%}
</body>
</html>
```

## 模板示例

### 模板示例1

实现一个用户名密码错误的时候在旁边显示一行提示信息。

- HTML 文件内容

```
</body>
<body style="background-color: bisque">
<form action="/login/" method="post">
    <p>
        <label for="username" >用户名：</label>
        <input id="username" name="user" type="text"/>
    </p>
    <p>
        <label for="password">密码：</label>
        <input id="password" name="pwd" type="text"/>
        <input type="submit" value="提交" />
        <span style="color: aqua">{{ error_message }}</span>    <!--在HTML文件中为模板预留好位置-->
    </p>
</form>
</body>
```

- 在 `view` 函数中`render()` 函数中传递字典，字典的 `key` 与 HTML 文件中的预留位置匹配，将被替换为字典的 `value`

```
from django.shortcuts import render,HttpResponse,redirect

def login(request):
    error_message = ''
    if request.method == 'POST':
        user = request.POST.get('user',None)
        pwd = request.POST.get('pwd',None)
        if user == 'root' and pwd == '123':
            return redirect('http://www.baidu.com')
        else:
            error_message = '用户名密码错误'
    return render(request,'login.html',{'error_message':error_message})    # 在视图函数中为HTML文件中为模板预留好位置 填充数据
```

### 模板示例2

实现一个由用户提交数据到后台，后台存储并将新的数据返回给用户展示

- HTML 文件中内定义模板语言

```
<body>
<div>
    <form action="/home" method="POST">
        <input type="text" name="username"/>
        <input type="text" name="email"/>
        <input type="text" name="gender"/>
        <input type="submit" value="添加"/>    <!--将表单提交给POST方法到自身的页面-->
    </form>
</div>
<div>
    <table border="1">
        {% for row in userlist %}             <!--在模板中循环，reder 传递的字典 userlist-->
            <tr>
                <td>{{ row.username }}</td>    <!--将字典中的小字典的用户名填充在这个表格-->
                <td>{{ row.gender }}</td>
                <td>{{ row.email }}</td>
            </tr>
        {% endfor %}                          <!--结束循环-->
    </table>
</div>
</body>
```

- 使用 `render` 函数向模板传递字典（可以是多个值），由模板的进行页面的渲染

```
USERLIST = [
    {'id': '134432', 'username': 'alex', 'email': '4234@qq.com', 'gender': '男'},
    {'id': '134423', 'username': 'yangjinheng', 'email': '42222@qq.com', 'gender': '男'},
    {'id': '333311', 'username': 'yangxiaoxiao', 'email': '424232@qq.com', 'gender': '男'},
]    # 如果此处是数据库，那么就实现了与从从数据库中取得数据渲染到前端的页面上了

demo = {
    'id':1024
    'name':'yangjinheng'
}

def home(request):
    if request.method == 'POST':    # 收到POST请求，向列表内追加新的元素，POST最后也会返回给用户新数据
        user = request.POST.get('username')
        email = request.POST.get('email')
        gender = request.POST.get('gender')
        temp = {'username':user,'email':email,'gender':gender}
        USERLIST.append(temp)
    return render(request, 'home.html', {'userlist': USERLIST,'demo':demo})# 向模板传递多个值的字典
```

# 路由配置

## path()函数

- 它有四个参数，两个必须参数：`route` 和 `view`，两个可选参数：`kwargs` 和 `name`。

| 参数     | 含义                                                         |
| -------- | ------------------------------------------------------------ |
| `route`  | 是一个 URL 的匹配模式，请求到达时 Django 会遍历 `urlpatterns` 使用这个模式进行匹配，但它不处理域名和 URL 中 GET 或者 POST 的参数。 |
| `view`   | 是一个当 URL 通过匹配模式后调用的一个视图函数，它必须接收 `HttpRequest` 对象作为第一参数，另外，模式匹配中的分组匹配到的信息也将以关键字参数的形式传入这个视图函数。 |
| `kwargs` | 任意数量的关键字参数，将作为一个字典传递给目标视图函数。     |
| `name`   | 为匹配到的 URL 命名，可以在 `Django` 的任意地方引用它，尤其是在模板中使用，可避免 URL 变动而需要修改很多地方的情况。 |

## 路由匹配

### 内置分组转换

Django 内置的分组转换器，能够将匹配到的数据转换为匹配模式本身所表达的数据类型，并且以关键字的形式传递给视图函数。

- 内置分组转换

| 模式   | 匹配                                                         |
| ------ | ------------------------------------------------------------ |
| `str`  | 匹配任何非空字符串，不包括路径分隔符`'/'`。如果转换器不包含在表达式中，这是默认值。 |
| `int`  | 匹配零或任何正整数。返回一个 `int`。                         |
| `slug` | 匹配由ASCII字母或数字组成的连结型字符串，以及连字符和下划线字符。例如， `building-your-1st-django-site`。 |
| `uuid` | 匹配格式化的 `uuid`。若要防止多个 `url` 映射到同一页，必须包含破折号，并且字母必须为小写。例如, 075194d3-6885-417e-a8a8-6c931e272f00。返回一个 UUID 实例。 |
| `path` | 匹配任何非空字符串, 包括路径分隔符 “/“。这使您能够匹配完整的 `url` 路径, 而不只是与 `str` 相同的 `url` 路径段。 |

- 在路由的模式匹配中使用分组匹配，并且为分组命名，它将被当作参数发送到视图函数中

```
from django.urls import path
from . import views

urlpatterns = [
    path('int:question_id/', views.detail),            # /5/
    path('int:question_id/results/', views.results),   # /5/results/
    path('int:question_id/vote/', views.vote),         # /5/vote/
]
```

- 在视图函数中接收来自 URL 模式匹配到的参数，并且处理，这里的匹配到的分组名为：`question_id`

```
from django.http import HttpResponse

def detail(request, question_id):
    return HttpResponse("You're looking at question %s." % question_id)

def results(request, question_id):
    response = "You're looking at the results of question %s."
    return HttpResponse(response % question_id)

def vote(request, question_id):
    return HttpResponse("You're voting on question %s." % question_id)
```

### 自定义分组转换

- 样例性配置

```
class FourDigitYearConverter:
    regex = '[0-9]{4}'

    def to_python(self, value):
        return int(value)

    def to_url(self, value):
        return '%04d' % value
```

- 自定义转换器是一个类，它包含如下内容：

| 名称                     | 说明                                                         |
| ------------------------ | ------------------------------------------------------------ |
| `regex`                  | 属性，它是一个字符串形式的正则表达式                         |
| `to_python(self, value)` | 方法，它将匹配的字符串转换为应传递给视图函数的数据类型。如果它不能转换给定的值, 它应该引发 ValueError。 |
| `to_url(self, value)`    | 方法, 它处理将 Python 类型转换为要在 URL 中使用的字符串。    |

- 使用方法

```
from django.urls import path, register_converter
from . import converters, views
register_converter(converters.FourDigitYearConverter, 'yyyy')

urlpatterns = [
    path('articles/2003/', views.special_case_2003),
    path('articles/<yyyy:year>/', views.year_archive),
]
```

### 正则表达式匹配

正则表达式的匹配函数为 `re_path`，在Python中，命名分组的语法是`(?P<name>pattern)`，`name`是组名称，`pattern`是匹配模式，匹配到的参数，会使用分组的命名，作为关键字参数传递给视图，但注意：无论正则表达式匹配什么类型，每个捕获的参数都以字符串的形式发送到视图函数。

- 示例性配置

```
from django.urls import path, re_path

from . import views

urlpatterns = [
    path('articles/2003/', views.special_case_2003),
    re_path(r'^articles/(?P<year>[0-9]{4})/$', views.year_archive),
    re_path(r'^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/$', views.month_archive),
    re_path(r'^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/(?P<slug>[\w-]+)/$', views.article_detail),
]
```

### 无分组正则匹配

除了正则表达式分组，您也可以使用较短的未命名组，例如`([0-9]{4})`，这种用法不是特别推荐的，因为更容易匹配到错误的信息，传递给视图的参数也可能出错，无论哪种情况，建议在给定的正则表达式中只使用一种样式，当两种样式混合使用时，所有未命名的组都会被忽略，只有命名组被当作参数传递给视图函。

## 目标视图

`path()` 函数可以将匹配此模式的URL交给：视图函数、include 函数，include 函数可以对 URL 地址进行再次匹配。

### view函数

- 被模式匹配的 URL 请求会被分配给指定的视图函数

```
from django.urls import path
from . import views

urlpatterns = [
    path('blog/<int:year>/', views.year_archive),
]
```

### include函数

`include()` 函数可以实现路由的分类，访问一类页面的请求分配一类 APP 路由处理，`include()` 函数就是实现多级路由的方式。

#### 分类路由

使用 `include()` 可以将路由分为两个部分：项目路由、APP 路由。

- 配置项目路由，使用 `include` 函数，将请求交给 APP 路由处理。

```
from django.contrib import admin
from django.urls import path,include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('polls/', include('polls.urls')),   # polls 包下的 urls 模块
]
```

```
当有请求与 polls 匹配，Django 会截断匹配到的部分，把后续的 URL 交给 include 函数指定的 URLconf 来处理，也就是说访问：http://127.0.0.1/polls/，首先经过 项目路由，然后剩余的 URL 部分为空，被 APP 路由处理。
```

- 配置 APP 路由，需要在 APP 目录下创建 `urls.py` 文件，接收项目路由的发来的请求

```
from django.urls import path
from . import views                          # 从当前包导入 views 视图子包，一定要进行此步骤，否则无法找到最后的视图函数

urlpatterns = [
    path('', views.index, name='index'),
]
```

#### 额外匹配

这种模式在 include 函数内包含了另外一个匹配模式。

- 额外匹配，例如：下面使用了一个扩展的列表来实现额外匹配。

```
from django.urls import include, path

from apps.main import views as main_views
from credit import views as credit_views

extra_patterns = [
    path('reports/', credit_views.report),
    path('reports/<int:id>/', credit_views.report),
    path('charge/', credit_views.charge),
]

urlpatterns = [
    path('', main_views.homepage),
    path('help/', include('apps.help.urls')),
    path('credit/', include(extra_patterns)),
]
```

- 额外匹配，例如：共同前戳的匹配，`slug` 模式匹配 `连字符` 的字符串。

```
from django.urls import include, path
from . import views

urlpatterns = [
    path('<page_slug>-<page_id>/', include([
        path('history/', views.history),
        path('edit/', views.edit),
        path('discuss/', views.discuss),
        path('permissions/', views.permissions),
    ])),
]
```

## 视图参数

- `path()` 还可以接受一个可变关键字参数，它会被传递给视图函数，`include()` 会传递该参数，直到最终到达视图函数。

```
from django.urls import path
from . import views

urlpatterns = [
    path('blog/<int:year>/', views.year_archive, {'foo': 'bar'}),
]
```

> 上面的示例，会让视图得到模式匹配的参数：year、和关键字参数：foo，最终形式：`views.year_archive(request, year=2005, foo='bar')`

## 命名路由

为匹配到的 URL 命名，可以在 `Django` 的任意地方引用它，尤其是在模板中使用，可避免 URL 变动而需要修改很多地方的情况。

### 在模板中引用

- 对 URL 进行命名，`urls.py`。

```
urlpatterns = [
    path('index_hemo_info/',views.index,name='index'),    # 
]
```

- 在模板中应用URL，`index.html`。

```
<body>
    <form action="{% url 'index' %}" method="POST">                       <!--在模板中引用命名的 URL-->
        <p><input type="text" name="user" placeholder="用户名"/></p>
        <p><input type="text" name="email" placeholder="邮箱"/></p>
        <p><input type="submit" value="提交"></p>
    </form>
</body>
```

- 简化理解

```
path('index_hemo_info/',views.index,name='index')

{% url 'index' %}                # 结果为：/index_hemo_info
{% url 'index' 2 %}              # 结果为：/index_hemo_info/2
{% url 'index' 2 6 %}            # 结果为：/index_hemo_info/2/6
{% url 'index' uid=2 pid=6 %}    # 结果为：/index_hemo_info/2/6
```

### 在视图中引用

命名的 URL 可以在视图函数中，使用 `reverse()` 函数调用，它还可以实现拼接。

- 对 URL 进行命名，`urls.py`。

```
urlpatterns = [
    path('index/',views.index,name='index'),                      # /index_hemo_info
    path('home/(\d+)',views.home,name='home'),                    # /index_hemo_info/2
    path('blog/(\d+)/(\d+)',views.blog,name='blog'),              # /index_hemo_info/2/6
    path('bbs/(?P<uid>\d+)/(?P<pid>\d+)',views.bbs,name='bbs'),   # /index_hemo_info/2/6
]
```

- 在视图中引用 URL，`views.py`。

```
from django.urls import reverse

def index(reeuest):
    string = reverse('index')
    return HttpResponse(string)                             # /index_hemo_info

def home(reeuest,uid):
    string = reverse('home',args=(uid,))
    return HttpResponse(string)                             # /index_hemo_info/2

def blog(reeuest,uid,pid):
    string = reverse('blog',args=(uid,pid))
    return HttpResponse(string)                             # /index_hemo_info/2/6

def bbs(reeuest,uid,pid):
    string = reverse('bbs',kwargs={'uid':uid,'pid':pid})
    return HttpResponse(string)                             # /index_hemo_info/2/6
```

## 路由方案

需求：访问一个页面（管理页面），这个页面列出所有的用户名，点击用户名跳转新的网页（详细信息页），在新的网页内显示用户的详细信息。

### 方案1

采用 URL 传递查询参数来实现页面的查找，由后端根据 URL 的查询字符串动态的生成页面。

- urls.py

```
urlpatterns = [
    path('admin/', admin.site.urls),
    path('index/',views.index),      # 管理页面，由视图函数 index 处理。
    path('detail/',views.detail),    # 详细信息页面，匹配例如：http://127.0.0.1/detail/?nid=2，由视图函数 detail 处理。
]
```

- views.py

```
from django.shortcuts import render, HttpResponse, redirect

USERDICT = {
    '1':{'name':'root1','email':'root1@live.com'},
    '2':{'name':'root2','email':'root2@live.com'},
    '3':{'name':'root3','email':'root3@live.com'},
    '4':{'name':'root4','email':'root4@live.com'},
    '5':{'name':'root5','email':'root5@live.com'},
    '6':{'name':'root6','email':'root6@live.com'},
    '7':{'name':'root7','email':'root7@live.com'},
}    # 这些信息可以来自数据库

def index(request):
    return render(request, 'index.html', {'userdict':USERDICT})      # 将 USERDICT 传递给模板渲染，返回 index.html 页面

def detail(request):                # 匹配到来自 index.html <a> 标签的请求。
    nid = request.GET.get('nid')    # 从 GET 方法中获得 URL 地址的字符串查询部分
    detail_info = USERDICT[nid]     # 以 nid 为 key 获得用户的详细信息字典
    return render(request,'detail.html',{'userinfo':detail_info})    # 将包含用户详细信息的字典 渲染到 detail.html 文件中，返回给用户
```

- index.html

```
<body>
{% for k,v in userdict.items %}                                             <!--遍历 USERDICT 字典-->
    <li>
        <a target="_blank" href="/detail/?nid={{ k }}"> {{ v.name }}</a>    <!--用字典的 key 为 <a> 标签拼接查询参数，<a> 标签内容为字典值-->
    </li>
{% endfor %}
</body>
```

- dateil.html

```
<body>
    <h1>详细信息</h1>
    <h6>用户名：{{ userinfo.name }}</h6>    # 从 视图函数 detail 传递过来的字典中取得 name 渲染到 <h6> 标签
    <h6>邮箱：{{ userinfo.email }}</h6>     # 从 视图函数 detail 传递过来的字典中取得 email 渲染到 <h6> 标签
</body>
```

### 方案2

这个方案可以优化搜索引擎的收录效果，因为URL地址没有查询部分`?`，访问的 URL 地址变为：`http://127.0.0.1:8000/detail-1.html` 这样类似的格式。

- urls.py

```
urlpatterns = [
    path('admin/', admin.site.urls),
    path('index/',views.index),                      # 管理页面，由视图函数 index 处理。
    path('detail-<int:nid>.html',views.detail),      # 详细信息页面，匹配例如：detail-1.html、detail-2.html，由视图函数 detail 处理。
]
```

- views.py

```
from django.shortcuts import render, HttpResponse, redirect

USERDICT = {
    '1':{'name':'root1','email':'root1@live.com'},
    '2':{'name':'root2','email':'root2@live.com'},
    '3':{'name':'root3','email':'root3@live.com'},
    '4':{'name':'root4','email':'root4@live.com'},
    '5':{'name':'root5','email':'root5@live.com'},
    '6':{'name':'root6','email':'root6@live.com'},
    '7':{'name':'root7','email':'root7@live.com'},
}    # 这些信息可以来自数据库

def index(request):
    return render(request, 'index.html', {'userdict':USERDICT})    # 将 USERDICT 传递给模板渲染，返回 index.html 页面

def detail(request,nid):                                           # 匹配到来自 index.html <a> 标签的请求，得到了链接中的值，也就是字典的 key
    detail_info = USERDICT[str(nid)]                               # 从字典取出 key 的值，也就是详细信息
    return render(request,'detail.html',{'userinfo':detail_info})  # 返回时候由这个字典渲染详细信息页面 detail.html，从而返回详细信息。
```

- index.html

```
<body>
{% for k,v in userdict.items %}    <!--遍历 USERDICT 字典-->
    <li>
        <a target="_blank" href="/detail-{{ k }}.html"> {{ v.name }}</a>    <!--用字典的 key 为 <a> 标签拼接链接地址，<a> 标签内容为字典值-->
    </li>
{% endfor %}
</body>
```

- detail.html

```
<body>
    <h1>详细信息</h1>
    <h6>用户名：{{ userinfo.name }}</h6>    # 从 视图函数 detail 传递过来的字典中取得 name 渲染到 <h6> 标签
    <h6>邮箱：{{ userinfo.email }}</h6>    # 从 视图函数 detail 传递过来的字典中取得 email 渲染到 <h6> 标签
</body>
```

# 模型管理

ORM 即 关系对象映射 ( Object Relational Mapping)，把面向对象中的类和数据库表一一对应，通过操作类和对象，对数据表实现数据操作，不需要写SQL语句，由ORM框架生成。

## 数据库配置

### 连接My-SQL

- 编辑项目目录下的 `settings.py` 文件，修改数据库的配置

```
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dbname',
        'USER': 'root',
        'PASSWORD': 'root',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}
```

### 更换驱动

- 更换数据库驱动，在项目目录下修改 `__init__.py` 增加下面代码。

```
import pymysql
pymysql.install_as_MySQLdb()
```

### 日志配置

- 可以输出 Django 最后生成的 SQL 语句，方便调试，编辑项目目录下的 `settings.py` 文件，增加如下配置。

```
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.db.backends':{
            'handlers': ['console'],
            'propagate': True,
            'level': 'DEBUG',
        },
    },
}
```

### 添加应用配置

让工程 `manage.py` 管理应用，生成 SQL 语句，需要添加应用的相关配置信息到工程配置文件中，应用的配置类在应用目录下的 `apps.py` 中，所以它的引用方式就是：`应用名称.apps.配置信息类` 例如：`app1.apps.App1Config`。

- 编辑工程的配置文件 `settings.py` 中的 `INSTALLED_APPS` 配置段，在尾部将应用的配置信息，像下面一样。

```
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app01.apps.App01Config'
]
```

## 定义模型

在 ORM 中，一个类表示代表一个表（必须继承自 `models.Model`），类的属性即表的字段，表的字段由模型类（`Field` ）来定义，每个 `Field` 类可能需要一些参数来定义其字段数据特性，具体见下面：数据类型的介绍。

默认情况下，Django 会自动创建一个自增ID字段作为主键使用，所以下面虽然没有声明ID字段，但是数据库却又有这个字段。

### 表类定义

- 编辑 `polls/models.py` 文件。

```
class Person(models.Model):
    name = models.CharField(max_length=20)
    age = models.IntegerField()
    gender = models.CharField(max_length=3)

class Car(models.Model):
    mark = models.CharField(max_length=20)
    price = models.IntegerField()
    owner = models.ForeignKey("Person", on_delete=models.CASCADE)
```

```
mysql> desc app01_person;
+--------+-------------+------+-----+---------+----------------+
| Field  | Type        | Null | Key | Default | Extra          |
+--------+-------------+------+-----+---------+----------------+
| id     | int(11)     | NO   | PRI | NULL    | auto_increment |
| name   | varchar(20) | NO   |     | NULL    |                |
| age    | int(11)     | NO   |     | NULL    |                |
| gender | varchar(3)  | NO   |     | NULL    |                |
+--------+-------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)

mysql> desc app01_car;
+----------+-------------+------+-----+---------+----------------+
| Field    | Type        | Null | Key | Default | Extra          |
+----------+-------------+------+-----+---------+----------------+
| id       | int(11)     | NO   | PRI | NULL    | auto_increment |
| mark     | varchar(20) | NO   |     | NULL    |                |
| price    | int(11)     | NO   |     | NULL    |                |
| owner_id | int(11)     | NO   | MUL | NULL    |                |
+----------+-------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)
```

### 数据生成

- 迁徙前检查

```
python manage.py makemigrations         # 执行检查数据库差异，生成中间文件，到 migrations\ 中
```

- 写入数据库

```
python manage.py migrate                # 检查 INSTALLED_APPS 设置，为其中的每个应用创建需要的数据表
python manage.py migrate app01 --fake   # 有时候可能出现错误不能写入数据库
```

- 查看SQL语句

```
python manage.py sqlmigrate polls 0001    # 查看生成的 SQL 语句文件内容
```

- 在修改模型后，数据库的数据与模型不一致时候，此时进行迁徙检查会提示如下，因为新增的字段没有默认值，需要手动填入，或者在模型定义默认值。

```
(Project) C:\Users\LENOVO\Desktop\我的项目\ORM>python manage.py makemigrations
You are trying to add a non-nullable field 'author' to book without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
```

## 数据类型

`Django` 对数据类型在程序层面进行了封装，它的字段类型关联了 Django 一些处理逻辑，虽然不可能超出数据库本身的存储类型范围，但是 Django 在处理这些类型的时候，可能会根据不同类型，进行不同的约束，例如：同样是存字符串，但是类型为 Email 的字段会在输入的时候进行一些验证。

### 数值型

| 类型                        | SQL                             | 有符号                                                       | 无符号                                                  |
| --------------------------- | ------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------- |
| `BooleanField`              | `tinyint(1)`                    | 不支持                                                       | `0 ~ 1`                                                 |
| `NullBooleanField`          | `tinyint(1)`                    | 不支持                                                       | `0 ~ 1`                                                 |
| `SmallIntegerField`         | `smallint(6)` 即原生 `SMALLINT` | `-32768 ~ 32767`                                             | `0 ~ 65535`                                             |
| `IntegerField`              | `int(11)` 即原生 `INT`          | `-2147483648 ~ 2147483647`                                   | `0 ~ 4294967295`                                        |
| `BigIntegerField`           | `bigint(20)` 即原生 `BIGINT`    | `-9223372036854775808 ~ 9223372036854775807`                 | `0 ~ 18446744073709551645`                              |
| `PositiveIntegerField`      | `int(10) unsigned`              | 不支持                                                       | `0 ~ 2147483647`                                        |
| `PositiveSmallIntegerField` | `smallint(5) unsigned`          | 不支持                                                       | `0 ~ 32767`                                             |
| `FloatField`                | `double` 即原生 `double`        | `-1.7976931348623157E+308 ~ -2.2250738585072014E-308` `0``2.2250738585072014E-308 ~ 1.7976931348623157E+308` | `0` `2.2250738585072014E-308 ~ 1.7976931348623157E+308` |
| `DecimalField`              | `decimal(20,10)`                | 依赖M和D的值                                                 | 依赖M和D的值                                            |
| `AutoField`                 | `int(11)`                       | 不支持                                                       | `1 ~ 4294967295`                                        |
| `BigAutoField`              | `BIGINT`                        | 不支持                                                       | `1 ~ 9223372036854775807`                               |

- 科学计数法直观体现是多少？

```
>>> print('{:.5f}'.format(-1.7976931348623157E+308))
-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.00000

>>> print('{:.5f}'.format(-2.2250738585072014E-308))
-0.00000

>>> print('{:.5f}'.format(2.2250738585072014E-308))
0.00000

>>> print('{:.5f}'.format(1.7976931348623157E+308))
179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.00000
```

- 到数据库究竟是多少？

```
from django.db import models

class Float_test(models.Model):
    BooleanField = models.BooleanField()
    NullBooleanField = models.NullBooleanField()
    IntegerField = models.IntegerField()
    BigIntegerField = models.BigIntegerField()
    SmallIntegerField = models.SmallIntegerField()
    PositiveIntegerField = models.PositiveIntegerField()
    PositiveSmallIntegerField = models.PositiveSmallIntegerField()
    FloatField = models.FloatField()
    DecimalField = models.DecimalField(max_digits=20, decimal_places=10)
    # AutoField = models.AutoField()
    # BigAutoField = models.BigAutoField()
```

```
mysql> desc app1_float_test;
+---------------------------+----------------------+------+-----+---------+----------------+
| Field                     | Type                 | Null | Key | Default | Extra          |
+---------------------------+----------------------+------+-----+---------+----------------+
| id                        | int(11)              | NO   | PRI | NULL    | auto_increment |
| BooleanField              | tinyint(1)           | NO   |     | NULL    |                |
| NullBooleanField          | tinyint(1)           | YES  |     | NULL    |                |
| IntegerField              | int(11)              | NO   |     | NULL    |                |
| BigIntegerField           | bigint(20)           | NO   |     | NULL    |                |
| SmallIntegerField         | smallint(6)          | NO   |     | NULL    |                |
| PositiveIntegerField      | int(10) unsigned     | NO   |     | NULL    |                |
| PositiveSmallIntegerField | smallint(5) unsigned | NO   |     | NULL    |                |
| FloatField                | double               | NO   |     | NULL    |                |
| DecimalField              | decimal(20,10)       | NO   |     | NULL    |                |
+---------------------------+----------------------+------+-----+---------+----------------+
```

### 字符串类型

| 类型          | SQL                 | 范围               |
| ------------- | ------------------- | ------------------ |
| `CharField`   | `varchar(<length>)` | 由 `length` 决定   |
| `TextField`   | `longtext`          | `0~4294967295字节` |
| `URLField`    | `varchar(200)`      |                    |
| `UUIDField`   | `char(32)`          |                    |
| `SlugField`   | `varchar(50) MUL`   |                    |
| `BinaryField` | `longblob`          | `0~4294967295字节` |

- 到数据库究竟是多少？

```
class Char_test(models.Model):
    CharField = models.CharField(max_length=20)
    TextField = models.TextField()
    URLField = models.URLField()
    UUIDField = models.UUIDField()
    SlugField = models.SlugField()
    FilePathField = models.FilePathField()
    EmailField = models.EmailField()
    GenericIPAddressField = models.GenericIPAddressField()
    FileField = models.FileField()
    ImageField = models.ImageField()
    BinaryField = models.BinaryField()
```

```
mysql> desc app1_char_test;
+-----------------------+--------------+------+-----+---------+----------------+
| Field                 | Type         | Null | Key | Default | Extra          |
+-----------------------+--------------+------+-----+---------+----------------+
| id                    | int(11)      | NO   | PRI | NULL    | auto_increment |
| CharField             | varchar(20)  | NO   |     | NULL    |                |
| TextField             | longtext     | NO   |     | NULL    |                |
| URLField              | varchar(200) | NO   |     | NULL    |                |
| UUIDField             | char(32)     | NO   |     | NULL    |                |
| SlugField             | varchar(50)  | NO   | MUL | NULL    |                |
| FilePathField         | varchar(100) | NO   |     | NULL    |                |
| EmailField            | varchar(254) | NO   |     | NULL    |                |
| GenericIPAddressField | char(39)     | NO   |     | NULL    |                |
| FileField             | varchar(100) | NO   |     | NULL    |                |
| ImageField            | varchar(100) | NO   |     | NULL    |                |
| BinaryField           | longblob     | NO   |     | NULL    |                |
+-----------------------+--------------+------+-----+---------+----------------+
```

### 时间日期型

| 类型            | SQL                 | 范围                  |
| --------------- | ------------------- | --------------------- |
| `DateField`     | `date` 即原生`date` | `YY-MM-DD`            |
| `TimeField`     | `time(6)`           | `HH:MM:SS`            |
| `DateTimeField` | `datetime(6)`       | `YYYY-MM-DD HH:MM:SS` |

- 到数据库究竟是什么样？

```
mysql> desc app1_data_test;
+---------------+-------------+------+-----+---------+----------------+
| Field         | Type        | Null | Key | Default | Extra          |
+---------------+-------------+------+-----+---------+----------------+
| id            | int(11)     | NO   | PRI | NULL    | auto_increment |
| DateField     | date        | NO   |     | NULL    |                |
| TimeField     | time(6)     | NO   |     | NULL    |                |
| DateTimeField | datetime(6) | NO   |     | NULL    |                |
+---------------+-------------+------+-----+---------+----------------+
```

### 字段约束

| 约束          | SQL      | 作用                                                         |
| ------------- | -------- | ------------------------------------------------------------ |
| `null=True`   | 空约束   | 为 `True` 时，Django 将在数据库中将空值存储为 NULL，默认为 `False`。 |
| `db_column`   | 字段名称 | 这个字段在数据库中的名字。如果没有设置这个参数，那么将会使用模型中属性的名字。 |
| `db_index`    | 索引     | 标识这个字段是否为索引字段。                                 |
| `primary_key` | 主键     | 是否为主键，与AutoField/BigAutoField连用，默认是False。      |
| `unique`      | 唯一键   | 在表中这个字段的值是否唯一，在数据库中就是唯一约束，一般是设置手机号码/邮箱等。 |
| `default`     | 默认值   | 默认值，可以为一个值，或者是一个函数（函数名不加括号），但不支持lambda表达式。 |
| `max_length`  | 长度     | 最大的长度，单位：字符，表示能存多少个字。                   |

### 关系映射

| 名称              | 作用                                 |      |
| ----------------- | ------------------------------------ | ---- |
| `ForeignKey`      | 外键，与另外一张表的主键字段建立关系 |      |
| `ManyToManyField` | 多对多                               |      |
| `OneToOneField`   | 一对一                               |      |

- 一对多映射

一对多的外键应该建立外键记录多的一方，例如：一个人可以拥有多辆汽车，一个汽车的登记只能属于一个人，所以因该在汽车表中新建外键指向人员表的ID。

```
class Person(models.Model):
    name = models.CharField(max_length=20)
    age = models.IntegerField()
    gender = models.CharField(max_length=3)

class Car(models.Model):
    mark = models.CharField(max_length=20)
    price = models.IntegerField()
    owner = models.ForeignKey("Person", on_delete=models.CASCADE)
```

- `models.ForeignKey("Person", on_delete=models.CASCADE)`

```
其中 "Person" 可以不加引号，表示外键到 Person 类的主键，但是如果不加引号，就必须将 Person类 的定义放在前面声明
```

## 数据操作

### 导入模型

在视图函数内使用模型进行数据库操作，需要首先导入模型，语句格式为：`应用.models`

```
from app1.models import *
```

### 添加记录

- 方式1，调用模型初始化实例，调用实例的 `save` 方法，提交到数据库

```
b = Book(name="Python基础",price=99,author='alex',pub_date="2017-12-12")
b.save()
```

- 方式2，调用模型的方法，直接在数据库创建记录

```
Book.objects.create(name="Shell编程指南",price=70,author='oldboy',pub_date="2018-12-12")
```

### 修改记录

- 方式1

```
Book.objects.filter(author="oldboy").update(price=999)    # filter 返回一个 query set 集合对象
```

- 方式2

```
b = Book.objects.get(author="oldboy")    # # get仅取得一条结果
b.price=120
b.save()
```

### 删除记录

- 方式一

```
Book.objects.filter(author='alex').delete()
```

## 查询API

| 方法                                   | 作用                                                         |
| -------------------------------------- | ------------------------------------------------------------ |
| `filter(**kwargs)`                     | 使用关键字，条件，进行过滤查询，返回 `QuerySET` 集合，集合由查询的每个记录对象组成。 |
| `all()`                                | 取得全部结果的集合，返回 `QuerySET` 集合。                   |
| `get(**kwargs)`                        | 使用关键字，条件，进行过滤查询，但条件的结果只能是一个，返回一条记录的对象。 |
| `values("字段1","字段2","字段3")`      | 返回一个列表，这个列表中每个元素是一个记录由：所查询的字段的键和值组成的字典。 |
| `values_list("字段1","字段2","字段3")` | 返回一个列表，这个列表中每个元素是一个记录由：所查询的字段的值组成的元素。 |
| `exclude(**kwargs)`                    | 排除符合条件的查询                                           |
| `order_by(*field)`                     | 对查询结果进行排序                                           |
| `reverse()`                            | 对查询结果进行反向排序                                       |
| `distinct()`                           | 对查询结果进行去重，不支持按字段                             |
| `count()`                              | 统计查询结果对象的数量                                       |
| `first()`                              | 返回第一条记录对象                                           |
| `last()`                               | 返回最后一个记录对象                                         |
| `exists()`                             | 如果 QuerySet 包含数据，就返回True，否则返回False。          |

### 结果迭代器

当 `QuerySET` 查询结果非常巨大时候， `cache` 会给内存造成很大压力，`QuerySET` 还可能锁住系统进程，让程序面临崩溃，要在使用 `QuerySET` 但不加入缓存的时候，可以使用迭代器的模式，对 `QuerySET` 使用 `iterator()` 方法，可以在使用数据才获取数据，处理完数据就丢弃，不再加入缓存。

```
objs = Book.object.all().iterator()

for i in objs:
    print(i)
```

`iterator()` 方法防止 `Django` 对查询结果进行缓存，这意味着多是使用同一个 `QuerySET` 就会造成多次的查询，因为迭代器的原因，所以它只能遍历一次，再次遍历的时候，就会抛出异常。

## 单表查询

- 测试模型

```
from django.db import models

class Book(models.Model):
    name = models.CharField(max_length=20)
    price = models.IntegerField()
    pub_date = models.DateField()
    publish = models.ForeignKey("Publish",on_delete=models.CASCADE)
    author = models.ManyToManyField("Author")

    def __str__(self):
        return self.name

class Publish(models.Model):
     name = models.CharField(max_length=32)
     city = models.CharField(max_length=32)

class Author(models.Model):
    name = models.CharField(max_length=32)
    age = models.IntegerField(default=0)
```

### filter过滤

`filter`过滤的条件可以是多个，它的返回结果是一个 Query Set 对象，支持索引，切片。

- 数字比较

```
__gt       # 大于
__gte      # 大于等于
__lt       # 小于
__lte      # 小于等于
__in       # 在指定的集合内
__isnull   # 为空
__range    # 在范围内
```

- 字符串比较

```
__contains      # 字段包含指定字符的记录，底层是 LIKE , %关键字%
__icontains     # 不区分大小写的查找包含指定字符的记录
__startswith    # 以指定字符开头的记录
__istartswith   # 不区分大小写的以指定字符开头
__endswith      # 以指定字符结尾的记录
__iendswith     # 不区分大小写以指定字符结尾的记录
__exact         # 
__iexact        #
__regex         #
__iregex        #
__in            # 在指定的集合内
__isnull        # 为空
__search        #
```

### 返回字典

values 返回一个列表，这个列表中每个元素是一个记录由：所查询的字段的键和值组成的字典。

```
ret = Book.objects.filter().values('name','price')
```

```
<QuerySet [{'name': 'Python', 'price': 200}, {'name': 'Linux运维', 'price': 77}, {'name': 'Go语言', 'price': 223}, {'name': 'javascript', 'price': 66}]>
```

### 仅返回值

values_list 返回一个列表，这个列表中每个元素是一个记录由：所查询的字段的值组成的元素。

```
ret = Book.objects.filter().values_list('name','price')
```

```
<QuerySet [('Python', 200), ('Linux运维', 77), ('Go语言', 223), ('javascript', 66)]>
```

### 排除查询

`exclude` 过滤符合条件的查询。

```
ret = Book.objects.exclude(name="Python").values('name','price')
```

### 结果去重

只能适用于结果由重复的时候，所以适用于 values。

```
ret = Book.object.all().values().dictinct()
```

### 结果计数

```
ret = Book.objects.filter().count()
```

### 指定对象列

大部分时候，我们可能只需要读取表中某些字段，那么可以用only，它返回一个 QuerySet集合。

```
Book.objects.filter().only('name','age')
```

### 指定查询数据库

- 数据库的连接可以是多个

```
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'demo',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
    'database2': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'demo',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}
```

- 查询时，也可以指定数据库连接

```
Book.objects.filter().using('database2')
```

## 一对多关系

- 测试模型

```
from django.db import models

class Book(models.Model):
    name = models.CharField(max_length=20)
    price = models.IntegerField()
    pub_date = models.DateField()
    publish = models.ForeignKey("Publish",on_delete=models.CASCADE)
    author = models.ManyToManyField("Author")

    def __str__(self):
        return self.name

class Publish(models.Model):
     name = models.CharField(max_length=32)
     city = models.CharField(max_length=32)

class Author(models.Model):
    name = models.CharField(max_length=32)
    age = models.IntegerField(default=0)
```

> 默认情况 Django 会在外键字段的后面增加 `id` 字样，所以 Book 的 publish 外键字段实际是 publish_id

### 一对多创建

一对多的外键应该建立外键记录多的一方，例如：一个人可以拥有多辆汽车，一个汽车的登记只能属于一个人，所以因该在汽车表中新建外键指向人员表的ID。

- `publish` 是外键字段，Django 最终创建到数据库的名字是 `publish_id` ，所以自己为外键命名的时候无需添加 `_id` 字样了

```
publish = models.ForeignKey("Publish",on_delete=models.CASCADE)
```

其中的 `"Publish"` 可以不加引号，表示外键到 `Person` 类的主键，但是如果不加引号，就必须将 Person类 的定义放在前面声明。

### 外键的插入

- 方法1，直接指明外键字段的值，此处为：`publish_id`。

```
Book.objects.create(name="Linux运维",price=77,pub_date='2017-01-01',publish_id=1)
```

- 方法2，首先找到外键对象，然后将书的外键指向外键对象

```
publish_obj = Publish.objects.filter(name="北京大学出版社")[0]
Book.objects.create(name="Go语言", price=223, pub_date='2015-03-11', publish=publish_obj)
```

### 关系查询

- 首先找到记录对象，再根据外键找到外键表对象，使用外键对象的来获得外键对象的值

```
book_obj = Book.objects.get(name='Python')    # 首先找到该该记录的对象
publish_obj = book_obj.publish                # 然后找到它的外键对象
print(publish_obj.name)                       # 打印出外键对象的名字
```

- 方法1，通过外键对象，找到使用这个外键的记录对象

```
publish_obj = Publish.objects.get(name='人民出版社')    # 首先找到出版社对象
books = Book.objects.filter(publish=publish_obj)       # 然后过滤书中外键属于该出版社的书
print(books.all())                                     # 显示全部的 Book 实例
print(books.values())                                  # 显示全部的 Book 实例的值
```

- 方法2，首先找到外键对象，使用外键对象的 `_set` 属性找到所有使用这个外键的记录对象

```
publish_obj = Publish.objects.get(name='人民出版社')    # 首先找出出版社对象
books = publish_obj.book_set                           # 使用出版社的方法，找出它所有的 Book 对象
print(books.all())                                     # 显示全部的 Book 实例
print(books.values())                                  # 显示全部的 Book 实例的值
```

- 方法3，使用记录对象的 `filter` 过滤出记录外键对象名称符合条件的记录对象

```
books = Book.objects.filter(publish__name="人民出版社")    # 在书类中过滤 外键对象名字为 人民出版社的书
print(books.all())                                        # 显示全部的 Book 实例
print(books.values())                                     # 显示全部的 Book 实例的值
```

- 方法4，使用外键表对象的 `filter` 过滤出与这个外键相关联的表中指定字段的值

```
publish_obj = Publish.objects.filter(book__name="Python")    # 在出版社类中过滤 书名字为 Python 的出版社
print(publish_obj.all())
print(publish_obj.values())
```

- 方法5，首先再外键表中过滤出符合条件的外键记录对象集合，然后使用记录集合的 `filter` 方法过滤出再外键集合中的记录。

```
publish_obj = Publish.objects.filter(city='北京')       # 首先找到所有的北京出版社 查询集合
books = Book.objects.filter(publish__in=publish_obj)    # 然后找书籍中所有外键字段在 出版社集合中的书籍
print(books)
```

- 方法6，使用记录表对象的 `filter` 方法的多条件查询得到记录对象集合，然后打印记录对象的外键对象的信息。

```
books = Book.objects.filter(pub_date__lt='2018-01-01',pub_date__gt='2015-01-01')
print(books.values("name"))
print(books.values("publish__name"))
```

## 多对多关系

- 测试模型

```
from django.db import models

class Book(models.Model):
    name = models.CharField(max_length=20)
    price = models.IntegerField()
    pub_date = models.DateField()
    publish = models.ForeignKey("Publish",on_delete=models.CASCADE)
    author = models.ManyToManyField("Author")

    def __str__(self):
        return self.name

class Publish(models.Model):
     name = models.CharField(max_length=32)
     city = models.CharField(max_length=32)

class Author(models.Model):
    name = models.CharField(max_length=32)
    age = models.IntegerField(default=0)
```

```
INSERT INTO app01_publish (name,city) VALUES ('北京大学出版社','北京');
INSERT INTO app01_publish (name,city) VALUES ('机械工业出版社','天津');
INSERT INTO app01_publish (name,city) VALUES ('太原理工出版社','山西');
INSERT INTO app01_publish (name,city) VALUES ('图灵社区出版社','圣塞尔');

INSERT INTO app01_book (name,price,pub_date,publish_id) VALUES ('Linux运维',99,'2015-05-14',1);
INSERT INTO app01_book (name,price,pub_date,publish_id) VALUES ('Python程序开发',200,'2016-01-12',2);
INSERT INTO app01_book (name,price,pub_date,publish_id) VALUES ('梦的解析',300,'2010-05-13',4);
INSERT INTO app01_book (name,price,pub_date,publish_id) VALUES ('论自由',900,'2000-01-03',3);
INSERT INTO app01_book (name,price,pub_date,publish_id) VALUES ('一个陌生女人的来信',300,'2002-12-22',1);
INSERT INTO app01_book (name,price,pub_date,publish_id) VALUES ('Unix系统编程',100,'2012-02-02',1);

INSERT INTO app01_author (name,age) VALUES ('杨金恒',29);
INSERT INTO app01_author (name,age) VALUES ('李莹',25);
INSERT INTO app01_author (name,age) VALUES ('茨威格',26);
INSERT INTO app01_author (name,age) VALUES ('弗洛伊德',50);
```

### 多对多创建

两个表的多对多的关系描述需要一个中间关系表，例如：一本书可以有多个作者，而一个作者也可以出多本书。

- 在一个表对象模型中声明一个外键，Django 会 自动创建一个中间表，例如下面的例子会创建：`app01_book_author`，ManyToManyField 是 Django 识别多对多关系的方式，与数据库无关。

```
author = models.ManyToManyField("Author")
```

“Author” 是需要与之建立多对多关系的表，Django 会自动将两个表的主键作为关系的外键，从SQL语句可以看出这一点，`xxx` 是我改的便于分析。

```
app01_book_author | CREATE TABLE `app01_book_author` (
	`id` INT (11) NOT NULL AUTO_INCREMENT,
	`book_id` INT (11) NOT NULL,
	`author_id` INT (11) NOT NULL,
	PRIMARY KEY (`id`),
	UNIQUE KEY `xxx1` (`book_id`, `author_id`),
	KEY `xxx` (`author_id`),
	CONSTRAINT `xxx2` FOREIGN KEY (`author_id`) REFERENCES `app01_author` (`id`),
	CONSTRAINT `xxx3` FOREIGN KEY (`book_id`) REFERENCES `app01_book` (`id`)
) ENGINE = INNODB AUTO_INCREMENT = 2
```

### 关系的创建

- 添加一个关系，正向

```
books = Book.objects.get(name="一个陌生女人的来信")    # 首先找到一本书
authors = Author.objects.get(name="茨威格")           # 然后找到一个作者
books.author.add(authors)                            # 使用书类的方法，为书创建一个作者
```

```
+----+---------+-----------+
| id | book_id | author_id |
+----+---------+-----------+
|  2 |       7 |         1 |
+----+---------+-----------+
```

- 添加一个关系，反向

```
authors = Author.objects.get(name='茨威格')           # 首先找到一个作者
books = Book.objects.get(name='一个陌生女人的来信')    # 然后找到一本数
authors.books_set.add(books)                         # 调用 xxx_set 的 add 方法为作者增加一本书
```

- 添加多个关系，正向

```
from django.db.models import Q                                          # 多条件查询
def index(request):
    books = Book.objects.get(name="Linux运维")                          # 找到一本书
    authors = Author.objects.filter(Q(name="杨金恒")|Q(name="李莹"))     # 找到两个作者 
    books.author.add(*authors)                                          # 为书籍添加多个作者的关系
    return render(request,'index.html')
```

```
mysql> select * from app01_book_author;
+----+---------+-----------+
| id | book_id | author_id |
+----+---------+-----------+
|  2 |       7 |         1 |
|  3 |       7 |         5 |
|  1 |      11 |         6 |
+----+---------+-----------+
```

- 添加多个关系，反向

```
def index(request):
    authors = Author.objects.filter(name="杨金恒")  # 找到一个作者 
    authors.books_set.set([1,2]])    # xxx_set 的 set 方法会只保留参数内的关系，清除其余关系
    return render(request,'index.html')
```

### 关系的删除

- 删除多个关系

```
from django.db.models import Q                                          # 多条件查询
def index(request):
    books = Book.objects.get(name="Linux运维")                          # 找到一本书
    authors = Author.objects.filter(Q(name="杨金恒")|Q(name="李莹"))     # 找到两个作者 
    books.author.remove(*authors)                                       # 为书籍移除多个作者的关系
    return render(request,'index.html')
```

- 按 ID 删除关系

```
from django.db.models import Q                                          # 多条件查询
def index(request):
    books = Book.objects.get(name="Linux运维")                          # 找到一本书
    books.author.remove(1)                                              # 删除 关系表中 id 为 1 的关系删除
    return render(request,'index.html')
```

### 查询方法

- 跨表查询

```
obj = Book.objects.filter(author__name="杨金恒")        # 通过 Book 模型下的 author 属性可以得到关系表的信息，使用 filter 过滤后打印
print(obj.values("name","price"))
```

- 跨表查询，正向（类中有多对多哪个属性的）

```
obj = models.Classes.objects.filter(title="全栈四班")    # 首先从正向表中过滤出来一条数据
ret = obj.values('id','title','m__name')                # 然后 通过 m 这个多对多关系表的 m__name 得到所有有关系的名字
print(ret)
```

- 跨表查询，反向（类中没有多对多哪个属性的）

```
obj = models.Teachers.objects.filter(name="杨金恒")     # 首先从反向表中过滤出来一条数据
ret = obj.values('name','classes__title')              # 然后 通过 m 这个多对多关系表的 classes__title 得到所有有关系的名字
print(ret)
```

### 自定义多对多

- 上面的方法是通过 ManyToManyField 实现的，其实还可以通过 自定义模型来实现，这样更方便直接对模型进行操作。

```
class Book_Author(models.Model):
    book = models.ForeignKey('Book',on_delete=models.CASCADE)
    author = models.ForeignKey('Author',on_delete=models.CASCADE)
```

- 多对多关系添加，直接操作关系表

```
Book_Author.objects.create(book_id=1,author_id=1)    # 直接对关系表模型对象进行操作，创建表记录
```

### 联合唯一

一般情况，数据库要防止冗余数据的产生，例如：一本数对应一个作者的关系，它只需要描述一次，不需要多次出现，意味着书与作者的对应关系不应该出现重复的数据，所以这需要联合唯一索引，这个约束能够实现两个字段联合起来唯一性，这就不妨碍一本书有多个作者，和一个作者出版多本书籍了。

```
class Book_Author(models.Model):
    book = models.ForeignKey('Book',on_delete=models.CASCADE)
    author = models.ForeignKey('Author',on_delete=models.CASCADE)
    class Meta:
        # 数据库中生成的表名称 默认 app名称 + 下划线 + 类名
        db_table = "table_name"

        # 联合索引
        index_together = [
            ("book", "author"),
        ]

        # 联合唯一索引
        unique_together = (("driver", "restaurant"),)

        # admin中显示的表名称
        verbose_name

        # verbose_name加s
        verbose_name_plural
```

### 查询方法

- `xxxxxx_set.all()` 方法可以得到与该表相关的关系表记录。

```
obj = Book.objects.get(name="Python程序开发")                             # 首先过滤出需要查询的书
print(obj.book_author_set.all().values("book__name","author__name"))     # 在这本书的关系表中所有关系记录中打印出书的名字和作者
```

- 两张表通过一个关系表关联的时候，可以使用 `xxxxxx_set.all()` 方法得到关系的 `QuerySET` 对象。

```
obj = Author.objects.get(id=2)
print(obj.book_author_set.all().values("book__name","book__price"))
```

## 多表关系相关

### ForeignKey

```
models.ForeignKey(
    to,                          # 要进行关联的表名,如：to="book"
    to_field=None,               # 要关联的表中的字段名称
    on_delete,                   # 当删除关联表中的数据时，当前表与其关联的行的行为
    related_name=None,           # 反向操作时，使用的字段名，用于代替 <表名_set>
    related_query_name=None,     # 反向操作时，使用的连接前缀，用于替换原表名
    limit_choices_to=None,       # 在 Admin 或 ModelForm 中显示关联数据时，过滤显示；如：limit_choices_to=lambda : {'nid__gt': 5}
    parent_link=False,           # 在Admin中是否显示关联数据
    db_constraint=True,          # 是否在数据库中创建外键约束，为False时候，不再数据创建外键约束，但ORM不影响ORM关系操作
    **kwargs
)
```

- on_delete

```
on_delete = models.CASCADE，      # 删除关联数据，与之关联也删除
on_delete = models.DO_NOTHING，   # 删除关联数据，引发错误 IntegrityError
on_delete = models.PROTECT，      # 删除关联数据，引发错误 ProtectedError
on_delete = models.SET_NULL，     # 删除关联数据，与之关联的值设置为null（前提FK字段需要设置为可空）
on_delete = models.SET_DEFAULT，  # 删除关联数据，与之关联的值设置为默认值（前提FK字段需要设置默认值）
on_delete = models.SET，          # 删除关联数据，并将与之关联的值设置为指定值，值可以是固定值，也可以是函数的返回值

                                  #  def func():
                                  #      return 10
                                  #
                                  #  class MyModel(models.Model):
                                  #      user = models.ForeignKey(
                                  #          to="User",
                                  #          to_field="id"
                                  #          on_delete=models.SET(func),)
```

### ManyToManyField

```
models.ManyToManyField(
	to,                           # 要进行关联的表名
	related_name=None,            # 反向操作时，使用的字段名，用于代替 <表名_set>
	related_query_name=None,      # 反向操作时，使用的连接前缀，用于替换原表名
	limit_choices_to=None,        # 在 Admin 或 ModelForm 中显示关联数据时，过滤显示；如：limit_choices_to=lambda : {'nid__gt': 5}
	symmetrical=None,             # 仅用于多对多自关联时，symmetrical用于指定内部是否创建反向操作的字段
	through=None,                 # 指定关联表的名称，启用此项时候 Django 不再自动创建关系表，而使用自定义表
	through_fields=None,          # 使用自定义表，作为关联表的时候，指定关系表中哪些字段用于做多对多关系表
	db_constraint=True,           # 是否在数据库中创建外键约束，为False时候，不再数据创建外键约束，但ORM不影响ORM关系操作
	db_table=None,                # 默认创建第三张表时，数据库中表的名称
	swappable=True,               #
	**kwargs
)
```

## 表的自关联

表的自关联，表的主键与主键的关系，例如：自己的粉丝，与自己，同样处于用户表，怎么描述这种粉丝这种关系呢？这就用到自关联，再进行自关联的时候，需要注意使用 `related_name` 来避免冲突。

```
from django.db import models

class User(models.Model):
    user = models.CharField(max_length=15)
    age = models.SmallIntegerField(3)
    gender = models.NullBooleanField()
    m = models.ManyToManyField('User',related_name='User_Self')
```

```
+--------------+---------+------+-----+---------+----------------+
| Field        | Type    | Null | Key | Default | Extra          |
+--------------+---------+------+-----+---------+----------------+
| id           | int(11) | NO   | PRI | NULL    | auto_increment |
| from_user_id | int(11) | NO   | MUL | NULL    |                |
| to_user_id   | int(11) | NO   | MUL | NULL    |                |
+--------------+---------+------+-----+---------+----------------+
```

## 聚合分组

Django 的聚合通过 `aggregate()` 来实现，分组通过 `annotate()` 来实现。

```
from django.db.models import Avg,Min,Sum,Max,Count,F,Q
```

### 聚合查询

- `aggregate()` 函数调用聚合函数，`bookSUM=`是为结果的名字赋值，结果是一个字典。

```
print(Book.objects.all().aggregate(bookSUM=Avg("price")))          # 找到所有书籍，对其价格求平均值
print(Book.objects.filter(author__name="杨金恒").aggregate(Sum("price")))    # 找到指定人的书籍均价
```

### 分组查询

- 对书这个对象的某个字段进行分组，分组后统计它的指定字段出现了几次。

```
print(Book.objects.values("author__name").annotate(Count("name")))
```

## 多条件查询

```
from django.db.models import Avg,Min,Sum,Max,Count,F,Q
```

### F函数

- F函数能够在没有连接数据库的情况下，对数据库字段进行引用

```
Book.objects.all().update(price=F('price')+10)    # 为所有的 price 字段增加 10
```

### 与

- 与关系的多条件查询，直接使用逗号分隔条件即可

```
data = Book.objects.get(name="Python程序开发",price=200)
print(data.name)
```

### 或

- 或关系的多条件查询，需要使用Q函数，Q查询可以和关键字查询组合使用，但Q查询必须在前

```
data = Book.objects.filter(Q(name="Python程序开发")|Q(name="梦的解析"))
print(data.values("name"))
```

### 非

- 非的关系，使用 ~ 对条件进行取反

```
data = Book.objects.filter(~Q(name="Python程序开发"),~Q(price__lt=200))
print(data.values("name"))
```

# 管理页面

`Django Admin` 是 `Django` 专用用来管理数据库的一个工具，它可以在后台定制对数据库表的管理。

## 基本配置

- 创建管理员用户，执行下面命令，创建完成，就可以登陆管理页了：`htpp://127.0.0.1:80/admin`

```
python manage.py createsuperuser
```

- 让管理页面显示中文，编辑项目的 `setting.py` 文件，修改下面的值

```
LANGUAGE_CODE = 'zh-Hans'
TIME_ZONE = 'Asia/Shanghai'
```

- 让`Django` 管理表，需要首先注册表，在 APP 目录下编辑 `admin.py`文件，在这里注册需要管理的表。

```
from app01 import models

admin.site.register(models.Author)
admin.site.register(models.Book)
admin.site.register(models.Publish)
```

接下来就可以在 admin 的管理页面来管理这些表了。

## 定制功能

- 定制一张表的管理页面，让 Django 像Excel一样显示数据库的记录，但目前不能添加多对多

```
class BookAdmin(admin.ModelAdmin):                     # 定制页面的显示必须继承自 admin.ModelAdmin
    list_display = ('id','name','price','pub_date'，'publish_id')    # 在这里定制想要显示的字段
    
admin.site.register(models.Book,BookAdmin)             # 在注册表的时候，将类作为参数传入注册函数
```

- 让表管理页面显示的字段可编辑

```
class BookAdmin(admin.ModelAdmin):
    list_editable = ('name','price','pub_date')        # 在这里定制想要编辑的字段
```

- 让表管理页面的字段按规则排序

```
class BookAdmin(admin.ModelAdmin):
    ordering = ('price',)                    # price 字段升序排序
    #ordering = ('-price',)                    # price 字段降序排序
```

- 让记录管理页的外键字段，增加一个更加方便的选择输入框

```
class BookAdmin(admin.ModelAdmin):
    filter_horizontal = ('author',)          # 在这里输入外键
```

> 有些时候，页面上显示的名称为 objects 这样，那就需要在 模型中重写 `__str__` 方法，这样会更直观的显示。

- 修改记录页面的最大数目

```
class BookAdmin(admin.ModelAdmin):
    list_per_page = 20                       # 修改记录页面显示的最大条目，超过在下一页显示
```

- 增加记录的搜索功能

```
class BookAdmin(admin.ModelAdmin):
    search_fields = ('name','publish__name') # 可以根据元组内的字段内容来搜索表
```

- 增加一个右侧的选择过滤框

```
class BookAdmin(admin.ModelAdmin):
    list_filter = ('pub_date','publish')     # 在这里输入需要分类过滤的字段，外键字段直接写外键对象名
```

- 增加记录的时候，隐藏一些默认项目，可以显示为折叠效果，可以点开填写

```
class BookAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,{'fields':['name','price']}),                                       # 默认显示的字段
        ('查看更多',{'fields':['pub_date','publish'],'classes':['collapse']}),     # 隐藏的字段，'classes':['collapse'] 表示样式为折叠
    ]
```

## 模型参数

以下的参数在定义模型的时候，在其字段的参数中添加。

| 参数               | 含义                                                         |
| ------------------ | ------------------------------------------------------------ |
| `verbose_name`     | `django admin` 中显示的字段名称                              |
| `editable`         | `django admin` 中表示是否可编辑                              |
| `choices`          | 在一个范围内选择出一项， 作用：`django admin` 中显示下拉框，避免连表查询。 |
| `blank=True`       | 为 `True` 时，Django 在验证数据时候将允许向数据库存储空值，默认为 `False`。 |
| `help_text`        | `django admin` 中显示字段的提示信息                          |
| `error_messages`   | 自定义错误信息（字典类型）如：{‘null’: “不能为空.”, ‘invalid’: ‘格式错误’,’blank’:’不能为空’} |
| `db_tablespace`    |                                                              |
| `unique_for_date`  | 日期唯一                                                     |
| `unique_for_month` | 月份唯一                                                     |
| `unique_for_year`  | 年份唯一                                                     |
| `validators`       | 自定义错误验证（列表类型），从而定制想要的验证规则           |

例如：为字段增加 `Django admin` 显示属性

```
class Book(models.Model):
    name = models.CharField(max_length=20,verbose_name="名称")
    price = models.IntegerField(verbose_name="价格")
    pub_date = models.DateField(verbose_name="出版日期")
    publish = models.ForeignKey("Publish",on_delete=models.CASCADE)
```

# 会话保持

会话跟踪是 Web 程序中常用的技术，用来跟踪用户的整个会话。常用的会话跟踪技术是 Cookie 与 Session。Cookie 通过在客户端记录信息确定用户身份，Session 通过在服务器端记录信息确定用户身份。

## Cookie

- Cookie是做什么的

Cookie意为“甜饼”，是由W3C组织提出，最早由Netscape社区发展的一种机制。目前Cookie已经成为标准，所有的主流浏览器如IE、Netscape、Firefox、Opera等都支持Cookie。

由于HTTP是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办呢？就给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理。

- Cookie的工作过程

当用户使用浏览器访问一个支持 Cookie 的网站的时候，用户会提供包括用户名密码等个人信息并且提交至服务器，接着，服务器向用户发送响应报文的时候，会将这些个人信息（Cookie）插入到 HTTP 报文的响应头中，然后将响应报文发送给用户，当客户端浏览器接收到来自服务器的响应之后，浏览器会将这些信息（Cookie）存放在一个统一的位置。

当客户端再向服务器请求页面的时候，就会把相应的 Cookie 插入到 HTTP 报文的请求头中，再次发回至服务器。有了 Cookie 技术服务器在接收到来自客户端浏览器的请求之后，就能够通过分析存放于请求头的 Cookie 得到客户端特有的信息，从而判断用户身份，根据用户身份进行不同的响应。

其实本质上 Cookie 就是 HTTP 的一个扩展，有两个 HTTP 头部是专门负责设置以及发送 Cookie 的,它们分别是 Set-Cookie 以及 Cookie 。

- 内存Cookie和硬盘Cookie

当服务器返回给客户端一个 HTTP 响应信息时，其中如果包含Set-Cookie这个头部时，意思就是指示客户端建立一个 Cookie ，并且在后续的 HTTP 请求中自动发送这个 Cookie 到服务器端，直到这个 Cookie 过期。如果 Cookie 的生存时间是整个会话期间的话，那么浏览器会将 Cookie 保存在内存中，浏览器关闭时就会自动清除这个 Cookie 。

另外一种情况就是保存在客户端的硬盘中，浏览器关闭的话，该 Cookie 也不会被清除，下次打开浏览器访问对应网站时，这个cookie就会自动再次发送到服务器端。

### 简单实现

- 登陆页面

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <form action="/login/" method="POST">
        <p><input type="text" name="username" placeholder="用户名"/></p>
        <p><input type="text" name="password" placeholder="密码"/></p>
        <p><input type="submit" value="登陆"/><p>
    </form>
</body>
</html>
```

- 后端逻辑

```
from django.shortcuts import render,HttpResponse,redirect

def login(request):
    if request.method == 'POST':                         # 当使用 POST 方法访访问这个页面的时候
        user = request.POST.get('username',None)         # 获取表单用户名
        pwd = request.POST.get('password',None)          # 获取表单的密码
        if user == 'admin' and pwd == '123456':          # 如果表单的用户名和密码正确，就跳转到 index 页面
            ret = redirect('/index/')                    # 设置跳转到 index 页面的报文
            ret.set_cookie('user',user)                  # 对跳转页面报文设置 Cookie
            return ret                                   # 发送响应报文
    return render(request,'login.html')                  # 用户通过 GET 方法访问页面

def index(request):
    if request.COOKIES.get('user',None):                 # 如果用户的 Cookie 信息内有已经登陆的 Cookie
        return HttpResponse('OK')                        # 直接响应登陆后的页面
    else:
        return redirect('/login')                        # 否则跳转到 index 页面
```

### 命令帮助

- 设置 Cookie，可以指定 Cookie 的过期时间

```
set_cookie(self, key, value='', max_age=None, expires=None, path='/', domain=None, secure=False, httponly=False)

expires：是个具体的时间格式的过期标志，例如：datetime.datetime 对象，某些浏览器不支持 max_age ，则会使用 expires 所设置的时间，一般与 max_age 一致
```

- 读取 Cookie

```
request.COOKIES.get('key',None)        # 从客户端的请求报文中获取 Cookie 信息，如果失败则返回 None
```

- js 操作 Cookie

```
<script src='http://830909.blog.51cto.com/static/js/jquery.cookie.js'></script>
$.cookie("list_pager_num", 30,{ path: '/' });
```

## Session

- Session是什么

Cookie 解决了需要保持状态的问题，但是由于 Cookie 本身最大只有 4096 字节，以及Cookie本身保存在客户端，可能被窃取篡改，因此就需要一种新的东西，它能支持更多字节，并且它保存在服务器端，有较高的安全性，这就是Session。

Session 是另一种记录客户状态的机制，不同的是 Cookie 保存在客户端浏览器中，而 Session 保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是 Session 。客户端浏览器再次访问时只需要从该 Session 中查找该客户的状态就可以了。

如果说 Cookie 机制是通过检查客户身上的“通行证”来确定客户身份的话，那么 Session 机制就是通过检查服务器上的“客户明细表”来确认客户身份。Session 相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。

- Session工作过程

当用户访问到一个服务器，如果服务器启用 Session，服务器就要为该用户创建一个 SESSION ，在创建这个 SESSION 的时候，服务器首先检查这个用户发来的请求里是否包含了一个 SESSION ID ，如果包含了一个 SESSION ID 则说明之前该用户已经登陆过并为此用户创建过 SESSION ，那服务器就按照这个 SESSION ID 把这个 SESSION 在服务器的内存中查找出来（如果查找不到，就有可能为他新创建一个），如果客户端请求里不包含有 SESSION ID ，则为该客户端创建一个 SESSION 并生成一个与此 SESSION 相关的 SESSION ID 。这个 SESSION ID 是唯一的、不重复的、不容易找到规律的字符串，这个 SESSION ID 将被在本次响应中返回到客户端保存，而保存这个 SESSION ID 的正是 COOKIE ，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。

- 客户端禁止Cookie 怎么办

我们知道在IE中，我们可以在工具的Internet选项中把Cookie禁止，那么会不会出现把客户端的Cookie禁止了，那么SESSIONID就无法再用了呢？找了一些资料说明，可以有其他机制在COOKIE被禁止时仍然能够把Session id传递回服务器。

经常被使用的一种技术叫做URL重写，就是把Session id直接附加在URL路径的后面一种是作为URL路径的附加信息,表现形式为：

```
http://…./xxx;jSession=ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764；
```

另一种是作为查询字符串附加在URL后面，表现形式为：

```
http://…../xxx?jSession=ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764
```

还有一种就是表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把Session id传递回服务器。

### 简单实现

```
from django.shortcuts import render,HttpResponse,redirect

def login(request):
    if request.method == 'POST':
        user = request.POST.get('username',None)
        pwd = request.POST.get('password',None)
        if user == 'admin' and pwd == '123456':
            request.session['is_login'] = True
            request.session['user'] = user
            return render(request,'/index/')
    return render(request,'login.html')

def index(request):
    if request.session.get('is_login',None):
        name = request.session.get('user')
        return HttpResponse(name)
    else:
        return redirect('/login')
```

### 命令帮助

- 给客户端一个 Cookie 信息内部包含的是 Session，同时在服务器数据库内设置 Session 的键值

```
request.session['key'] = values
```

- 从服务器读取本次请求的 Session 信息

```
request.session['key']
```

- 删除 Session 信息

```
del request.session['key']
```

- 设置过期时间

```
request.session.set_expiry(value)

value：如果是个整数，Session 会在这些秒数后失效
value：如果是个 datatime 或者 timedelta，Session 会在这个时间失效
value：如果是 0 ，用户关闭浏览器 Session 就会失效
value：如果是 None，Session 会依赖全局 Session 失效策略，Django 默认失效策略为 15 天
```

# Form组件

## 主要功能

```
验证表单数据的有效性
生成HTML表单
为表单初始化默认值
```

- 可用类型

```
'Field', 'CharField', 'IntegerField',
'DateField', 'TimeField', 'DateTimeField', 'DurationField',
'RegexField', 'EmailField', 'FileField', 'ImageField', 'URLField',
'BooleanField', 'NullBooleanField', 'ChoiceField', 'MultipleChoiceField',
'ComboField', 'MultiValueField', 'FloatField', 'DecimalField',
'SplitDateTimeField', 'GenericIPAddressField', 'FilePathField',
'SlugField', 'TypedChoiceField', 'TypedMultipleChoiceField', 'UUIDField',
```

- 继承关系

```
                                                           Field
                                                             |
    +-------------+----------------+------------+------------------+-----------+------------+------------+-------------+
    |             |                |            |                  |           |            |            |             |
CharField   BooleanField      IntegerField  BaseTemporalField  DurationField FileField   ChoiceField  ComboField MultiValueField
    ⬇             ⬇                ⬇            ⬇                              ⬇            ⬇                          ⬇
EmailField  NullBooleanField  FloatField    DateField                        ImageField  FilePathField           SplitDateTimeField
URLField                      DecimalField  TimeField                                    TypedChoiceField        TypedMultipleChoiceField
SlugField                                   DateTimeField                                MultipleChoiceField
UUIDField
RegexField
GenericIPAddressField
```

## 表单验证用法

获取所有用户数据，对用户提交的每条数据进行验证，验证成功返回所有正确信息，验证失败返回所有错误的信息，本示例通过普通POST提交实现，下面有通过AJAX提交的示例。

| 方法                        | 作用                     |
| --------------------------- | ------------------------ |
| `forms_object.is_valid()`   | 表单验证是否成功的布尔值 |
| `forms_object.cleaned_data` | 通过验证的字典           |
| `forms_object.errors`       | 没有通过验证的错误信息   |

- 视图类，Form 类中的属性，最好和数据库的字段一致，这样在写数据库的时候可以使用 `**kwargs` 来进行。

```
from django.shortcuts import render, redirect, HttpResponse

from django import forms


class TestForm(forms.Form):
    user = forms.CharField(label='账户',min_length=6, max_length=12, required=True)
    pwd = forms.CharField(label='密码',min_length=6, max_length=12, required=True)
    email = forms.EmailField(label='邮箱',)


from django.views import View


class index(View):

    def get(self, request):
        obj = TestForm()
        return render(request, 'index.html', {'obj': obj})        # 向前端传递表单

    def post(self, request):
        obj = TestForm(request.POST,request.FILES)                # 验证表单有效性
        if obj.is_valid():                                        # 如果验证成功
            print(obj.cleaned_data)                               # 此处显示是验证证功的表单字典
            return HttpResponse('POST OK')
        else:
            print(obj.errors)                                     # 打印验证失败的表单
            return render(request, 'index.html', {'obj': obj})    # 向模板传递验证结果
```

- 模板文件

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <form action="/index/" method="POST" novalidate>
        {% csrf_token %}
        <p>{{ obj.user.label }} : {{ obj.user }} {{ obj.errors.user.0 }}</p>
        <p>{{ obj.pwd.label }} : {{ obj.pwd }} {{ obj.errors.pwd.0 }}</p>
        <p>{{ obj.email.label }} : {{ obj.email }} {{ obj.errors.email.0 }}</p>
        <input type="submit" value="提交">
    </form>
</body>
</html>
```

## AJAX表单验证

提交表单的时候，上面的用法是提交表单后默认会跳转到提交的页面，由于提交的页面就是原来的页面，但是从服务器返回的数据却包含了表单验证的结果，所以才能再页面渲染。

但是如果是 AJAX 提交，则不能跳转到新页面，那么错误消息就不能通过 `render` 传递给模板来渲染，所以必须使用 `JSON` 来传递消息，再由 JS 渲染将 JSON 的错误消息渲染到页面。

- 视图类

```
class AjaxForm(forms.Form):
    price = forms.IntegerField()
    user_id = forms.IntegerField(
        widget=widgets.Select(choices=[(0, 'alix'), (1, '刘皓宸'), (2, '杨建'), ])
    )


class ajax(View):

    def get(self, request):
        obj = AjaxForm()
        return render(request, 'ajax.html', {'obj': obj})

    def post(self, request):
        import json

        obj = AjaxForm(request.POST)

        if obj.is_valid():
            ret = {'status': 'success'}
            return HttpResponse(json.dumps(ret))
        else:
            ret = {'status': 'error'}
            ret['message'] = obj.errors
            return HttpResponse(json.dumps(ret))
```

- 前端页面

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script src="/static/jquery-3.3.1.js"></script>
</head>
<body>
<form id="table" action="/ajax/" method="POST">
    {% csrf_token %}
    {{ obj.as_p }}
    <input id="commit" type="button" value="Ajax提交">
</form>
<script>
    $(function () {
        $('#commit').click(function () {
            $.ajax({
                url: '/ajax/',
                type: 'POST',
                data: $('#table').serialize(),
                datatype: 'JSON',
                success: function (args) {
                    console.log(args);
                    if (args.status === 'success') {
                        window.location.href = 'http://baidu.com'
                    } else {
                        console.log(args.message)
                    }
                }
            })
        })
    })
</script>
</body>
</html>
```

## 定制Form规则

- Form 表单项定制

有的时候后台在验证表单格式通过后，会再验证表单数据再数据库中的唯一性，例如：注册时候的用户名是否重复的验证，其实 forms 类已经提供了这个接口，再继承 forms.Form 时候，重写某个字段的验证方法即可，方法名字有固定的格式：`clean_需要验证的表单项名称`，这个方法验证成功则返回原数据，验证失败则抛出 ValidationError 异常即可，剩下的 forms 会接收异常并将这个表单项列为未验证成功。

```
class AjaxForm(forms.Form):
    user = forms.CharField()
    user_id = forms.IntegerField(
        widget=widgets.Select(choices=[(0, 'alix'), (1, '刘皓宸'), (2, '杨建'), ])
    )

    def clean_user(self):                                                        # 此处为 user 字段增加了数据库唯一性的验证
        from django.core.exceptions import NON_FIELD_ERRORS, ValidationError
        v = self.cleaned_data['user']
        if models.UserInfo.objects.filter(user=v).count():
            raise ValidationError('用户名已存在')                                 # 数据库内存在重名
        return v                                                                 # 认证通过


class ajax(View):

    def get(self, request):
        obj = AjaxForm()
        return render(request, 'ajax.html', {'obj': obj})

    def post(self, request):
        import json

        obj = AjaxForm(request.POST)

        if obj.is_valid():
            ret = {'status': 'success'}
            return HttpResponse(json.dumps(ret))
        else:
            ret = {'status': 'error'}
            ret['message'] = obj.errors
            return HttpResponse(json.dumps(ret,ensure_ascii=False))
```

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script src="/static/jquery-3.3.1.js"></script>
</head>
<body>
<form id="table" action="/ajax/" method="POST">
    {% csrf_token %}
    {{ obj.as_p }}
    <input id="commit" type="button" value="Ajax提交">
</form>
<script>
    $(function () {
        $('#commit').click(function () {
            $.ajax({
                url: '/ajax/',
                type: 'POST',
                data: $('#table').serialize(),
                dataType: 'JSON',
                success: function (args) {
                    if (args.status === 'success') {
                        console.log('ok');
                        window.location.href = 'http://www.baidu.com';     // 验证通过跳转
                    }
                    console.log(args.message);                             // 验证失败打印失败原因
                }
            })
        })
    })
</script>
</body>
</html>
```

- 表单整体验证，同时验证多个表单项，验证不通过，其错误值会返回在 forms 对象的 `__all__` 属性内。

```
class AjaxForm(forms.Form):
    user = forms.CharField()
    user_id = forms.IntegerField(
        widget=widgets.Select(choices=[(0, 'alix'), (1, '刘皓宸'), (2, '杨建'), ])
    )

    def clean(self):
        value_dict = self.cleaned_data
        v1 = value_dict.get('user')
        v2 = value_dict.get('user_id')
        if v1 == 'root' and v2 == 1:
            raise ValidationError('多项值验证错误')
        return self.cleaned_data
```

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script src="/static/jquery-3.3.1.js"></script>
</head>
<body>
<form id="table" action="/ajax/" method="POST">
    {% csrf_token %}
    {{ obj.as_p }}
    <input id="commit" type="button" value="Ajax提交">
</form>
<script>
    $(function () {
        $('#commit').click(function () {
            $.ajax({
                url: '/ajax/',
                type: 'POST',
                data: $('#table').serialize(),
                dataType: 'JSON',
                success: function (args) {
                    if (args.status === 'success') {
                        console.log('ok');
                        window.location.href = 'http://www.baidu.com';
                    }
                    console.log(args.message.__all__[0]);              // 得到整体验证的结果
                }
            })
        })
    })
</script>
</body>
</html>
```

## 规则定制

Field，为所有继承它的字类提供了基本的功能定制。

- Field 基类

| 属性                        | 作用                                                         |
| --------------------------- | ------------------------------------------------------------ |
| `required=True`             | 是否为必填项                                                 |
| `widget=None`               | 定制生成的HTML插件                                           |
| `label=None`                | 用于生成Label标签或显示内容                                  |
| `initial=None`              | 初始值，不常用，编辑时候一般从数据库初始化                   |
| `help_text=''`              | 帮助信息(在标签旁边显示)                                     |
| `error_messages=None`       | 错误信息，字典格式如： `{'required':'不能为空', 'invalid':'格式错误'` |
| `show_hidden_initial=False` | 是否在当前插件后面再加一个隐藏的且具有默认值的插件（可用于检验两次输入是否一致） |
| `validators=[]`             | 自定义验证规则                                               |
| `localize=False`            | 是否支持本地化，如果数据库的时间是UTC时间，本地时间为东八区，如果设置此项，则自动转换为东八区 |
| `disabled=False`            | 是否可以编辑                                                 |
| `label_suffix=None`         | Label内容后缀                                                |

------

- CharField(Field)

| 属性          | 含义             |
| ------------- | ---------------- |
| `max_length`  | 最大长度         |
| `min_length`  | 最小长度         |
| `strip`       | 是否自动移除空白 |
| `empty_value` | TODO             |

- EmailField(CharField)

```
满足 CharField 同时正则匹配为 Email
```

- URLField(CharField)

```
满足 CharField 同时正则匹配为 URL
```

- SlugField(CharField)

```
满足 CharField 同时正则匹配为 数字，字母，下划线，减号（连字符）
```

- UUIDField(CharField)

```
满足 CharField 同时正则匹配为 UUID
```

- RegexField(CharField)

```
regex        #自定义正则表达式
```

- GenericIPAddressField(CharField)

```
protocol='both'：支持的IP格式：both,ipv4,ipv6
unpack_ipv4=False ：解析ipv4地址，如果是::ffff:192.0.2.1时候，可解析为192.0.2.1， PS：protocol必须为both才能启用。
```

------

- BooleanField(Field)

```
布尔值
```

- NullBooleanField(BooleanField)

```
允许空的布尔值
```

------

- IntegerField(Field)

| `属性`      | `含义` |
| ----------- | ------ |
| `max_value` | 最大值 |
| `min_value` | 最小值 |

- FloatField(IntegerField)

```
浮点数
```

- DecimalField(IntegerField)

十进制浮点数

| 属性             | 含义       |
| ---------------- | ---------- |
| `max_value`      | 最大值     |
| `min_value`      | 最小值     |
| `max_digits`     | 总长度     |
| `decimal_places` | 小数位长度 |

------

- BaseTemporalField(Field)

```
input_formats    #时间格式化
```

- DateField(BaseTemporalField)

```
没有提供 input_formats 属性时候：默认格式为：

['%Y-%m-%d',      # '2006-10-25'
 '%m/%d/%Y',      # '10/25/2006'
 '%m/%d/%y']      # '10/25/06'
```

- TimeField(BaseTemporalField)

```
没有提供 input_formats 属性时候：默认格式为：

['%b %d %Y',      # 'Oct 25 2006'
 '%b %d, %Y',     # 'Oct 25, 2006'
 '%d %b %Y',      # '25 Oct 2006'
 '%d %b, %Y',     # '25 Oct, 2006'
 '%B %d %Y',      # 'October 25 2006'
 '%B %d, %Y',     # 'October 25, 2006'
 '%d %B %Y',      # '25 October 2006'
 '%d %B, %Y']     # '25 October, 2006'
```

- DateTimeField(BaseTemporalField)

```
没有提供 input_formats 属性时候：默认格式为：

['%Y-%m-%d %H:%M:%S',    # '2006-10-25 14:30:59'
 '%Y-%m-%d %H:%M',       # '2006-10-25 14:30'
 '%Y-%m-%d',             # '2006-10-25'
 '%m/%d/%Y %H:%M:%S',    # '10/25/2006 14:30:59'
 '%m/%d/%Y %H:%M',       # '10/25/2006 14:30'
 '%m/%d/%Y',             # '10/25/2006'
 '%m/%d/%y %H:%M:%S',    # '10/25/06 14:30:59'
 '%m/%d/%y %H:%M',       # '10/25/06 14:30'
 '%m/%d/%y']             # '10/25/06'
```

------

- DurationField(Field)

------

- FileField(Field)

```
allow_empty_file=False    #是否允许空文件

需要注意两点：
    - form表单中 enctype="multipart/form-data"
    - view 函数中 obj = MyForm(request.POST, request.FILES)
```

- ImageField(FileField)

```
注：需要PIL模块，pip3 install Pillow

需要注意两点：
    - form表单中 enctype="multipart/form-data"
    - view 函数中 obj = MyForm(request.POST, request.FILES)
```

------

- ChoiceField(Field)

| 参数           | 含义                                         |
| -------------- | -------------------------------------------- |
| `choices=()`   | 选项，如：choices = ((0,’上海’),(1,’北京’),) |
| `initial=None` | 初始化的值                                   |

```
city = fields.ChoiceField(
    choices=[(1,'北京'),(2,'上海'),(3,'广州')],
    initial=3,
)
```

- FilePathField(ChoiceField)

| 参数                  | 含义                                                 |
| --------------------- | ---------------------------------------------------- |
| `path=None`           | 要列出其内容的目录的绝对路径。该目录必须存在。       |
| `recursive=False`     | 递归下面的文件夹                                     |
| `allow_files=True`    | 允许文件                                             |
| `allow_folders=False` | 允许目录                                             |
| `match`               | 正则表达式; 只允许名称与此表达式匹配的文件作为选项。 |

在网页前端暴漏一个目录下的文件，是一个下拉的单选框

```
file = fields.FilePathField(
    path='app01',
)
```

- TypedChoiceField(ChoiceField)

可设置自行类型转换的 ChoiceField，后台接收到的数据会用 coerce 的函数，进行一次类型转换。

```
city = fields.TypedChoiceField(
    coerce=lambda x: int(x),
    choices=[(1,'北京'),(2,'上海'),(3,'广州')],
    initial=3,
)
```

- MultipleChoiceField(ChoiceField)

```
bobby = fields.MultipleChoiceField(
    choices=[(1,'篮球'),(2,'排球'),(3,'足球'),(4,'沙滩球')],
    initial=[1,2,3],
)
```

------

- ComboField(Field)

```
fields=[]        # 使用多个验证，如下：即验证最大长度20，又验证邮箱格式
```

多条件测试，例如：只能包含数字字母下划线，同时还满足邮箱的格式，这样的混合条件测试。

```
email = fields.ComboField(
    fields=[
        fields.CharField(max_length=20),
        fields.EmailField(),
    ]
)
```

------

- MultiValueField(Field)
- SplitDateTimeField(MultiValueField)
- TypedMultipleChoiceField(MultipleChoiceField)

可自行类型转换，后台接收到的数据会用 coerce 的函数，对每个数据进行一次类型转换。

```
city = fields.TypedMultipleChoiceField(
    coerce=lambda x: int(x),
)
```

## 插件定制

`widget` 参数可以对Form的插件进行定制，其影响最终在页面的表现形式。

### 常用插件

```
# 单 radio，值为字符串
user = fields.CharField(
    initial=2,
    widget=widgets.RadioSelect(choices=((1,'上海'),(2,'北京'),))
)
 
# 单 radio，值为字符串
user = fields.ChoiceField(
    choices=((1, '上海'), (2, '北京'),),
    initial=2,
    widget=widgets.RadioSelect
)
 
# 单 select，值为字符串
user = fields.CharField(
    initial=2,
    widget=widgets.Select(choices=((1,'上海'),(2,'北京'),))
)
 
# 单 select，值为字符串
user = fields.ChoiceField(
    choices=((1, '上海'), (2, '北京'),),
    initial=2,
    widget=widgets.Select
)
 
# 多选select，值为列表
user = fields.MultipleChoiceField(
    choices=((1,'上海'),(2,'北京'),),
    initial=[1,],
    widget=widgets.SelectMultiple
)
 
 
# 单 checkbox
user = fields.CharField(
    widget=widgets.CheckboxInput()
)
 
 
# 多选checkbox,值为列表
user = fields.MultipleChoiceField(
    initial=[2, ],
    choices=((1, '上海'), (2, '北京'),),
    widget=widgets.CheckboxSelectMultiple
)
```

### 为插件加属性

- 为生成的 HTML 增加自定义的属性

```
widget = widget.TextInput(attr={'class':'c1'})
```

### mark_safe

- 后端向前端返回字符串前端渲染为 HTML

```
from django.utils.safestring import mark_safe

text = '<input type="text">'

html = mark_safe(text)

return render(request,'index.html',{'html':html})
```

- 前端模板文件，无需管道加safe，可以直接引用

```
{{ html }}
```

## 插件数据源

大部分的时候，插件的数据来自数据库，例如一个人员的下拉选择框，一定是来自数据库的数据，但由于 `forms.Form` 的属性都是类属性，而类属性是静态的只执行一次，就会固定下来，造成下拉选择框的数据不能在数据库更新后刷新页面就得到结果，必须重启 Django（再次重加载类属性），而下面的例子就是用来解决这个弊端的。

虽然 Django 有 `from django.forms.models import ModelChoiceField` 这样的类，但是不推荐使用这个类，因为需要重写类的 str 方法。

- 模型

```
from django.db import models

class UserInfo(models.Model):
    user = models.CharField(max_length=20)
    pwd = models.CharField(max_length=20)
    age = models.SmallIntegerField()
    email = models.EmailField(max_length=20)
```

- 数据库数据

```
1	TEST1	123456	29	420123641@qq.com
2	TEST2	123456	29	894856156@qq.com
3	TEST3	123456	29	420123641@qq.ocm
4	TEST4	345678	29	565458416@qq.com
5	TEST5	876543	29	420123641@qq.com
```

- 视图函数，每当请求到达 `obj = LoveForm()` 都会得到数据库的新数据传递给模板，这实现不需要重启 Django 就能得到数据库新数据

```
from django.shortcuts import render, redirect, HttpResponse

from django import forms
from django.forms import widgets

from app01 import models


class LoveForm(forms.Form):
    pirce = forms.IntegerField()
    user_id = forms.IntegerField(
        # widget=widgets.Select(choices=models.UserInfo.objects.values_list("id", "user"))
        widget=widgets.Select()    # 注释 choices 不影响 结果，因为在 __init__ 中对 .widget.choices 属性进行了操作
    )

    def __init__(self,*args,**kwargs):
        super().__init__(*args,**kwargs)
        self.fields['user_id'].widget.choices = models.UserInfo.objects.values_list("id", "user")


from django.views import View


class love(View):

    def get(self, request):
        obj = LoveForm()
        return render(request, 'love.html', {'obj': obj})

    def post(self, request):
        pass
```

- 模板文件，展示一个下拉的选择框，选择框的数据来自数据库，如果数据库动态增加了数据，则需要刷新网页立即得到

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    <h1>转账系统</h1>
    <p>金额：{{ obj.pirce }}</p>
    <p>姓名：{{ obj.user_id }}</p>
</body>
</html>
```

# 数据序列化

## QuerySet对象序列化

- `serializers` 模块用于对模型对象集合进行序列化。

```
import json
from django.core import serializers
class get_data(View):

    def get(self, request):
        ret = {'status':True,'data':None}
        try:
            user_list = models.UserInfo.objects.all()               # 第一层序列化，为JSON字符串
            ret['data'] = serializers.serialize('json',user_list)
        except Exception as e:
            ret['status'] = False
        result = json.dumps(ret)                                    # 第二层序列化为 JSON 字符串
        return HttpResponse(result)
```

- 模板文件

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script src="/static/jquery-3.3.1.js"></script>
</head>
<body>
    <h1>用户列表</h1>

    <table id="table">

    </table>
    <script>
        $(function () {
            initData();
        });
        function initData() {
            $.ajax({
                url: '/get_data/',
                type: 'GET',
                dataType: 'json',                       // 对接收到的JSON第一层进行了反序列化
                success: function (args) {
                    if (args.status) {
                        var v = JSON.parse(args.data);  // 对JSON 内的字符串再反序列化，得到数据
                        console.log(v);
                    }
                }
            })
        }
    </script>
</body>
</html>
```

- 结果

```
(7) [{…}, {…}, {…}, {…}, {…}, {…}, {…}]
0:{model: "app01.userinfo", pk: 1, fields: {…}}
1:{model: "app01.userinfo", pk: 2, fields: {…}}
2:{model: "app01.userinfo", pk: 3, fields: {…}}
3:{model: "app01.userinfo", pk: 4, fields: {…}}
4:{model: "app01.userinfo", pk: 5, fields: {…}}
5:{model: "app01.userinfo", pk: 6, fields: {…}}
6:{model: "app01.userinfo", pk: 7, fields: {…}}
length:7
__proto__:Array(0)
```

## Values序列化

- 视图类

```
import json
class get_data(View):

    def get(self, request):
        ret = {'status':True,'data':None}
        try:
            user_list = models.UserInfo.objects.all().values('id','user')
            ret['data'] = list(user_list)        # 转换为基本类型的集合
        except Exception as e:
            ret['status'] = False
        result = json.dumps(ret)
        return HttpResponse(result)
```

- 模板文件

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script src="/static/jquery-3.3.1.js"></script>
</head>
<body>
    <h1>用户列表</h1>

    <table id="table">

    </table>
    <script>
        $(function () {
            initData();
        });
        function initData() {
            $.ajax({
                url: '/get_data/',
                type: 'GET',
                dataType: 'json',               // 只需要反序列化一次即可
                success: function (args) {
                    if (args.status) {
                        console.log(args.data);
                    }
                }
            })
        }
    </script>
</body>
</html>
```

- 结果

```
(7) [{…}, {…}, {…}, {…}, {…}, {…}, {…}]
0:{id: 1, user: "张铁蛋"}
1:{id: 2, user: "吴山炮"}
2:{id: 3, user: "杨大爷"}
3:{id: 4, user: "宋傻逼"}
4:{id: 5, user: "张愣子"}
5:{id: 6, user: "二狗子"}
6:{id: 7, user: "赵铁柱"}
length:7
__proto__:Array(0)
```

[
](https://yangjinheng.github.io/2018/02/11/Linux/Salt-API/)Django day1

安装Django

pip install django

检验是否安装 Django

第一种

>>> import django
>>> print(django.get_version())
2.0.7

第二种

[root@pa2 django]#python -m django --version
2.0.7

创建项目

如果这是你第一次使用 Django 的话，你需要一些初始化设置。也就是说，你需要用一些自动生成的代码配置一个 Django project (https://docs.djangoproject.com/zh-hans/2.0/glossary/#term-project) —— 即一个 Django 项目实例需要的设置项集合，包括数据库配置、Django 配置和应用程序配置。
打开命令行，*cd* 到一个你想放置你代码的目录，然后运行以下命令：

*$* django-admin startproject mysite

然后在这个目录下面会生成一个叫mysite的目录，该目录下面有一个manger.py的文件和 一个mysite的目录，如下图


root@pa2 mysite]#ll
total 8
-rwxr-xr-x 1 root root  538 Jul  3 16:03 manage.py
drwxr-xr-x 2 root root 4096 Jul  3 16:03 mysite

来运行下

python manage.py runserver   #正常情况下不加端口的话 启动的是8000端口

关于端口

*$* python manage.py runserver 8080   #启动本地的8080端口，也就是127.0.0.0

*如果你想要修改服务器监听的IP，在端口之前输入新的。比如，为了监听所有服务器的公开IP（这你运行 Vagrant 或想要向网络上的其它电脑展示你的成果时很有用），使用：

$* python manage.py runserver 0:8000   # *0* 是 *0.0.0.0* 的简写

网页看下？


## 创建密码
python manage.py createsuperuser





创建一个投票应用

$ python manage.py startapp polls

这将会创建一个 polls 目录





class Group(models.Model):
    Group = models.CharField(max_length=200)
    weight = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')



class User(models.Model):
    name = models.ForeignKey(Group, on_delete=models.CASCADE)
    weight = models.CharField(max_length=200)

class groups(models.Model):
    Group = models.CharField(max_length=200)
    weight = models.CharField(max_length=100)
    pub_date = models.DateTimeField('date published')



class User(models.Model):
    name = models.ForeignKey(groups, on_delete=models.CASCADE)
    weight = models.CharField(max_length=100)


    curl  https://sc.ftqq.com/SCU23824Teb720f53ae658e6df0ad720f1fe7aed35aba06e01a048.send?text=Ali_Server_start > /dev/null 2>&1



from django.db import models

# Create your models here.
from django.utils import timezone
from django.contrib.auth.models import User

class BlogArticles(models.Model):
        title = model.CharField(max_length=300)
        author = model.ForeignKey(User,related_name="blog_posts")
        body = models.TextField()
        publish = models.DateTimeField(default=timezone.now)

        class Meta:
                ordering = ("-publish",)
from django.db import models

def __str__(self):
        return self.title## ncdu 

查看系统当前文件占用空间情况，并排序

```
ncdu
```

![ncdu](https://s1.ax1x.com/2018/08/01/Pwtkz6.png)



## tmux

相对于Screen，它更加先进：支持屏幕切分，而且具备丰富的命令行参数，使其可以灵活、动态的进行各种布局和操作

进入tmux面板后，一定要先按ctrl+b，然后松开，再按其他的组合键才生效

```
ctrl+b ?            显示快捷键帮助

ctrl+b 空格键       采用下一个内置布局，这个很有意思，在多屏时，用这个就会将多有屏幕竖着展示

ctrl+b !            把当前窗口变为新窗口

ctrl+b  "           模向分隔窗口

ctrl+b %            纵向分隔窗口

ctrl+b q            显示分隔窗口的编号

ctrl+b o            跳到下一个分隔窗口。多屏之间的切换

ctrl+b 上下键      上一个及下一个分隔窗口

ctrl+b C-方向键    调整分隔窗口大小

ctrl+b &           确认后退出当前tmux

ctrl+b [           复制模式，即将当前屏幕移到上一个的位置上，其他所有窗口都向前移动一个。

ctrl+b c           创建新窗口

ctrl+b n           选择下一个窗口

ctrl+b l           最后使用的窗口

ctrl+b p           选择前一个窗口

ctrl+b w           以菜单方式显示及选择窗口

ctrl+b s           以菜单方式显示和选择会话。这个常用到，可以选择进入哪个tmux

ctrl+b t           显示时钟。然后按enter键后就会恢复到shell终端状态

ctrl+b d           脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话
```

## ssh端口

### ssh端口

```
vi /etc/ssh/sshd_config 

... 
Port 23333         #以前这个前面是有 # 号的，而且默认是 22 ，尽量不要用默认的端口，又是是ssh的端口22
```

### 重启 

```
service sshd restart
```

### 检测看看端口是否成功

```
 netstat -an |grep ssh
```

  

## 禁止root远程登录

### 修改sshd_config文件

```
sed -i 's/#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
sed -i 's/PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
```

### 重启

```
service sshd restart
```

## 关闭iptables和selinux

### 关闭selinux 

```
sed -i.bak 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config 

setenforce 0 

getenforce 
```



### 关闭iptables 

```
/etc/init.d/iptables stop

chkconfig iptables off #Centos关闭开机自启
```

## 调整文件描述符数量

```
echo '*               -       nofile          65535 ' >>/etc/security/limits.conf 
```



## 内核参数优化

```
cat >>/etc/sysctl.conf<<EOF

 net.ipv4.tcp_fin_timeout = 2 

net.ipv4.tcp_tw_reuse = 1 

net.ipv4.tcp_tw_recycle = 1 

net.ipv4.tcp_syncookies = 1 

net.ipv4.tcp_keepalive_time = 600 

net.ipv4.ip_local_port_range = 4000    65000 

net.ipv4.tcp_max_syn_backlog = 16384 

net.ipv4.tcp_max_tw_buckets = 36000 

net.ipv4.route.gc_timeout = 100 

net.ipv4.tcp_syn_retries = 1 

net.ipv4.tcp_synack_retries = 1 

net.core.somaxconn = 16384 

net.core.netdev_max_backlog = 16384 

net.ipv4.tcp_max_orphans = 16384

EOF
```



### 生效

```
sysctl -p
```



## 命令行高亮显示

```
cat >>/etc/profile<<EOF
PS1='\[\e[32;1m\][\u@\h \W]\$\[\e[0m\]' 
EOF
source /etc/profile  
```



## 关于 history历史记录

```
vim .bashrc
···
`HISTCONTROL=ignorespace` # 任何以空格开头的命令不会被记录，如果你需要以明文形式将密码传递给一个命令，这就非常有用

HISTTIMEFORMAT="%F %T  "  #历史记录加上时间戳
···

```

### 生效

```
source .bashrc
```

## ssh 保持长连接

ssh服务器的配置文件/etc/ssh/sshd_config里面

ClientAliveInterval指定了服务器端向客户端请求消息的时间间隔, 默认是0，不发送。而ClientAliveInterval 60表示每分钟发送一次，然后客户端响应，这样就保持长连接了

永久解决

    #服务端
    vim /etc/ssh/sshd_config
    
    ClientAliveInterval 60
    
    service sshd restart
    

临时解决

    ssh -o ServerAliveInterval=60 uersname@ip -p port

##  ll

#一个最简单的输出
>>> print ('hello word')

## 打印计算器效果
>>> print (100 +200)
300

### 打印的优雅一点呢?

#输入
>>> name = input()
123
>>> print name
123
>>> name
123

##优雅一点
>>> name = input("please enter your name:")     #这里的双引号,单引号都可以
please enter your name:123
>>> print name
123
>>> name 
123
>>> name = input('please enter your name:')
please enter your name:1234
>>> print name
1234
>>> name
1234

#字符串转义与换行 
##要想输出 I'm "ok" ! ,要在I'm 之间的" ' " 前面加上"\"转义,ok的双引号也需要转义

>>> print('I\'m \"ok\" !')
I'm "ok" !

#转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\\表示的字符就是\
-------制表符可以理解为一个超大的空格,相当于一个Tab,四个标准空格
##换行示范
>>> print ('I\'m learning \nPython')
I'm learning 
Python
##制表符示范
>>> print ('\t\t\t\t\t\t00000\t\t\t\t\t\t\t000')
						00000							000

##如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r''表示''内部的字符串默认不转义
>>> print('\t\t\t000\n\t\t000\t')
			000
		000	
>>> print(r'\t\t\t000\n\t\t000\t')
\t\t\t000\n\t\t000\t

#如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用'''...'''的格式表示多行内容(这里仔细看!!!)
>>> print('''line111
... line222
... line333''')
line111
line222
line333

#布尔值
----布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来

##示范("<" ">" "=")等于号特殊,注意
>>> 3<2
False
>>> 3>2
True
>>> 3==2
False
###布尔值的与或非,还可以可以用and、or和not运算
#### 或 or 的示范
>>> print (3>2 or 2>3)
True
>>> print (3>2 or 4>3)
True
>>> print (1>2 or 2>3)
False

#### 与 and 的示范
>>> print (1<2 and 2<3)
True
>>> print (1<2 and 4<3)
False
>>> print (1==2 and 4<3)
False

#### not 非的示范 
>>> print (not 1==2 and 2==2)
True
>>> print (not 1==1)
False

================================================函数input()

函数input()让程序暂停运行,等待用户输入一些文本.获取用户输入后,Python将其存储在一个变量中,以方便使用

示范1:


[root@pa1 lijinghua]#python input.py 
tell me your name:lijinghua
your name lijinghua
[root@pa1 lijinghua]#cat input.py
#!/usr/local/python
name = input("tell me your name:")
print("your name "+name)

注意:
本人在Python2.7下,会出现一些问题


=================================================使用int()来获取数值输入

使用函数input()时,Python将用户输入解读为字符串,在做一些数值比较时,将会出错,不能将字符串和数值做比较
需要用int()函数先转化为数值

示范:

[root@pa1 lijinghua]#python input2.py
print enter your age:23
She/He is adult
[root@pa1 lijinghua]#cat input2.py
#!/usr/bin/python
# -*- coding: utf-8 -*-
age = input('print enter your age:')
#print (name)
if int(age) >17:
	print (r'She/He is adult')
elif int(age) >= 6:
	print (r'She/He is teenager')
else:
	print (r'She/He is kid' )

	
	








































































======================================排序

===================================================按字母顺序排序 sort() 
.sort() 按字母排序,再也无法恢复到原来的排列顺序
示范
>>> name = ['congcong', 'yuxi', 'jinghua', 'lili']
>>> name.sort()
>>> print(name)
['congcong', 'jinghua', 'lili', 'yuxi']

===================================================相反新顺序排序 sort(reverse=True)
sort(reverse=True)    倒序排列    单词 reverse 意为相反
>>> name = ['congcong', 'yuxi', 'jinghua', 'lili']
>>> name.sort(reverse=True)
>>> print(name)
['yuxi', 'lili', 'jinghua', 'congcong']
>>> 

===================================================临时顺序排列 sorted 

sorted()临时顺序排列,之后能恢复到原来的排列顺序, 倒序排列(reverse=True)同样适用

>>> names=['bigben','bmw','aodi']
>>> print(sorted(cars))
['aodi', 'bigben', 'bmw']              #顺序排列了
>>> print(cars)
['bigben', 'bmw', 'aodi']             #使用完之后依旧可以再回复原来的顺序(临时顺序排列)
>>> 


====================================================倒序打印 reserve() 
reserve() 要想拿回原来的数据,再次使用即可

示范
>>> names=['bigben','bmw','aodi']
>>> names.reverse()
>>> print(names)
['aodi', 'bmw', 'bigben']




========================================================== 生成数字列表 range()
## 生成数字列表 range()

[root@pa1 lijinghua]#python number.py
1
2
3
4
[root@pa1 lijinghua]#cat number.py
#!/usr/bin/python
# -*- coding: utf-8 -*-
for number in range(1,5):
	print(number)

# 解释
上述代码好像只打印数字1-5,但实际不会打印5
在这个示例中,range()只是打印数字1-4,这是你在编程语言中经常看到的差异性为的结果,函数range()让Python从你指定的第一个值开始数,并在到达你指定的第二个值后后停止,因此输出不包含第二个值(这里为5)
所以要打印数字1-5,需要使用range(1,6)

# 来个栗子
[root@pa1 lijinghua]#python number.py
1
2
3
4
5
[root@pa1 lijinghua]#cat number.py
#!/usr/bin/python
# -*- coding: utf-8 -*-
for number in range(1,6):
	print(number)

# 注意 
所以在使用range()时,如果输出不符合预期,请尝试将指定的值 +1 或者 -1



====================================================使用range()创建数字列表

## 使用range()创建数字列表

# 示范
[root@pa1 lijinghua]#python range.py
[1, 2, 3, 4, 5]
[root@pa1 lijinghua]#cat range.py
#!/usr/bin/python
# -*- coding: utf-8 -*-
number=list(range(1,6))
print (number)

=====================================================打印出1~10内的偶数
格式 (起始数+终值+不断相加的数字)
在这个示例中,函数range()从2开始,然后不断的加2,直到达到或超过终值(11)

# 示范

[root@pa1 lijinghua]#python even_number.py
[2, 4, 6, 8, 10]
[root@pa1 lijinghua]#cat even_number.py
#!/usr/bin/python
# -*- coding: utf-8 -*-
even_number=list(range(2,11,2))
print(even_number)

=====================================================打印出1~10整数的平方

平方表示 (**2)

[root@pa1 lijinghua]#python squares.py
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
[root@pa1 lijinghua]#cat squares.py
#!/usr/bin/python
# -*- coding: utf-8 -*-
squares=[]
for value in range(1,11):                       #for循环从range()函数取值
	square=value**2                                 #平方下
	squares.append(square)                   #追加到列表中
print(squares)                                          #打印最终的列表



# 代码简洁点?

[root@pa1 lijinghua]#python  squares_1.py
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
[root@pa1 lijinghua]#cat squares_1.py
#!/usr/bin/python
# -*- coding: utf-8 -*-
squares=[]
for value in range(1,11):                       #for循环从range()函数取值
	squares.append(value**2)                   #直接追加到最终要打印的列表中
print(squares) 

# 再简洁点?

列表解析出场了
[root@pa1 lijinghua]#python squares_2.py
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
[root@pa1 lijinghua]#cat squares_2.py
#!/usr/bin/python
# -*- coding: utf-8 -*-
squares=[value**2 for value in range(1,11)]   #注意这里的for循环没有冒号
print(squares)


# 分析 
前面介绍的生成的列表 squares的方式包含三四行代码,二列表解析让你只需编写1行代码就能实现
列表解析将for循环和创建新元素的代码合并成一行,并自动追加元素
请必须要注意下,这里的for循环没有冒号






==================================================对数字执行简单的统计计算 min() max() sum()

示范
>>> digits=[1,2,3,4,5,6,7,8,9]
>>> sum(digits)
45
>>> min(digits)
1
>>> max(digits)
9

注意: 可能以上只适用于百万个数字的列表




=============================================================================切片
与函数range()一样,Python在到达你指定的第二个索引前面的元素后停止,要输出列表中的前三个元素,需要制定索引0~3

# 输出列表中的前三个元素([0:3])

示范
>>> player=['lili','congcong','ytuxi','jinghua']
>>> print(player[0:3])
['lili', 'congcong', 'ytuxi']

# 提取列表第2-4个元素 ([2:4])

示范
>>> player=['lili','congcong','ytuxi','jinghua']
>>> print(player[1:4])                          #请仔细领略齐总的微妙
['congcong', 'ytuxi', 'jinghua']


# 没有指定起始索引,Python将从列表开头开始提取([:4])

示范
>>> player=['lili','congcong','ytuxi','jinghua']
>>> print(player[:4])
['lili', 'congcong', 'ytuxi', 'jinghua']


# 让切片终止于列表末尾,起始索引为2([2:])

示范
>>> player=['lili','congcong','ytuxi','jinghua']
>>> print(player[2:])
['ytuxi', 'jinghua']

# 打印最后三个元素([-3:])

示范

>>> player=['lili','congcong','ytuxi','jinghua']
>>> print(player[-3:])
['congcong', 'ytuxi', 'jinghua']


==============================================遍历切片

遍历切片
示范

[root@pa1 lijinghua]#python qiepian.py 
they are my frinde:
Lili
Congcong
Yuxi
[root@pa1 lijinghua]#cat qiepian.py
#!/usr/bin/python
# -*- coding: utf-8 -*-
names=['lili','congcong','yuxi','jinghua']
print("they are my frinde:")
for name in names[:3]:         #取出前三个元素
	print(name.title())


============================================复制切片[:]

# 复制切片[:]

示范

>>> names=['lili','congcong','yuxi','jinghua']
>>> name=names[:]
>>> print(name)
['lili', 'congcong', 'yuxi', 'jinghua']
>>> print(names)
['lili', 'congcong', 'yuxi', 'jinghua']
=============================================================for循环遍历整个列表
##   for循环遍历整个列表
# 示范

[root@pa1 lijinghua]#cat for.py 
#!/usr/bin/python
# -*- coding: utf-8 -*-
cars = ['bigben','audi','bmw']
for car in cars:
	print(car)
[root@pa1 lijinghua]#python for.py
bigben
audi
bmw

============================================================ for循环中执行更多
## for循环中执行更多
# 示范

[root@pa1 lijinghua]#python for_2.py 
Audi,that was a good car.
Bmw,that was a good car.
Bigben,that was a good car.
I think too.Bigben
[root@pa1 lijinghua]#cat for_2.py
#!/usr/bin/python
# -*- coding: utf-8 -*-
cars = ['audi','bmw','bigben']
for car in cars:
	print (car.title()+",that was a good car.")
print ( "I think too."+ car.title() )

# 要点
在for循环后面,没有缩进的代码都只执行一次,而不会重复执行===================================================字典开始了
## 一个简单的字典 

示范 (注意看格式)

>>> aliens={'color':'green','points':5}              #这里的数字 可以不用单引号
>>> print(aliens['color'])
green
>>> print(aliens['points'])
5


=================================================使用字典(格式解释)
在Python中,字典是一系列键值对
在Python中,字典用放在花括号{}中的一系列键值对表示
键值对是两个相关联的值,指定键时,Python将返回与之相关联的值,键与值之间用冒号分隔,而键值对之间用都好分隔.
在字典中,你想存储多少个键值都可以

aliens={'color':'green'}
在这个字典中,'color'是一个键,与之相关联的值为'green'


=================================================访问字典中的值

示范

>>> aliens={'color':'blue'}
>>> new_color=aliens['color']
>>> print("You favorite color " + new_color+" ~")
You favorite color blue ~

================================================添加键值对
字典是一种动态结构,可随时在其中添加键值对,可依次指定字典名,用方括号括起来的键和相关联的键

示范
请仔细领悟

>>> aliens={'color':'green','points':5}
>>> print(aliens)
{'color': 'green', 'points': 5}
>>> aliens['X_position']=0
>>> aliens['Y_position']=25
>>> print(aliens)
{'color': 'green', 'points': 5, 'X_position': 0, 'Y_position': 25}

注意:
键值对的排列顺序与添加顺序不同,Python不关心键值对的添加顺序,而只关心键与值之间的关联关系

==================================================修改字典中的值

示范

>>> aliens
{'color': 'green', 'points': 5, 'X_position': 0, 'Y_position': 25}
>>> aliens['color']='yellow'
>>> aliens
{'color': 'yellow', 'points': 5, 'X_position': 0, 'Y_position': 25}


=================================================删除键值对 del 

示范

>>> print(aliens)
{'color': 'yellow', 'points': 5, 'X_position': 0, 'Y_position': 25}
>>> del aliens['points']                         # del 删除
>>> print(aliens)
{'color': 'yellow', 'X_position': 0, 'Y_position': 25}

注意:
删除的键值对将会永远消失
==========================================================由类似对象组成的字典

示范

[root@pa1 lijinghua]#python leisi.py
yuxi favorite language is Python
[root@pa1 lijinghua]#cat leisi.py 
#! /usr/local/python
language={
	'lili':'python',
	'meihua':'php',
	'yuxi':'python',
	}
print ("yuxi favorite language is "+ language['yuxi'].title())


============================================================遍历字典

一个Python字典可能只包含几个键值对,也可能包含数百万个键值对,鉴于字典可能包含大量的数据,Python支持对字典遍历,字典可用于各种方式存储信息
因此,有多种遍历字典的方式: 可遍历字典的所有键值对:键或值

示范1


[root@pa1 lijinghua]#python bianli_zidian.py

key: username

value: lixiaoyan

key: last

value: li

key: first

value: xiaoyan
[root@pa1 lijinghua]#cat bianli_zidian.py
#! /usr/local/python
user={
	'username':'lixiaoyan',
	'first':'xiaoyan',
	'last':'li',
	}
for key,value  in user.items():
	print("\nkey: "+key)
	print("\nvalue: "+value)

	单词 items=项目


示范2

[root@pa1 lijinghua]#python bianli_zidian2.py
Congcong like language is Ruby.
Yuxi like language is Php.
Lili like language is Python.
[root@pa1 lijinghua]#cat  bianli_zidian2.py
#! /usr/local/python
favorite={
	'lili':'python',	
	'congcong':'ruby',
	'yuxi':'php',
	}
for name,language in favorite.items():
	print(name.title() +" like language is "+ language.title()+".")

	注意:
要编写用于遍历字典的for循环,可查明两个变量用于存储键值对的键和值
对于这个变量,可使用任何名称
几遍遍历字典时,键值对的返回顺序也与存储顺序不同,Python不关心键值对的存储顺序,而只跟踪键和值之间的关键关系

====================================================遍历字典中的所有键(不包括值) keys()

示范


[root@pa1 lijinghua]#python no_value.py
Congcong
Hi,Congcong I see you favorite language is Php !
Yuxi
Lili
Hi,Lili I see you favorite language is Python !
Jinghua
[root@pa1 lijinghua]#cat no_value.py
#! /usr/local/python
# -*- coding: utf-8 -*-
favorite={
	'lili':'python',
	'yuxi':'ruby',
	'congcong':'php',
	'jinghua':'php',
	}
friends=['lili','congcong']
for friend in favorite.keys():
	print(friend.title())
	if friend in friends:
		print("Hi," + friend.title()  + " I see you favorite language is " + favorite[friend].title() + " !")  #重点


=======================================================================按字母顺序遍历字典中的所有值 sorted()

字典总是明确地记录键和值之间的关联关系,但获取字典的元素时,获取顺序是不可预测的,要以特定的顺序返回元素,一种方法是在for循环中对返回的值进行排序.为此
可使用函数 sorted() 来获得按特定顺序排列的键列表的副本


[root@pa1 lijinghua]#python zidian_sorted.py
Congcong,I think you are good man
Jinghua,I think you are good man
Lili,I think you are good man
[root@pa1 lijinghua]#cat  zidian_sorted.py
#! /usr/local/python
names={
	'lili':'php',
	'jinghua':'python',
	'congcong':'python',
	}
for name in sorted(names.keys()):
	print(name.title() + ",I think you are good man")























#######################################################################################################################list和tuple
=========================================================================================================list
#解释 list 使用list和tuple
Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素
比如，列出班里所有同学的名字，就可以用一个list表示(两种写法)

>>> classmates=['lijinghua','duanyuxi','niechongcong']
>>> classmates
['lijinghua', 'duanyuxi', 'niechongcong']

>>> classmates='lijinghua','duanyuxi','niechongcong'
>>> classmates
('lijinghua', 'duanyuxi', 'niechongcong')

=====================================================================list个数统计
#变量classmates就是一个list。用len()函数可以获得list元素的个数：
>>> len(classmates)
3

==========================================================================================list按照索引取出元素
#用索引来访问list中每一个位置的元素，记得索引是从0开始的：
>>> classmates [0]
'lijinghua'
>>> classmates [1]
'duanyuxi'
>>> classmates [2]
'niechongcong'

##如果超出了索引,就会报错
>>> classmates [3]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: list index out of range
==============================================================取出倒数第一个元素(第一个索引是0)
#如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素：
>>> classmates [-1]
'niechongcong'

==========================================================取出倒数第二个 第三个元素(原理和上面的相同)
#以此类推，可以获取倒数第2个、倒数第3个
>>> classmates
['lijinghua', 'duanyuxi', 'niechongcong', 'qinzhixia']
>>> classmates [-2]
'niechongcong'
>>> classmates [-3]
'duanyuxi'

===========================================================================================追加元素
#list是一个可变的有序表，所以，可以往list中追加元素到末尾
>>> classmates
['lijinghua', 'duanyuxi', 'niechongcong', 'qinzhixia']
>>> classmates [-1]
'qinzhixia'
=========================================================指定位置追加
#可以把元素插入到指定的位置，比如索引号为1的位置(注意,是以索引为标准差插入的)

>>> classmates.insert(1,'duanjingke')
>>> classmates
['lijinghua', 'duanjingke', 'duanyuxi', 'niechongcong', 'qinzhixia']

#list是一个可变的有序表，所以，可以往list中追加元素到末尾：

========================================================末尾追加
>>> name = ['1','2','3']
>>> name.append('4')
>>> print(name)
['1', '2', '3', '4']

============================================================================================删除元素
三种方法 pop() 和 del 语句和remove()
=---========================================================pop()删除倒数第一个元素
#要删除list末尾的元素
>>> classmates
['lijinghua', 'duanyuxi', 'niechongcong', 'qinzhixia']
>>> classmates.pop()
'qinzhixia'
>>> classmates
['lijinghua', 'duanyuxi', 'niechongcong']
#用pop()弹出元素,每次使用pop()时,被弹出的元素就不在列表中了,但是在新的列表中,用pop()函数依旧会显示出来
示范
>>> name = ['1', '2', '3', '4']
>>> name_pop=name.pop(1)
>>> print(name)
['1', '3', '4']
>>> print(name_pop)
2
===========================================================pop()指定索引删除
#删除指定位置的元素，用pop(i)方法，其中i是索引位置
>>> classmates
['lijinghua', 'duanyuxi', 'niechongcong']
>>> classmates.pop(2)
'niechongcong'
>>> classmates
['lijinghua', 'duanyuxi']

============================================================del指定索引删除
示范
>>> name = ['1', '2', '3', '4']
>>> del name[2]
>>> print(name)
['1', '2', '4']

=============================================================remove()指定元素删除
示范
>>> name = ['1', '2', '3', '4']
>>> name.remove('3')
>>> print(name)
['1', '2', '4']


=================================================================关于pop()和del删除的不同于理解
如果想删除这个元素且以后不再以任何方式使用它,就是用del语句
如果想在删除之后继续使用,就是用函数pop()

==============================================================================================元素的直接赋值替换
#要把某个元素替换成别的元素，可以直接赋值给对应的索引位置
#示范,替换索引为1的"duanyuxi"
>>> classmates
['lijinghua', 'duanyuxi']
>>> classmates [1] = 'liadou'
>>> classmates
['lijinghua', 'liadou']

===============================================================================================list元素类型多样化
#示范
>>> l = ['limeihua',123,"lijinghua" ]
>>> l
['limeihua', 123, 'lijinghua']

===============================================================list元素也可以是另外一个list
#示范
>>> l=['lijinghua','123',['niechongcong','duanyuxi']]
>>> l
['lijinghua', '123', ['niechongcong', 'duanyuxi']]
>>> len(l)
3

================================================================拆开list中的另外一个list
#示范
>>> p = ['niechongcong','duanyuxi']
>>> l
['lijinghua', '123', ['niechongcong', 'duanyuxi']]
>>> l=['lijinghua', '123', p]
>>> l
['lijinghua', '123', ['niechongcong', 'duanyuxi']]

=================================================================二维数组及多维数组
#示范
>>> l = ['lijinghua', '123', ['niechongcong', 'duanyuxi']]
>>> p = ['niechongcong', 'duanyuxi']
>>> l = ['lijinghua', '123', p[0]]
>>> l
['lijinghua', '123', 'niechongcong']

===============================================================================================空的list
#如果一个list中一个元素也没有，就是一个空的list，它的长度为0
>>> l=[]
>>> len(l)
0

===============================================================================================================tuple
#tuple一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改
元组看起来犹如列表,使用圆括号而不是方括号来标识.
定义元组后就可以使用索引来访问其元素,就像访问列表元素一样
#示范
>>> classmates=('lijinghua','duanyuxi','niechongcong')
>>> classmates
('lijinghua', 'duanyuxi', 'niechongcong')


#现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，
classmates[-1]，但不能赋值成另外的元素。
#示范(会报错)!!!!!!!!!
>>> classmates.insert(1,'liadou')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'insert'


#不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。

#tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来，比如

===========================================================================空的tuple
#定义一个空的tuple，可以写成()
>>> tuple = ()
>>> tuple
()

===========================================================================定义一个只有1个元素的tuple
#错误的示范
>>> t = (1)
>>> t
1
#定义的不是tuple，是1这个数！这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是1
#所以，只有1个元素的tuple定义时必须加一个逗号,，来消除歧义
##正确的示范
>>> t=(1,)
>>> t
(1,)

===========================================================================来一个"会变的"的tuple
#示范
>>> t = ('a', 'b', ['A', 'B'])
>>> t[2][0] = 'X'
>>> t[2][1] = 'Y'
>>> t
('a', 'b', ['X', 'Y'])

#一步一步解释(慢动作)
>>> t=('a','b',['A','B'])
>>> t[2][0]='X'
>>> t
('a', 'b', ['X', 'B'])
>>> t[2][1]='Y'
>>> t
('a', 'b', ['X', 'Y'])


#廖大神解释
表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向'a'，就不能改成指向'b'，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！

理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变

============================================================================做一个题

>>> L = [
...     ['Apple', 'Google', 'Microsoft'],
...     ['Java', 'Python', 'Ruby', 'PHP'],
...     ['Adam', 'Bart', 'Lisa']
... ]

###分别打印出Apple,Python,Lisa
>>> L
[['Apple', 'Google', 'Microsoft'], ['Java', 'Python', 'Ruby', 'PHP'], ['Adam', 'Bart', 'Lisa']]
>>> L[0][0]
'Apple'
>>> L[1][1]
'Python'
>>> L[2][2]
'Lisa'

# 遍历元组中的所有值
像列表一样,也可以使用for循环来遍历元组中的所有值
单词 dimensions = 面积

示范

[root@pa1 lijinghua]#python tuple_for.py
200
50
[root@pa1 lijinghua]#cat tuple_for.py
#!/usr/bin/python
dimensions=(200,50)
for dimension in dimensions:
	print(dimension) 














===============================================嵌套上场了

有时候,需要将一系列字典存储在列表中,或将列表作为值存储在字典中,这成为嵌套
可以在列表中嵌套字典,在字典中嵌套列表甚至在字典中嵌套字典


======================================字典列表
示范1

[root@pa1 lijinghua]#python qiantai.py
{'color': 'green', 'speed': 'slow'}
{'color': 'green', 'speed': 'slow'}
{'color': 'green', 'speed': 'slow'}
{'color': 'green', 'speed': 'slow'}
{'color': 'green', 'speed': 'slow'}
...
Total number of aliens :30
[root@pa1 lijinghua]#cat qiantai.py
#!/usr/local/python
aliens=[]
for aliens_number in range(30):
	new_alien={'color':'green','speed':'slow'}
	aliens.append(new_alien)
for alien in aliens[:5]:
	print(alien)
print("...")
print("Total number of aliens :"+ str(len(aliens)))


示范2(可以更改字典)

[root@pa1 lijinghua]#python qiantao.py
{'color': 'yellow', 'points': '10', 'speed': 'fast'}
{'color': 'yellow', 'points': '10', 'speed': 'fast'}
{'color': 'yellow', 'points': '10', 'speed': 'fast'}
{'color': 'yellow', 'points': '10', 'speed': 'fast'}
{'color': 'blue', 'points': '5', 'speed': 'slow'}
....
[root@pa1 lijinghua]#cat  qiantao.py
#!/usr/local/python
# -*- coding: utf-8 -*-
aliens=[]
for new_aliens in range(30):                  #循环30次
        new_aliens={
                'color':'blue',
                'points':'5',
                'speed':'slow',
                }
        aliens.append(new_aliens)
#	print(aliens)
for alien in aliens[:4]:                      #拿出前四个
        if alien['color'] =='blue':
		alien['color']='yellow'       #注意这里格式,就是这么直接改的
                alien['points']='10'
                alien['speed']='fast'
for alien in aliens[:5]:
	print(alien)                          #这里咋们试验下,打印5行,因为前面只改了四行,所有第五行会发现没有变动
print("....")


==================================================================在字典中存储列表
有时候,需要将列表存在字典中,而不是将字典存在列表中

单词 topping = 糕点上的装饰配料
crust = 外壳
thick = 厚的 粗的
mushrooms = 蘑菇

示范 

[root@pa1 lijinghua]#python zidian_list.py
You ordered a thick-crustwith the following:
	mushrooms
	extra cheese
[root@pa1 lijinghua]#cat zidian_list.py
#!/usr/local/python
pizza={
	'crust':'thick',
	'toppings':['mushrooms','extra cheese'],            #重点语法格式
	}
print("You ordered a " + pizza['crust']+"-crust"+"with the following:" )
for topping in pizza['toppings']:
	print("\t"+topping)

	
注意:
列表和字典的嵌套层级不应太多,如果嵌套层级比前面的示例多,意味着很可能有更简单的方案

==================================================================在字典中存储字典


示范 


[root@pa1 lijinghua]#python  zidian_zidian.py

Username: lijinghua
	 full_name: Jinghuali
	 location: Yuncheng

Username: niecongcong
	 full_name: Congcongnie
	 location: Huoxing
[root@pa1 lijinghua]#cat zidian_zidian.py
#!/usr/local/python
# -*- coding: utf-8 -*-
user={
	'lijinghua':{
		'first':'jinghua',
		'last':'li',
		'location':'yuncheng',
		},                            #注意这里的逗号
	'niecongcong':{
		'first':'congcong',
		'last':'nie',
		'location':'huoxing',
		}
	}


for nameuser,name_info in user.items():
	print("\nUsername: "+nameuser)
	full_name=name_info['first']+name_info['last']
	location=name_info['location']
	print("\t full_name: "+full_name.title())
	print("\t location: "+location.title())


==========================================================while上场了
while循环用于针对集合中的每个元素的一个代码块,而while循环不断地运行,直到指定的条件不满足为止.


==========================================================敲下你的第一个while循环

[root@pa1 lijinghua]#python while.py
1
2
3
4
5
[root@pa1 lijinghua]#cat while.py
#!/usr/local/python
current_number=1              #定义初始值
while current_number <=5:     #定义一个最高值
	print(current_number)
	current_number +=1    #每次加1

	
===========================================================让用户选择何时退出

示范:

[root@pa1 lijinghua]#python while_2.py

Tell me something, and i will repeat it back to you:
Enter 'quit' to end the program:quit
quit
[root@pa1 lijinghua]#cat while_2.py
#!/usr/local/python
prompt="\nTell me something, and i will repeat it back to you:"
prompt += "\nEnter 'quit' to end the program:"
message=""
while message !='quit':
	message = input(prompt)
	print(message)

改善下:
加个判断

以上代码虽然能解释,但是不太完美.在用户不是输入 'quit'的情况下,也会打印 输入的东西,

[root@pa1 lijinghua]#python while_2.py

Tell me something, and i will repeat it back to you:
Enter 'quit' to end the program:www

Tell me something, and i will repeat it back to you:
Enter 'quit' to end the program:quit
quit
[root@pa1 lijinghua]#cat while_2.py
#!/usr/local/python
prompt="\nTell me something, and i will repeat it back to you:"
prompt += "\nEnter 'quit' to end the program:"
message=""
while message !='quit':
	message = input(prompt)
	if message == 'quit':
		print(message)




=============================================================使用标志
在要求很多条件都满足才能运行的程序中,可定义一个变量,用于判断整个程序是否处于活动状态.这个变量被称为标志,充当了整个程序的交通信号灯.
你可让程序在标志为True时继续运行,并在任何事件导致标志的值为False时让程序停止运行.

示范 
[root@pa1 lijinghua]#python while_3.py

Tell me something, and i will repeat it back to you:
Enter 'quit' to end the program:www
www

Tell me something, and i will repeat it back to you:
Enter 'quit' to end the program:quit
[root@pa1 lijinghua]#cat while_3.py
#!/usr/local/python
prompt="\nTell me something, and i will repeat it back to you:"
prompt += "\nEnter 'quit' to end the program:"
active=True
while active:
	message=input(prompt)
	if message == 'quit':            #当输入的字符为'quit'时
		active = False           #'False'停止表示,不进行后面的打印
	else:
		print(message)           #如果不是'False'时,打印当前行

		
=======================================================使用break退出循环
要立刻退出while循环,不在运行循环中余下的代码,也不管条件测试的结果如何,可使用break语句
break语句用于控制程序流程,可使用它来控制哪些代码行将执行,哪些代码行不执行,从而让程序按你的要求执行你要执行的代码

示范
[root@pa1 lijinghua]#python while_4.py

Tell me something, and i will repeat it back to you:
Enter 'quit' to end the program:yuncheng
I love to go to Yuncheng

Tell me something, and i will repeat it back to you:
Enter 'quit' to end the program:quit
[root@pa1 lijinghua]#cat while_4.py
#!/usr/local/python
prompt="\nTell me something, and i will repeat it back to you:"
prompt += "\nEnter 'quit' to end the program:"
while True:                                #注意这里的True 'T'是大写
	city=input(prompt)
	if city == 'quit':
		break                      #如果条件符合泽打断
	else:
		print("I love to go to "+city.title())

==========================================================在循环中使用continue

要返回到循环开头,并根据条件测试结果决定是否继续执行循环,可使用continue语句,它不像break语句那样不再执行余下的代码并退出整个循环

示范 
[root@pa1 lijinghua]#python continue.py
1
3
5
7
9
[root@pa1 lijinghua]#cat   continue.py
#! /usr/local/python
number=0
while number < 10:
	number +=1
	if number % 2 ==0:      #求模运算若结果为0,则重新循环
		continue
	print(number)

===========================================================避免无限循环

示范 
[root@pa1 lijinghua]#python continue.py
0
0
0
0
0
0
0
~~~~~~~~~~~无限

[root@pa1 lijinghua]#cat  continue.py
#! /usr/local/python
number=0
while number < 10:
#	number +=1       #变量如果不会变化,可能陷入死循环
	print(number)


============================================使用为了循环来处理列表和字典
for循环是一种遍历列表的有效方式,但在for循环中不应修改列表,否则将导致Python难以跟踪其中的元素.要在遍历列表的同时对其进行修改,可使用while循环.
通过while循环同列表和字典结合起来使用,可收集,存储并组织大量输入,供以后查看和显示

============================================在列表之间移动元素

单词 unconfirmed = 未验证


示范

[root@pa1 lijinghua]#python list_move.py
Addind user:yuxi
Addind user:congcong
Addind user:jinghua

list of number :
yuxi
congcong
jinghua
[root@pa1 lijinghua]#cat list_move.py
#!/usr/local/python
unconfirmed_users=['jinghua','congcong','yuxi']
confirmed_users=[]
while unconfirmed_users:
	current_user=unconfirmed_users.pop()
	print("Addind user:"+current_user)
	confirmed_users.append(current_user)
print("\nlist of number :")
for authorized_user in confirmed_users:
	print(authorized_user)



===================================================while循环删除包含特定值的所有列表元素

之前在列表中删除一个特定的值,remove()可以解决,但是假若这个值出现了好多次,可以使用while循环来删除这个值

示范
[root@pa1 lijinghua]#python while_remove.py
['lili', 'congcong', 'yuxi', 'meihua', 'jinghua', 'yuxi', 'yuxi']
['lili', 'congcong', 'meihua', 'jinghua']
[root@pa1 lijinghua]#cat while_remove.py
#!/usr/local/python
names=['lili','congcong','yuxi','meihua','jinghua','yuxi','yuxi']
print(names)
while 'yuxi'in  names:          #这里要做个限制,只有在列表中发现'yuxi'时,才进行以下的操作
	names.remove('yuxi')
print(names)


=================================================使用用户输入的数据来填充字典

单词 responses=响应回应
repeat = 重复,副本
poll = 轮循

示范

[root@pa1 lijinghua]#python yonghu_zidian.py

what is  your name:lijinghua
Which mountain would you like to climb someday?qiumingshan
would you like to let another person respond? (yes/no)yes

what is  your name:yuxi
Which mountain would you like to climb someday?fushishan
would you like to let another person respond? (yes/no)no
--- Poll Results ---
lijinghua like climb qiumingshan.
yuxi like climb fushishan.
[root@pa1 lijinghua]#cat yonghu_zidian.py
#! /usr/local/python
# -*- coding: utf-8 -*-
responses={}
polling_active = True
while polling_active:
#获取字典中的键-值
	name=input("\nwhat is  your name:")
	response=input("Which mountain would you like to climb someday?")
#将答案存储到字典中
	responses[name]=response
#看下个问题的回答决定要不要给出停止信号
	repeat=input("would you like to let another person respond? (yes/no)")
	if repeat == 'no':
#回答若是no的话,信号则为False,循环停止
			polling_active=False
print("--- Poll Results ---")
for name,response in responses.items():
	print(name + " like climb " + response +"." )

############################################################################################
==================================================================================================if else slif 
#要注意的
==================================================================if和else和elif语句后面要添加冒号":"

#if和else 一个简单的判断(带输入)
[root@pa1 lijinghua]# cat tiaojian.py 
#!/usr/bin/python
age = input('print enter your age:')
#print (name)
if age >= 18:
	print (r'She/He is adult')
else:
	print (r'She/He is teenager')

示范2

[root@pa1 lijinghua]#python if.py
BMW
Audi
Bigben
[root@pa1 lijinghua]#cat if.py
#!/usr/bin/python
# -*- coding: utf-8 -*-
cars=['bmw','audi','bigben']
for car in cars:
        if car == 'bmw':
                print(car.upper()) #如果是宝马的话,全部大写
	else:
		print(car.title())  #如果不是的话,只是首字母大写


	
#if和elif 示范 
[root@pa1 lijinghua]# cat tiaojian2.py 
#!/usr/bin/python
age = input('print enter your age:')
#print (name)
if age >= 18:
	print (r'She/He is adult')
elif age >= 6:
	print (r'She/He is teenager')
else:
	print (r'She/He is kid' )

	
#检查是否相等时不考虑大小写 lower()
此处是把需要的字符转换成小写来对比(重点理解)
>>> car = 'BIGBEN'    
>>> car.lower() == 'bigben'
True


#检查是否不相等 (!=)
示范

[root@pa1 lijinghua]#python fish.py
oh I like xioahuangyu
[root@pa1 lijinghua]#cat  fish.py
#!/usr/bin/python
fish='xiaohuangyu'
if fish != 'jingyu':
	print ("oh I like xioahuangyu")

	
# 检查特定值是否包含在列表中 (关键字 in)

示范

>>> name=['lili','yuxi','congcong']
>>> "lili" in name
True
>>> "jinghua" in name
False


# 检查特定值是否不包含在列表中(not in)

示范
 
 [root@pa1 lijinghua]#python not_in.py
Congcong,you can not !
[root@pa1 lijinghua]#cat  not_in.py
#!/usr/local/python
names=['lili','jinghua','yuxi']
user='congcong'
if user not in names:
	print(user.title() +",you can not !")

 ##if语句进阶
 
	在fi语句中,缩进的作用与for循环相同,如果测试通过了,将执行if语句后面所有缩进的代码行,否则将忽略他们
================================================================================== if-else语句
##  if-else语句
 
经常需要在条件测试通过了时执行一个操作,并在没有通过时执行另一个操作,可以使用if-else语句

举个栗子
	
	
	[root@pa1 lijinghua]#python if_else,py
print enter your age:12
She/He is teenager
[root@pa1 lijinghua]#cat if_else,py
#!/usr/bin/python
age = input('print enter your age:')
#print (name)
if age >= 18:
	print (r'She/He is adult')
else:
	print (r'She/He is teenager')
===============================================================================if-elif-else结构
#  if-elif-else结构
经常需要检查超过两个的情形,为此可使用if-elif-else结构
Python只执行if-elif-else结构中的一个代码块,它依次检查每个条件测试,知道遇到通过了的条件测试,测试通过后,Python将执行紧跟在后面的代码,并跳过余下的测试


示范 
[root@pa1 lijinghua]#python if_elif_else.py
print enter your age:2
She/He is kid
[root@pa1 lijinghua]#cat if_elif_else.py
	#!/usr/bin/python
age = input('print enter your age:')
#print (name)
if age >= 18:
	print (r'She/He is adult')
elif age >= 6:
	print (r'She/He is teenager')
else:
	print (r'She/He is kid' )
=============================================================================== 使用多个elif代码块
# 使用多个elif代码块

[root@pa1 lijinghua]#python elifs.py
Your adimission cost is $5.
[root@pa1 lijinghua]#cat elifs.py
#!/usr/local/python
age=12
if age < 4:
	price = 0
elif age < 18:
	price =5
elif age < 65:
	price =10
else: 
	price =5

	
	解释 
	上面代码像画楼梯一样,滑到 age< 18 时符合,然后其余所有的elif代码块省略

=============================================================================省略else代码块
## 省略else代码块

Python并不要求 if-elif结构后面必须有else代码块,在有些情况下,else代码块很有用,而在其他一些情况下,使用一条elif语句来处理特定的情形更清晰

此处省略示例

==========================================================================测试多个条件
## 测试多个条件

较原始

[root@pa1 lijinghua]#python ifs.py
lili is ok
jinghua is ok 
congcong is ok

your are good ~
[root@pa1 lijinghua]#cat ifs.py
#!/usr/local/python
names ={'lili','jinghua','congcong'}
if 'lili' in names:
	print ("lili is ok")
if 'jinghua' in names:
	print ("jinghua is ok ")
if 'congcong' in names :
	print ("congcong is ok")
print ( "\nyour are good ~")


# 总结
如果你只想执行一个代码块就是用if-elif-else结构,如果要运行多个代码块,就是用一系列独立的if语句


======================================================================使用if语句处理列表


示范1

[root@pa1 lijinghua]#python if_list.py
sorry,xigua not enouge now !
Adding lili.
Adding congcong.

Finished making your food!
[root@pa1 lijinghua]#cat if_list.py
#!/usr/local/python
names=['xigua','lili','congcong']
for name in names:
	if name == 'xigua':
		print("sorry,xigua not enouge now !")
	else:
		print("Adding "+ name + ".")
print ("\nFinished making your food!")


=======================================================================确定列表不是空的

## 确定列表不是空的

假若不是空的
[root@pa1 lijinghua]#python food.py
Addinglili.

Finished making your food!
[root@pa1 lijinghua]#cat food.py
#!/usr/local/python
foods=['lili']
if foods:
	for food in foods:
		print("Adding" +food+"." )
	print("\nFinished making your food!")
else:
	print("Are you want a plain food?")

	假若是空的
	
	[root@pa1 lijinghua]#python food.py
Are you want a plain food?
[root@pa1 lijinghua]#cat food.py
#!/usr/local/python
# -*- coding: utf-8 -*-
foods=[]            # 注意此行的变化
if foods:
	for food in foods:
		print("Adding" +food+"." )
	print("\nFinished making your food!")
else:
	print("Are you want a plain food?")

	===========================================================使用多个列表
	## 使用多个列表
	

[root@pa1 lijinghua]#python lists.py
Adding xigua
Adding qiezi
sorry! we no enough qiezi!
Finished making your food~
[root@pa1 lijinghua]#cat lists.py
#!/usr/local/python
# -*- coding: utf-8 -*-
names=['lili','xigua','qiezi']
foods=['lizi','xigua','qiezi'] #把lili 换成了lizi
for food in foods:
	if food in names:
		print("Adding "+food)
else:
	print("sorry! "+"we no enough "+food+"!")
print("Finished making your food~")




#!/usr/bin/env bash
#
# Auto install latest kernel for TCP BBR
#
# System Required:  CentOS 6+, Debian7+, Ubuntu12+


red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
plain='\033[0m'

cur_dir=$(pwd)

[[ $EUID -ne 0 ]] && echo -e "${red}Error:${plain} This script must be run as root!" && exit 1

[[ -d "/proc/vz" ]] && echo -e "${red}Error:${plain} Your VPS is based on OpenVZ, which is not supported." && exit 1

if [ -f /etc/redhat-release ]; then
    release="centos"
elif cat /etc/issue | grep -Eqi "debian"; then
    release="debian"
elif cat /etc/issue | grep -Eqi "ubuntu"; then
    release="ubuntu"
elif cat /etc/issue | grep -Eqi "centos|red hat|redhat"; then
    release="centos"
elif cat /proc/version | grep -Eqi "debian"; then
    release="debian"
elif cat /proc/version | grep -Eqi "ubuntu"; then
    release="ubuntu"
elif cat /proc/version | grep -Eqi "centos|red hat|redhat"; then
    release="centos"
else
    release=""
fi

is_digit(){
    local input=${1}
    if [[ "$input" =~ ^[0-9]+$ ]]; then
        return 0
    else
        return 1
    fi
}

get_valid_valname(){
    local val=${1}
    local new_val=$(eval echo $val | sed 's/[-.]/_/g')
    echo ${new_val}
}

get_hint(){
    local val=${1}
    local new_val=$(get_valid_valname $val)
    eval echo "\$hint_${new_val}"
}

#Display Memu
display_menu(){
    local soft=${1}
    local default=${2}
    eval local arr=(\${${soft}_arr[@]})
    local default_prompt
    if [[ "$default" != "" ]]; then
        if [[ "$default" == "last" ]]; then
            default=${#arr[@]}
        fi
        default_prompt="(default ${arr[$default-1]})"
    fi
    local pick
    local hint
    local vname
    local prompt="which ${soft} you'd select ${default_prompt}: "

    while :
    do
        echo -e "\n------------ ${soft} setting ------------\n"
        for ((i=1;i<=${#arr[@]};i++ )); do
            vname="$(get_valid_valname ${arr[$i-1]})"
            hint="$(get_hint $vname)"
            [[ "$hint" == "" ]] && hint="${arr[$i-1]}"
            echo -e "${green}${i}${plain}) $hint"
        done
        echo
        read -p "${prompt}" pick
        if [[ "$pick" == "" && "$default" != "" ]]; then
            pick=${default}
            break
        fi

        if ! is_digit "$pick"; then
            prompt="Input error, please input a number"
            continue
        fi

        if [[ "$pick" -lt 1 || "$pick" -gt ${#arr[@]} ]]; then
            prompt="Input error, please input a number between 1 and ${#arr[@]}: "
            continue
        fi

        break
    done

    eval ${soft}=${arr[$pick-1]}
    vname="$(get_valid_valname ${arr[$pick-1]})"
    hint="$(get_hint $vname)"
    [[ "$hint" == "" ]] && hint="${arr[$pick-1]}"
    echo -e "\nyour selection: $hint\n"
}

version_ge(){
    test "$(echo "$@" | tr " " "\n" | sort -rV | head -n 1)" == "$1"
}

get_latest_version() {
    latest_version=($(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/ | awk -F'\"v' '/v[4-9]./{print $2}' | cut -d/ -f1 | grep -v - | sort -V))

    [ ${#latest_version[@]} -eq 0 ] && echo -e "${red}Error:${plain} Get latest kernel version failed." && exit 1

    kernel_arr=()
    for i in ${latest_version[@]}; do
        if version_ge $i 4.14; then
            kernel_arr+=($i);
        fi
    done

    display_menu kernel last

    if [[ `getconf WORD_BIT` == "32" && `getconf LONG_BIT` == "64" ]]; then
        deb_name=$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${kernel}/ | grep "linux-image" | grep "generic" | awk -F'\">' '/amd64.deb/{print $2}' | cut -d'<' -f1 | head -1)
        deb_kernel_url="http://kernel.ubuntu.com/~kernel-ppa/mainline/v${kernel}/${deb_name}"
        deb_kernel_name="linux-image-${kernel}-amd64.deb"
        modules_deb_name=$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${kernel}/ | grep "linux-modules" | grep "generic" | awk -F'\">' '/amd64.deb/{print $2}' | cut -d'<' -f1 | head -1)
        deb_kernel_modules_url="http://kernel.ubuntu.com/~kernel-ppa/mainline/v${kernel}/${modules_deb_name}"
        deb_kernel_modules_name="linux-modules-${kernel}-amd64.deb"
    else
        deb_name=$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${kernel}/ | grep "linux-image" | grep "generic" | awk -F'\">' '/i386.deb/{print $2}' | cut -d'<' -f1 | head -1)
        deb_kernel_url="http://kernel.ubuntu.com/~kernel-ppa/mainline/v${kernel}/${deb_name}"
        deb_kernel_name="linux-image-${kernel}-i386.deb"
        modules_deb_name=$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${kernel}/ | grep "linux-modules" | grep "generic" | awk -F'\">' '/i386.deb/{print $2}' | cut -d'<' -f1 | head -1)
        deb_kernel_modules_url="http://kernel.ubuntu.com/~kernel-ppa/mainline/v${kernel}/${modules_deb_name}"
        deb_kernel_modules_name="linux-modules-${kernel}-i386.deb"
    fi

    [ -z ${deb_name} ] && echo -e "${red}Error:${plain} Getting Linux kernel binary package name failed, maybe kernel build failed. Please choose other one and try again." && exit 1
}

get_opsy() {
    [ -f /etc/redhat-release ] && awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release && return
    [ -f /etc/os-release ] && awk -F'[= "]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return
    [ -f /etc/lsb-release ] && awk -F'[="]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return
}

opsy=$( get_opsy )
arch=$( uname -m )
lbit=$( getconf LONG_BIT )
kern=$( uname -r )

get_char() {
    SAVEDSTTY=`stty -g`
    stty -echo
    stty cbreak
    dd if=/dev/tty bs=1 count=1 2> /dev/null
    stty -raw
    stty echo
    stty $SAVEDSTTY
}

getversion() {
    if [[ -s /etc/redhat-release ]]; then
        grep -oE  "[0-9.]+" /etc/redhat-release
    else
        grep -oE  "[0-9.]+" /etc/issue
    fi
}

centosversion() {
    if [ x"${release}" == x"centos" ]; then
        local code=$1
        local version="$(getversion)"
        local main_ver=${version%%.*}
        if [ "$main_ver" == "$code" ]; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

check_bbr_status() {
    local param=$(sysctl net.ipv4.tcp_congestion_control | awk '{print $3}')
    if [[ x"${param}" == x"bbr" ]]; then
        return 0
    else
        return 1
    fi
}

check_kernel_version() {
    local kernel_version=$(uname -r | cut -d- -f1)
    if version_ge ${kernel_version} 4.9; then
        return 0
    else
        return 1
    fi
}

install_elrepo() {

    if centosversion 5; then
        echo -e "${red}Error:${plain} not supported CentOS 5."
        exit 1
    fi

    rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org

    if centosversion 6; then
        rpm -Uvh http://www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm
    elif centosversion 7; then
        rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
    fi

    if [ ! -f /etc/yum.repos.d/elrepo.repo ]; then
        echo -e "${red}Error:${plain} Install elrepo failed, please check it."
        exit 1
    fi
}

sysctl_config() {
    sed -i '/net.core.default_qdisc/d' /etc/sysctl.conf
    sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
    echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
    echo "net.ipv4.tcp_congestion_control = bbr" >> /etc/sysctl.conf
    sysctl -p >/dev/null 2>&1
}

install_config() {
    if [[ x"${release}" == x"centos" ]]; then
        if centosversion 6; then
            if [ ! -f "/boot/grub/grub.conf" ]; then
                echo -e "${red}Error:${plain} /boot/grub/grub.conf not found, please check it."
                exit 1
            fi
            sed -i 's/^default=.*/default=0/g' /boot/grub/grub.conf
        elif centosversion 7; then
            if [ ! -f "/boot/grub2/grub.cfg" ]; then
                echo -e "${red}Error:${plain} /boot/grub2/grub.cfg not found, please check it."
                exit 1
            fi
            grub2-set-default 0
        fi
    elif [[ x"${release}" == x"debian" || x"${release}" == x"ubuntu" ]]; then
        /usr/sbin/update-grub
    fi
}

reboot_os() {
    echo
    echo -e "${green}Info:${plain} The system needs to reboot."
    read -p "Do you want to restart system? [y/n]" is_reboot
    if [[ ${is_reboot} == "y" || ${is_reboot} == "Y" ]]; then
        reboot
    else
        echo -e "${green}Info:${plain} Reboot has been canceled..."
        exit 0
    fi
}

install_bbr() {
    check_bbr_status
    if [ $? -eq 0 ]; then
        echo
        echo -e "${green}Info:${plain} TCP BBR has already been installed. nothing to do..."
        exit 0
    fi
    check_kernel_version
    if [ $? -eq 0 ]; then
        echo
        echo -e "${green}Info:${plain} Your kernel version is greater than 4.9, directly setting TCP BBR..."
        sysctl_config
        echo -e "${green}Info:${plain} Setting TCP BBR completed..."
        exit 0
    fi

    if [[ x"${release}" == x"centos" ]]; then
        install_elrepo
        [ ! "$(command -v yum-config-manager)" ] && yum install -y yum-utils > /dev/null 2>&1
        [ x"$(yum-config-manager elrepo-kernel | grep -w enabled | awk '{print $3}')" != x"True" ] && yum-config-manager --enable elrepo-kernel > /dev/null 2>&1
        yum -y install kernel-ml kernel-ml-devel
        if [ $? -ne 0 ]; then
            echo -e "${red}Error:${plain} Install latest kernel failed, please check it."
            exit 1
        fi
    elif [[ x"${release}" == x"debian" || x"${release}" == x"ubuntu" ]]; then
        [[ ! -e "/usr/bin/wget" ]] && apt-get -y update && apt-get -y install wget
        echo -e "${green}Info:${plain} Getting latest kernel version..."
        get_latest_version
        if [ -n ${modules_deb_name} ]; then
            wget -c -t3 -T60 -O ${deb_kernel_modules_name} ${deb_kernel_modules_url}
            if [ $? -ne 0 ]; then
                echo -e "${red}Error:${plain} Download ${deb_kernel_modules_name} failed, please check it."
                exit 1
            fi
        fi
        wget -c -t3 -T60 -O ${deb_kernel_name} ${deb_kernel_url}
        if [ $? -ne 0 ]; then
            echo -e "${red}Error:${plain} Download ${deb_kernel_name} failed, please check it."
            exit 1
        fi
        [ -f ${deb_kernel_modules_name} ] && dpkg -i ${deb_kernel_modules_name}
        dpkg -i ${deb_kernel_name}
        rm -f ${deb_kernel_name} ${deb_kernel_modules_name}
    else
        echo -e "${red}Error:${plain} OS is not be supported, please change to CentOS/Debian/Ubuntu and try again."
        exit 1
    fi

    install_config
    sysctl_config
    reboot_os
}


clear
echo "---------- System Information ----------"
echo " OS      : $opsy"
echo " Arch    : $arch ($lbit Bit)"
echo " Kernel  : $kern"
echo "----------------------------------------"
echo " Auto install latest kernel for TCP BBR"
echo
echo " URL: https://teddysun.com/489.html"
echo "----------------------------------------"
echo
echo "Press any key to start...or Press Ctrl+C to cancel"
char=`get_char`

install_bbr 2>&1 | tee ${cur_dir}/install_bbr.log#!/usr/bin/env bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

clear
echo

echo

libsodium_file="libsodium-1.0.16"
libsodium_url="https://github.com/jedisct1/libsodium/releases/download/1.0.16/libsodium-1.0.16.tar.gz"

# Current folder
cur_dir=`pwd`
# Stream Ciphers
ciphers=(
aes-256-gcm
aes-192-gcm
aes-128-gcm
aes-256-ctr
aes-192-ctr
aes-128-ctr
aes-256-cfb
aes-192-cfb
aes-128-cfb
camellia-128-cfb
camellia-192-cfb
camellia-256-cfb
chacha20-ietf-poly1305
chacha20-ietf
chacha20
rc4-md5
)
# Color
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
plain='\033[0m'

# Make sure only root can run our script
[[ $EUID -ne 0 ]] && echo -e "[${red}Error${plain}] This script must be run as root!" && exit 1

# Disable selinux
disable_selinux(){
    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then
        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
        setenforce 0
    fi
}

#Check system
check_sys(){
    local checkType=$1
    local value=$2

    local release=''
    local systemPackage=''

    if [[ -f /etc/redhat-release ]]; then
        release="centos"
        systemPackage="yum"
    elif cat /etc/issue | grep -Eqi "debian"; then
        release="debian"
        systemPackage="apt"
    elif cat /etc/issue | grep -Eqi "ubuntu"; then
        release="ubuntu"
        systemPackage="apt"
    elif cat /etc/issue | grep -Eqi "centos|red hat|redhat"; then
        release="centos"
        systemPackage="yum"
    elif cat /proc/version | grep -Eqi "debian"; then
        release="debian"
        systemPackage="apt"
    elif cat /proc/version | grep -Eqi "ubuntu"; then
        release="ubuntu"
        systemPackage="apt"
    elif cat /proc/version | grep -Eqi "centos|red hat|redhat"; then
        release="centos"
        systemPackage="yum"
    fi

    if [[ ${checkType} == "sysRelease" ]]; then
        if [ "$value" == "$release" ]; then
            return 0
        else
            return 1
        fi
    elif [[ ${checkType} == "packageManager" ]]; then
        if [ "$value" == "$systemPackage" ]; then
            return 0
        else
            return 1
        fi
    fi
}

# Get version
getversion(){
    if [[ -s /etc/redhat-release ]]; then
        grep -oE  "[0-9.]+" /etc/redhat-release
    else
        grep -oE  "[0-9.]+" /etc/issue
    fi
}

# CentOS version
centosversion(){
    if check_sys sysRelease centos; then
        local code=$1
        local version="$(getversion)"
        local main_ver=${version%%.*}
        if [ "$main_ver" == "$code" ]; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

# Get public IP address
get_ip(){
    local IP=$( ip addr | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | egrep -v "^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\." | head -n 1 )
    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )
    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )
    [ ! -z ${IP} ] && echo ${IP} || echo
}

get_char(){
    SAVEDSTTY=`stty -g`
    stty -echo
    stty cbreak
    dd if=/dev/tty bs=1 count=1 2> /dev/null
    stty -raw
    stty echo
    stty $SAVEDSTTY
}

# Pre-installation settings
pre_install(){
    if check_sys packageManager yum || check_sys packageManager apt; then
        # Not support CentOS 5
        if centosversion 5; then
            echo -e "$[{red}Error${plain}] Not supported CentOS 5, please change to CentOS 6+/Debian 7+/Ubuntu 12+ and try again."
            exit 1
        fi
    else
        echo -e "[${red}Error${plain}] Your OS is not supported. please change OS to CentOS/Debian/Ubuntu and try again."
        exit 1
    fi
    # Set shadowsocks config password
    echo "Please enter password for shadowsocks-python"
    read -p "(Default password: ):" shadowsockspwd
    [ -z "${shadowsockspwd}" ] && shadowsockspwd="teddysun.com"
    echo
    echo "---------------------------"
    echo "password = ${shadowsockspwd}"
    echo "---------------------------"
    echo
    # Set shadowsocks config port
    while true
    do
    dport=$(shuf -i 9000-19999 -n 1)
    echo "Please enter a port for shadowsocks-python [1-65535]"
    read -p "(Default port: ${dport}):" shadowsocksport
    [ -z "$shadowsocksport" ] && shadowsocksport=${dport}
    expr ${shadowsocksport} + 1 &>/dev/null
    if [ $? -eq 0 ]; then
        if [ ${shadowsocksport} -ge 1 ] && [ ${shadowsocksport} -le 65535 ] && [ ${shadowsocksport:0:1} != 0 ]; then
            echo
            echo "---------------------------"
            echo "port = ${shadowsocksport}"
            echo "---------------------------"
            echo
            break
        fi
    fi
    echo -e "[${red}Error${plain}] Please enter a correct number [1-65535]"
    done

    # Set shadowsocks config stream ciphers
    while true
    do
    echo -e "Please select stream cipher for shadowsocks-python:"
    for ((i=1;i<=${#ciphers[@]};i++ )); do
        hint="${ciphers[$i-1]}"
        echo -e "${green}${i}${plain}) ${hint}"
    done
    read -p "Which cipher you'd select(Default: ${ciphers[0]}):" pick
    [ -z "$pick" ] && pick=1
    expr ${pick} + 1 &>/dev/null
    if [ $? -ne 0 ]; then
        echo -e "[${red}Error${plain}] Please enter a number"
        continue
    fi
    if [[ "$pick" -lt 1 || "$pick" -gt ${#ciphers[@]} ]]; then
        echo -e "[${red}Error${plain}] Please enter a number between 1 and ${#ciphers[@]}"
        continue
    fi
    shadowsockscipher=${ciphers[$pick-1]}
    echo
    echo "---------------------------"
    echo "cipher = ${shadowsockscipher}"
    echo "---------------------------"
    echo
    break
    done

    echo
    echo "Press any key to start...or Press Ctrl+C to cancel"
    char=`get_char`
    # Install necessary dependencies
    if check_sys packageManager yum; then
        yum install -y python python-devel python-setuptools openssl openssl-devel curl wget unzip gcc automake autoconf make libtool
    elif check_sys packageManager apt; then
        apt-get -y update
        apt-get -y install python python-dev python-setuptools openssl libssl-dev curl wget unzip gcc automake autoconf make libtool
    fi
    cd ${cur_dir}
}

# Download files
download_files(){
    # Download libsodium file
    if ! wget --no-check-certificate -O ${libsodium_file}.tar.gz ${libsodium_url}; then
        echo -e "[${red}Error${plain}] Failed to download ${libsodium_file}.tar.gz!"
        exit 1
    fi
    # Download Shadowsocks file
    if ! wget --no-check-certificate -O shadowsocks-master.zip https://github.com/shadowsocks/shadowsocks/archive/master.zip; then
        echo -e "[${red}Error${plain}] Failed to download shadowsocks python file!"
        exit 1
    fi
    # Download Shadowsocks init script
    if check_sys packageManager yum; then
        if ! wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks -O /etc/init.d/shadowsocks; then
            echo -e "[${red}Error${plain}] Failed to download shadowsocks chkconfig file!"
            exit 1
        fi
    elif check_sys packageManager apt; then
        if ! wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-debian -O /etc/init.d/shadowsocks; then
            echo -e "[${red}Error${plain}] Failed to download shadowsocks chkconfig file!"
            exit 1
        fi
    fi
}

# Config shadowsocks
config_shadowsocks(){
    cat > /etc/shadowsocks.json<<-EOF
{
    "server":"0.0.0.0",
    "server_port":${shadowsocksport},
    "local_address":"127.0.0.1",
    "local_port":1080,
    "password":"${shadowsockspwd}",
    "timeout":300,
    "method":"${shadowsockscipher}",
    "fast_open":false
}
EOF
}

# Firewall set
firewall_set(){
    echo -e "[${green}Info${plain}] firewall set start..."
    if centosversion 6; then
        /etc/init.d/iptables status > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            iptables -L -n | grep -i ${shadowsocksport} > /dev/null 2>&1
            if [ $? -ne 0 ]; then
                iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${shadowsocksport} -j ACCEPT
                iptables -I INPUT -m state --state NEW -m udp -p udp --dport ${shadowsocksport} -j ACCEPT
                /etc/init.d/iptables save
                /etc/init.d/iptables restart
            else
                echo -e "[${green}Info${plain}] port ${shadowsocksport} has already been set up."
            fi
        else
            echo -e "[${yellow}Warning${plain}] iptables looks like shutdown or not installed, please manually set it if necessary."
        fi
    elif centosversion 7; then
        systemctl status firewalld > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            firewall-cmd --permanent --zone=public --add-port=${shadowsocksport}/tcp
            firewall-cmd --permanent --zone=public --add-port=${shadowsocksport}/udp
            firewall-cmd --reload
        else
            echo -e "[${yellow}Warning${plain}] firewalld looks like not running or not installed, please enable port ${shadowsocksport} manually if necessary."
        fi
    fi
    echo -e "[${green}Info${plain}] firewall set completed..."
}

# Install Shadowsocks
install(){
    # Install libsodium
    if [ ! -f /usr/lib/libsodium.a ]; then
        cd ${cur_dir}
        tar zxf ${libsodium_file}.tar.gz
        cd ${libsodium_file}
        ./configure --prefix=/usr && make && make install
        if [ $? -ne 0 ]; then
            echo -e "[${red}Error${plain}] libsodium install failed!"
            install_cleanup
            exit 1
        fi
    fi

    ldconfig
    # Install Shadowsocks
    cd ${cur_dir}
    unzip -q shadowsocks-master.zip
    if [ $? -ne 0 ];then
        echo -e "[${red}Error${plain}] unzip shadowsocks-master.zip failed! please check unzip command."
        install_cleanup
        exit 1
    fi

    cd ${cur_dir}/shadowsocks-master
    python setup.py install --record /usr/local/shadowsocks_install.log

    if [ -f /usr/bin/ssserver ] || [ -f /usr/local/bin/ssserver ]; then
        chmod +x /etc/init.d/shadowsocks
        if check_sys packageManager yum; then
            chkconfig --add shadowsocks
            chkconfig shadowsocks on
        elif check_sys packageManager apt; then
            update-rc.d -f shadowsocks defaults
        fi
        /etc/init.d/shadowsocks start
    else
        echo
        echo -e "[${red}Error${plain}] Shadowsocks install failed! please visit https://teddysun.com/342.html and contact."
        install_cleanup
        exit 1
    fi

    clear
    echo
    echo -e "Congratulations, Shadowsocks-python server install completed!"
    echo -e "Your Server IP        : \033[41;37m $(get_ip) \033[0m"
    echo -e "Your Server Port      : \033[41;37m ${shadowsocksport} \033[0m"
    echo -e "Your Password         : \033[41;37m ${shadowsockspwd} \033[0m"
    echo -e "Your Encryption Method: \033[41;37m ${shadowsockscipher} \033[0m"
    echo
    echo "Enjoy it!"
    echo
}

# Install cleanup
install_cleanup(){
    cd ${cur_dir}
    rm -rf shadowsocks-master.zip shadowsocks-master ${libsodium_file}.tar.gz ${libsodium_file}
}

# Uninstall Shadowsocks
uninstall_shadowsocks(){
    printf "Are you sure uninstall Shadowsocks? (y/n) "
    printf "\n"
    read -p "(Default: n):" answer
    [ -z ${answer} ] && answer="n"
    if [ "${answer}" == "y" ] || [ "${answer}" == "Y" ]; then
        ps -ef | grep -v grep | grep -i "ssserver" > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            /etc/init.d/shadowsocks stop
        fi
        if check_sys packageManager yum; then
            chkconfig --del shadowsocks
        elif check_sys packageManager apt; then
            update-rc.d -f shadowsocks remove
        fi
        # delete config file
        rm -f /etc/shadowsocks.json
        rm -f /var/run/shadowsocks.pid
        rm -f /etc/init.d/shadowsocks
        rm -f /var/log/shadowsocks.log
        if [ -f /usr/local/shadowsocks_install.log ]; then
            cat /usr/local/shadowsocks_install.log | xargs rm -rf
        fi
        echo "Shadowsocks uninstall success!"
    else
        echo
        echo "uninstall cancelled, nothing to do..."
        echo
    fi
}

# Install Shadowsocks-python
install_shadowsocks(){
    disable_selinux
    pre_install
    download_files
    config_shadowsocks
    if check_sys packageManager yum; then
        firewall_set
    fi
    install
    install_cleanup
}

# Initialization step
action=$1
[ -z $1 ] && action=install
case "$action" in
    install|uninstall)
        ${action}_shadowsocks
        ;;
    *)
        echo "Arguments error! [${action}]"
        echo "Usage: `basename $0` [install|uninstall]"
    ;;
esac
#!/bin/bash
export RSYNC_PASSWORD=7day1do
rsync  -vzrtopg --progress memect@101.200.162.35::rsyncd_dongcai /remote-data/dongcai

export PATH=/opt/project/crawler/company/:$PATH  
for file_cur in `ls /remote-data/dongcai | grep 7z`
do
    a=0
    for file_old in `cat  /remote-data/dongcai/dongcai_data.list`
    do
        if [ "$file_cur" = "$file_old" ]
        then
            a=1
        fi
    done
    if [  $a -eq 0 ]
    then
        echo $file_cur
	echo ${file_cur:0:10}
	7z x $file_cur > unzip.log
	
	sleep 3
	cd /opt/project/crawler/company
	cp settings.json.test settings.json
	pwd
	/opt/project/env_crawler/bin/python src/eastmoney_db.py --db --data-dir /remote-data/dongcai/${file_cur:0:10}
    ls /remote-data/dongcai | grep 7z >/remote-data/dongcai/dongcai_data.list
    fi
done
#!/bin/bash
NGINX_COMMAND=$1
NGINX_PORT=80
CACHEFILE="/tmp/nginx_status.txt"
CMD="/usr/bin/curl http://127.0.0.1:"$NGINX_PORT"/nginx_status/"
# Check and run the script
TIMEFLM=`stat -c %Y $CACHEFILE`
TIMENOW=`date +%s`
if [ `expr $TIMENOW - $TIMEFLM` -gt 60 ]; then
    rm -f $CACHEFILE
fi
if [ ! -f $CACHEFILE  ];then
   $CMD >$CACHEFILE 2>/dev/null
fi
nginx_active(){
	 grep 'Active' $CACHEFILE| awk '{print $NF}'
         exit 0;
}
nginx_reading(){
	 grep 'Reading' $CACHEFILE| awk '{print $2}'
         exit 0;
}
nginx_writing(){
	 grep 'Writing' $CACHEFILE | awk '{print $4}'
         exit 0;
}
nginx_waiting(){
	 grep 'Waiting' $CACHEFILE| awk '{print $6}'
         exit 0;
}
nginx_accepts(){
	 awk NR==3 $CACHEFILE| awk '{print $1}' 
         exit 0;
}
nginx_handled(){
	 awk NR==3 $CACHEFILE| awk '{print $2}' 
         exit 0;
}
nginx_requests(){
	 awk NR==3 $CACHEFILE| awk '{print $3}'
         exit 0;
}
case $NGINX_COMMAND in
active)
nginx_active;
;;
reading)
nginx_reading;
;;
writing)
nginx_writing;
;;
waiting)
nginx_waiting;
;;
accepts)
nginx_accepts;
;;
handled)
nginx_handled;
;;
requests)
nginx_requests;
;;
*)
echo 'Invalid credentials';
exit 2;
esac
美乐所有机子账号：meile 密码：meile@@2017

====================================================================
阿里云账号
美乐天创游戏  密码：meile@@2017
华东2


美乐新添加的添加的两个
联通：（原）125.39.159.14  （新）125.39.159.23 
电信：（原）221.238.29.14  （新）221.238.29.23 

联通nginx日志路径
/data1/logs/www.huolawan.com_access.log



电信nginx日志路径
/data1/logs/www.huolawan.com_access.log



美乐的主要的数据库服务器（主站所有数据） 125.39.159.28
game数据库
用户：gamehuolawan 
密码：gamehuolawan
端口号：5306   
mysql登录 /usr/local/mysql/bin/mysql -u gamehuolawan -p -h 127.0.0.1 -P 5306  密码：gamehuolawan
启动路径
/etc/init.d/mysql


测试用的数据库服务器（用户数据）         221.238.29.25
uuseesns 数据库-》user表
用户：gamehuolawan 
密码：gamehuolawan
端口号：4306
登录：/usr/local/mysql4306/bin/mysql -ugamehuolawan -S /tmp/mysql4306.sock -h127.0.0.1 -P4306 -p
数据库主配置文件(这里要注意)!!
/usr/local/mysql4306/my.cnf
启动路径
/etc/init.d/mysqld
美乐的支付服务器
（原）223.202.31.140      （新）221.238.29.26
本地数据库 mysql -uroot -h172.16.1.228 -P3306 -pwww.uusee.com

NFS共享服务器
外网 125.39.159.26

磁盘快满时：清空/tmp/目录err.log  
            清空/var/spool/mail/root
			清空php-fpm.log
=======================================================================================================

域名解析（新网址的）
地址:https://www.dnspod.cn/
帐号:liuht@uusee.com
旧密码:.uusee.com 新密码 .huolawan.com 
说明:此为域名解析的管理后台

=====================================================================
 (原KUMI外网测试WEB服务器)现在是监控服务器兼联通web备份
			外网 125.39.159.18        内网    172.16.1.78         用户 root        密码: CMS2013@kumi.cn 
			
		====================================================================================================== 阿里美乐 ip地址
backup                  
华东 2 可用区 B	
101.132.69.173(公)
172.19.251.28(私有)

Web
 
华东 2 可用区 D	
101.132.105.160(公)
172.19.196.192(私有)


front-web
 
华东 2 可用区 D	
139.224.118.47(公)
172.19.196.193(私有)


pay
 
华东 2 可用区 D	
106.14.165.156(公)
172.19.196.191(私有)		


RDS数据服务器





			
			
			#
#黄金
#cat >>/etc/profile<<`EOF`
#PS1='\[\e[33;1m\][\u@\h \W]\$\[\e[0m\]'
#`EOF`
#source /etc/profile


#1.依赖包
yum install ncurses-devel libaio-devel -y
rpm -qa ncurses-devel libaio-devel

#2.安装cmake
yum install cmake -y
rpm -qa cmake

#3.设置用户
useradd -s /sbin/nologin -M mysql
id mysql

#4.解压安装
mkdir -p  /home/tools/
cd /home/tools/
wget -q http://mirrors.sohu.com/mysql/MySQL-5.6/mysql-5.6.36.tar.gz 

ls -l mysql-5.6.36.tar.gz

tar xf mysql-5.6.36.tar.gz
cd mysql-5.6.36
cmake . -DCMAKE_INSTALL_PREFIX=/application/mysql-5.6.36 \
-DMYSQL_DATADIR=/application/mysql-5.6.36/data \
-DMYSQL_UNIX_ADDR=/application/mysql-5.6.36/tmp/mysql.sock \
-DDEFAULT_CHARSET=utf8 \
-DDEFAULT_COLLATION=utf8_general_ci \
-DWITH_EXTRA_CHARSETS=all \
-DWITH_INNOBASE_STORAGE_ENGINE=1 \
-DWITH_FEDERATED_STORAGE_ENGINE=1 \
-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \
-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \
-DWITH_ZLIB=bundled \
-DWITH_SSL=bundled \
-DENABLED_LOCAL_INFILE=1 \
-DWITH_EMBEDDED_SERVER=1 \
-DENABLE_DOWNLOADS=1 \
-DWITH_DEBUG=0
make && make install
ln -s /application/mysql-5.6.36/ /application/mysql

#5.初始化及配置数据库
cp support-files/my*.cnf /etc/my.cnf

/application/mysql/scripts/mysql_install_db --basedir=/application/mysql/ --datadir=/application/mysql/data --user=mysql


##为避免出错,往主配置文件写入需要的东西
> /etc/my.cnf

cat >>/etc/my.cnf<<`EOF`
[mysqld]
datadir = /application/mysql/data
log-error = /application/mysql/data/error.log
pid-file = /application/mysql/data/mysql.pid
user = mysql
tmpdir = /tmp
socket=/tmp/mysql.sock 
[mysqld_safe] 
log-error = /application/mysql/data/error.log

socket=/tmp/mysql.sock
[client]
default-character-set=utf8
socket=/tmp/mysql.sock

`EOF`

#权限问题并开启
chown -R mysql.mysql /application/mysql/
cp support-files/mysql.server /etc/init.d/mysqld
chmod 700 /etc/init.d/mysqld
chkconfig mysqld on
chkconfig --list mysqld
/etc/init.d/mysqld start
netstat -lntup|grep 330

echo 'PATH=/application/mysql/bin/:$PATH' >>/etc/profile
tail -1 /etc/profile
source /etc/profile
echo $PATH
mysql

#设置密码
cd /application/mysql/bin
mysqld_safe --skip-grant-tables &

#排错：
#1、输出
#2、错误日志
#出错的话有必要看错误日志
#log-error = /application/mysql/data/error.log

##清理用户及无用数据库(基本优化)
#select user,host from mysql.user;
#drop user ''@'db02';
#drop user ''@'localhost';
#drop user 'root'@'db02';
#drop user 'root'@'::1';
#select user,host from mysql.user;
#drop database test;
#show databases;
###################################

#常见问题:
#故障:ERROR! The server quit without updating PID file 
#	1.权限.chown -R mysql.mysql
#	2.killall mysqld
#	3.重新初始化数据.
#	4.运行1年了,出问题(非法（断电）关机或者非法关数据库，例如kill -9).
﻿阿里云账号：liry@kumi.cn
密码:       2017@@ping99
阿里云服务器ssh端口:48620
华北2

===================================================================================================阿里测试机_71 and gogs
阿里测试机       centos 6.5    
   71上线脚本路径 /var/lib/jenkins/xiaofupai_git.sh 后台是adm.xiaofupai_git
71测试机： www用户登录  以前svn用的上线脚本#rsync同步脚本路径/var/lib/jenkins/workspace/
外网182.92.191.71
内网10.171.63.90
root密码：yiping@@2017
本地数据库：mysql -h 127.0.0.1 -P 5306 -u yp_user -pyiping@2099

主站点目录
/data0/webdata/xiaofupai.com/public
adm站点目录
/data0/webdata/adm.xiaofupai.com/public


服务开启命令
/usr/local/webserver/nginx/sbin/nginx
/usr/local/webserver/php5.6.30/sbin/php-fpm

测试机上比较重要的定时任务
开发用的测试库，每天同步正式机的脚本，注意数据大时需要增加备份时间。
#每天导入小福拍auction库的数据到71的auction_production库里
55 08 * * * /bin/bash /server/scripts/xiaofupai_auction_backup.sh &>/dev/null
当小福拍出现问题时，用这些备份恢复
#每天备份小福拍站点目录和nginx配置文件到/data0/xiaofupai_web_backup目录
00 02 * * * /bin/bash /server/scripts/xiaofupai_web_backup.sh $>/dev/null


==================================================================================gogs
gogs服务器(71重启后需要手动启动gogs服务)
gogs仓库路径
A 测试机
cd /home/git/go/src/github.com/gogits/gogs/
B 小福拍
cd /data0/webdata/xiaofupai.com/

切换git用户启动gogs服务 密码123456
cd /home/git/go/src/github.com/gogits/gogs/
启动服务
./gogs web &

上线脚本路径
/var/lib/jenkins/adm.xiaofupai_git.sh
/var/lib/jenkins/xiaofupai_git.sh
==================================================================================艺评正式机_85
艺评:85正式机：
root用户登录  nginx，php路径 /usr/local/webserver/
                        艺评网主站点配置/usr/local/webserver/nginx/www.ping99.com.conf
                        艺评网切割日志路径/data0/logs/e.ping99_log/	
服务开启路径						
#start nginx prot:443,80
/usr/local/webserver/nginx/sbin/nginx
#nginx for mp4 prot:82
/usr/local/webserver/nginx_82/sbin/nginx
#start php
/usr/local/webserver/php/sbin/php-fpm

================================================================================================================主从
mysql主从  只能从85正式机跳过去
主机名 mysql-M （主）   
内网   10.162.194.195
mysql -h10.162.194.195 -P 7306 -u yp_user -pyiping@2099
my.cnf路径/usr/local/mysql5.7/my3306.cnf
  
主机名 mysql-S （从）
内网   10.171.16.237
mysql -h127.0.0.1 -P 7306 -u yp_user -pyiping@2099
=================================================================================================================redis and zabbix
redis机器  (只能从85正式机跳过去 )
内网10.163.7.122   #mysql 3306  mysql -uroot -pyiping@2017
                   调试zabbix文件  /usr/local/webserver/nginx/html/php/conf/zabbix.conf.php
                   zabbix网址 http://112.126.64.226:47368/php/zabbix.php?action=dashboard.view  账号yiping  密码yiping@@2017 旧密码yiping@99
外网112.126.64.226 

服务开启路径
service zabbix-agent start
=================================================================================小福拍
小福拍项目：
web服务器
外网47.93.159.30
用户：xiaofupai  端口48620
root密码：xiaofupai@@2017

上线脚本路径
正式机上线脚本路径     /server/scripts/xiaofupai.com_git.sh  
后台                   /server/scripts/adm.xiaofupai_git.sh

端口9911 运行的程序的路径/data0/xiaofupai.com/artisan
端口127.0.0.1:9001 运行程序命令 supervisord -c /etc/supervisor/supervisord.conf
小福拍nginx配置路径/usr/local/webserver/nginx/conf/include/xiaofupai.com.conf
小福拍nginx日志路径/data0/logs/xiaofupai.com.log，改成xiaofupai_access日期.log
启动zabbix服务 service zabbix-agent start

服务开启路径:
rsync --daemon
#start nginx
/usr/local/webserver/nginx/sbin/nginx
#start php-fpm port:9900
/usr/local/webserver/php-5.6.30/sbin/php-fpm
===============================================================小福拍EDS服务器
数据库：
mysql -uyp_user -pyiping@2099 -hrm-2ze43205s3u96a3to.mysql.rds.aliyuncs.com 
数据库root密码: xiaofupai@@2017
=============================================阿里云redis账号密码
阿里云的redis密码   0HCxFP8xsHVG1eri                                                                  
连接地址（host）： r-2zedba628018e1d4.redis.rds.aliyuncs.com
================================================================================加速乐
DNS：
加速乐：https://www.yunaq.com/
账号ping99_inc@163.com
密码yiping@@014
==================================================================================================
内网机器
10.1.35.91   密码：www.uusee.com  svn的服务器  同步到71上的目录/var/lib/rsync/
10.1.35.92   密码：123456                  
10.1.35.94   密码：123456    zabbix内网 http://test.zabbix.com/php/zabbix.php?action=dashboard.view
10.1.35.95   密码：123456    web测试机 nginx + php                 
10.1.35.96   密码：123456    mysql 

10.1.35.94
mysql -uroot -p123456

艺评网日均pv 12000 UV 32000
小福拍日均pv 13000 UV 36000

=============================================================================================================打印机

打印机：运行\\10.1.59.210  之后查看 开始菜单，设备和打印机
打印扫描：Ctrl +r mstsc 10.1.59.210 用户ww 密码123456 桌面佳能扫描图标 
投影 win + p
公司台式电脑DNS：首选211.167.230.100 备用114.114.114.114


﻿阿里云账号：liry@kumi.cn
密码:       2017@@ping99
阿里云服务器ssh端口:48620
华北2

===================================================================================================阿里测试机_71 and gogs
阿里测试机       centos 6.5    
   71上线脚本路径 /var/lib/jenkins/xiaofupai_git.sh 后台是adm.xiaofupai_git
71测试机： www用户登录  以前svn用的上线脚本#rsync同步脚本路径/var/lib/jenkins/workspace/
外网182.92.191.71
内网10.171.63.90
root密码：yiping@@2017
本地数据库：mysql -h 127.0.0.1 -P 5306 -u yp_user -pyiping@2099

主站点目录
/data0/webdata/xiaofupai.com/public
adm站点目录
/data0/webdata/adm.xiaofupai.com/public


服务开启命令
/usr/local/webserver/nginx/sbin/nginx
/usr/local/webserver/php5.6.30/sbin/php-fpm

测试机上比较重要的定时任务
开发用的测试库，每天同步正式机的脚本，注意数据大时需要增加备份时间。
#每天导入小福拍auction库的数据到71的auction_production库里
55 08 * * * /bin/bash /server/scripts/xiaofupai_auction_backup.sh &>/dev/null
当小福拍出现问题时，用这些备份恢复
#每天备份小福拍站点目录和nginx配置文件到/data0/xiaofupai_web_backup目录
00 02 * * * /bin/bash /server/scripts/xiaofupai_web_backup.sh $>/dev/null


==================================================================================gogs
gogs服务器(71重启后需要手动启动gogs服务)
gogs仓库路径
A 测试机
cd /home/git/go/src/github.com/gogits/gogs/
B 小福拍
cd /data0/webdata/xiaofupai.com/

切换git用户启动gogs服务 密码123456
cd /home/git/go/src/github.com/gogits/gogs/
启动服务
./gogs web &

上线脚本路径
/var/lib/jenkins/adm.xiaofupai_git.sh
/var/lib/jenkins/xiaofupai_git.sh
==================================================================================艺评正式机_85
艺评:85正式机：
root用户登录  nginx，php路径 /usr/local/webserver/
                        艺评网主站点配置/usr/local/webserver/nginx/www.ping99.com.conf
                        艺评网切割日志路径/data0/logs/e.ping99_log/	
服务开启路径						
#start nginx prot:443,80
/usr/local/webserver/nginx/sbin/nginx
#nginx for mp4 prot:82
/usr/local/webserver/nginx_82/sbin/nginx
#start php
/usr/local/webserver/php/sbin/php-fpm

================================================================================================================主从
mysql主从  只能从85正式机跳过去
主机名 mysql-M （主）   
内网   10.162.194.195
mysql -h10.162.194.195 -P 7306 -u yp_user -pyiping@2099
my.cnf路径/usr/local/mysql5.7/my3306.cnf
  
主机名 mysql-S （从）
内网   10.171.16.237
mysql -h127.0.0.1 -P 7306 -u yp_user -pyiping@2099
=================================================================================================================redis and zabbix
redis机器  (只能从85正式机跳过去 )
内网10.163.7.122   #mysql 3306  mysql -uroot -pyiping@2017
                   调试zabbix文件  /usr/local/webserver/nginx/html/php/conf/zabbix.conf.php
                   zabbix网址 http://112.126.64.226:47368/php/zabbix.php?action=dashboard.view  账号yiping  密码yiping@@2017 旧密码yiping@99
外网112.126.64.226 

服务开启路径
service zabbix-agent start
=================================================================================小福拍
小福拍项目：
web服务器
外网47.93.159.30
用户：xiaofupai  端口48620
root密码：xiaofupai@@2017

上线脚本路径
正式机上线脚本路径     /server/scripts/xiaofupai.com_git.sh  
后台                   /server/scripts/adm.xiaofupai_git.sh

端口9911 运行的程序的路径/data0/xiaofupai.com/artisan
端口127.0.0.1:9001 运行程序命令 supervisord -c /etc/supervisor/supervisord.conf
小福拍nginx配置路径/usr/local/webserver/nginx/conf/include/xiaofupai.com.conf
小福拍nginx日志路径/data0/logs/xiaofupai.com.log，改成xiaofupai_access日期.log
启动zabbix服务 service zabbix-agent start

服务开启路径:
rsync --daemon
#start nginx
/usr/local/webserver/nginx/sbin/nginx
#start php-fpm port:9900
/usr/local/webserver/php-5.6.30/sbin/php-fpm
===============================================================小福拍EDS服务器
数据库：
mysql -uyp_user -pyiping@2099 -hrm-2ze43205s3u96a3to.mysql.rds.aliyuncs.com 
数据库root密码: xiaofupai@@2017
=============================================阿里云redis账号密码
阿里云的redis密码   0HCxFP8xsHVG1eri                                                                  
连接地址（host）： r-2zedba628018e1d4.redis.rds.aliyuncs.com
================================================================================加速乐
DNS：
加速乐：https://www.yunaq.com/
账号ping99_inc@163.com
密码yiping@@014
==================================================================================================
内网机器
10.1.35.91   密码：www.uusee.com  svn的服务器  同步到71上的目录/var/lib/rsync/
10.1.35.92   密码：123456                  
10.1.35.94   密码：123456    zabbix内网 http://test.zabbix.com/php/zabbix.php?action=dashboard.view
10.1.35.95   密码：123456    web测试机 nginx + php                 
10.1.35.96   密码：123456    mysql 

10.1.35.94
mysql -uroot -p123456

艺评网日均pv 12000 UV 32000
小福拍日均pv 13000 UV 36000

=============================================================================================================打印机

打印机：运行\\10.1.59.210  之后查看 开始菜单，设备和打印机
打印扫描：Ctrl +r mstsc 10.1.59.210 用户ww 密码123456 桌面佳能扫描图标 
投影 win + p
公司台式电脑DNS：首选211.167.230.100 备用114.114.114.114


﻿阿里云账号：liry@kumi.cn
密码:       2017@@ping99
阿里云服务器ssh端口:48620
华北2

===================================================================================================阿里测试机_71 and gogs
阿里测试机       centos 6.5    
   71上线脚本路径 /var/lib/jenkins/xiaofupai_git.sh 后台是adm.xiaofupai_git
71测试机： www用户登录  以前svn用的上线脚本#rsync同步脚本路径/var/lib/jenkins/workspace/
外网182.92.191.71
内网10.171.63.90
root密码：yiping@@2017
本地数据库：mysql -h 127.0.0.1 -P 5306 -u yp_user -pyiping@2099

主站点目录
/data0/webdata/xiaofupai.com/public
adm站点目录
/data0/webdata/adm.xiaofupai.com/public


服务开启命令
/usr/local/webserver/nginx/sbin/nginx
/usr/local/webserver/php5.6.30/sbin/php-fpm

测试机上比较重要的定时任务
开发用的测试库，每天同步正式机的脚本，注意数据大时需要增加备份时间。
#每天导入小福拍auction库的数据到71的auction_production库里
55 08 * * * /bin/bash /server/scripts/xiaofupai_auction_backup.sh &>/dev/null
当小福拍出现问题时，用这些备份恢复
#每天备份小福拍站点目录和nginx配置文件到/data0/xiaofupai_web_backup目录
00 02 * * * /bin/bash /server/scripts/xiaofupai_web_backup.sh $>/dev/null


==================================================================================gogs
gogs服务器(71重启后需要手动启动gogs服务)
gogs仓库路径
A 测试机
cd /home/git/go/src/github.com/gogits/gogs/
B 小福拍
cd /data0/webdata/xiaofupai.com/

切换git用户启动gogs服务 密码123456
cd /home/git/go/src/github.com/gogits/gogs/
启动服务
./gogs web &

上线脚本路径
/var/lib/jenkins/adm.xiaofupai_git.sh
/var/lib/jenkins/xiaofupai_git.sh
==================================================================================艺评正式机_85
艺评:85正式机：
root用户登录  nginx，php路径 /usr/local/webserver/
                        艺评网主站点配置/usr/local/webserver/nginx/www.ping99.com.conf
                        艺评网切割日志路径/data0/logs/e.ping99_log/	
服务开启路径						
#start nginx prot:443,80
/usr/local/webserver/nginx/sbin/nginx
#nginx for mp4 prot:82
/usr/local/webserver/nginx_82/sbin/nginx
#start php
/usr/local/webserver/php/sbin/php-fpm

================================================================================================================主从
mysql主从  只能从85正式机跳过去
主机名 mysql-M （主）   
内网   10.162.194.195
mysql -h10.162.194.195 -P 7306 -u yp_user -pyiping@2099
my.cnf路径/usr/local/mysql5.7/my3306.cnf
  
主机名 mysql-S （从）
内网   10.171.16.237
mysql -h127.0.0.1 -P 7306 -u yp_user -pyiping@2099
=================================================================================================================redis and zabbix
redis机器  (只能从85正式机跳过去 )
内网10.163.7.122   #mysql 3306  mysql -uroot -pyiping@2017
                   调试zabbix文件  /usr/local/webserver/nginx/html/php/conf/zabbix.conf.php
                   zabbix网址 http://112.126.64.226:47368/php/zabbix.php?action=dashboard.view  账号yiping  密码yiping@@2017 旧密码yiping@99
外网112.126.64.226 

服务开启路径
service zabbix-agent start
=================================================================================小福拍
小福拍项目：
web服务器
外网47.93.159.30
用户：xiaofupai  端口48620
root密码：xiaofupai@@2017

上线脚本路径
正式机上线脚本路径     /server/scripts/xiaofupai.com_git.sh  
后台                   /server/scripts/adm.xiaofupai_git.sh

端口9911 运行的程序的路径/data0/xiaofupai.com/artisan
端口127.0.0.1:9001 运行程序命令 supervisord -c /etc/supervisor/supervisord.conf
小福拍nginx配置路径/usr/local/webserver/nginx/conf/include/xiaofupai.com.conf
小福拍nginx日志路径/data0/logs/xiaofupai.com.log，改成xiaofupai_access日期.log
启动zabbix服务 service zabbix-agent start

服务开启路径:
rsync --daemon
#start nginx
/usr/local/webserver/nginx/sbin/nginx
#start php-fpm port:9900
/usr/local/webserver/php-5.6.30/sbin/php-fpm
===============================================================小福拍EDS服务器
数据库：
mysql -uyp_user -pyiping@2099 -hrm-2ze43205s3u96a3to.mysql.rds.aliyuncs.com 
数据库root密码: xiaofupai@@2017
=============================================阿里云redis账号密码
阿里云的redis密码   0HCxFP8xsHVG1eri                                                                  
连接地址（host）： r-2zedba628018e1d4.redis.rds.aliyuncs.com
================================================================================加速乐
DNS：
加速乐：https://www.yunaq.com/
账号ping99_inc@163.com
密码yiping@@014
==================================================================================================
内网机器
10.1.35.91   密码：www.uusee.com  svn的服务器  同步到71上的目录/var/lib/rsync/
10.1.35.92   密码：123456                  
10.1.35.94   密码：123456    zabbix内网 http://test.zabbix.com/php/zabbix.php?action=dashboard.view
10.1.35.95   密码：123456    web测试机 nginx + php                 
10.1.35.96   密码：123456    mysql 

10.1.35.94
mysql -uroot -p123456

艺评网日均pv 12000 UV 32000
小福拍日均pv 13000 UV 36000

=============================================================================================================打印机

打印机：运行\\10.1.59.210  之后查看 开始菜单，设备和打印机
打印扫描：Ctrl +r mstsc 10.1.59.210 用户ww 密码123456 桌面佳能扫描图标 
投影 win + p
公司台式电脑DNS：首选211.167.230.100 备用114.114.114.114


#!/bin/bash

# ""
echo "current directory is `pwd`"
echo "home directory is $HOME"
echo "file*.?"
echo "directory '$HOME'"

# ''
str='echo "directory is $HOME"'
echo $str
echo 'The time is `date`, the file is $HOME/abs.'

# ``
echo "current directory is `pwd`"#!/bin/bash
date
pwd
cd /home/heqiao/shell
history#!/bin/bash
# If no argumets, then listing the current directory.
# Otherwise, listing each subdirectory.
if test $# = 0
	then ls
else
	for i
	do 
		ls -l $i | grep '^d'
	done
fi

#!/bin/bash
person=("Zhang San" "Li Si" "Wang Wu")

for i in "${person[*]}"; do echo $i; done

echo "---------- inner parting line ----------"

for i in "${person[@]}"; do echo $i; done

echo "---------- parting line ----------"

person=("Zhang San" "Li Si" "Wang Wu")

for i in ${person2[*]}; do echo $i; done

echo "---------- inner parting line ----------"

for i in ${person2[@]}; do echo $i; done

echo "---------- parting line ----------"

person=("Zhang San" dark Li Si Wang Wu)

for i in "${person[*]}"; do echo $i; done

echo "---------- inner parting line ----------"

for i in "${person[@]}"; do echo $i; done
#!/bin/bash
echo "---------- set -x ----------"
set -x
a=1; b=9
echo "current shell flags $-"
echo $a $b
set +x
echo "current shell flgas $-"
echo "---------- set -v ----------"
set -v
A=2; B=10
echo "current shell flgas $-"
echo $A $B
set +v
echo "current shell flgas $-"
echo "---------- set -xv ----------"
set -xv
a=1; b=9
echo "current shell flags $-"
echo $a $b
set +xv
echo "current shell flgas $-"
echo "---------- set -a ----------"
set -a
A=2; B=10
echo "current shell flgas $-"
echo $A $B
set +a
echo "current shell flgas $-"
echo "---------- set -o ----------"
set -o
echo "---------- set -k ----------"
set -k
abs=123
#!/bin/bash

temp=/usr/tmp/$$
echo $temp # show temp file path
ls > $temp
cat $temp # show tmep file content
rm -f $temp


# $$ -> PID
# $? ->
# $# ->
# $! ->
# $- ->
# $* ->
# $@ ->
# $# ->#!/bin/bash
A=(this is an example of shell script)
echo ${A[0]} ${A[2]} ${A[3]} ${A[6]} 
echo $A[6]
echo $A
echo ${A[8]}

echo -n "Please enter TERM1(default is ansi) ->"
read terminal
TERM1=${terminal:-ansi}
echo "terminal type is $TERM1 now."
echo "terminal=$terminal"

echo -n "Please enter TERM1(default is ansi) ->"
read terminal
TERM1=${terminal:=ansi}
echo "terminal type is $TERM1 now."
echo "terminal=$terminal"

echo -n "Please enter TERM1(default is ansi) ->"
read terminal
TERM1=${terminal:+ansi}
echo "terminal type is $TERM1 now."
echo "terminal=$terminal"

echo -n "Please enter TERM1(default is ansi) ->"
read terminal
TERM1=${terminal:?ansi}
echo "terminal type is $TERM1 now."
echo "terminal=$terminal"

#!/bin/bash

set `pwd;ls;date`
echo $1 $2 $3 $4 $5 $6 $7 $8 $9 ${10} ${11} ${12} ${13}#!/bin/bash

echo $PWD

echo ${PWD#*/}
echo ${PWD##*/}

FILE=T.myfile.c

echo ${FILE%.*}
echo ${FILE%%.*}

echo ${#@}  # return the count of arguments

echo ${#*}  # return the count of arguments

array=(there is an array)

array[9]=tail

echo ${#array[0]} # return the length of array[0]

echo ${#array[*]} # return the actual length of array
echo ${#array[@]} # return the actual length of array

for i in ./*.sh ; do
    if [ -r "$i" ]; then
        if [ "${-#*B}" != "$-" ]; then
        	echo $-
            # . "$i" 
        else
            . "$i" >/dev/null 2>&1
        fi
    fi
done# !/bin/bash
i=0
while true
do
	echo "job test!" >> /dev/null 2>&1
	i+=1
	echo $i
	if [[ $((i+1)) == 2 ]];then
		break
	fi
done#/bin/bash
i=1
let j=i*6+2
echo $j

let "v=6|5"
echo $v

# arithmetic expression
((x=6|5))
echo $x

echo "((6|5))"
echo "$((6|5))"# !/bin/bash

trap 'rm -f $tmp;exit 0' 0 1 2 3 15

trap "" 2
# !/bin/bash

ls -a > /dev/null
date > /dev/null
hash
echo "=============================="
hash date
hash
echo "=============================="
hash -r ls
hash# !/bin/bash

a=Hello!
x=$a
eval echo $x
# !/bin/bash

getc()
{
	stty raw
	tmp=`dd bs=1 count=1 2>/dev/null`
	eval $1=$tmp
	stty cooked
}

press_any_key()
{
	echo -n "Strike any key to continue..."
	getc anychar
}

echo -n "Enter a character"
getc char
echo
echo "You entered $char"
press_any_key
echo# !/bin/bash

exec find .. -name "*.sh"# !/bin/bash

for i in {1..9..1};do if [[ $(($i%2)) == 0 ]];then continue;fi; echo $i;done#!/bin/bash

echo -n "key in a number(1-10):"
read a
if [ "$a" -lt 1 -o "$a" -gt 10 ]; then
	echo "Enter Number."
	exit 2
fi

if [ ! "$a" -lt 5 ]; then
	echo "It's great equal 5."
else
	echo "It's less than 5."
fi
echo "accept key in value."#!/bin/bash
until [ "$2" = "" ] # false
do
	cp $1 $2
	shift 2
done
if [ "$1" != "" ]
	then echo "bad argument!"
fi# !/bin/bash

while [ $1 ]
do
	if [ -f $1 ]
		then echo "display:$1:"
		cat $1
	else
		echo "$1 is not a file name."
	fi
	shift
done#!/bin/bash

echo -n "Enter two numbers:"
read x y
((z=x+y))
if [[ z -gt 10 ]]; then 
	echo "x+y>10"
fi
((x*=y))
((z%=5))
if [[ x -le 100 || z -ne 0 ]]; then
	echo "(x*y)<=100or(x+y)%5!=0"
fi
echo "Your current directory is `pwd`"
echo "Enter a filename ->\c" # echo "...\c" equals to "echo -n '...'"
read name
if [[ -r $name && -f $name ]]; then
	cat $name
elif [[ -d $name && -x $name ]]; then
		cd $name
		ls -l | wc -l
else
	echo "Bad file name."
fi#!/bin/bash

echo "Please chose either 1,2 or 3."
echo "[1] print a file."
echo "[2] delete a file."
echo "[3] quit."

read response
case $response in
	1) touch myfile;;
	2) rm myfile;;
	3) echo "Good bye."
esac


#!/bin/bash

case $1 in
	-b)	count=`grep ^b $2 | wc -l`
		echo "The number of lines in $2 that start with b is $count."
		;;
	-s)count=`grep ^s $2 | wc -l`
		echo "The number of lines in $2 that start with s is $count.";;
	*) echo "That option is not recogized.";;
esac
#!/bin/bash

echo "key in file name-->\c"
read filename
echo "key in date:"
while 
	read x
do 
	if [[ $x == ":q" ]];then break;fi
	echo $x>>$filename
done
cat $filename
#!/bin/bash

# brace expansion
for i in {1..9..3}; do echo $i;done# !/bin/bash
# 用于菜单设计

PS3="Choices?"
select choices in query add delete update list exit
do
	case "$choices" in
		query) echo "Call query routine."
			break;;
		add) echo "Call add routine."
			break;;
		delete) echo "Call delete routine."
			break;;
		update) echo "Call update routine."
			break;;
		list) echo "Call list routine."
			break;;
		exit) echo "Call exit routine."
			break;;
	esac
done
echo "Your choice is $choices"# !/bin/bash

# func is a function name.
# it echos the values of variables and arguments.
# "先定义,后使用" 
# shell脚本与函数间的参数传递可利用'位置参数'和'变量'直接传递。
func()
{
	echo "Let's begin now."
	echo $a $b $c
	echo $1 $2 $3
	echo "The end."
}
a="Working directory."
b="Today is `date`."
c=`pwd`
func Welcome You Byby
echo "Today is `date`"
#!/bin/bash

if test -f "$1"; then 
	echo "$1 is an ordinary file."
elif [[ -d "$1" ]]; then
	echo "$1 is a directory."
else
	echo "error."
fi


if test -f "$1"
	then pr $1
elif test -d "$1"
	then (cd $1; pr *)
else
	echo "$1 is neither a file nor a directory."
fi
# !/bin/bash

count=$#
if [[ $count == 0 ]];then
	exit 0
fi
cmd=echo
while true
do
	cmd="$cmd \$$count"
	count=`expr $count - 1`
	if [ $count -eq 0 ];then
		break
	fi
done
eval $cmd
#!/bin/bash

person=(i am a boy)
for i in ${person[*]};do echo $i; done #值表

for day in Monday Wednesday Friday Sunday
do
	echo $day
done

for file in for*.sh # 支持正则
do
	cat $file
done

for var in $*  # 位置参数
do
	echo $var
done

for var # 位置参数
do
	echo $var
done#!/bin/bash

choice=$1
case $choice in
	time | date) echo "The time is `date`.";;
	dir | path) echo "Current directory is `pwd`.";;
	*) echo "bad argument.";;
esac

#case  语句的值是整个结构中最后执行的那个命令的推出值。若没有执行任何命令,则退出值为0.# !/bin/bash

# display files under a given directory.
# $1-the name of the directory.
# $2 the name of the files.

dir=$1;shift 1
if [ -d $dir ];then
	cd $dir
	for name
	do
		if [ -f $name ];then
			cat $name
			echo "End of ${dir}/$name."
		else echo "Invalid file name:${dir}/$name."
		fi
	done
else echo "Bad directory name:$dir."
fi#!/bin/bash

case $1 in
	-u ) echo "Searching /`logname` for:$2"
	find /`logname` -name $2 -print;;
	-[cs]) echo "Searching for command:$2"
	find /bin /usr/bin /etc	 -name $2 -print;;
	*)echo "invalid first argument.";;
esac#!/bin/bash

count=3
for((i=1;i<=$count;i++))
do
	for((j=1;j<=i;j++))
	do
		echo -n "# "
	done
	echo ""
done
echo "The end."# !/bin/bash
# 用于菜单设计

PS3="Choices?"
select choices # in query add delete update list exit 
do
	case "$choices" in
		$1) echo "Call $1 routine."
			break;;
		$2) echo "Call $2 routine."
			break;;
		$3) echo "Call $3 routine."
			break;;
		$4) echo "Call $4 routine."
			break;;
		$5) echo "Call $5 routine."
			break;;
		$6) echo "Call $6 routine."
			break;;
	esac
done
echo "Your choice is $choices"


# REPLY 环境变量 用于接收用户输入的数值
# identfier(choices) 根据输入的数值替换对应的字符串。如果用户未输入则为null#!/bin/bash

#if user has logged in the system 
#then, copy a file to his or her file
#else, display an error information
echo "Type in the user name."
read user
if 
	grep $user /etc/passwd >/tmp/null
	who | grep $user
then echo "$user has logged in the system."
	cp /tmp/null tmp1
	rm /tmp/null
else
	echo "$user has not logged in the system."
fi

if test -f "$1"; then
	echo $1
fi

if [ -f $1 ]; then
	echo $1
fi
# conditional expression 测试文件的属性和进行字符串比较
if [[ -f $1 ]]; then
	echo $1
fi

myfile=if.sh;mydirectory=~

if [[ ! -d $1 ]]; then
	echo NOT
fi

if test -f $myfile -a -r $mydirectory; then 
	echo AND
fi

a=1;b=1
if [ $a -ge 0 -o "$b" -le 0 ]; then
	echo OR
fi

# error,不支持与,或操作 
# a=1;b=1
# if [[ $a -ge 0 -o "$b" -le 0 ]]; then
# 	echo OR
# fi

c=0
if [\( "$a" -gt 0 -o "$b" -lt 0 \) -a "$c" eq 0 ]; then
	echo PARENTHESIS
fi
#!/bin/bash

# trapping the script exit

trap "echo byebye" EXIT

count=1
while [ $count -le 5 ]
do
	echo "Loop #$count"
	sleep 3
	count=$[ $count + 1 ]
done
#!/bin/bash

# testing the at command

at -f 4.sh 22:10
#!/bin/bash

# removeing a set trap

trap "echo byebye" EXIT

count=1
while [ $count -le 5 ]
do
	echo "Loop #$count"
	sleep 3
	count=$[ $count + 1 ]
done
#移除捕捉
trap - EXIT
echo "I just removed the trap"
#!/bin/bash

# testing signal trapping

trap "echo 'Sorry! I have trapped Ctrl-C'" SIGINT SIGTERM

echo this is a test program

count=1

while [ $count -le 10 ]
do
	echo "Loop #$count"
	sleep 5
	count=$[ $count+1 ]
done
#!/bin/bash

for test in I don\'t know if "this'll" work
do 
	echo "word:$test"
done
#!/bin/bash

# looking for a possible value

if [ $USER = "tiandi" ]
then 
	echo "Welcome $USER"
	echo "Please enjoy your visit"
elif [ $USER = testing ]
then
	echo "Welcome $USER"
	echo "Please enjoy your visit"
elif [ $USER = barbar ]
then
	echo "Do not forget to logout when you're done"
else
	echo "Sorry, you are not allowed here"
fi

#!/bin/bash
#正确使用大于小于号

val1=baseball
val2=hocky

if [ $val1 \> $val2 ]
then 
	echo "$val1 is greater than $val2"
else
	echo "$val1 is less than $val2"
fi
#!/bin/bash

#using the case command

case $USER in
tiandi | barbar)
	echo "Welcome, $USER"
	echo "Pleas enjoy your visit";;
testing)
	echo "Special testing account";;
jessica)
	echo "Do not forget to logout when you are out";;
*)
	echo "Sorry, you are not allowed here";;
esac
#!/bin/bash
# another example of how not to use the for command

for test in Newada "New Hampshire"
do
	echo "Now going to $test"
done
#!/bin/bash

# basic for command
for test in Alabama Alaska Arizona
do
	echo The next state is $test
done
#!/bin/bash

# another example of how not to use the for command

for test in I don't know if this'll work
do 
	echo "word:$test"
done
#!/bin/bash
# using pattern matching

if [[ $USER == r* ]]
then 
	echo "Hello $USER"
else
	echo "Sorry, I do not know you"
fi
#!/bin/bash
# 大于小于号必须转义，否则shell会将它们当做重定向符号而把字符串值当做文件名处理
# 大于小于号顺序和sort命令所采用的有所不同
# mis-using string comparisons

val1=baseball
val2=hockey

if [ $val1 > $val2 ]
then
	echo "$val1 is greater than $val2"
else
	echo "$val1 is less than $val2"
fi
#!/bin/bash
var1=10
var2=5
if [ $var1 -gt 5 ]
then
	echo "The test value $var1 is greater than 5"
fi
if [ $var1 -eq $var2 ]
then
	echo "The values is equal"
else
	echo "The values are different"
fi


#!/bin/bash
# multiple variables

for (( a=1, b=10; a<=10; a++,b-- ))
do
	echo "$a - $b"
done
#!/bin/bash

#changing the IFS value

IFS.OLD=$IFS
IFS=$'\n'
for entry in `cat /etc/passwd`
do	
	echo "Values in $entry -"
	IFS=:
	for value in $entry
	do
		echo " $value"
	done
done
#!/bin/bash
# using a variable to hold the list

list="Alabama Alaska Arizona"
list=$list" Connecticut"

for state in $list
do
	echo "Have you ever visited $state"
done

#!/bin/bash
# look before you leap

if [ -d $HOME ]
then
	echo "Your home directory exists"
	cd $HOME
	ls -a
else
	echo "There is a problem with your HOME direcotry"
fi
#!/bin/bash

#testing a multicommand while loop

var1=10
while echo $var1
	[ $var1 -ge 0 ]
do	
	echo 'This is inside the loop'
	var1=$[ $var1 - 1 ]
done
#!/bin/bash
#continuing an outer loop

for (( a=1; a<=5; a++))
do
	echo "Iteration $a:"
	for (( b=1; b<3; b++ ))
	do
		if [ $a -gt 2 ] && [ $a -lt 4 ]
		then	
			continue 2
		fi
		var3=$[ $a * $b ]
		echo " The result of $a * $b is $var3"
	done
done
#!/bin/bash
# testing string length

#-n 判断长度是否非零
#-z 判断长度是否为零

val1=testing
val2=''

if [ -n "$val1" ]
then 
	echo "The string $val1 is not empty"
else
	echo "The string $val1 is empty"
fi

if [ -z "$val2" ]
then 
	echo "The string $val2 is empty"
else
	echo "The string $val2 is not empty"
fi
if [ -z "$val3" ]
then 
	echo "The string $val3 is empty"
else
	echo "The string $val3 is not empty"
fi

#!/bin/bash

# placing a for loop inside a while loop

var1=5

while [ $var1 -ge 0 ]
do
	echo "Outer loop: $var1"
	for (( var2=1; $var2 < 3; var2++))
	do
		var3=$[ $var1*$var2]
		echo "Inner loop: $var1 * $var2 = $var3"
	done
	var1=$[ $var1 - 1 ]
done
#!/bin/bash
#bash shell 仅能处理浮点数值,test命令无法处理val1变量中存储的浮点值

#testing floating point numbers 

val1=`echo "scale=4; 10 / 3" | bc`
echo "The test value is $val1"
if [ $val1 -gt 3 ]
then
	echo "The result is larger than 3"
fi
#!/bin/bash

# redirecting the for output to a file
for file in /home/tiandi/*
do
	if [ -d "$file" ]
	then
		echo "$file is a directory"
	else
		echo "$file is a file"
	fi
done > output.txt

# piping a loop to another command

for state in "North Dakota" Connecticut
do
	echo "$state is next place to go"
done | sort
echo "This completes our travels"
#!/bin/bash
#testing compound comparisons

if [ -d $HOME ] && [ -w $HOME/testing ]
then
	echo "The file exists and you can write to it"
else
	echo "I cannot write to it"
fi
#!/bin/bash
#testing the if statement
if date
then 
	echo "it worked"
fi
echo -e '\n'
if asd
then 
	echo "it not worked"
fi
echo 'We are outside the if statement'
#!/bin/bash
# using double parenthesis

var1=10

if (( $var1 ** 2 > 90))
then 
	(( var2 = $var1 ** 2))
	echo "The square of $var1 if $var2"
fi

#!/bin/bash

#using the continue command

for (( var1 = 1; var1 < 15; var1++ ))
do
	if [ $var1 -gt 5 ] && [ $var1 -lt 10 ]
	then
		continue
	fi
	echo "Iteration number:$var1"
done
#!/bin/bash

#using the until command

var1=100
until [ $var1 -eq 0 ]
do 
	echo $var1
	var1=$[ $var1-25 ]
done

var1=100
until echo $var1
	[ $var1 -eq 0 ]
do
	echo Inside the loop: $var1
	var1=$[ $var1 - 25 ]
done
	
	

#!/bin/bash
# break n，默认为1

for (( a=1; a<=3; a++ ))
do
	echo "Outer loop : $a"
	for (( b=1; b < 100; b++ ))
	do 
		if [ $b -gt 4 ]
		then
			break 2
		fi
		echo " Inner loop:$b"
	done
done

#!/bin/bash

# while command test
 var1=10
 while [ $var1 -gt 0 ]
 do 
	echo $var1
	var1=$[ $var1 - 1 ]
done

#!/bin/bash
#reading values from a file

file="state"

#更改字段分隔符，使其只能识别换行符
IFS=$'\n'

#处理长脚本是，在一个地方修改了该值，然后可能忘了修改过该值
#IFS.OLD=$IFS
#IFS=$'\n'
#具体代码
#IFS=$IFS.OLD

for state in `cat $file`
do
	echo "Visit beautiful $state"
done
#!/bin/bash
# checking if a directory or a file exists

if [ -e $HOME ]
then
	echo "OK on the directory.now to check the file"
	#checking if a file exists
	if [ -e $HOME/testing ]
	then
		#the file exists,append data to it
		echo "Appending date to existing file"
		date >> $HOME/testing
	else
		#the file is not exists,create a new file
		echo "Creating a new file"
		date > $HOME/testing
	fi
else
	echo 'Sorry. you do not have a $HOME directory'
fi
#!/bin/bash
#testing the else section
testuser=badtest
if grep $testuser /etc/passwd
then
	echo The files for user $testuser are:
	ls -a /home/.b*
else
	echo "The user name $testuser does not exist on this system"
fi
#!/bin/bash
#testing string equality

testuser=tiandi

if [ $USER = $testuser ]
then
	echo "Welcome $testuser"
fi
#!/bin/bash
#testing the C-style for loop

for (( i=1; i<=10; i++ ))
do
	echo "The next number is $i"
done
#!/bin/bash

#!/bin/bash
#iterate through all the files in a directory
for file in /home/tiandi/test/*
do
	if [ -d "$file" ]
	then
		echo "$file is a directory"
	elif [ -f "$file" ]
	then
		echo "$file is a file"
	fi
done
#!/bin/bash
#test命令中，大小字母会被当成小于小写字符，而在sort中，小写字母会先出现,test使用标准的ASCII排序，sort使用本地化语言设置进行排序，对于英语，本地化设置制定了排序顺序中小写字母出现在大写字母之前

var1=Testing
var2=testing

if [ $val1 \> $val2 ]
then
	echo '$val1 is greater than $val2'
else
	echo '$val1 is less than $val2'
fi
#!/bin/bash
#nesting for loops

for (( a=1; a<=3; a++ ))
do
	echo "Starting loop $a:"
	for (( b=1; b<=3; b++))
	do
		echo "Inside loog: $b:"
	done
done
#!/bin/bash
#testing multiple commands in the then section
testuser=tiandi
if grep $testuser /etc/passwd
then
	echo The bash files from user $testuser are:
	ls -a /home/$testuser/.b*
fi
#!/bin/bash

#验证邮件

gawk --re-interval '/^([a-zA-Z0-9_\-\.\+]+)@([a-zA-Z0-9_\-\+]+)\.([a-zA-Z]{2,5})/{print $0}'


#!/bin/bash

# count number of files in your PATH

mypath=`echo $PATH | sed 's/:/ /g'`
count=0
for directory in $mypath
do
	check=`ls $directory`
	echo $check
	for item in $check
	do
		count=$[ $count + 1 ]
	done
	echo "$directory - $count"
	count=0
done

#!/bin/bash

BEGIN {
print "The latest list of users and shells"
print "Userid	Shell"
print "------	-----"
FS=":"
}

{
print $1 "	" $7
}

END {
print "This concludes the listing"
}

#执行gawk命令截取/etc/passwd输出
#gawk -f gawk.sh /etc/passwd
#!/bin/bash

#向文件写入
sed '1,2w test1' test1

echo -e "next\n"

#从文件读取
sed '3r ./test' ./test

echo -e "next\n"

#从文件读取，并插入字符流
sed '/lazy/r test' test

#向数据流末尾添加数据
sed '$r test' test

echo -e "next1\n"

sed '/lazy/ {
r test
d
}' test
#!/bin/bash
#sed编辑器基础

#替换标记
sed 's/lazy/ht/' ./test

echo -e "next\n"

#可用的替换标记
#1.数字 表明新闻本将替换第几处模式匹配的地方
sed 's/lazy/ht/2' ./test
#2.g 表明新文件将会替换所有已有文本出现的地方
sed 's/lazy/ht/g' ./test
#3.p 表明原来行的内容要打印出来,替换后的
sed 's/lazy/ht/p' ./test
#4.w file 将替换的结果写到文件中
sed 's/lazy/ht/w test1' ./test

echo -e "next\n"

#替换字符
sed 's/\/bin\/bash/\/bin\/csh/' /etc/passwd
#或者
sed 's!/bin/bash!/bin/csh!' /etc/passwd

echo -e "next\n"

#使用地址
#1.数字方式的行寻址
sed '2s/lazy/cat/' ./test
sed '2,3s/lazy/cat/' ./test
sed '2,$s/lazy/cat/' ./test
#2.使用文本模式过滤器
sed '/tiandi/s/bash/csh/' /etc/passwd

echo -e "next\n"

#组合命令
sed '2{
s/fox/elephant/
s/dog/cat/
}' test
sed '2,${
s/fox/elephant/
s/dog/cat/
}' test

echo -e "next\n"

#删除行
sed '3d' ./test
sed '2,$d' ./test
sed '/number 1/d' ./test
#删除两个文本模式来删除某个范围的行，第一个开启删除功能，第二个关闭删除功能
sed '/1/,/3/d' ./test

echo -e "next\n"

#插入和附加文本
sed '3i\
This is an appended line.' ./test

sed '$a\
This is a new line of text.' ./test

#修改行
sed '3c\
This a changed line of text.' ./test
sed '/number 1/c\
This a changed line of text.' ./test
#替换两行文本
#sed '2,3c\
#This a changed line of text.' ./test

#转换命令，处理单个字符
#sed 'y/123/789/' ./test

echo -e "next\n"

#回顾打印
# p 打印文本行
# -n 禁止其他行，只打印包含匹配文本模式的行
sed -n '/number 3/p' ./test

#查看修改之前的行和修改之后的行
#sed -n '/3/{
#p
#s/line/test/p
#}' ./test

echo -e "next\n"

# 打印行号
sed '=' ./test

#打印指定的行和行号
#sed -n '/lazy/{
#=
#p
#}' ./test

#列出行 打印数据流中的文本和不可打印的ASCII字符，任何不可打印的字符都用它们的八进制值前加一个反斜线或标准C风格的命名法，比如用\t来代表制表符
sed -n 'l' ./test

#!/bin/bash
#download latest cURL file automatically

curl -s -o /home/tiandi/curl
http://curl.haxx.se/download/curl
#!/bin/bash

# add commas to numbers in factorial answer

factorial=1
counter=1
number=$1

while [ $counter -le $number ]
do
	factorial=$[ $factorial * $counter ]
	counter=$[ $counter + 1 ]
done

result=`echo $factorial | sed '{
:start
s/\(.*[0-9]\)\([0-9]\{3\}\)/\1,\2/
t start
}'`

echo "The result is $result"
#!/bin/bash

#多个空格只保留一个
#sed '/./,/^$/!d' test

#删除开头的空白行
#sed '/./,$!d' test

#删除结尾的空白行
sed '{
:start
/^\n*$/{$d; N; b start}
}' test

#删除html标签
#有问题
#s/<.*>//g

#sed 's/<[^>]*>//g' test1

#sed 's/<[^>]*>//g;/^$/d' test1
#!/bin/bash
# shell wrapper for sed editor script to reverse lines

sed -n '{
1!G
h
$p
}' $1
#!/bin/bash

#测试，如果测试成功，如果没有标签，sed会跳转到结尾，如果有标签，就跳转到标签，如果测试失败，则不会跳转
sed -n '{s/first/matched/; t; s/This is the/No match on/}' test
#!/bin/bash

#跳转到指定脚本
sed '{/first/b jump1; s/This is the/No jump on/; :jump1; s/This is the/Jump here on/}' test

#跳转到开头,删除每一个逗号，并保证删除最后一个逗号之后，跳出循环
sed -n '{:start; s/,//1p; /,/b start}' test
#!/bin/bash

#h将模式空间保存到保持空间
#H将模式空间附加到保持空间
#g将保持空间复制到模式空间
#G将保持空间保存到模式空间
#x交换模式空间和保持空间的内容

sed -n '/first/{
h
p
n
p
g
p
}' test
#!/bin/bash

sed '=' test | sed 'N; s/\n/ /'
!/bin/bash

#排除命令，使本来起作用的命令不起作用

sed -n '/heade/!p' test

#反转文本文件
sed -n '{1!G ; h; $p}' test
#!/bin/bash

#and符号，代表替换命令中的匹配模式，不管预定义模式是什么文本，都可以用and符号替换，and符号会提取匹配替换命令中指定替换模式中的所有字符串
echo "The cat sleeps in his hat" | sed 's/.at/"&"/g'

#替换单独的单词
echo "The System Administrator manual" | sed 's/\(System\) Administrator/\1 user/'

#在长数字中插入逗号
echo "1234567" | sed '{:start; s/\(.*[0-9]\)\([0-9]\{3\}\)/\1,\2/; t start}'

#!/bin/bash
#输出末尾10行数据

sed '{
:start
$q
N
11,$D
b start
}' /etc/passwd
#!/bin/bash
#正则表达式

gawk 'BEGIN{FS=","} 
/11/{print $1}
' test

#if-else语句
gawk '{
if($1 > 20)
{
	x=$1*20
	print x
}
else
{
	x=$1/2
	print x
}
}' test

#while 语句
gawk '{
total = 0
i=1
while(i<4)
{
	total+=$i
	i++
}
avg = total/3
print "Average:".avg
}' test


#do-while语句
gawk '{
total=0
i=1
do
{
	total += $i
	i++
}while(total < 150)
print total }' test


#for语句
gawk '{
total = 0
for (i=1; i<4; i++)
{
	total+=$i
}
avg = total/3
print "Average:".avg
}' test
#!/bin/bash

#使用函数库和gawk脚本

gawk -f gawk函数库 -f gawk脚本 test
#!/bin/bash
#使用内建变量

gawk 'BEGIN {testing="This is a test";  print testing; testing=45;  print testing}'

#处理数字值

gawk 'BEGIN{x=4; x= x*2+3; printx}'

#处理数组
gawk 'BEGIN{capital["Ill"] = "SprintField"; print capital["Ill"]}'

#遍历数组变量
gawk 'BEGIN{
var["a"] = 1
var["g"] = 2
var["m"] = 3
for( test in var)
{
	print "Index:",test,"- Value:",var[test]
}
}'

print "------"

#删除数组变量
gawk 'BEGIN{
var["a"] = 1
var["g"] = 2
for (test in var)
{
	print "Index:",test," - Value:", var[test]
}
delete var["g"]

print "----"

for (test in var)
{
	print "Index;",test," - Value:", var[test]
}
}'
#!/bin/bash
#gawk 自定义函数

gawk '
function myprint()
{
	printf "%-16s - %s\n", $1, $4
}
BEGIN{FS="\n"; RS=""}
{
	myprint()
}' test
#!/bin/bash
# testing $* and $@

count=1
for param in "$*"
do
	echo "\$* Parameter #$count = $param"
	count=$[ $count+1 ]
done

count=1
for param in "$@"
do
	echo "\$@ Paramenter #$count = $param"
	count=$[ $count+1 ]
done
#!/bin/bash

# handing lots of parameters

total=$[ ${10} * ${11} ]
echo The tenth parameter is ${10}
echo The eleventh parameter is ${11}
echo The total is $total
#!/bin/bash
# shift n 移动变量

count=1
while [ -n "$1" ]
do
	echo "Parameter #$count = $1"
	count=$[ $count+1 ]
	shift
done

echo -e "\n"

# demonstrating a multi-position shift
echo "The original parameters : $*"
shift 2
echo "Here's the new first parameter: $1"
#!/bin/bash

# using one command line parameter

factorial=1
for (( number = 1; number <= $1; number++))
do
	factorial=$[ $factorial * $number ]
done
echo The factor of $1 is $factorial
#!/bin/bash
# processing options and parameters with getopts

while getopts :ab:cd opt
do
	case "$opt" in
	a) echo "Found the -a option";;
	b) echo "Found the -b option,with value $OPTARG";;
	c) echo "Found the -c option";;
	d) echo "Found the -d option";;
	*) echo "Unknown option: $opt";;
	esac
done
shift $[ $OPTIND - 1 ]
count=1
for param in "$@"
do
	echo "Parameter $count: $param"
	count=$[ $count + 1 ]
done
#!/bin/bash

#extracting options and parameters

while [ -n "$1" ]
do
	case "$1" in 
	-a) echo "Found the -a option";;
	-b) echo "Found the -b option";;
	-c) echo "Found the -c option";;
	--) shift
		break;;
	*) echo "$1 is not an option";;
	esac
	shift
done

count=1
for param in $@
do
	echo "Parameter #$count: $param"
	count=$[ $count + 1 ]
done
#!/bin/bash
# reading data from a file

count=1
cat test | while read line
do
	echo "Line $count: $line"
	count=$[ $count + 1 ]
done
echo "Finished processing the file"

#!/bin/bash
#extracting command line options and values with getopt
# getopt command is not goot at dealing with space,we can use getopts
set -- `getopt -q ab:c "$@"`
while [ -n "$1" ]
do
	case "$1" in
	-a) echo "Found the -a option";;
	-b) param="$2"
		echo "Found the -b option,with parameter value $param"
		shift;;
	-c) echo "Found the -c option";;
	--) shift
		break;;
	*) echo "$1 is not an option";;
	esac
	shift
done

count=1
for param in "$@"
do
	echo "Parameter #$count: $param"
	count=$[ $count+1 ]
done
#!/bin/bash
# timing the data entry

if read -t 5 -p "Please enter your name:" name
then
	echo "Hello, $name, welcome to my script"
else
	#起到换行的作用
	echo
	#输入计数 -n1
	read -n1 -p "Do you want to continue [Y/N]?" answer
	case $answer in
	Y | y) echo
		   echo "Fine, continue on...";;
	N | n) echo
		   echo "OK，goodbye";;
	*) echo
	   echo "OK, wrong, goodbye"
	esac
	echo "Sorry, this is the end of the script"
fi

#!/bin/bash
# hiding input data from monitor

read -s -p "Please enter your password: " pass

#添加了-s选项之后，不会自动换行，不添加-s 会自动换行
echo 
echo "Is your password really $pass?"
#!/bin/bash
# simple demonstration of the getopts command

while getopts :ab:c opt
do
	case "$opt" in
	a) echo "Found the -a option";;
	b) echo "Found the -b option, with value $OPTARG";;
	c) echo "Found the -c option";;
	*) echo "Unknown option:$opt";;
	esac
done
#!/bin/bash

# extracting command line options and values

while [ -n "$1" ]
do 
	case "$1" in
	-a) echo "Found the -a option";;
	-b) param="$2"
		echo "Found the -b option, with parameter value $param"
		shift;;
	-c) echo "Found the -c option";;
	--) shift
		break;;
	*) echo "$1 is not an option";;
	esac
	shift
done

count=1
for param in "$@"
do
	echo "Parameter #$count : $param"
	count=$[ $count + 1 ]
done
#!/bin/bash
# testing the $0 parameter

echo The command entered is $0

#当传给$0变量的真实字符串是整个脚本的路径是，程序中就会使用整个路径，而不仅仅是程序名

name=`basename $0`
echo The command entered is $name
#!/bin/bash

# testing the reading command

echo -n "Enter your name:"
read name
echo "Hello $name, welcome to my program"

read -p "Please enter your age: " age
days=$[ $age * 365 ]
echo "That makes you over $days days old"

#指定多个变量，输入的每个数据值都会分配给表中的下一个变量，如果用完了，就全分配各最后一个变量
read -p "Please enter name:" first last
echo "Checking data for $last. $first..."

#如果不指定变量，read命令就会把它收到的任何数据都放到特殊环境变量REPLY中
read -p "Enter a number:"
factorial=1
for (( count=1; count<=$REPLY; count++))
do
	factorial=$[ $factorial * $count ]
done
echo "The factorial of $REPLY is $factorial"



#!/bin/bash
# getting the number of parameters

echo There were $# parameters supplied

#花括号里不能使用美元符号
params=$#

echo The last parameter is $params
echo The last parameter is ${!#}
#!/bin/bash
# extracting command line options as parameters

while [ -n "$1" ]
do
	case "$1" in
	-a) echo "Found the -a option";;
	-b) echo "Found the -b optins";;
	-c) echo "Found the -c optins";;
	*) echo "$1 is not a valid options";;
	esac
	shift
done
#!/bin/bash
# using select in the menu

function diskspace {
	clear 
	df -k
}

function whoseon {
	clear
	who
}

function menusage {
	clear
	cat /proc/meminfo
}

PS3="Enter option:"
select option in "Display disk space" "Display logged on users" "Display memory usage" "Exit program"
do
	case $option in
	"Exit program")
		break;;
	"Display disk space")
		diskspace;;
	"Display logged on users")
		whoseon;;
	"Display memory usage")
		menusage;;
	*)
		clear
		echo "Sorry, wrong selection";;
	esac
done
clear
#!/bin/bash

function menu {
	clear
	echo
	echo -e "\t\tSys Admin Menu\n"
	echo -e "\t1. Display disk space"
	echo -e "\t2. Display logged on users"
	echo -e "\t3. Display memory usage"
	echo -e "\t0. Exit program\n\n"
	echo -en "\t\tEnter option:"
	read -n 1 option
}

function diskspace {
	clear 
	df -k
}

function whoseon {
	clear
	who
}

function menusage {
	clear
	cat /proc/meminfo
}

while [ 1 ]
do
	menu
	case $option in
	0) 
		break;;
	1) 
		diskspace;;
	2)
		whoseon;;
	3)
		menusage;;
	*)
		clear
		echo "Sorry, wrong selection";;
	esac
	echo -en "\n\n\t\tHit any key to continue"
	read -n 1 line
done
clear
#!/bin/bash

dialog --title text --msgbox "This is a test" 10 20
#!/bin/bash

# using dialog to create a menu

temp=`mktemp -t test.XXXXXX`
temp2=`mktemp -t test2.XXXXXX`

function diskspace {
	df -k > $temp
	dialog --textbox $temp 20 60
}

function whoseon {
	who > $temp
	dialog --textbox $temp 20 50
}

function menusage {
	cat /proc/meminfo > $temp
	dialog --textbox $temp 20 50
}

while [ 1 ]
do
	dialog --menu "Sys Admin Menu" 20 30 10 1 "Display disk space" 2 "Display users" 3 "Display memory usage" 0 "Exit" 2> $temp2
	if [ $? -eq 1 ]
	then
		break
	fi

	selection=`cat $temp2`

	case $selection in
	1)
		diskspace;;
	2)
		whoseon;;
	3)
		menusage;;
	0)
		break;;
	*)
		dialog --msgbox "Sorry,invalid selection" 10 30
	esac
done
rm -f $temp 2> /dev/null
rm -f $temp2 2> /dev/null
#!/bin/bash
#
# Big_Users - find big disk space users in various directories
#############################################################
#Parameters for script
#
CHECK_DIRECTORIES="/var/log /home" #directories to check
#
######################### Main Script #######################
#
DATE=$(date '+%m%d%y')             #Date for report file
#
exec > disk_space_$DATE.rpt         #Make report file Std Output
#
echo "Top Ten Disk Space Usage"     #Report header for while report
echo "for $CHECK_DIRECTORIES Directories"
#
for DIR_CHECK in $CHECK_DIRECTORIES       #loop to du directories
do
	echo ""
	echo "The $DIR_CHECK Directory:"	#Title header for each directory
#
#	Creating a listing of top ten disk space users
	du -S $DIR_CHECK 2>/dev/null |
	sort -rn |
	sed '{11,$D; =}' |
	sed 'N; s/\n/ /' | 
	gawk '{printf $1 ":" "\t" $2 "\t" $3 "\n"}'
#
done								#End of for loop for du directories
#
#!/bin/bash
#
# Delete_User - Automates the 4 steps to remove an account
#
#################################################################
# 
# Define Functions
#
#################################################################
function get_answer {
#
	unset ANSWER
	ASK_COUNT=0
#
	while [ -z "$ANSWER" ] # while no answer is given, keep asking
	do
		ASK_COUNT=$[ $ASK_COUNT + 1 ]
#
		case $ASK_COUNT in			# If user gives no answer in time allowed
		2)
			echo 
			echo "Please answer the question."
			echo
		;;
		3)
			echo 
			echo "One last try... please answer the question."
			echo
		;;
		4)
			echo 
			echo "Since you refuse to answer the question..."
			echo "exiting program."
			echo
			#
			exit
		;;
		esac
#
		echo
#	
		if [ -n "$LINE2" ]
		then
			echo $LINE1			# Print 2 lines
			echo -e $LINE2" \c"
		else					# Print 1 line
			echo -e $LINE1" \c"
		fi
#
# Allow 60 seconds to answer before time-out
		read -t 60 ANSWER
	done
#
# Do a little variable clean-up
#
	unset LINE1
	unset LINE2
#
}    #end of get_answer function
#
#################################################################
function process_answer {
#
	case $ANSWER in
	y|Y|YES|yes|yEs|yeS|YEs|yES)
	# If user answers "yes".do nothing.
	;;
	*)
	# If user answers anything but "yes", exit script
		echo
		echo $EXIT_LINE1
		echo $EXIT_LINE2
		echo
		exit
	;;
	esac
	#
	# Do a little variable clean-up
	unset EXIT_LINE1
	unset EXIT_LINE2
#
} #End of process_answer function
#
################################################################
#
# End of Function Definitions
#
############### Main Script #################################
#
# Get name of User Account to check
#
echo "Step #1 - Determine User Account name to delete "
echo
LINE1="Please enter the username of the user"
LINE2="account you wish to delete from system:"
get_answer
USER_ACCOUNT=$ANSWER
#
# Double check with script user that this is the correct User Account
#
LINE1="Is $USER_ACCOUNT the user account"
LINE2="you wish to delete from the system?[ y/n ]:"
get_answer
#
############################################################
#
# Check that USER_ACCOUNT is really an account on the system
#
USER_ACCOUNT_RECORD=$(cat /etc/passwd | grep -w $USER_ACCOUNT)
#
if [ $? -eq 1 ]			# If the account is not found, exit script
then
	echo 
	echo "Account, $USER_ACCOUNT, not found."
	echo "Leaving the script..."
	echo
	exit
fi
#
echo
echo "I found this record:"
echo $USER_ACCOUNT_RECORD
echo
#
LINE1="Is this the correct User Account?[y/n]:"
get_answer
#
#
# Call process_answer function:
#	if user answers anything but "yes", exit script
#
EXIT_LINE1="Because the account, $USER_ACCOUNT, is not "
EXIT_LINE2="the one you wish to delete, we are leaving the script..."
process_anser
#
##############################################################
#
# Search for any running processes that belong to the User Account
#
echo
echo "Step #2 - Find process on system belonging to user account"
echo
echo "$USER_ACCOUNT has the following processes running: "
echo
#
ps -u $USER_ACCOUNT      #List the processes running
#
case $? in
1)			# No processes running for this User Account
	#
	echo "There are no processes for this account currently running."
	echo
;;
0)	# Processes running for this User Account.
	# Ask Script User if wants us to kill the processes.
	#
	unset ANSWER			# I think this line is not needed
	LINE1="Would you like me to kill the process(es)? [y/n]:"
	get_answer
	#
	case $ANSWER in
	y|Y|YES|yes|Yes|yEs|yeS|YEs|yES)    # if user answer "yes",
		#kill User Account processes
		#
		echo 
		#
		# Clean-up temp file upon signals
		#
		trap "rm $USER_ACCOUNT_Running_Process.rpt" SIGTERM SIGINT SIGQUIT
		#
		# List user processes running
		ps -u $USER_ACCOUNT > $USER_ACCOUNT_Running_Process.rpt
		#
		exec < $USER_ACCOUNT_Running_Process.rpt		# Make report Std Input
		#
		read USER_PROCESS_REC				# First record will be blank
		read USER_PROCESS_REC
		#
		while [ $? -eq 0 ]
		do
			# obtain PID
			USER_PID=$(echo $USER_PROCESS_REC | cut -d " " -f1 )
			kill -9 $USER_PID
			echo "Killed process $USER_PID"
			read USER_PROCESS_REC
		done
		#
		echo
		#
		rm $USER_ACCOUNT_Running_Process.rpt			# Remove temp report
	;;
	*) # If user answers anything but "yes", do not kill.
		echo
		echo "Will not kill the process(es)."
		echo
	;;
	esac
;;
esac
###################################################################################
#
# Create a report of all files owned by User Account
#
echo
echo "Step #3 - Find files on system belonging to user account"
echo
echo "Creating a report of all files owned by $USER_ACCOUNT."
echo
echo "It is recommended that you backup/archive these files."
echo "and then do one of two things:"
echo " 1) Delete the files"
echo " 2) Change the files' ownership to a current user account."
echo
echo "Please wait. This may take a while..."
#
REPORT_DATE=`date +%y%m%d`
REPORT_FILE=$USER_ACCOUNT"_Files_"$REPORT_DATE".rpt"
#
find / -user $USER_ACCOUNT > $REPORT_FILE 2>/dev/null
#
echo
echo "Report is complete."
echo "Name of report:	$REPORT_FILE"
echo "Location of report:     `pwd`"
echo
################################################################
#
# Remove User Account
echo
echo "Step #4 - Remove user account"
echo
#
LINE1="Do you wish to remove $USER_ACCOUNT's account from system? [y/n]:"
get_answer
#
# Cass process_answer function:
#	if user answers anything but "yes", exit script
#
EXIT_LINE1="Since you do not wish to remove the user account."
EXIT_LINE2="$USER_ACCOUNT at this time, exiting the script..."
process_answer
#
userdel $USER_ACCOUNT			# delete user account
echo
echo "User account, $USER_ACCOUNT, has been removed"
echo
#
#!/bin/bash
#
# Daily_Archive - Archive designated files & directories
######################################################
#
# Gather Current Date
#
DATE=`date +%y%m%d`
#
# Set Archive File Name
#
FILE=archive$DATE.tar.gz
#
# Set Configuration and Destination File
# 
CONFIG_FILE=/home/tiandi/archive/Files_To_Backup
DESTINATION=/home/tiandi/archive/$FILE
#
##################### Main Script ###############
#
# Check Backup Config file exists
#
if [ -f $CONFIG_FILE ]	#Make sure the config file still exists
then
	echo 
else
	echo 
	echo "$CONFIG_FILE does not exist."
	echo "Backup not completed due to missing Configuration file"
	echo 
	exit
fi
#
# Build the names of all the files to backup
#
FILE_NO=1				# Start on Line 1 of Config file.
exec < $CONFIG_FILE		# Redirect Std Input to name of Config File
#
read FILE_NAME			# Read 1st record
#
while [ $? -eq 0 ]
do
	# Make sure the file or directory exists.
	if [ -f $FILE_NAME -o -d $FILE_NAME ]
	then
		# If file exists, add its name to the lists
		FILE_LIST="$FILE_LIST $FILE_NAME"
	else
		# If file doesn't exist, issue warning
		echo 
		echo "$FILE_NAME, does not exist."
		echo "Obviously, I will not include it in this archive."
		echo "It is listed on line $FILE_NO of the config file."
		echo "Continuing to build archive file."
		echo
	fi
#
	FILE_NO=$[ $FILE_NO + 1 ]	# Increase Line/File number by one
	read FILE_NAME				# Read next record.
done
###########################################################
# 
# Backup the files and Compress Archive
#
tar -czf $DESTINATION $FILE_LIST 2> /dev/null
#
#!/bin/bash
#
# Hourly_Archive - Every hour create an archive
######################################################
#
# Set Configuration and Destination File
# 
CONFIG_FILE=/home/tiandi/archive/Files_To_Backup
#
# Gather Current Date,Month & Time
#
DAY=`date +%d`
MONTH=`date +%m`
TIME=`date +%k%M`
#
# Set Base Archive Destination Location
#
BASEDEST=/home/tiandi/archive/hourly
#
# Create Archive Destination Directory
mkdir -p $BASEDEST/$MONTH/$DAY
#
# Build Archive Destination File Name
DESTINATION=$BASEDEST/$MONTH/$DAY/archive$TIME.tar.gz
#
##################### Main Script ###############
#
# Check Backup Config file exists
#
if [ -f $CONFIG_FILE ]	#Make sure the config file still exists
then
	echo 
else
	echo 
	echo "$CONFIG_FILE does not exist."
	echo "Backup not completed due to missing Configuration file"
	echo 
	exit
fi
#
# Build the names of all the files to backup
#
FILE_NO=1				# Start on Line 1 of Config file.
exec < $CONFIG_FILE		# Redirect Std Input to name of Config File
#
read FILE_NAME			# Read 1st record
#
while [ $? -eq 0 ]
do
	# Make sure the file or directory exists.
	if [ -f $FILE_NAME -o -d $FILE_NAME ]
	then
		# If file exists, add its name to the lists
		FILE_LIST="$FILE_LIST $FILE_NAME"
	else
		# If file doesn't exist, issue warning
		echo 
		echo "$FILE_NAME, does not exist."
		echo "Obviously, I will not include it in this archive."
		echo "It is listed on line $FILE_NO of the config file."
		echo "Continuing to build archive file."
		echo
	fi
#
	FILE_NO=$[ $FILE_NO + 1 ]	# Increase Line/File number by one
	read FILE_NAME				# Read next record.
done
###########################################################
# 
# Backup the files and Compress Archive
#
tar -czf $DESTINATION $FILE_LIST 2> /dev/null
#
#!/bin/bash

#连接数据库
mysql=`which mysql
`
#发送单个命令
$mysql emwjs -u test -e "show databases;"

#发送多个命令
$mysql emwjs -u test <<EOF
show tables;
select * from em_admin;
EOF
#!/bin/bash

#redirecting SQL output to a variable

MYSQL=`which mysql`
dbs=`$MYSQL emwjs -u test -Bse 'show tables;'`
for db in $dbs
do
	echo $db
done


#使用xml输出数据
$MYSQL emwjs -u test -X -e 'select * from em_admin'

#使用table标签输出数据
$MYSQL emwjs -u test -H -e 'select * from em_admin'

#!/bin/bash
# send data to the the table in the MYSQL database

MYSQL=`which mysql`

if [ $# -ne 2 ]
then
	echo "Usage:mtest2 emplid lastname firstname salary"
else
	#脚本变量一定要用双引号，字符串变量使用单引号
	statement=" insert into em_admin values(NULL, '$1', $2)"
	$MYSQL emwjs -u test <<EOF
	$statement
EOF
	if [ $? -eq 0 ]
	then
		echo Data successfully added
	else
		echo Problem adding data
	fi
fi
#!/bin/bash

#using a library file the wrong way

. ./脚本库.sh

result=`addem 10 15`
echo "The result is $result"
#!/bin/bash

# demonstrating a bad use of variables

function func1 {
	temp=$[ $value + 5 ]
	result=$[ $temp * 2 ]
}

temlp=4
value=6

func1
echo "The result is $result"

if [ $temp -gt $value ]
then
	echo "Temp is larger"
else
	echo "temp is smaller"
fi
#!/bin/bash

function factorial {
	if [ $1 -eq 1 ]
	then
		echo 1
	else
		local temp=$[ $1 -1 ]
		local result=`factorial $temp`
		echo $[ $result * $1 ]
	fi
}

read -p "Please input a value: " value
result=`factorial $value`
echo "The factorial of $value is: $result"
#!/bin/bash

# myscript functions

function addem {
	echo $[ $1 + $2 ]
}

function multem {
	echo $[ $1 * $2 ]
}

function divem {
	if [ $2 -ne 0]
	then
		echo $[ $1/$2 ]
	else
		echo -1
	fi
}
#!/bin/bash
# using the echo to return a value

function db1 {
	read -p "Enter a value:" value
	echo $[ $value*2 ]
}

result=`db1`
echo "The new value is $result"

#!/bin/bash

# using a function in script

function func1 {
	echo "This is an example of a function"
}

count=1
while [ $count -le 5 ]
do
	func1
	count=$[ $count+1 ]
done
echo "This is the end of the loop"
func1
echo "Now this is the end of the script"
#!/bin/bash

#adding values in the array

function addarray {
	local sum=0
	local newarray
	newarray=(`echo "$@"`)
	for value in ${newarray[*]}
	do
		sum=$[ $sum + $value ]
	done
	echo $sum
}

myarray=(1 2 3 4 5)
echo "The original array is : ${myarray[*]}"
arg1=`echo ${myarray[*]}`
result=`addarray $arg1`
echo "The result is $result"
#!/bin/bash

# returning an array value

function arraydblr {
	local origarry
	local newarray
	local elements
	local i
	origarry=(`echo "$@"`)
	newarray=(`echo "$@"`)
	elements=$[ $# - 1 ]
	for (( i=0; i<=$elements; i++ ))
	{
		newarray[$i]=$[ ${origarry[$i]} * 2 ]
	}

	echo ${newarray[*]}
}

myarray=(1 2 3 4 5)
echo "The original array is : ${myarray[*]}"
arg1=`echo ${myarray[*]}`
result=(`arraydblr $arg1`)
echo "The new array is : ${result[*]}"
#!/bin/bash

# passing parameters to a function

function addem {
	if [ $# -eq 0 ] || [ $# -gt 2 ]
	then 
		echo -1
	elif [ $# -eq 1 ]
	then 
		echo $[ $1 + $1 ]
	else
		echo $[ $1 + $2 ]
	fi
}

echo -n "Adding 10 and 15:"
value=`addem 10 15`
echo $value

echo -n "Let's try adding just one number: "
value=`addem 10`
echo $value

echo -n "Now trying adding no number: "
value=`addem`
echo $value

echo -n "Finally, try adding three or more numbers: "
value=`addem 10 15 20`
echo $value

#!/bin/bash

# using the return command in a function

function db1 {
	read -p "Enter a value:" value
	echo "doubling the value"
	return $[ $value * 2 ]
}

db1
echo "The new value is $?"
#!/bin/bash

# trying to pass an array variable

function testit {
	echo "The parameters are : $@"
	
	#函数只会读取数组变量的第一个值
	thisarray=$1
	echo "The received array is ${thisarray[*]}"

	local newarray
	newarray=(`echo "$@"`)
	echo "The new array value is : ${newarray[*]}"
}

myarray=(1 2 3 4 5)
echo "The original array is : ${myarray[*]}"

#将数组变量当成一个函数参数，函数只会去函数变量第一个值
#testit $myarray

testit ${myarray[*]}
#!/bin/bash

# using a global variable to pass a value

function db1 {
	# $1和$2 不能从命令行中传递，只能调用函数时，手动传递
	echo $[ $1 * $2 ]
}

if [ $# -eq 2 ]
then
	value=`db1 $1 $2`
	echo "The result is $value"
else
	echo "Usage: badtest1 a b"
fi
#!/bin/bash

# demonstrating the local keyword

function func1 {
	local temp=$[ $value +5 ]
	result=$[ $temp * 2 ]
}

temp=4
value=6

func1

echo "The result is $result"
if [ $temp -gt $value ]
then
	echo "temp is larger"
else
	echo "temp is smaller"
fi
#!/bin/bash

# testing the exit status of a function

func1() {
	echo "Trying to display a non-existent file"
	ls -l badfile
}

#由于最后一条命令未执行成功，返回的状态码非0
echo "testing the function"
func1
echo "The exit status is : $?"

func2() {
	ls -l badfile
	echo "Another test to display a non-existent file"
}

#由于最后一条命令echo执行成功，返回的状态码为0
echo "Another test"
func2
echo "The exit status is : $?"





























#!/bin/bash

# using a global variable to pass a value

function db1 {
	value=$[ $value * 2 ]
}

read -p "Enter a value: " value
db1
echo "The new value is : $value"

#!/bin/bash
#display user information from system

echo "User info fro userId:$USER"
echo UID:$UID
echo HOME:$HOME
#换行
echo -e '\n'      
echo 'The cost of the item is \$15'

#!/bin/bash
#copy the /usr/bin directory listing to a log file

today=`date +%y%m%d`
ls /usr/bin -al > log.$today
#!/bin/bash
#using the backtick character

testing=`date`
echo "The date and time are:$testing"
#!/bin/bash
#退出状态码，最大为255，超过则进行模运算
#testing the exit status
var1=10
var2=20
var3=$[ $var1 + $var2]
echo The answer is $var3
exit 5

#!/bin/bash
#testing variables

days=10
guest="Katie"
echo "$guest logged in $days days age"
guest="Katie2"
days=5
echo "$guest logged in $days days age"
#!/bin/bash
#This script displays the date and who's logged on

#如果想在同一行显示
#echo -n -e 'The time is:\n\n'
echo The time is:
date
echo The one who has been logged is:
who



#!/bin/bash
var1=100
var2=45
var3=`echo "scale=4; $var1 / $var2" | bc`
echo The answer for this is $var3

#!/bin/bash

var1=10.45
var2=43.67
var3=33.2
var4=71

var5=`bc <<EOF
scale=4
a1 = $var1 * $var2
b1 = $var3 * $var4
a1 + b1
EOF
`
echo The final answer for this mess is $var5
#!/bin/bash

var1=10
var2=50
var3=45
var4=$[$var1 * ($var2 - $var3)]
echo 'The final result is '$var4
#!/bin/bash
#An example of using the expr command

var1=10
var2=20
var3=`expr $var2 / $var1`
echo "The result is $var3"

#!/bin/bash

# creating and using a temp file

tempfile=`mktemp test.XXXXXX`

exec 3>$tempfile

echo "This script writes to temp file $tempfile"

echo "This is the first line" >&3
echo "This is the second line" >&3
echo "This is the last line" >&3

exec 3>&-

echo "Done creating temp file. The contents are:"

cat $tempfile

rm -f $tempfile 2>/dev/null

#!/bin/bash
# testing inpiut/output file descriptor

exec 3<> test
read line <&3
echo "Read: $line"
echo "This is the test line" >&3
#!/bin/bash

#storing STDOUT, then coming back to it

exec 3>&1
exec 1>test

echo "This should store in output file"
echo "along with this line"

exec 1>&3

echo "Now things should be back to normal"
#!/bin/bash
# redirecting input file descriptors

exec 3>&1
echo "This is the 3 file descriptor" >&3

exec 6>&0
exec 0<test

count=1
while read line
do
	echo "Line #$count: $line"
	count=$[ $count+1 ]
done
exec 0<&6
read -p "Are you done now?" answer
case $answer in
Y|y) echo "Goodbye";;
N|n) echo "Sorry, this is the end";;
esac

#!/bin/bash

# using an alternative file descriptor

exec 3>test

echo "This should display on the monitor"
echo "and this should be stored in the file" >&3
echo "Then this should be back on the monitor"
#!/bin/bash
# testing closing file descriptors

exec 3>test
echo "This is a test line of data" >&3

# closing file descriptor
exec 3>&-

echo "This won't work" >&3

cat test

#覆盖前一个test文件
exec 3>test
echo "This'll be bad" >&3
#!/bin/bash

# using the tee command for logging
#将输入一边发送到STDOUT，一边发送到日志文件
tempfile=test
echo "This is the start of the test" | tee $tempfile
echo "This is the second line of the test" | tee -a $tempfile
echo "This is the end line of the test" | tee -a $tempfile


#!/bin/bash

# creating a temp file in /tmp

tempfile=`mktemp -t tmp.XXXXXX`

echo "This is a test file" > $tempfile
echo "This is the second line of the test" >> $tempfile

echo ”The temp is locate at : $tempfile“
cat $tempfile
rm -f $tempfile
#!/bin/bash

# testing lsof with file descriptors

exec 3>test
exec 6>test
exec 7<test

lsof -a -p $$ -d0,1,2,3,6,7





#!/bin/bash

# using a temporary directory

tempdir=`mktemp -d dir.XXXXXX`
cd $tempdir

tempfile1=`mktemp temp.XXXXXX`
tempfile2=`mktemp temp.XXXXXX`
exec 7> $tempfile1
exec 8> $tempfile2

echo "Sending data to directory $tempdir"
echo "This is a test line of data for $tempfile1" >&7
echo "This is a test line of data for $tempfile2" >&8

#!/bin/bash
# redirecting the inpiut

# 从test中读取数据，而不是从STDIN中读取数据
exec 0< test
count=1
while read line
do
	echo "Line #$count : $line "
	count=$[ $count +1 ]
done

#!/bin/bash
# testing STDERR messages
# redirecting all to a file

# 脚本执行期间，用exec命令告诉shell重定向某个特定文件描述符
exec 2>test

ls badtest
echo "This is test of redirecting all output"
echo "from a script to another file"

exec 1>test1
echo "This is the end of the script"
echo "but this should go to the testerror file" >&2
#!/bin/bash

# 清除日志

cat /dev/null > [Logname]
#!/bin/bash
# testing STDERR messages

echo "This is an error " >&2
echo "This is another error"
echo "This is also an error" >&2
#!/bin/bash

#查看内存使用百分比
free | sed -n '2p' | gawk 'x = int(( $3 / $2 ) * 100) {print x}' | sed 's/$/%/'
#!/bin/bash
#
# Report_Stats - Generates Rpt from Captured Perf Stats
#
############################################################
# 
# Set Script Variables
#
REPORT_FILE=/home/tiandi/Documents/capstats.csv
TEMP_FILE=/home/tiandi/Documents/capstats.html
#
DATE=`date +%m/%d/%y`
#
MAIL=`which mutt`
MAIL_TO=tiandi
#
###############################################################3
#
# Create Report Header
#
echo "<html><body><h2>Report for $DATE</h2>" > $TEMP_FILE
echo "<table border=\"1\">" >> $TEMP_FILE
echo "<tr><td>Date</td><td>Time</td><td>Users</td>" >> $TEMP_FILE
echo "<td>Load</td><td>Free Memory</td><td>%CPU Idle</td></tr>" >> $TEMP_FILE
#
###############################################################
#
# Place Performance Stats in Report
#
cat $REPORT_FILE | gawk -F, '{
printf "<tr><td>%s</td><td>%s</td><td>%s</td>", $1, $2, $3;
printf "<td>%s</td><td>%s</td><td>%s</td>\n</tr>\n", $4, $5, $6;
}' >> $TEMP_FILE
#
echo "</table></body></html>" >> $TEMP_FILE
#
################################################################
#
# Mail Performance Report & Clean up
#
#$MAIL -a $TEMP_FILE -s "Performance Report $DATE"
#-- $MAIL_TO < /dev/null
#
#rm -r $TEMP_FILE
#
#!/bin/bash
#
uptime | sed 's/user.*$//' | gawk '{print $NF}'
#!/bin/bash
#
# Capture_Stats - Gather System Performance Statistics
#
#########################################################
#
# Set Script Variables
#
REPORT_FILE=/home/tiandi/Documents/capstats.csv
DATE=`date +%m/%d/%y`
TIME=`date +%k:%M:%S`
#
############################################################
#
USERS=`uptime | sed 's/user.*$//' | gawk '{print $NF}'`
LOAD=`uptime | gawk '{print $NF}'`
#
FREE=`vmstat 1 2 | sed -n '/[0-9]/p' | sed -n '2p' | gawk '{print $4}'`
IDLE=`vmstat 1 2 | sed -n '/[0-9]/p' | sed -n '2p' | gawk '{print $15}'`
#
##########################################
#
echo "$DATE,$TIME,$USERS,$LOAD,$FREE,$IDLE" >> $REPORT_FILE
#
#!/bin/bash
#
# Record_Problem - records system problems in database
#
###########################################################
#
# Determine mysql location & put into variable
#
MYSQL=`which mysql`" Problem_Trek -u root"
#
###########################################################
#
# Create Record Id & Report_Date
#
#ID_NUMBER=`date +%y%m%d%H%M`
#
REPORT_DATE=`date +%y%m%d`
#
############################################################
#
# Acquire information to put into table
#
echo
echo -e "Birefly describe the problem & its symptoms: \c"
#
read ANSWER
PROB_SYMPTOMS=$ANSWER
#
# Set Fixed Date & Problem Solution to null for now
#
FIXED_DATE=0
PROB_SOLUTIONS=""
#
#############################################################
#
# Insert acquired information into table
#
echo 
echo "Problem recorded as follows:"
echo
id=$($MYSQL -e "INSERT INTO problem_logger VALUES (null,$REPORT_DATE,$FIXED_DATE,'$PROB_SYMPTOMS','$PROB_SOLUTIONS');SELECT LAST_INSERT_ID() id")
id=`echo $id | gawk '{print $2}'`
$MYSQL <<EOF
SELECT * FROM problem_logger where id_number=$id\G
EOF
#
#############################################################
#
# Check if want to enter a solution now
#
echo 
echo -e "Do you have a solution yet?(y/n) \c"
read ANSWER
#
case $ANSWER in
y|Y|YES|yes|Yes|yEs|yeS|YEs|yES)
	./Update_Problem.sh $id
#
;;
*)
# if answer is anything but yes, just exit script
;;
esac
#
############################################################
#!/bin/bash
#
# Update_Problem - updates problem record in database
#
############################################################
#
# Determine sql location & set variable
#
MYSQL=`which mysql`" Problem_Trek -u root"
#
##############################################################
#
# Obtain Record Id
#
if [ $# -eq 0 ]			# Check if id number was passed
then			# If not passed ask for it
#
# Check if any unfinished records exist.
	RECORDS_EXIST=`$MYSQL -Bse 'SELECT id_number FROM problem_logger where fixed_date="0000-00-00" OR prob_solutions=""'`
#
	if [ "$RECORDS_EXIST" != "" ]
	then	
		echo
		echo "The following record(s) need updating..."
		$MYSQL <<EOF
		SELECT id_number, report_date, prob_symptoms FROM problem_logger WHERE fixed_date="0000-00-00" OR prob_solutions=""\G
EOF
	fi
#
	echo
	echo "What is the ID number for the"
	echo -e "problem you want to update?: \c"
	read ANSWER
	ID_NUMBER=$ANSWER
else
	ID_NUMBER=$1
fi
#
##########################################################
#
# Obtain Solution (aka Fixed) Date
#
echo
echo -e "Was Problem solved today? (y/n) \c"
read ANSWER
#
case $ANSWER in
y|Y|YES|yes|Yes|yEs|yeS|YEs|yES)
#
	FIXED_DATE=`date +%Y%m%d`
;;
*)
# if answer is anything but "yes", ask for date
	echo
	echo -e "What was the date of resolution? [YYYYMMDD] \c"
	read ANSWER
#
	FIXED_DATE=$ANSWER
;;
esac
#
########################################################
#
# Acquire problem solution
#
echo
echo -e "Birefly describe the problem solution: \c"
#
read ANSWER
PROB_SOLUTIONS=$ANSWER
#
########################################################
# 
# Update problem record
#
echo
echo "Problem record updated as follows:"
echo
$MYSQL <<EOF
UPDATE problem_logger SET prob_solutions="$PROB_SOLUTIONS", fixed_date=$FIXED_DATE where id_number=$ID_NUMBER;
SELECT * FROM problem_logger WHERE id_number=$ID_NUMBER\G
EOF
#!/bin/bash
#
# Find_Problem - finds problem records using keywords
#
###########################################################
#
# Determine sql location & set variable
#
MYSQL=`which mysql`" Problem_Trek -u root"
#
##########################################################
#
# Obtain Keyword(s)
#
if [ -n "$1" ]      # Check if a keyword was passed
then				# Grab all the passed keywords
#
	KEYWORDS=$@		# Grab all the params as separate words, same string
#
else				# Keyword(s) not passed, Ask for them
	echo 
	echo "What keywords would you like to search for?"
	echo -e "Please separate words by a space: \c"
	read ANSWER
	KEYWORDS=$ANSWER
fi
#
#######################################################
#
# Find problem record
#
echo
echo "The following was found using keywords: $KEYWORDS"
echo
#
KEYWORDS=`echo $KEYWORDS | sed 's/ /|/g'`
#
$MYSQL <<EOF
SELECT * FROM problem_logger WHERE prob_symptoms REGEXP '($KEYWORDS)' OR prob_solutions REGEXP '($KEYWORDS)'\G
EOF
#
#!/bin/bash

#查看磁盘实用百分比
df -h /dev/sda1 | sed -n '/% \//p' | gawk '{ print $5 }'
#!/bin/bash

#查看僵尸进程
ps -al | gawk '{print $2,$4}' | grep Z
#!/bin/bash
#
# Snapshot_Stats - produces a report for system stats
#
##############################################
#
# Set Script Variables
#
DATE=`date +%m%d%y`
DISKS_TO_MONITOR="/dev/sda1"
MAIL=`which mutt`
MAIL_TO=tiandi
REPORT=/home/tiandi/Documents/Snapshot_Stats_$DATE.rpt
#
####################################################
#
# Create Report File
#
exec 3>&1             # Save file descriptor
#
exec 1> $REPORT       # direct output to rpt file
#
###################################################
#
echo
echo -e "\t\tDaily System Report"
echo
#
###################################################
# Date Stamp the Report
#
echo -e "Today is" `date +%m%d%y`
echo
#
##################################################
#
#1) Gather System Uptime Statistics
#
echo -e "System has been \c"
uptime | sed -n '/,/s/,/ /gp' | gawk '{if($4 == "days" || $4 == "day") {print $2,$3,$4,$5} else {print $2,$3}}'
#
#################################################
#
#2) Gather Disk Usage Statistics
#
echo
for DISK in $DISK_TO_MONITOR                 # loop to check disk space
do
	echo -e "$DISK usage: \c"
	df -h $DISK | sed -n '/% \//p' | gawk '{ print $5 }'
done
#
##################################################################
#
#3) Gather Memory Usage Statstics
#
echo
echo -e "Memory Usage: \c"
#
free | sed -n '2p' | gawk 'x = int(($3 / $2) * 100) {print x}' | sed 's/$/%/'
#
###############################################################
#
#4) Gather Number of Zombie Processes
#
echo
ZOMBIE_CHECK=`ps -al | gawk '{print $2,$4}' | grep Z`
#
if [ "$ZOMBIE_CHECK" = "" ]
then
	echo "No Zombie Process on System at this Time"
else
	echo "Current System Zombie Processes"
	ps -al | gawk '{print $2,$4}' | grep Z
fi
echo
#
#####################################################################
#
# Restore File Descriptor & Mail Report
#
exec 1>&3				# Restore output to STDOUT
#
#$MAIL -a $REPORT -s "System Sstatistics Report for $DATE"
#-- $MAIL_TO < /dev/null
#
###############################################################
#
# Clean up
#
#rm -f $REPORT
#
user www www;
worker_processes  auto;
worker_cpu_affinity auto;

pid  /usr/local/webserver/nginx/nginx.pid;

worker_rlimit_nofile 65535;
events {
    worker_connections  65535;
    use epoll;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  60;
    charset  utf-8;
    server_tokens off;

    gzip  on;
    gzip_min_length  1k;
    gzip_buffers     4 16k;
    gzip_http_version 1.1;
    gzip_proxied        any;
    gzip_comp_level 9;  
    gzip_types       text/plain application/x-javascript  text/javascript text/css application/xml image/gif image
/jpg image/png;      
    gzip_vary on;

    server {
        listen       80;
        server_name  www.huolawan.com huolawan.com partner.huolawan.com g.uusee.com game.uusee.com static.uusee.com gg.huolawan.com ggg.huolawan.com wy.uusee.com zl.uusee.com 36ji.uusee.com down.wy.uusee.com app.huolawan.com mm.huolawan.com static.huolawan.com static2.huolawan.com m.huolawan.com W945010477.huolawan.com W.huolawan.com game.hexun.com www2.huolawan.com ccc.xiaofupai.com aaa.huolawan.com;
        location / {
          proxy_pass http://172.19.196.192:8080/;
          proxy_set_header Host $host;
          proxy_set_header X-Forwarded-For $remote_addr;
        }
          access_log off;
    }
   
    server {
        listen       80;
        server_name  pay.huolawan.com static.pay.huolawan.com;
        location / {
          proxy_pass http://172.19.196.191:8080/;
          proxy_set_header Host $host;
          proxy_set_header X-Forwarded-For $remote_addr;
        }
          access_log off;
    }
}
#!/bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

# Check if user is root
if [ $(id -u) != "0" ]; then
    echo "Error: You must be root to run this script!"
    exit 1
fi

echo "+-------------------------------------------------------------------+"
echo "|   Remove open_basedir restrication for LNMP, Written by Licess    |"
echo "+-------------------------------------------------------------------+"
echo "|       A tool to remove open_basedir restrication for LNMP         |"
echo "+-------------------------------------------------------------------+"
echo "|       For more information please visit https://lnmp.org          |"
echo "+-------------------------------------------------------------------+"
echo "|          Usage: ./remove_open_basedir_restrication.sh             |"
echo "+-------------------------------------------------------------------+"

website_root=''

while :;do
    read -p "Enter website root directory: " website_root
    if [ -d "${website_root}" ]; then
        if [ -f ${website_root}/.user.ini ];then
            chattr -i ${website_root}/.user.ini
            rm -f ${website_root}.user.ini
            sed -i 's/^fastcgi_param PHP_ADMIN_VALUE/#fastcgi_param PHP_ADMIN_VALUE/g' /usr/local/nginx/conf/fastcgi.conf
            /etc/init.d/php-fpm restart
            /etc/init.d/nginx reload
            echo "done."
        else
            echo "${website_root}/.user.ini is not exist!"
        fi
        break
    else
        echo "${website_root} is not directory or not exist!"
    fi
done#!/bin/bash
#function:cut nginx log files for lnmp v0.5 and v0.6
#author: https://lnmp.org

#set the path to nginx log files
log_files_path="/home/wwwlogs/"
log_files_dir=${log_files_path}$(date -d "yesterday" +"%Y")/$(date -d "yesterday" +"%m")
#set nginx log files you want to cut
log_files_name=(access vpser licess)
#set the path to nginx.
nginx_sbin="/usr/local/nginx/sbin/nginx"
#Set how long you want to save
save_days=30

############################################
#Please do not modify the following script #
############################################
mkdir -p $log_files_dir

log_files_num=${#log_files_name[@]}

#cut nginx log files
for((i=0;i<$log_files_num;i++));do
mv ${log_files_path}${log_files_name[i]}.log ${log_files_dir}/${log_files_name[i]}_$(date -d "yesterday" +"%Y%m%d").log
done

#delete 30 days ago nginx log files
find $log_files_path -mtime +$save_days -exec rm -rf {} \; 

$nginx_sbin -s reload#!/bin/bash
# Author:licess
# Website:https://www.vpser.net & https://lnmp.org

HOST=$1
if [ -z "${HOST}" ]; then
    echo "Usage:$0 IP"
    exit 1
fi

echo "Remove IP:${HOST} from denyhosts..."
/etc/init.d/denyhosts stop
echo '
/etc/hosts.deny
/var/lib/denyhosts/hosts
/var/lib/denyhosts/hosts-restricted
/var/lib/denyhosts/hosts-root
/var/lib/denyhosts/hosts-valid
/var/lib/denyhosts/users-hosts
' | grep -v "^$" | xargs sed -i "/${HOST}/d"

#iptables -D INPUT -s ${HOST} -p tcp -m tcp --dport 22 -j DROP
echo " done"
/etc/init.d/denyhosts start#!/bin/bash

#Funciont: Backup website and mysql database
#Author: licess
#Website: https://lnmp.org

#IMPORTANT!!!Please Setting the following Values!

Backup_Home="/home/backup/"
MySQL_Dump="/usr/local/mysql/bin/mysqldump"
######~Set Directory you want to backup~######
Backup_Dir=("/home/wwwroot/vpser.net" "/home/wwwroot/lnmp.org")

######~Set MySQL Database you want to backup~######
Backup_Database=("lnmp" "vpser")

######~Set MySQL UserName and password~######
MYSQL_UserName='root'
MYSQL_PassWord='yourrootpassword'

######~Enable Ftp Backup~######
Enable_FTP=0
# 0: enable; 1: disable
######~Set FTP Information~######
FTP_Host='1.2.3.4'
FTP_Username='vpser.net'
FTP_Password='yourftppassword'
FTP_Dir="backup"

#Values Setting END!

TodayWWWBackup=www-*-$(date +"%Y%m%d").tar.gz
TodayDBBackup=db-*-$(date +"%Y%m%d").sql
OldWWWBackup=www-*-$(date -d -3day +"%Y%m%d").tar.gz
OldDBBackup=db-*-$(date -d -3day +"%Y%m%d").sql

Backup_Dir()
{
    Backup_Path=$1
    Dir_Name=`echo ${Backup_Path##*/}`
    Pre_Dir=`echo ${Backup_Path}|sed 's/'${Dir_Name}'//g'`
    tar zcf ${Backup_Home}www-${Dir_Name}-$(date +"%Y%m%d").tar.gz -C ${Pre_Dir} ${Dir_Name}
}
Backup_Sql()
{
    ${MySQL_Dump} -u$MYSQL_UserName -p$MYSQL_PassWord $1 > ${Backup_Home}db-$1-$(date +"%Y%m%d").sql
}

if [ ! -f ${MySQL_Dump} ]; then  
    echo "mysqldump command not found.please check your setting."
    exit 1
fi

if [ ! -d ${Backup_Home} ]; then  
    mkdir -p ${Backup_Home}
fi

if [ ${Enable_FTP} = 0 ]; then
    type lftp >/dev/null 2>&1 || { echo >&2 "lftp command not found. Install: centos:yum install lftp,debian/ubuntu:apt-get install lftp."; }
fi

echo "Backup website files..."
for dd in ${Backup_Dir[@]};do
    Backup_Dir ${dd}
done

echo "Backup Databases..."
for db in ${Backup_Database[@]};do
    Backup_Sql ${db}
done

echo "Delete old backup files..."
rm -f ${Backup_Home}${OldWWWBackup}
rm -f ${Backup_Home}${OldDBBackup}

if [ ${Enable_FTP} = 0 ]; then
    echo "Uploading backup files to ftp..."
    cd ${Backup_Home}
    lftp ${FTP_Host} -u ${FTP_Username},${FTP_Password} << EOF
cd ${FTP_Dir}
mrm ${OldWWWBackup}
mrm ${OldDBBackup}
mput ${TodayWWWBackup}
mput ${TodayDBBackup}
bye
EOF

echo "complete."
fi#!/bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

# Check if user is root
if [ $(id -u) != "0" ]; then
    echo "Error: You must be root to run this script, please use root to install lnmp"
    exit 1
fi

. ../lnmp.conf
. ../include/main.sh
Get_Dist_Name

Press_Start

if [ "${PM}" = "yum" ]; then
    yum install python rsyslog python-ipaddr -y
    service rsyslog restart
    cat /dev/null > /var/log/secure
elif [ "${PM}" = "apt" ]; then
    apt-get update
    apt-get install python rsyslog python-ipaddr -y
    /etc/init.d/rsyslog restart
    cat /dev/null > /var/log/auth.log
fi

echo "Downloading..."
cd ../src
Download_Files ${Download_Mirror}/security/denyhosts/denyhosts-3.1.tar.gz denyhosts-3.1.tar.gz
Tar_Cd denyhosts-3.1.tar.gz denyhosts-3.1
echo "Installing..."
python setup.py install

echo "Copy files..."
\cp denyhosts.conf /etc

if [ "${PM}" = "yum" ]; then
    sed -i 's@^SECURE_LOG = /var/log/auth.log@#SECURE_LOG = /var/log/auth.log@g' /etc/denyhosts.conf
    sed -i 's@^#SECURE_LOG = /var/log/secure@SECURE_LOG = /var/log/secure@g' /etc/denyhosts.conf
    \cp /usr/bin/daemon-control-dist /usr/bin/daemon-control
    chown root /usr/bin/daemon-control
    chmod 700 /usr/bin/daemon-control
    \cp /usr/bin/daemon-control /etc/init.d/denyhosts

    ln -sf /usr/bin/denyhosts.py /usr/sbin/denyhosts
elif [ "${PM}" = "apt" ]; then
    \cp /usr/local/bin/daemon-control-dist /usr/local/bin/daemon-control
    chown root /usr/local/bin/daemon-control
    chmod 700 /usr/local/bin/daemon-control
    \cp /usr/local/bin/daemon-control /etc/init.d/denyhosts

    ln -sf /usr/local/bin/denyhosts.py /usr/sbin/denyhosts

    cat >lsb.ini<<EOF
### BEGIN INIT INFO
# Provides:          denyhosts
# Required-Start:    \$syslog \$local_fs \$time
# Required-Stop:     \$syslog \$local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start denyhosts and watch .
### END INIT INFO
EOF
    sed -i '9 r lsb.ini' /etc/init.d/denyhosts
    rm -f lsb.ini
fi

sed -i 's#/run/denyhosts.pid#/var/run/denyhosts.pid#g' /etc/init.d/denyhosts
sed -i 's#^PURGE_DENY =.*#PURGE_DENY =1d#g' /etc/denyhosts.conf
sed -i 's@^#PURGE_THRESHOLD = 0@PURGE_THRESHOLD = 3@g' /etc/denyhosts.conf
sed -i '/^IPTABLES/s/^/#/' /etc/denyhosts.conf
sed -i '/^ADMIN_EMAIL/s/^/#/' /etc/denyhosts.conf
sed -i 's#^DENY_THRESHOLD_ROOT =.*#DENY_THRESHOLD_ROOT = 3#g' /etc/denyhosts.conf

sed -i '/STATE_LOCK_EXISTS\ \=\ \-2/aif not os.path.exists("/var/lock/subsys"): os.makedirs("/var/lock/subsys")' /etc/init.d/denyhosts
cd ..
rm -rf denyhosts-3.1

StartUp denyhosts
echo "Start DenyHosts..."
/etc/init.d/denyhosts start #!/bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

# Check if user is root
if [ $(id -u) != "0" ]; then
    echo "Error: You must be root to run this script, please use root to install lnmp"
    exit 1
fi

clear
echo "+-------------------------------------------------------------------+"
echo "|     Remove PHP disable functions for LNMP, Written by Licess      |"
echo "+-------------------------------------------------------------------+"
echo "|         A tool to remove PHP disable_functions for LNMP           |"
echo "+-------------------------------------------------------------------+"
echo "|        For more information please visit https://lnmp.org         |"
echo "+-------------------------------------------------------------------+"
echo "|             Usage: ./remove_disable_function.sh                   |"
echo "+-------------------------------------------------------------------+"

cur_dir=$(pwd)
        
    ver=""
    echo "Remove all php disable function please type: 1"
    echo "Only remove scandir function please type: 2"
    echo "Only remove exec function please type: 3"
    read -p "Please input 1 2 or 3:" ver
    if [ "$ver" = "" ]; then
        ver="1"
    fi

    if [ "$ver" = "1" ]; then
        echo "You will remove all php disable functions."
    elif [ "$ver" = "2" ]; then 
        echo "You will remove scandir php disable function."
    elif [ "$ver" = "3" ]; then
        echo "You will remove exec php disable_function."
    fi

    get_char()
    {
    SAVEDSTTY=`stty -g`
    stty -echo
    stty cbreak
    dd if=/dev/tty bs=1 count=1 2> /dev/null
    stty -raw
    stty echo
    stty $SAVEDSTTY
    }
    echo ""
    echo "Press any key to start...or Press Ctrl+c to cancel"
    char=`get_char`


function remove_all_disable_function()
{
    sed -i 's/disable_functions =.*/disable_functions =/g' /usr/local/php/etc/php.ini
}

function remove_scandir_function() 
{
    sed -i 's/,scandir//g' /usr/local/php/etc/php.ini
}

function remove_exec_function()
{
    sed -i 's/,exec//g' /usr/local/php/etc/php.ini
}

if [ "$ver" = "1" ]; then
    remove_all_disable_function
elif [ "$ver" = "2" ]; then 
    remove_scandir_function
elif [ "$ver" = "3" ]; then
    remove_exec_function
fi

if [ -s /etc/init.d/httpd ] && [ -s /usr/local/apache ]; then
echo "Restarting Apache......"
/etc/init.d/httpd -k restart
else
echo "Restarting php-fpm......"
/etc/init.d/php-fpm restart
fi

echo "+-------------------------------------------------+"
echo "| Remove php disable funtion completed,enjoy it!  |"
echo "+-------------------------------------------------+"#!/bin/bash
# author: licess
# website: https://lnmp.org

CheckURL="http://www.xxx.com"

STATUS_CODE=`curl -o /dev/null -m 10 --connect-timeout 10 -s -w %{http_code} $CheckURL`
#echo "$CheckURL Status Code:\t$STATUS_CODE"
if [ "$STATUS_CODE" = "502" ]; then
    /etc/init.d/php-fpm restart
fi#!/bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

# Check if user is root
if [ $(id -u) != "0" ]; then
    echo "Error: You must be root to run this script!"
    exit 1
fi

echo "+-------------------------------------------------------------------+"
echo "|   Reset MySQL/MariaDB root Password for LNMP, Written by Licess   |"
echo "+-------------------------------------------------------------------+"
echo "|       A tool to reset MySQL/MariaDB root password for LNMP        |"
echo "+-------------------------------------------------------------------+"
echo "|       For more information please visit https://lnmp.org          |"
echo "+-------------------------------------------------------------------+"
echo "|           Usage: ./reset_mysql_root_password.sh                   |"
echo "+-------------------------------------------------------------------+"

if [ -s /usr/local/mariadb/bin/mysql ]; then
    M_Name="mariadb"
else
    M_Name="mysql"
fi

cur_mysql_version=`/usr/local/mysql/bin/mysql -V | awk '{print $5}' | tr -d ","`

mysql_root_password=""
read -p "Enter New MySQL root password: " mysql_root_password
if [ "${mysql_root_password}" = "" ]; then
    echo "Error: Password can't be NULL!!"
    exit 1
fi

echo "Stoping MySQL..."
/etc/init.d/${M_Name} stop
echo "Starting MySQL with skip grant tables"
/usr/local/${M_Name}/bin/mysqld_safe --skip-grant-tables >/dev/null 2>&1 &
echo "using mysql to flush privileges and reset password"
sleep 5
echo "update user set password = Password('${mysql_root_password}') where User = 'root'"
if echo "${cur_mysql_version}" | grep -Eqi '^5.7.'; then
    /usr/local/${M_Name}/bin/mysql -u root mysql << EOF
update user set authentication_string = Password('${mysql_root_password}') where User = 'root';
EOF
else
    /usr/local/${M_Name}/bin/mysql -u root mysql << EOF
update user set password = Password('${mysql_root_password}') where User = 'root';
EOF
fi

if [ $? -eq 0 ]; then
    echo "Password reset succesfully. Now killing mysqld softly"
    killall mysqld
    sleep 5
    echo "Restarting the actual mysql service"
    /etc/init.d/${M_Name} start
    echo "Password successfully reset to '${mysql_root_password}'"
else
    echo "Reset MySQL root password failed!"
fi
#!/bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

# Check if user is root
if [ $(id -u) != "0" ]; then
    echo "Error: You must be root to run this script, please use root to install lnmp"
    exit 1
fi

. ../lnmp.conf
. ../include/main.sh
Get_Dist_Name

Press_Start

if [ "${PM}" = "yum" ]; then
    yum install python iptables rsyslog -y
    service rsyslog restart
    \cp /var/log/secure /var/log/secure.$(date +"%Y%m%d%H%M%S")
    cat /dev/null > /var/log/secure
elif [ "${PM}" = "apt" ]; then
    apt-get update
    apt-get install python iptables rsyslog -y
    /etc/init.d/rsyslog restart
    \cp /var/log/secure /var/log/secure.$(date +"%Y%m%d%H%M%S")
    cat /dev/null > /var/log/auth.log
fi

echo "Downloading..."
cd ../src
Download_Files ${Download_Mirror}/security/fail2ban/fail2ban-0.9.6.tar.gz fail2ban-0.9.6.tar.gz
tar zxf fail2ban-0.9.6.tar.gz && cd fail2ban-0.9.6
echo "Installing..."
python setup.py install

echo "Copy configure file..."
\cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
cat >>/etc/fail2ban/jail.local<<EOF

[sshd]
enabled  = true
port     = ssh
filter   = sshd
action   = iptables[name=SSH, port=ssh, protocol=tcp]
#mail-whois[name=SSH, dest=yourmail@mail.com]
logpath  = /var/log/auth.log
maxretry = 5
bantime  = 604800
EOF

echo "Copy init files..."
if [ ! -d /var/run/fail2ban ];then
    mkdir /var/run/fail2ban
fi
if [ `/sbin/iptables -h|grep -c "\-w"` -eq 0 ]; then
    sed -i 's/lockingopt =.*/lockingopt =/g' /etc/fail2ban/action.d/iptables-common.conf
fi
if [ "${PM}" = "yum" ]; then
    sed -i 's#logpath  = /var/log/auth.log#logpath  = /var/log/secure#g' /etc/fail2ban/jail.local
    \cp files/redhat-initd /etc/init.d/fail2ban
elif [ "${PM}" = "apt" ]; then
    ln -sf /usr/local/bin/fail2ban-client /usr/bin/fail2ban-client
    \cp files/debian-initd /etc/init.d/fail2ban
fi
chmod +x /etc/init.d/fail2ban
cd ..
rm -rf fail2ban-0.9.6

StartUp fail2ban

echo "Start fail2ban..."
/etc/init.d/fail2ban start#!/bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

# Check if user is root
if [ $(id -u) != "0" ]; then
    echo "Error: You must be root to run this script, please use root to install lnmp"
    exit 1
fi

cur_dir=$(pwd)
Stack=$1

LNMP_Ver='1.4'

. lnmp.conf
. include/main.sh

shopt -s extglob

Check_DB
Get_Dist_Name

clear
echo "+------------------------------------------------------------------------+"
echo "|          LNMP V${LNMP_Ver} for ${DISTRO} Linux Server, Written by Licess          |"
echo "+------------------------------------------------------------------------+"
echo "|        A tool to auto-compile & install Nginx+MySQL+PHP on Linux       |"
echo "+------------------------------------------------------------------------+"
echo "|           For more information please visit https://lnmp.org           |"
echo "+------------------------------------------------------------------------+"

Dele_Iptables_Rules()
{
    /sbin/iptables -D INPUT -i lo -j ACCEPT
    /sbin/iptables -D INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    /sbin/iptables -D INPUT -p tcp --dport 22 -j ACCEPT
    /sbin/iptables -D INPUT -p tcp --dport 80 -j ACCEPT
    /sbin/iptables -D INPUT -p tcp --dport 443 -j ACCEPT
    /sbin/iptables -D INPUT -p tcp --dport 3306 -j DROP
    /sbin/iptables -D INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT
}

Uninstall_LNMP()
{
    echo "Stoping LNMP..."
    lnmp kill
    lnmp stop

    echo "Deleting iptables rules..."
    Dele_Iptables_Rules

    Remove_StartUp nginx
    Remove_StartUp php-fpm
    if [ ${DB_Name} != "None" ]; then
        Remove_StartUp ${DB_Name}
        echo "Backup ${DB_Name} databases directory to /root/databases_backup_$(date +"%Y%m%d%H%M%S")"
        if [ ${DB_Name} == "mysql" ]; then
            mv ${MySQL_Data_Dir} /root/databases_backup_$(date +"%Y%m%d%H%M%S")
        elif [ ${DB_Name} == "mariadb" ]; then
            mv ${MariaDB_Data_Dir} /root/databases_backup_$(date +"%Y%m%d%H%M%S")
        fi
    fi
    chattr -i ${Default_Website_Dir}/.user.ini
    echo "Deleting LNMP files..."
    rm -rf /usr/local/nginx
    rm -rf /usr/local/php
    rm -rf /usr/local/zend

    if [ ${DB_Name} != "None" ]; then
        rm -rf /usr/local/${DB_Name}
        rm -f /etc/my.cnf
        rm -f /etc/init.d/${DB_Name}
    fi

    for mphp in /usr/local/php[5,7].[0-9]; do
        mphp_ver=`echo $mphp|sed 's#/usr/local/php##'`
        if [ -s /etc/init.d/php-fpm${mphp_ver} ]; then
            /etc/init.d/php-fpm${mphp_ver} stop
            Remove_StartUp php-fpm${mphp_ver}
            rm -f /etc/init.d/php-fpm${mphp_ver}
        fi
        if [ -d ${mphp} ]; then
            rm -rf ${mphp}
        fi
    done

    rm -f /etc/init.d/nginx
    rm -f /etc/init.d/php-fpm
    rm -f /bin/lnmp
    echo "LNMP Uninstall completed."
}

Uninstall_LNMPA()
{
    echo "Stoping LNMPA..."
    lnmp kill
    lnmp stop

    echo "Deleting iptables rules..."
    Dele_Iptables_Rules
    
    Remove_StartUp nginx
    Remove_StartUp httpd
    if [ ${DB_Name} != "None" ]; then
        Remove_StartUp ${DB_Name}
        echo "Backup ${DB_Name} databases directory to /root/databases_backup_$(date +"%Y%m%d%H%M%S")"
        if [ ${DB_Name} == "mysql" ]; then
            mv ${MySQL_Data_Dir} /root/databases_backup_$(date +"%Y%m%d%H%M%S")
        elif [ ${DB_Name} == "mariadb" ]; then
            mv ${MariaDB_Data_Dir} /root/databases_backup_$(date +"%Y%m%d%H%M%S")
        fi
    fi
    echo "Deleting LNMPA files..."
    rm -rf /usr/local/nginx
    rm -rf /usr/local/php
    rm -rf /usr/local/apache
    rm -rf /usr/local/zend

    if [ ${DB_Name} != "None" ]; then
        rm -rf /usr/local/${DB_Name}
        rm -f /etc/my.cnf
        rm -f /etc/init.d/${DB_Name}
    fi

    rm -f /etc/init.d/nginx
    rm -f /etc/init.d/httpd
    rm -f /bin/lnmp
    echo "LNMPA Uninstall completed."
}

Uninstall_LAMP()
{
    echo "Stoping LAMP..."
    lnmp kill
    lnmp stop

    echo "Deleting iptables rules..."
    Dele_Iptables_Rules

    Remove_StartUp httpd
    if [ ${DB_Name} != "None" ]; then
        Remove_StartUp ${DB_Name}
        echo "Backup ${DB_Name} databases directory to /root/databases_backup_$(date +"%Y%m%d%H%M%S")"
        if [ ${DB_Name} == "mysql" ]; then
            mv ${MySQL_Data_Dir} /root/databases_backup_$(date +"%Y%m%d%H%M%S")
        elif [ ${DB_Name} == "mariadb" ]; then
            mv ${MariaDB_Data_Dir} /root/databases_backup_$(date +"%Y%m%d%H%M%S")
        fi
    fi
    echo "Deleting LAMP files..."
    rm -rf /usr/local/apache
    rm -rf /usr/local/php
    rm -rf /usr/local/zend

    if [ ${DB_Name} != "None" ]; then
        rm -rf /usr/local/${DB_Name}
        rm -f /etc/my.cnf
        rm -f /etc/init.d/${DB_Name}
    fi

    rm -f /etc/my.cnf
    rm -f /etc/init.d/httpd
    rm -f /bin/lnmp
    echo "LAMP Uninstall completed."
}

    Check_Stack
    echo "Current Stack: ${Get_Stack}"

    action=""
    echo "Enter 1 to uninstall LNMP"
    echo "Enter 2 to uninstall LNMPA"
    echo "Enter 3 to uninstall LAMP"
    read -p "(Please input 1, 2 or 3): " action

    case "$action" in
    1|[lL][nN][nM][pP])
        echo "You will uninstall LNMP"
        Echo_Red "Please backup your configure files and mysql data!!!!!!"
        Echo_Red "The following directory or files will be remove!"
        cat << EOF
/usr/local/nginx
${MySQL_Dir}
/usr/local/php
/etc/init.d/nginx
/etc/init.d/${DB_Name}
/etc/init.d/php-fpm
/usr/local/zend
/etc/my.cnf
/bin/lnmp
EOF
        sleep 3
        Press_Start
        Uninstall_LNMP
    ;;
    2|[lL][nN][nM][pP][aA])
        echo "You will uninstall LNMPA"
        Echo_Red "Please backup your configure files and mysql data!!!!!!"
        Echo_Red "The following directory or files will be remove!"
        cat << EOF
/usr/local/nginx
${MySQL_Dir}
/usr/local/php
/usr/local/apache
/etc/init.d/nginx
/etc/init.d/${DB_Name}
/etc/init.d/httpd
/usr/local/zend
/etc/my.cnf
/bin/lnmp
EOF
        sleep 3
        Press_Start
        Uninstall_LNMPA
    ;;
    3|[lL][aA][nM][pP])
        echo "You will uninstall LAMP"
        Echo_Red "Please backup your configure files and mysql data!!!!!!"
        Echo_Red "The following directory or files will be remove!"
        cat << EOF
/usr/local/apache
${MySQL_Dir}
/etc/init.d/httpd
/etc/init.d/${DB_Name}
/usr/local/php
/usr/local/zend
/etc/my.cnf
/bin/lnmp
EOF
        sleep 3
        Press_Start
        Uninstall_LAMP
    ;;
    esac
#!/bin/bash

Install_Nginx_Openssl()
{
    if [ "${Enable_Nginx_Openssl}" = 'y' ]; then
        Download_Files ${Download_Mirror}/lib/openssl/${Openssl_Ver}.tar.gz ${Openssl_Ver}.tar.gz
        [[ -d "${Openssl_Ver}" ]] && rm -rf ${Openssl_Ver}
        tar zxf ${Openssl_Ver}.tar.gz
        Nginx_With_Openssl="--with-openssl=${cur_dir}/src/${Openssl_Ver}"
    fi
}

Install_Nginx()
{
    Echo_Blue "[+] Installing ${Nginx_Ver}... "
    groupadd www
    useradd -s /sbin/nologin -g www www

    cd ${cur_dir}/src
    Install_Nginx_Openssl
    Tar_Cd ${Nginx_Ver}.tar.gz ${Nginx_Ver}
    if echo ${Nginx_Ver} | grep -Eqi 'nginx-[0-1].[5-8].[0-9]' || echo ${Nginx_Ver} | grep -Eqi 'nginx-1.9.[1-4]$'; then
        ./configure --user=www --group=www --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_spdy_module --with-http_gzip_static_module --with-ipv6 --with-http_sub_module ${Nginx_With_Openssl} ${NginxMAOpt} ${Nginx_Modules_Options}
    else
        ./configure --user=www --group=www --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_v2_module --with-http_gzip_static_module --with-ipv6 --with-http_sub_module ${Nginx_With_Openssl} ${NginxMAOpt} ${Nginx_Modules_Options}
    fi
    make && make install
    cd ../

    ln -sf /usr/local/nginx/sbin/nginx /usr/bin/nginx

    rm -f /usr/local/nginx/conf/nginx.conf
    cd ${cur_dir}
    if [ "${Stack}" = "lnmpa" ]; then
        \cp conf/nginx_a.conf /usr/local/nginx/conf/nginx.conf
        \cp conf/proxy.conf /usr/local/nginx/conf/proxy.conf
        \cp conf/proxy-pass-php.conf /usr/local/nginx/conf/proxy-pass-php.conf
    else
        \cp conf/nginx.conf /usr/local/nginx/conf/nginx.conf
    fi
    \cp conf/rewrite/dabr.conf /usr/local/nginx/conf/dabr.conf
    \cp conf/rewrite/discuz.conf /usr/local/nginx/conf/discuz.conf
    \cp conf/rewrite/sablog.conf /usr/local/nginx/conf/sablog.conf
    \cp conf/rewrite/typecho.conf /usr/local/nginx/conf/typecho.conf
    \cp conf/rewrite/typecho2.conf /usr/local/nginx/conf/typecho2.conf
    \cp conf/rewrite/wordpress.conf /usr/local/nginx/conf/wordpress.conf
    \cp conf/rewrite/discuzx.conf /usr/local/nginx/conf/discuzx.conf
    \cp conf/rewrite/none.conf /usr/local/nginx/conf/none.conf
    \cp conf/rewrite/wp2.conf /usr/local/nginx/conf/wp2.conf
    \cp conf/rewrite/phpwind.conf /usr/local/nginx/conf/phpwind.conf
    \cp conf/rewrite/shopex.conf /usr/local/nginx/conf/shopex.conf
    \cp conf/rewrite/dedecms.conf /usr/local/nginx/conf/dedecms.conf
    \cp conf/rewrite/drupal.conf /usr/local/nginx/conf/drupal.conf
    \cp conf/rewrite/ecshop.conf /usr/local/nginx/conf/ecshop.conf
    \cp conf/rewrite/codeigniter.conf /usr/local/nginx/conf/codeigniter.conf
    \cp conf/rewrite/laravel.conf /usr/local/nginx/conf/laravel.conf
    \cp conf/rewrite/thinkphp.conf /usr/local/nginx/conf/thinkphp.conf
    \cp conf/pathinfo.conf /usr/local/nginx/conf/pathinfo.conf
    \cp conf/enable-php.conf /usr/local/nginx/conf/enable-php.conf
    \cp conf/enable-php-pathinfo.conf /usr/local/nginx/conf/enable-php-pathinfo.conf
    \cp conf/enable-ssl-example.conf /usr/local/nginx/conf/enable-ssl-example.conf

    mkdir -p ${Default_Website_Dir}
    chmod +w ${Default_Website_Dir}
    mkdir -p /home/wwwlogs
    chmod 777 /home/wwwlogs

    chown -R www:www ${Default_Website_Dir}

    mkdir /usr/local/nginx/conf/vhost

    if [ "${Default_Website_Dir}" != "/home/wwwroot/default" ]; then
        sed -i "s#/home/wwwroot/default#${Default_Website_Dir}#g" /usr/local/nginx/conf/nginx.conf
    fi

    if [ "${Stack}" = "lnmp" ]; then
        cat >${Default_Website_Dir}/.user.ini<<EOF
open_basedir=${Default_Website_Dir}:/tmp/:/proc/
EOF
        chmod 644 ${Default_Website_Dir}/.user.ini
        chattr +i ${Default_Website_Dir}/.user.ini
        cat >>/usr/local/nginx/conf/fastcgi.conf<<EOF
fastcgi_param PHP_ADMIN_VALUE "open_basedir=\$document_root/:/tmp/:/proc/";
EOF
    fi

    \cp init.d/init.d.nginx /etc/init.d/nginx
    chmod +x /etc/init.d/nginx

    if [ "${SelectMalloc}" = "3" ]; then
        mkdir /tmp/tcmalloc
        chown -R www:www /tmp/tcmalloc
        sed -i '/nginx.pid/a\
google_perftools_profiles /tmp/tcmalloc;' /usr/local/nginx/conf/nginx.conf
    fi
}
#!/bin/bash

Install_Redis()
{
    echo "====== Installing Redis ======"
    echo "Install ${Redis_Stable_Ver} Stable Version..."
    Press_Start

    rm -f ${PHP_Path}/conf.d/007-redis.ini
    Addons_Get_PHP_Ext_Dir
    zend_ext="${zend_ext_dir}redis.so"
    if [ -s "${zend_ext}" ]; then
        rm -f "${zend_ext}"
    fi

    cd ${cur_dir}/src
    if [ -s /usr/local/redis/bin/redis-server ]; then
        echo "Redis server already exists."
    else
        Download_Files http://download.redis.io/releases/${Redis_Stable_Ver}.tar.gz ${Redis_Stable_Ver}.tar.gz
        Tar_Cd ${Redis_Stable_Ver}.tar.gz ${Redis_Stable_Ver}

        if [ "${Is_64bit}" = "y" ] ; then
            make PREFIX=/usr/local/redis install
        else
            make CFLAGS="-march=i686" PREFIX=/usr/local/redis install
        fi
        mkdir -p /usr/local/redis/etc/
        \cp redis.conf  /usr/local/redis/etc/
        sed -i 's/daemonize no/daemonize yes/g' /usr/local/redis/etc/redis.conf
        sed -i 's/^# bind 127.0.0.1/bind 127.0.0.1/g' /usr/local/redis/etc/redis.conf
        sed -i 's#^pidfile /var/run/redis_6379.pid#pidfile /var/run/redis.pid#g' /usr/local/redis/etc/redis.conf
        cd ../
        rm -rf ${cur_dir}/src/${Redis_Stable_Ver}

        if [ -s /sbin/iptables ]; then
            /sbin/iptables -A INPUT -p tcp --dport 6379 -j DROP
            if [ "$PM" = "yum" ]; then
                service iptables save
            elif [ "$PM" = "apt" ]; then
                iptables-save > /etc/iptables.rules
            fi
        fi
    fi

    if [ -s ${PHPRedis_Ver} ]; then
        rm -rf ${PHPRedis_Ver}
    fi

    if echo "${Cur_PHP_Version}" | grep -Eqi '^5.2.';then
        Download_Files http://pecl.php.net/get/redis-2.2.7.tgz redis-2.2.7.tgz
        Tar_Cd redis-2.2.7.tgz redis-2.2.7
    else
        Download_Files http://pecl.php.net/get/${PHPRedis_Ver}.tgz ${PHPRedis_Ver}.tgz
        Tar_Cd ${PHPRedis_Ver}.tgz ${PHPRedis_Ver}
    fi
    ${PHP_Path}/bin/phpize
    ./configure --with-php-config=${PHP_Path}/bin/php-config
    make && make install
    cd ../

    cat >${PHP_Path}/conf.d/007-redis.ini<<EOF
extension = "redis.so"
EOF

    \cp ${cur_dir}/init.d/init.d.redis /etc/init.d/redis
    chmod +x /etc/init.d/redis
    echo "Add to auto startup..."
    StartUp redis
    Restart_PHP
    /etc/init.d/redis start

    if [ -s "${zend_ext}" ] && [ -s /usr/local/redis/bin/redis-server ]; then
        Echo_Green "====== Redis install completed ======"
        Echo_Green "Redis installed successfully, enjoy it!"
    else
        rm -f ${PHP_Path}/conf.d/007-redis.ini
        Echo_Red "Redis install failed!"
    fi
}

Uninstall_Redis()
{
    echo "You will uninstall Redis..."
    Press_Start
    rm -f ${PHP_Path}/conf.d/007-redis.ini
    Restart_PHP
    Remove_StartUp redis
    echo "Delete Redis files..."
    rm -rf /usr/local/redis
    rm -rf /etc/init.d/redis
    if [ -s /sbin/iptables ]; then
        /sbin/iptables -D INPUT -p tcp --dport 6379 -j DROP
        if [ "$PM" = "yum" ]; then
            service iptables save
        elif [ "$PM" = "apt" ]; then
            iptables-save > /etc/iptables.rules
        fi
    fi
    Echo_Green "Uninstall Redis completed."
}
 #!/bin/bash

Install_Apcu()
{
    echo "You will install apcu..."
    apcu_pass=""
    while :;do
        read -p "Please enter admin password of apcu: " apcu_pass
        if [ "${apcu_pass}" != "" ]; then
            echo "================================================="
            echo "Your admin password of apcu was: ${apcu_pass}"
            echo "================================================="
            break
        else
            Echo_Red "Password cannot be empty!"
        fi
    done
    echo "====== Installing apcu ======"
    Press_Start

    rm -f ${PHP_Path}/conf.d/009-apcu.ini
    Addons_Get_PHP_Ext_Dir
    zend_ext="${zend_ext_dir}apcu.so"
    if [ -s "${zend_ext}" ]; then
        rm -f "${zend_ext}"
    fi

    cd ${cur_dir}/src

    if echo "${Cur_PHP_Version}" | grep -Eqi '^7.'; then
        Download_Files ${Download_Mirror}/web/apcu/${PHPNewApcu_Ver}.tgz ${PHPNewApcu_Ver}.tgz
        Tar_Cd ${PHPNewApcu_Ver}.tgz ${PHPNewApcu_Ver}
    else
        Download_Files ${Download_Mirror}/web/apcu/${PHPOldApcu_Ver}.tgz ${PHPOldApcu_Ver}.tgz
        Tar_Cd ${PHPOldApcu_Ver}.tgz ${PHPOldApcu_Ver}
    fi
    ${PHP_Path}/bin/phpize
    ./configure --with-php-config=${PHP_Path}/bin/php-config
    make
    make install
    \cp -a apc.php ${Default_Website_Dir}/apc.php
    sed -i "s/^defaults('ADMIN_PASSWORD','.*/defaults('ADMIN_PASSWORD','${apcu_pass}');/g" ${Default_Website_Dir}/apc.php
    cd ..

    if echo "${Cur_PHP_Version}" | grep -Eqi '^7.'; then
        Download_Files ${Download_Mirror}/web/apcu_bc/${PHPApcu_Bc_Ver}.tgz ${PHPApcu_Bc_Ver}.tgz
        Tar_Cd ${PHPApcu_Bc_Ver}.tgz ${PHPApcu_Bc_Ver}
        ${PHP_Path}/bin/phpize
        ./configure --with-php-config=${PHP_Path}/bin/php-config
        make
        make install
        cd ..
        rm -rf ${cur_dir}/src/${PHPApcu_Bc_Ver}
        rm -rf ${cur_dir}/src/${PHPNewApcu_Ver}
    else
        rm -rf ${cur_dir}/src/${PHPOldApcu_Ver}
    fi

    cat >${PHP_Path}/conf.d/009-apcu.ini<<EOF
[apcu]
extension=apcu.so
apc.enabled=1
apc.shm_size=32M
apc.enable_cli=1

EOF

    if echo "${Cur_PHP_Version}" | grep -Eqi '^7.'; then
        sed -i '/apcu.so/a\extension=apc.so' ${PHP_Path}/conf.d/009-apcu.ini
    fi

    if [ -s "${zend_ext}" ]; then
        Restart_PHP
        Echo_Green "======== apcu install completed ======"
        Echo_Green "apcu installed successfully, enjoy it!"
    else
        rm -f ${PHP_Path}/conf.d/009-apcu.ini
        Echo_Red "apcu install failed!"
    fi
}

Uninstall_Apcu()
{
    echo "You will uninstall apcu..."
    Press_Start
    rm -f ${PHP_Path}/conf.d/009-apcu.ini
    echo "Delete apcu files..."
    rm -f "${zend_ext}"
    Restart_PHP
    Echo_Green "Uninstall apcu completed."
}
#!/bin/bash

Upgrade_Nginx()
{
    Cur_Nginx_Version=`/usr/local/nginx/sbin/nginx -v 2>&1 | cut -c22-`

    if [ -s /usr/local/include/jemalloc/jemalloc.h ] && /usr/local/nginx/sbin/nginx -V 2>&1|grep -Eqi 'ljemalloc'; then
        NginxMAOpt="--with-ld-opt='-ljemalloc'"
    elif [ -s /usr/local/include/gperftools/tcmalloc.h ] && grep -Eqi "google_perftools_profiles" /usr/local/nginx/conf/nginx.conf; then
        NginxMAOpt='--with-google_perftools_module'
    else
        NginxMAOpt=""
    fi

    Nginx_Version=""
    echo "Current Nginx Version:${Cur_Nginx_Version}"
    echo "You can get version number from http://nginx.org/en/download.html"
    read -p "Please enter nginx version you want, (example: 1.7.8): " Nginx_Version
    if [ "${Nginx_Version}" = "" ]; then
        echo "Error: You must enter a nginx version!!"
        exit 1
    fi
    echo "+---------------------------------------------------------+"
    echo "|    You will upgrade nginx version to ${Nginx_Version}"
    echo "+---------------------------------------------------------+"

    Press_Start

    echo "============================check files=================================="
    cd ${cur_dir}/src
    if [ -s nginx-${Nginx_Version}.tar.gz ]; then
        echo "nginx-${Nginx_Version}.tar.gz [found]"
    else
        echo "Notice: nginx-${Nginx_Version}.tar.gz not found!!!download now......"
        wget -c --progress=bar:force http://nginx.org/download/nginx-${Nginx_Version}.tar.gz
        if [ $? -eq 0 ]; then
            echo "Download nginx-${Nginx_Version}.tar.gz successfully!"
        else
            echo "You enter Nginx Version was:"${Nginx_Version}
            Echo_Red "Error! You entered a wrong version number, please check!"
            sleep 5
            exit 1
        fi
    fi
    echo "============================check files=================================="

    Install_Nginx_Openssl
    Tar_Cd nginx-${Nginx_Version}.tar.gz nginx-${Nginx_Version}
    if echo ${Nginx_Version} | grep -Eqi '^[0-1].[5-8].[0-9]' || echo ${Nginx_Version} | grep -Eqi '^1.9.[1-4]$'; then
        ./configure --user=www --group=www --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_spdy_module --with-http_gzip_static_module --with-ipv6 --with-http_sub_module ${Nginx_With_Openssl} ${NginxMAOpt} ${Nginx_Modules_Options}
    else
        ./configure --user=www --group=www --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_v2_module --with-http_gzip_static_module --with-ipv6 --with-http_sub_module ${Nginx_With_Openssl} ${NginxMAOpt} ${Nginx_Modules_Options}
    fi
    make

    mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.${Upgrade_Date}
    \cp objs/nginx /usr/local/nginx/sbin/nginx
    echo "Test nginx configure file..."
    /usr/local/nginx/sbin/nginx -t
    echo "upgrade..."
    make upgrade

    cd ${cur_dir} && rm -rf ${cur_dir}/src/nginx-${Nginx_Version}

    echo "Checking ..."
    if [[ -s /usr/local/nginx/conf/nginx.conf && -s /usr/local/nginx/sbin/nginx ]]; then
        echo "Program will display Nginx Version......"
        /usr/local/nginx/sbin/nginx -v
        Echo_Green "======== upgrade nginx completed ======"
    else
        Echo_Red "Error: Nginx upgrade failed."
    fi
}
#!/bin/bash

Mariadb_Sec_Setting()
{
    cat > /etc/ld.so.conf.d/mariadb.conf<<EOF
    /usr/local/mariadb/lib
    /usr/local/lib
EOF
    ldconfig

    if [ -d "/proc/vz" ];then
        ulimit -s unlimited
    fi
    
    StartUp mariadb
    /etc/init.d/mariadb start

    ln -sf /usr/local/mariadb/bin/mysql /usr/bin/mysql
    ln -sf /usr/local/mariadb/bin/mysqldump /usr/bin/mysqldump
    ln -sf /usr/local/mariadb/bin/myisamchk /usr/bin/myisamchk
    ln -sf /usr/local/mariadb/bin/mysqld_safe /usr/bin/mysqld_safe
    ln -sf /usr/local/mariadb/bin/mysqlcheck /usr/bin/mysqlcheck

    /usr/local/mariadb/bin/mysqladmin -u root password "${DB_Root_Password}"
    if [ $? -ne 0 ]; then
        echo "failed, try other way..."
        cat >~/.emptymy.cnf<<EOF
[client]
user=root
password=''
EOF
    /usr/local/mariadb/bin/mysql --defaults-file=~/.emptymy.cnf -e "UPDATE mysql.user SET Password=PASSWORD('${DB_Root_Password}') WHERE User='root';"
    [ $? -eq 0 ] && echo "Set password Sucessfully." || echo "Set password failed!"
    /usr/local/mariadb/bin/mysql --defaults-file=~/.emptymy.cnf -e "FLUSH PRIVILEGES;"
    [ $? -eq 0 ] && echo "FLUSH PRIVILEGES Sucessfully." || echo "FLUSH PRIVILEGES failed!"
    rm -f ~/.emptymy.cnf
    fi
    /etc/init.d/mariadb restart

    Make_TempMycnf "${DB_Root_Password}"
    Do_Query ""
    if [ $? -eq 0 ]; then
        echo "OK, MySQL root password correct."
    fi
    echo "Update root password..."
    Do_Query "UPDATE mysql.user SET Password=PASSWORD('${DB_Root_Password}') WHERE User='root';"
    [ $? -eq 0 ] && echo " ... Success." || echo " ... Failed!"
    echo "Remove anonymous users..."
    Do_Query "DELETE FROM mysql.user WHERE User='';"
    Do_Query "DROP USER ''@'%';"
    [ $? -eq 0 ] && echo " ... Success." || echo " ... Failed!"
    echo "Disallow root login remotely..."
    Do_Query "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
    [ $? -eq 0 ] && echo " ... Success." || echo " ... Failed!"
    echo "Remove test database..."
    Do_Query "DROP DATABASE test;"
    [ $? -eq 0 ] && echo " ... Success." || echo " ... Failed!"
    echo "Reload privilege tables..."
    Do_Query "FLUSH PRIVILEGES;"
    [ $? -eq 0 ] && echo " ... Success." || echo " ... Failed!"

    /etc/init.d/mariadb restart
    /etc/init.d/mariadb stop
}

Check_MariaDB_Data_Dir()
{
    if [ -d "${MariaDB_Data_Dir}" ]; then
        datetime=$(date +"%Y%m%d%H%M%S")
        mkdir /root/mariadb-data-dir-backup${datetime}/
        \cp ${MariaDB_Data_Dir}/* /root/mariadb-data-dir-backup${datetime}/
        rm -rf ${MariaDB_Data_Dir}/*
    else
        mkdir -p ${MariaDB_Data_Dir}
    fi
}

Install_MariaDB_5()
{
    Echo_Blue "[+] Installing ${Mariadb_Ver}..."
    rm -f /etc/my.cnf
    Tar_Cd ${Mariadb_Ver}.tar.gz ${Mariadb_Ver}
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mariadb -DWITH_ARIA_STORAGE_ENGINE=1 -DWITH_XTRADB_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DWITH_READLINE=1 -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 ${MariaDBMAOpt}
    make && make install

    groupadd mariadb
    useradd -s /sbin/nologin -M -g mariadb mariadb

cat > /etc/my.cnf<<EOF
[client]
#password	= your_password
port		= 3306
socket		= /tmp/mysql.sock

[mysqld]
port		= 3306
socket		= /tmp/mysql.sock
user    = mariadb
basedir = /usr/local/mariadb
datadir = ${MariaDB_Data_Dir}
log_error = ${MariaDB_Data_Dir}/mariadb.err
pid-file = ${MariaDB_Data_Dir}/mariadb.pid
skip-external-locking
key_buffer_size = 16M
max_allowed_packet = 1M
table_open_cache = 64
sort_buffer_size = 512K
net_buffer_length = 8K
read_buffer_size = 256K
read_rnd_buffer_size = 512K
myisam_sort_buffer_size = 8M
thread_cache_size = 8
query_cache_size = 8M
tmp_table_size = 16M

#skip-networking
max_connections = 500
max_connect_errors = 100
open_files_limit = 65535

log-bin=mysql-bin
binlog_format=mixed
server-id	= 1
expire_logs_days = 10

default_storage_engine = InnoDB
#innodb_file_per_table = 1
#innodb_data_home_dir = ${MariaDB_Data_Dir}
#innodb_data_file_path = ibdata1:10M:autoextend
#innodb_log_group_home_dir = ${MariaDB_Data_Dir}
#innodb_buffer_pool_size = 16M
#innodb_additional_mem_pool_size = 2M
#innodb_log_file_size = 5M
#innodb_log_buffer_size = 8M
#innodb_flush_log_at_trx_commit = 1
#innodb_lock_wait_timeout = 50

[mysqldump]
quick
max_allowed_packet = 16M

[mysql]
no-auto-rehash

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout
EOF

    if [ "${InstallInnodb}" = "y" ]; then
        sed -i 's:^#innodb:innodb:g' /etc/my.cnf
    else
        sed -i '/^default_storage_engine/d' /etc/my.cnf
        sed -i 's/^#loose-innodb/loose-innodb/g' /etc/my.cnf
        sed -i '/skip-external-locking/i\default_storage_engine = MyISAM\nloose-skip-innodb' /etc/my.cnf
    fi
    MySQL_Opt
    Check_MariaDB_Data_Dir
    chown -R mariadb:mariadb ${MariaDB_Data_Dir}
    /usr/local/mariadb/scripts/mysql_install_db --defaults-file=/etc/my.cnf --basedir=/usr/local/mariadb --datadir=${MariaDB_Data_Dir} --user=mariadb
    chgrp -R mariadb /usr/local/mariadb/.
    \cp support-files/mysql.server /etc/init.d/mariadb
    chmod 755 /etc/init.d/mariadb

    Mariadb_Sec_Setting
}

Install_MariaDB_10()
{
    Echo_Blue "[+] Installing ${Mariadb_Ver}..."
    rm -f /etc/my.cnf
    Tar_Cd ${Mariadb_Ver}.tar.gz ${Mariadb_Ver}
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mariadb -DWITH_ARIA_STORAGE_ENGINE=1 -DWITH_XTRADB_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DWITH_READLINE=1 -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 ${MariaDBMAOpt}
    make && make install

    groupadd mariadb
    useradd -s /sbin/nologin -M -g mariadb mariadb

cat > /etc/my.cnf<<EOF
[client]
#password	= your_password
port		= 3306
socket		= /tmp/mysql.sock

[mysqld]
port		= 3306
socket		= /tmp/mysql.sock
user    = mariadb
basedir = /usr/local/mariadb
datadir = ${MariaDB_Data_Dir}
log_error = ${MariaDB_Data_Dir}/mariadb.err
pid-file = ${MariaDB_Data_Dir}/mariadb.pid
skip-external-locking
key_buffer_size = 16M
max_allowed_packet = 1M
table_open_cache = 64
sort_buffer_size = 512K
net_buffer_length = 8K
read_buffer_size = 256K
read_rnd_buffer_size = 512K
myisam_sort_buffer_size = 8M
thread_cache_size = 8
query_cache_size = 8M
tmp_table_size = 16M

explicit_defaults_for_timestamp = true
#skip-networking
max_connections = 500
max_connect_errors = 100
open_files_limit = 65535

log-bin=mysql-bin
binlog_format=mixed
server-id	= 1
expire_logs_days = 10

default_storage_engine = InnoDB
#innodb_file_per_table = 1
#innodb_data_home_dir = ${MariaDB_Data_Dir}
#innodb_data_file_path = ibdata1:10M:autoextend
#innodb_log_group_home_dir = ${MariaDB_Data_Dir}
#innodb_buffer_pool_size = 16M
#innodb_log_file_size = 5M
#innodb_log_buffer_size = 8M
#innodb_flush_log_at_trx_commit = 1
#innodb_lock_wait_timeout = 50

[mysqldump]
quick
max_allowed_packet = 16M

[mysql]
no-auto-rehash

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout
EOF
    if [ "${InstallInnodb}" = "y" ]; then
        sed -i 's:^#innodb:innodb:g' /etc/my.cnf
    else
        sed -i '/^default_storage_engine/d' /etc/my.cnf
        sed -i 's/^#loose-innodb/loose-innodb/g' /etc/my.cnf
        sed -i '/skip-external-locking/i\default_storage_engine = MyISAM\nloose-skip-innodb' /etc/my.cnf
    fi
    MySQL_Opt
    Check_MariaDB_Data_Dir
    chown -R mariadb:mariadb ${MariaDB_Data_Dir}
    /usr/local/mariadb/scripts/mysql_install_db --defaults-file=/etc/my.cnf --basedir=/usr/local/mariadb --datadir=${MariaDB_Data_Dir} --user=mariadb
    chgrp -R mariadb /usr/local/mariadb/.
    \cp support-files/mysql.server /etc/init.d/mariadb
    chmod 755 /etc/init.d/mariadb

    Mariadb_Sec_Setting
}

Install_MariaDB_101()
{
    Echo_Blue "[+] Installing ${Mariadb_Ver}..."
    rm -f /etc/my.cnf
    Tar_Cd ${Mariadb_Ver}.tar.gz ${Mariadb_Ver}
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mariadb -DWITH_ARIA_STORAGE_ENGINE=1 -DWITH_XTRADB_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DWITH_READLINE=1 -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 -DWITHOUT_TOKUDB=1 ${MariaDBMAOpt}
    make && make install

    groupadd mariadb
    useradd -s /sbin/nologin -M -g mariadb mariadb

cat > /etc/my.cnf<<EOF
[client]
#password   = your_password
port        = 3306
socket      = /tmp/mysql.sock

[mysqld]
port        = 3306
socket      = /tmp/mysql.sock
user    = mariadb
basedir = /usr/local/mariadb
datadir = ${MariaDB_Data_Dir}
log_error = ${MariaDB_Data_Dir}/mariadb.err
pid-file = ${MariaDB_Data_Dir}/mariadb.pid
skip-external-locking
key_buffer_size = 16M
max_allowed_packet = 1M
table_open_cache = 64
sort_buffer_size = 512K
net_buffer_length = 8K
read_buffer_size = 256K
read_rnd_buffer_size = 512K
myisam_sort_buffer_size = 8M
thread_cache_size = 8
query_cache_size = 8M
tmp_table_size = 16M

explicit_defaults_for_timestamp = true
#skip-networking
max_connections = 500
max_connect_errors = 100
open_files_limit = 65535

log-bin=mysql-bin
binlog_format=mixed
server-id   = 1
expire_logs_days = 10

default_storage_engine = InnoDB
#innodb_file_per_table = 1
#innodb_data_home_dir = ${MariaDB_Data_Dir}
#innodb_data_file_path = ibdata1:10M:autoextend
#innodb_log_group_home_dir = ${MariaDB_Data_Dir}
#innodb_buffer_pool_size = 16M
#innodb_log_file_size = 5M
#innodb_log_buffer_size = 8M
#innodb_flush_log_at_trx_commit = 1
#innodb_lock_wait_timeout = 50

[mysqldump]
quick
max_allowed_packet = 16M

[mysql]
no-auto-rehash

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout
EOF
    if [ "${InstallInnodb}" = "y" ]; then
        sed -i 's:^#innodb:innodb:g' /etc/my.cnf
    else
        sed -i '/^default_storage_engine/d' /etc/my.cnf
        sed -i 's/^#loose-innodb/loose-innodb/g' /etc/my.cnf
        sed -i '/skip-external-locking/i\default_storage_engine = MyISAM\nloose-skip-innodb' /etc/my.cnf
    fi
    MySQL_Opt
    Check_MariaDB_Data_Dir
    chown -R mariadb:mariadb ${MariaDB_Data_Dir}
    /usr/local/mariadb/scripts/mysql_install_db --defaults-file=/etc/my.cnf --basedir=/usr/local/mariadb --datadir=${MariaDB_Data_Dir} --user=mariadb
    chgrp -R mariadb /usr/local/mariadb/.
    \cp support-files/mysql.server /etc/init.d/mariadb
    chmod 755 /etc/init.d/mariadb

    Mariadb_Sec_Setting
}
#!/bin/bash

Install_ionCube()
{
    echo "====== Installing ionCube ======"
    Press_Start

    rm -f ${PHP_Path}/conf.d/001-ioncube.ini
    Addons_Get_PHP_Ext_Dir
    if echo "${Cur_PHP_Version}" | grep -Eqi '^5.2.'; then
       zend_ext="/usr/local/ioncube/ioncube_loader_lin_5.2.so"
    elif echo "${Cur_PHP_Version}" | grep -Eqi '^5.3.'; then
       zend_ext="/usr/local/ioncube/ioncube_loader_lin_5.3.so"
    elif echo "${Cur_PHP_Version}" | grep -Eqi '^5.4.'; then
       zend_ext="/usr/local/ioncube/ioncube_loader_lin_5.4.so"
    elif echo "${Cur_PHP_Version}" | grep -Eqi '^5.5.'; then
       zend_ext="/usr/local/ioncube/ioncube_loader_lin_5.5.so"
    elif echo "${Cur_PHP_Version}" | grep -Eqi '^5.6.'; then
       zend_ext="/usr/local/ioncube/ioncube_loader_lin_5.6.so"
    elif echo "${Cur_PHP_Version}" | grep -Eqi '^7.0.'; then
       zend_ext="/usr/local/ioncube/ioncube_loader_lin_7.0.so"
    elif echo "${Cur_PHP_Version}" | grep -Eqi '^7.1.'; then
       zend_ext="/usr/local/ioncube/ioncube_loader_lin_7.1.so"
    else
        Echo_Red "Do not support current PHP version or PHP error!"
        exit 1
    fi

    rm -rf /usr/local/ioncube
    cd ${cur_dir}/src
    rm -rf ioncube
    rm -rf ioncube_loaders_lin_x8*.tar.gz
    if grep -Eqi "xcache.so" ${PHP_Path}/conf.d/006-xcache.ini; then
        if [ "${Is_64bit}" = "y" ] ; then
            Download_Files ${Download_Mirror}/web/ioncube/4.7.5/ioncube_loaders_lin_x86-64.tar.gz ioncube_loaders_lin_x86-64.tar.gz
            tar zxf ioncube_loaders_lin_x86-64.tar.gz
        else
            Download_Files ${Download_Mirror}/web/ioncube/4.7.5/ioncube_loaders_lin_x86.tar.gz ioncube_loaders_lin_x86.tar.gz
            tar zxf ioncube_loaders_lin_x86.tar.gz
        fi
    else
        if [ "${Is_64bit}" = "y" ] ; then
            Download_Files http://downloads3.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz ioncube_loaders_lin_x86-64.tar.gz
            tar zxf ioncube_loaders_lin_x86-64.tar.gz
        else
            Download_Files http://downloads3.ioncube.com/loader_downloads/ioncube_loaders_lin_x86.tar.gz ioncube_loaders_lin_x86.tar.gz
            tar zxf ioncube_loaders_lin_x86.tar.gz
        fi
    fi
    mv ioncube /usr/local/

    echo "Writing ionCube Loader to configure files..."
    cat >${PHP_Path}/conf.d/001-ioncube.ini<<EOF
[ionCube Loader]
zend_extension="${zend_ext}"
;ioncubeend
EOF

    if [ -s "${zend_ext}" ]; then
        if echo ${zend_ext_dir} | grep -vEqi "non-zts"; then
            sed -i 's/.so/_ts.so/g' ${PHP_Path}/conf.d/001-ioncube.ini
        fi
        Restart_PHP
        Echo_Green "====== ionCube install completed ======"
        Echo_Green "ionCube installed successfully, enjoy it!"
    else
        rm -f ${PHP_Path}/conf.d/001-ioncube.ini
        Echo_Red "ionCube install failed!"
    fi
 }

 Uninstall_ionCube()
 {
    echo "You will uninstall ionCube..."
    Press_Start
    rm -f ${PHP_Path}/conf.d/001-ioncube.ini
    #echo "Delete ionCube files..."
    #rm -rf /usr/local/ioncube/
    Restart_PHP
    Echo_Green "Uninstall ionCube completed."
 }
#!/bin/bash

#Install eaccelerator 0.9.5.3
Install_Old_eA()
{
    if [ -s eaccelerator-0.9.5.3 ]; then
        rm -rf eaccelerator-0.9.5.3/
    fi

    if echo "${Cur_PHP_Version}" | grep -Eqi '^5.[345].';then
        echo "PHP 5.3.* and higher version Can't install eaccelerator 0.9.5.3!"
        echo "PHP 5.3.* please enter 2 or 3 !"
        echo "PHP 5.4.* please enter 3 !"
        exit 1
    fi

    Download_Files ${Download_Mirror}/web/eaccelerator/eaccelerator-0.9.5.3.tar.bz2 eaccelerator-0.9.5.3.tar.bz2
    Tarj_Cd eaccelerator-0.9.5.3.tar.bz2 eaccelerator-0.9.5.3
    ${PHP_Path}/bin/phpize
    ./configure --enable-eaccelerator=shared --with-php-config=${PHP_Path}/bin/php-config --with-eaccelerator-shared-memory
    make
    make install
    cd ../
}

#Install eaccelerator 0.9.6.1
Install_New_eA()
{
    if [ -s eaccelerator-0.9.6.1 ]; then
        rm -rf eaccelerator-0.9.6.1/
    fi

    if echo "${Cur_PHP_Version}" | grep -Eqi '^5.[456].';then
        echo "PHP 5.4.* and higher version Can't install eaccelerator 0.9.6.1!"
        exit 1
    fi

    Download_Files ${Download_Mirror}/web/eaccelerator/eaccelerator-0.9.6.1.tar.bz2 eaccelerator-0.9.6.1.tar.bz2
    Tarj_Cd eaccelerator-0.9.6.1.tar.bz2 eaccelerator-0.9.6.1
    ${PHP_Path}/bin/phpize
    ./configure --enable-eaccelerator=shared --with-php-config=${PHP_Path}/bin/php-config
    make
    make install
    cd ../
}

#Install eaccelerator git master branch 42067ac
Install_Dev_eA()
{
    if [ -s eaccelerator-eaccelerator-42067ac ]; then
        rm -rf eaccelerator-eaccelerator-42067ac/
    fi

    if echo "${Cur_PHP_Version}" | grep -Eqi '^5.[56].';then
        echo "PHP 5.5.* and higher version do not support eaccelerator!"
        exit 1
    fi

    Download_Files ${Download_Mirror}/web/eaccelerator/eaccelerator-eaccelerator-42067ac.tar.gz eaccelerator-eaccelerator-42067ac.tar.gz
    Tar_Cd eaccelerator-eaccelerator-42067ac.tar.gz eaccelerator-eaccelerator-42067ac
    ${PHP_Path}/bin/phpize
    ./configure --enable-eaccelerator=shared --with-php-config=${PHP_Path}/bin/php-config
    make
    make install
    cd ../
}

Install_eAccelerator()
{
    ver="3"
    echo "Which version do you want to install:"
    echo "Install eaccelerator 0.9.5.3 please enter: 1"
    echo "Install eaccelerator 0.9.6.1 please enter: 2"
    echo "Install eaccelerator 1.0-dev please enter: 3"
    read -p "Enter 1, 2 or 3 (Default version 3): " ver
    if [ "${ver}" = "" ]; then
        ver="3"
    fi

    if [ "${ver}" = "1" ]; then
        echo "You will install eaccelerator 0.9.5.3"
    elif  [ "${ver}" = "2" ]; then
        echo "You will install eaccelerator 0.9.6.1"
    elif [ "${ver}" = "3" ]; then
        echo "You will install eaccelerator 1.0-dev"
    else
        echo "Input error,please input 1, 2 or 3 !"
        echo "Please Rerun $0"
        exit 1
    fi

    echo "====== Installing eAccelerator ======"
    Press_Start

    rm -f ${PHP_Path}/conf.d/001-eaccelerator.ini
    Addons_Get_PHP_Ext_Dir
    zend_ext="${zend_ext_dir}eaccelerator.so"
    if [ -s "${zend_ext}" ]; then
        rm -f "${zend_ext}"
    fi
    if echo "${Cur_PHP_Version}" | grep -vEqi '^5.[2345].';then
        Echo_Red "Error: Current PHP Version can't install eAccelerator."
        Echo_Red "Maybe php was didn't install or php configuration file has errors.Please check."
        sleep 3
        exit 1
    fi

    cd ${cur_dir}/src
    if [ "${ver}" = "1" ]; then
        Install_Old_eA
    elif [ "${ver}" = "2" ]; then
        Install_New_eA
    else
        Install_Dev_eA
    fi

    mkdir -p /usr/local/eaccelerator_cache
    rm -rf /usr/local/eaccelerator_cache/*

    cat >${PHP_Path}/conf.d/001-eaccelerator.ini<<EOF
[eaccelerator]
zend_extension="${zend_ext}"
eaccelerator.shm_size="1"
eaccelerator.cache_dir="/usr/local/eaccelerator_cache"
eaccelerator.enable="1"
eaccelerator.optimizer="1"
eaccelerator.check_mtime="1"
eaccelerator.debug="0"
eaccelerator.filter=""
eaccelerator.shm_max="0"
eaccelerator.shm_ttl="3600"
eaccelerator.shm_prune_period="3600"
eaccelerator.shm_only="0"
eaccelerator.compress="1"
eaccelerator.compress_level="9"
eaccelerator.keys = "disk_only"
eaccelerator.sessions = "disk_only"
eaccelerator.content = "disk_only"
EOF

    if [ -s "${zend_ext}" ]; then
        Restart_PHP
        Echo_Green "====== eAccelerator install completed ======"
        Echo_Green "eAccelerator installed successfully, enjoy it!"
    else
        rm -f ${PHP_Path}/conf.d/001-eaccelerator.ini
        Echo_Red "eAccelerator install failed!"
    fi
}

Uninstall_eAccelerator()
{
    echo "You will uninstall eAccelerator..."
    Press_Start
    rm -f ${PHP_Path}/conf.d/001-eaccelerator.ini
    echo "Delete eaccelerator_cache directory..."
    rm -rf /usr/local/eaccelerator_cache
    Restart_PHP
    Echo_Green "Uninstall eAccelerator completed."
}
#!/bin/bash

Install_Multiplephp()
{
    Get_Dist_Name
    Check_DB
    Check_Stack

    if [ "${Get_Stack}" != "lnmp" ]; then
        echo "Multiple PHP Versions ONLY for LNMP Stack!"
        exit 1
    fi

#which PHP Version do you want to install?
    echo "==========================="

    PHPSelect=""
    Echo_Yellow "You have 6 options for your PHP install."
    echo "1: Install ${PHP_Info[0]}"
    echo "2: Install ${PHP_Info[1]}"
    echo "3: Install ${PHP_Info[2]}"
    echo "4: Install ${PHP_Info[3]}"
    echo "5: Install ${PHP_Info[4]}"
    echo "6: Install ${PHP_Info[5]}"
    echo "7: Install ${PHP_Info[6]}"
    read -p "Enter your choice (1, 2, 3, 4, 5, 6 or 7): " PHPSelect

    case "${PHPSelect}" in
    1)
        echo "You will install ${PHP_Info[0]}"
        MPHP_Path='/usr/local/php5.2'
        if [ "${DB_Name}" == "None" ];then
            Echo_Red "MySQL or MariaDB not found,can't install PHP 5.2!"
            exit 1
        fi
        ;;
    2)
        echo "You will install ${PHP_Info[1]}"
        MPHP_Path='/usr/local/php5.3'
        ;;
    3)
        echo "You will Install ${PHP_Info[2]}"
        MPHP_Path='/usr/local/php5.4'
        ;;
    4)
        echo "You will install ${PHP_Info[3]}"
        MPHP_Path='/usr/local/php5.5'
        ;;
    5)
        echo "You will install ${PHP_Info[4]}"
        MPHP_Path='/usr/local/php5.6'
        ;;
    6)
        echo "You will install ${PHP_Info[5]}"
        MPHP_Path='/usr/local/php7.0'
        ;;
    7)
        echo "You will install ${PHP_Info[6]}"
        MPHP_Path='/usr/local/php7.1'
        ;;
    *)
        echo "No enter,You Must enter one option."
        exit 1
        ;;
    esac

    Press_Install
    if [ -d "${MPHP_Path}" ]; then
        echo "${Php_Ver} already exists!"
        exit 1
    fi
    PHP_with_curl
    PHP_with_openssl

    if [ "${PHPSelect}" = "1" ]; then
        Install_MPHP5.2 2>&1 | tee /root/install-mphp5.2.log
    elif [ "${PHPSelect}" = "2" ]; then
        Install_MPHP5.3 2>&1 | tee /root/install-mphp5.3.log
    elif [ "${PHPSelect}" = "3" ]; then
        Install_MPHP5.4 2>&1 | tee /root/install-mphp5.4.log
    elif [ "${PHPSelect}" = "4" ]; then
        Install_MPHP5.5 2>&1 | tee /root/install-mphp5.5.log
    elif [ "${PHPSelect}" = "5" ]; then
        Install_MPHP5.6 2>&1 | tee /root/install-mphp5.6.log
    elif [ "${PHPSelect}" = "6" ]; then
        Install_MPHP7.0 2>&1 | tee /root/install-mphp7.0.log
    elif [ "${PHPSelect}" = "7" ]; then
        Install_MPHP7.1 2>&1 | tee /root/install-mphp7.1.log
    fi
}

Install_MPHP5.2()
{
    cd ${cur_dir}/src
    Download_Files ${Download_Mirror}/web/php/${Php_Ver}.tar.bz2 ${Php_Ver}.tar.bz2
    Download_Files ${Download_Mirror}/web/phpfpm/php-5.2.17-fpm-0.5.14.diff.gz php-5.2.17-fpm-0.5.14.diff.gz

    lnmp stop

    if [[ -s /usr/local/autoconf-2.13/bin/autoconf && -s /usr/local/autoconf-2.13/bin/autoheader ]]; then
        Echo_Green "Autconf 2.13...ok"
    else
        Install_Autoconf
    fi

    ln -s /usr/lib/libevent-1.4.so.2 /usr/local/lib/libevent-1.4.so.2
    ln -s /usr/lib/libltdl.so /usr/lib/libltdl.so.3

    cd ${cur_dir}/src
    rm -rf php-5.2.17
    Check_Curl

    echo "Start install ${Php_Ver}....."
    Export_PHP_Autoconf
    tar jxf ${Php_Ver}.tar.bz2
    gzip -cd php-5.2.17-fpm-0.5.14.diff.gz | patch -d ${Php_Ver} -p1
    cd ${Php_Ver}
    patch -p1 < ${cur_dir}/src/patch/php-5.2.17-max-input-vars.patch
    patch -p0 < ${cur_dir}/src/patch/php-5.2.17-xml.patch
    patch -p1 < ${cur_dir}/src/patch/debian_patches_disable_SSLv2_for_openssl_1_0_0.patch
    ./buildconf --force
    ./configure --prefix=${MPHP_Path} --with-config-file-path=${MPHP_Path}/etc --with-config-file-scan-dir=${MPHP_Path}/conf.d --with-mysql=${MySQL_Dir} --with-mysqli=${MySQL_Config} --with-pdo-mysql=${MySQL_Dir} --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --enable-discard-path --enable-magic-quotes --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl=/usr/local/curl --enable-mbregex --enable-fastcgi --enable-fpm --enable-force-cgi-redirect --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --with-mime-magic
    make ZEND_EXTRA_LIBS='-liconv'
    make install

    mkdir -p ${MPHP_Path}/{etc,conf.d}
    \cp php.ini-dist ${MPHP_Path}/etc/php.ini

    # php extensions
    sed -i 's#extension_dir = "./"#extension_dir = "${MPHP_Path}/lib/php/extensions/no-debug-non-zts-20060613/"\n#' ${MPHP_Path}/etc/php.ini
    sed -i 's#output_buffering = Off#output_buffering = On#' ${MPHP_Path}/etc/php.ini
    sed -i 's/post_max_size = 8M/post_max_size = 50M/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/upload_max_filesize = 2M/upload_max_filesize = 50M/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/;date.timezone =/date.timezone = PRC/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/short_open_tag = Off/short_open_tag = On/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/; cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/; cgi.fix_pathinfo=0/cgi.fix_pathinfo=0/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/max_execution_time = 30/max_execution_time = 300/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,fsocket/g' ${MPHP_Path}/etc/php.ini

    cd ${cur_dir}/src
    if [ "${Is_64bit}" = "y" ] ; then
        Download_Files ${Download_Mirror}/web/zend/ZendOptimizer-3.3.9-linux-glibc23-x86_64.tar.gz
        tar zxf ZendOptimizer-3.3.9-linux-glibc23-x86_64.tar.gz
        mkdir -p /usr/local/zend52/
        \cp ZendOptimizer-3.3.9-linux-glibc23-x86_64/data/5_2_x_comp/ZendOptimizer.so /usr/local/zend52/ZendOptimizer5.2.so
    else
        Download_Files ${Download_Mirror}/web/zend/ZendOptimizer-3.3.9-linux-glibc23-i386.tar.gz
        tar zxf ZendOptimizer-3.3.9-linux-glibc23-i386.tar.gz
        mkdir -p /usr/local/zend52/
        \cp ZendOptimizer-3.3.9-linux-glibc23-i386/data/5_2_x_comp/ZendOptimizer.so /usr/local/zend52/ZendOptimizer5.2.so
    fi

    cat >${MPHP_Path}/conf.d/002-zendoptimizer.ini<<EOF
[Zend Optimizer]
zend_optimizer.optimization_level=1
zend_extension="/usr/local/zend52/ZendOptimizer5.2.so"
EOF

    rm -f ${MPHP_Path}/etc/php-fpm.conf
    \cp ${cur_dir}/conf/php-fpm5.2.conf ${MPHP_Path}/etc/php-fpm.conf
    \cp ${cur_dir}/conf/enable-php5.2.conf /usr/local/nginx/conf/enable-php5.2.conf
    \cp ${cur_dir}/init.d/init.d.php-fpm5.2 /etc/init.d/php-fpm5.2
    chmod +x /etc/init.d/php-fpm5.2

    sed -i "s#/usr/local/php/#${MPHP_Path}/#g" ${MPHP_Path}/etc/php-fpm.conf
    sed -i 's#php-cgi.sock#php-cgi5.2.sock#g' ${MPHP_Path}/etc/php-fpm.conf
    sed -i "s#/usr/local/php/#${MPHP_Path}/#g" /etc/init.d/php-fpm5.2
    sed -i 's@# Provides:          php-fpm@# Provides:          php-fpm5.2@g' /etc/init.d/php-fpm5.2

    StartUp php-fpm5.2

    sleep 2

    lnmp start

    rm -rf ${cur_dir}/src/${Php_Ver}

    if [ -s ${MPHP_Path}/sbin/php-fpm ] && [ -s ${MPHP_Path}/etc/php.ini ] && [ -s ${MPHP_Path}/bin/php ]; then
        echo "==========================================="
        Echo_Green "You have successfully install ${Php_Ver}"
        echo "==========================================="
    else
        rm -rf ${MPHP_Path}
        Echo_Red "Failed to install ${Php_Ver}, you can download /root/install-mphp5.2.log from your server, and upload install-mphp5.2.log to LNMP Forum."
    fi
}

Install_MPHP5.3()
{
    lnmp stop

    cd ${cur_dir}/src
    Check_Curl
    Download_Files ${Download_Mirror}/web/php/${Php_Ver}.tar.bz2 ${Php_Ver}.tar.bz2
    Echo_Blue "[+] Installing ${Php_Ver}..."
    Tarj_Cd ${Php_Ver}.tar.bz2 ${Php_Ver}
    patch -p1 < ${cur_dir}/src/patch/php-5.3-multipart-form-data.patch
    ./configure --prefix=${MPHP_Path} --with-config-file-path=${MPHP_Path}/etc --with-config-file-scan-dir=${MPHP_Path}/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-magic-quotes --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl=/usr/local/curl --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo ${PHP_Modules_Options}

    make ZEND_EXTRA_LIBS='-liconv'
    make install

    echo "Copy new php configure file..."
    mkdir -p ${MPHP_Path}/{etc,conf.d}
    \cp php.ini-production ${MPHP_Path}/etc/php.ini

    cd ${cur_dir}
    # php extensions
    echo "Modify php.ini......"
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/register_long_arrays =.*/;register_long_arrays = On/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/magic_quotes_gpc =.*/;magic_quotes_gpc = On/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server/g' ${MPHP_Path}/etc/php.ini

    echo "Install ZendGuardLoader for PHP 5.3..."
    cd ${cur_dir}/src
    if [ "${Is_64bit}" = "y" ] ; then
        Download_Files ${Download_Mirror}/web/zend/ZendGuardLoader-php-5.3-linux-glibc23-x86_64.tar.gz
        tar zxf ZendGuardLoader-php-5.3-linux-glibc23-x86_64.tar.gz
        mkdir -p /usr/local/zend/
        \cp ZendGuardLoader-php-5.3-linux-glibc23-x86_64/php-5.3.x/ZendGuardLoader.so /usr/local/zend/ZendGuardLoader5.3.so
    else
        Download_Files ${Download_Mirror}/web/zend/ZendGuardLoader-php-5.3-linux-glibc23-i386.tar.gz
        tar zxf ZendGuardLoader-php-5.3-linux-glibc23-i386.tar.gz
        mkdir -p /usr/local/zend/
        \cp ZendGuardLoader-php-5.3-linux-glibc23-i386/php-5.3.x/ZendGuardLoader.so /usr/local/zend/ZendGuardLoader5.3.so
    fi

    echo "Write ZendGuardLoader to php.ini..."
    cat >${MPHP_Path}/conf.d/002-zendguardloader.ini<<EOF
[Zend ZendGuard Loader]
zend_extension=/usr/local/zend/ZendGuardLoader5.3.so
zend_loader.enable=1
zend_loader.disable_licensing=0
zend_loader.obfuscation_level_support=3
zend_loader.license_path=
EOF

    echo "Creating new php-fpm configure file..."
    cat >${MPHP_Path}/etc/php-fpm.conf<<EOF
[global]
pid = ${MPHP_Path}/var/run/php-fpm.pid
error_log = ${MPHP_Path}/var/log/php-fpm.log
log_level = notice

[www]
listen = /tmp/php-cgi5.3.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 6
request_terminate_timeout = 100
request_slowlog_timeout = 0
slowlog = var/log/slow.log
EOF

    echo "Copy php-fpm init.d file..."
    \cp ${cur_dir}/src/${Php_Ver}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm5.3
    chmod +x /etc/init.d/php-fpm5.3

    StartUp php-fpm5.3

    \cp ${cur_dir}/conf/enable-php5.3.conf /usr/local/nginx/conf/enable-php5.3.conf

    sleep 2

    lnmp start

    rm -rf ${cur_dir}/src/${Php_Ver}

    if [ -s ${MPHP_Path}/sbin/php-fpm ] && [ -s ${MPHP_Path}/etc/php.ini ] && [ -s ${MPHP_Path}/bin/php ]; then
        echo "==========================================="
        Echo_Green "You have successfully install ${Php_Ver} "
        echo "==========================================="
    else
        rm -rf ${MPHP_Path}
        Echo_Red "Failed to install ${Php_Ver}, you can download /root/install-mphp5.3.log from your server, and upload install-mphp5.3.log to LNMP Forum."
    fi
}

Install_MPHP5.4()
{
    lnmp stop

    cd ${cur_dir}/src
    Download_Files ${Download_Mirror}/web/php/${Php_Ver}.tar.bz2 ${Php_Ver}.tar.bz2
    Echo_Blue "[+] Installing ${Php_Ver}..."
    Tarj_Cd ${Php_Ver}.tar.bz2 ${Php_Ver}
    ./configure --prefix=${MPHP_Path} --with-config-file-path=${MPHP_Path}/etc --with-config-file-scan-dir=${MPHP_Path}/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-intl --with-xsl ${PHP_Modules_Options}

    make ZEND_EXTRA_LIBS='-liconv'
    make install

    echo "Copy new php configure file..."
    mkdir -p ${MPHP_Path}/{etc,conf.d}
    \cp php.ini-production ${MPHP_Path}/etc/php.ini

    cd ${cur_dir}
    # php extensions
    echo "Modify php.ini......"
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server/g' ${MPHP_Path}/etc/php.ini

    echo "Install ZendGuardLoader for PHP 5.4..."
    cd ${cur_dir}/src
    if [ "${Is_64bit}" = "y" ] ; then
        Download_Files ${Download_Mirror}/web/zend/ZendGuardLoader-70429-PHP-5.4-linux-glibc23-x86_64.tar.gz
        tar zxf ZendGuardLoader-70429-PHP-5.4-linux-glibc23-x86_64.tar.gz
        mkdir -p /usr/local/zend/
        \cp ZendGuardLoader-70429-PHP-5.4-linux-glibc23-x86_64/php-5.4.x/ZendGuardLoader.so /usr/local/zend/ZendGuardLoader5.4.so
    else
        Download_Files ${Download_Mirror}/web/zend/ZendGuardLoader-70429-PHP-5.4-linux-glibc23-i386.tar.gz
        tar zxf ZendGuardLoader-70429-PHP-5.4-linux-glibc23-i386.tar.gz
        mkdir -p /usr/local/zend/
        \cp ZendGuardLoader-70429-PHP-5.4-linux-glibc23-i386/php-5.4.x/ZendGuardLoader.so /usr/local/zend/ZendGuardLoader5.4.so
    fi

    echo "Write ZendGuardLoader to php.ini..."
    cat >${MPHP_Path}/conf.d/002-zendguardloader.ini<<EOF
[Zend ZendGuard Loader]
zend_extension=/usr/local/zend/ZendGuardLoader5.4.so
zend_loader.enable=1
zend_loader.disable_licensing=0
zend_loader.obfuscation_level_support=3
zend_loader.license_path=
EOF

    echo "Creating new php-fpm configure file..."
    cat >${MPHP_Path}/etc/php-fpm.conf<<EOF
[global]
pid = ${MPHP_Path}/var/run/php-fpm.pid
error_log = ${MPHP_Path}/var/log/php-fpm.log
log_level = notice

[www]
listen = /tmp/php-cgi5.4.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 6
request_terminate_timeout = 100
request_slowlog_timeout = 0
slowlog = var/log/slow.log
EOF

    echo "Copy php-fpm init.d file..."
    \cp ${cur_dir}/src/${Php_Ver}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm5.4
    chmod +x /etc/init.d/php-fpm5.4

    StartUp php-fpm5.4

    \cp ${cur_dir}/conf/enable-php5.4.conf /usr/local/nginx/conf/enable-php5.4.conf

    sleep 2

    lnmp start

    rm -rf ${cur_dir}/src/${Php_Ver}

    if [ -s ${MPHP_Path}/sbin/php-fpm ] && [ -s ${MPHP_Path}/etc/php.ini ] && [ -s ${MPHP_Path}/bin/php ]; then
        echo "==========================================="
        Echo_Green "You have successfully install ${Php_Ver} "
        echo "==========================================="
    else
        rm -rf ${MPHP_Path}
        Echo_Red "Failed to install ${Php_Ver}, you can download /root/install-mphp5.4.log from your server, and upload install-mphp5.4.log to LNMP Forum."
    fi
}

Install_MPHP5.5()
{
    lnmp stop

    cd ${cur_dir}/src
    Download_Files ${Download_Mirror}/web/php/${Php_Ver}.tar.bz2 ${Php_Ver}.tar.bz2
    Echo_Blue "[+] Installing ${Php_Ver}..."
    Tarj_Cd ${Php_Ver}.tar.bz2 ${Php_Ver}
    ./configure --prefix=${MPHP_Path} --with-config-file-path=${MPHP_Path}/etc --with-config-file-scan-dir=${MPHP_Path}/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --enable-intl --with-xsl ${PHP_Modules_Options}

    make ZEND_EXTRA_LIBS='-liconv'
    make install

    echo "Copy new php configure file..."
    mkdir -p ${MPHP_Path}/{etc,conf.d}
    \cp php.ini-production ${MPHP_Path}/etc/php.ini

    cd ${cur_dir}
    # php extensions
    echo "Modify php.ini..."
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server/g' ${MPHP_Path}/etc/php.ini

    echo "Install ZendGuardLoader for PHP 5.5..."
    cd ${cur_dir}/src
    if [ "${Is_64bit}" = "y" ] ; then
        Download_Files ${Download_Mirror}/web/zend/zend-loader-php5.5-linux-x86_64.tar.gz
        tar zxf zend-loader-php5.5-linux-x86_64.tar.gz
        mkdir -p /usr/local/zend/
        \cp zend-loader-php5.5-linux-x86_64/ZendGuardLoader.so /usr/local/zend/ZendGuardLoader5.5.so
    else
        Download_Files ${Download_Mirror}/web/zend/zend-loader-php5.5-linux-i386.tar.gz
        tar zxf zend-loader-php5.5-linux-i386.tar.gz
        mkdir -p /usr/local/zend/
        \cp zend-loader-php5.5-linux-i386/ZendGuardLoader.so /usr/local/zend/ZendGuardLoader5.5.so
    fi

    echo "Write ZendGuardLoader to php.ini..."
    cat >${MPHP_Path}/conf.d/002-zendguardloader.ini<<EOF
[Zend ZendGuard Loader]
zend_extension=/usr/local/zend/ZendGuardLoader5.5.so
zend_loader.enable=1
zend_loader.disable_licensing=0
zend_loader.obfuscation_level_support=3
zend_loader.license_path=
EOF

    echo "Creating new php-fpm configure file..."
    cat >${MPHP_Path}/etc/php-fpm.conf<<EOF
[global]
pid = ${MPHP_Path}/var/run/php-fpm.pid
error_log = ${MPHP_Path}/var/log/php-fpm.log
log_level = notice

[www]
listen = /tmp/php-cgi5.5.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 6
request_terminate_timeout = 100
request_slowlog_timeout = 0
slowlog = var/log/slow.log
EOF

    echo "Copy php-fpm init.d file..."
    \cp ${cur_dir}/src/${Php_Ver}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm5.5
    chmod +x /etc/init.d/php-fpm5.5

    StartUp php-fpm5.5

    \cp ${cur_dir}/conf/enable-php5.5.conf /usr/local/nginx/conf/enable-php5.5.conf

    sleep 2

    lnmp start

    rm -rf ${cur_dir}/src/${Php_Ver}

    if [ -s ${MPHP_Path}/sbin/php-fpm ] && [ -s ${MPHP_Path}/etc/php.ini ] && [ -s ${MPHP_Path}/bin/php ]; then
        echo "==========================================="
        Echo_Green "You have successfully install ${Php_Ver} "
        echo "==========================================="
    else
        rm -rf ${MPHP_Path}
        Echo_Red "Failed to install ${Php_Ver}, you can download /root/install-mphp5.5.log from your server, and upload install-mphp5.5.log to LNMP Forum."
    fi
}

Install_MPHP5.6()
{
    lnmp stop

    cd ${cur_dir}/src
    Download_Files ${Download_Mirror}/web/php/${Php_Ver}.tar.bz2 ${Php_Ver}.tar.bz2
    Echo_Blue "[+] Installing ${Php_Ver}"
    Tarj_Cd ${Php_Ver}.tar.bz2 ${Php_Ver}
    ./configure --prefix=${MPHP_Path} --with-config-file-path=${MPHP_Path}/etc --with-config-file-scan-dir=${MPHP_Path}/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --enable-intl --with-xsl ${PHP_Modules_Options}

    make ZEND_EXTRA_LIBS='-liconv'
    make install

    echo "Copy new php configure file..."
    mkdir -p ${MPHP_Path}/{etc,conf.d}
    \cp php.ini-production ${MPHP_Path}/etc/php.ini

    cd ${cur_dir}
    # php extensions
    echo "Modify php.ini......"
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server/g' ${MPHP_Path}/etc/php.ini

    echo "Install ZendGuardLoader for PHP 5.6..."
    cd ${cur_dir}/src
    if [ "${Is_64bit}" = "y" ] ; then
        Download_Files ${Download_Mirror}/web/zend/zend-loader-php5.6-linux-x86_64.tar.gz
        tar zxf zend-loader-php5.6-linux-x86_64.tar.gz
        mkdir -p /usr/local/zend/
        \cp zend-loader-php5.6-linux-x86_64/ZendGuardLoader.so /usr/local/zend/ZendGuardLoader5.6.so
    else
        Download_Files ${Download_Mirror}/web/zend/zend-loader-php5.6-linux-i386.tar.gz
        tar zxf zend-loader-php5.6-linux-i386.tar.gz
        mkdir -p /usr/local/zend/
        \cp zend-loader-php5.6-linux-i386/ZendGuardLoader.so /usr/local/zend/ZendGuardLoader5.6.so
    fi

    echo "Write ZendGuardLoader to php.ini..."
    cat >${MPHP_Path}/conf.d/002-zendguardloader.ini<<EOF
[Zend ZendGuard Loader]
zend_extension=/usr/local/zend/ZendGuardLoader5.6.so
zend_loader.enable=1
zend_loader.disable_licensing=0
zend_loader.obfuscation_level_support=3
zend_loader.license_path=
EOF

    echo "Creating new php-fpm configure file..."
    cat >${MPHP_Path}/etc/php-fpm.conf<<EOF
[global]
pid = ${MPHP_Path}/var/run/php-fpm.pid
error_log = ${MPHP_Path}/var/log/php-fpm.log
log_level = notice

[www]
listen = /tmp/php-cgi5.6.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 6
request_terminate_timeout = 100
request_slowlog_timeout = 0
slowlog = var/log/slow.log
EOF

    echo "Copy php-fpm init.d file..."
    \cp ${cur_dir}/src/${Php_Ver}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm5.6
    chmod +x /etc/init.d/php-fpm5.6

    StartUp php-fpm5.6

    \cp ${cur_dir}/conf/enable-php5.6.conf /usr/local/nginx/conf/enable-php5.6.conf

    sleep 2

    lnmp start

    rm -rf ${cur_dir}/src/${Php_Ver}

    if [ -s ${MPHP_Path}/sbin/php-fpm ] && [ -s ${MPHP_Path}/etc/php.ini ] && [ -s ${MPHP_Path}/bin/php ]; then
        echo "==========================================="
        Echo_Green "You have successfully install ${Php_Ver} "
        echo "==========================================="
    else
        rm -rf ${MPHP_Path}
        Echo_Red "Failed to install ${Php_Ver}, you can download /root/install-mphp5.6.log from your server, and upload install-mphp5.6.log to LNMP Forum."
    fi
}

Install_MPHP7.0()
{
    lnmp stop

    cd ${cur_dir}/src
    Download_Files ${Download_Mirror}/web/php/${Php_Ver}.tar.bz2 ${Php_Ver}.tar.bz2
    Echo_Blue "[+] Installing ${Php_Ver}"
    Tarj_Cd ${Php_Ver}.tar.bz2 ${Php_Ver}
    ./configure --prefix=${MPHP_Path} --with-config-file-path=${MPHP_Path}/etc --with-config-file-scan-dir=${MPHP_Path}/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --enable-mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --enable-intl --enable-pcntl --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --with-xsl ${PHP_Modules_Options}

    make ZEND_EXTRA_LIBS='-liconv'
    make install

    echo "Copy new php configure file..."
    mkdir -p ${MPHP_Path}/{etc,conf.d}
    \cp php.ini-production ${MPHP_Path}/etc/php.ini

    cd ${cur_dir}
    # php extensions
    echo "Modify php.ini......"
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server/g' ${MPHP_Path}/etc/php.ini

    echo "Install ZendGuardLoader for PHP 7..."
    echo "unavailable now."

    echo "Write ZendGuardLoader to php.ini..."
    cat >${MPHP_Path}/conf.d/002-zendguardloader.ini<<EOF
[Zend ZendGuard Loader]
;php7 do not support zendguardloader @Sep.2015,after support you can uncomment the following line.
;zend_extension=/usr/local/zend/ZendGuardLoader.so
;zend_loader.enable=1
;zend_loader.disable_licensing=0
;zend_loader.obfuscation_level_support=3
;zend_loader.license_path=
EOF

    echo "Creating new php-fpm configure file..."
    cat >${MPHP_Path}/etc/php-fpm.conf<<EOF
[global]
pid = ${MPHP_Path}/var/run/php-fpm.pid
error_log = ${MPHP_Path}/var/log/php-fpm.log
log_level = notice

[www]
listen = /tmp/php-cgi7.0.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 6
request_terminate_timeout = 100
request_slowlog_timeout = 0
slowlog = var/log/slow.log
EOF

    echo "Copy php-fpm init.d file..."
    \cp ${cur_dir}/src/${Php_Ver}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm7.0
    chmod +x /etc/init.d/php-fpm7.0

    StartUp php-fpm7.0

    \cp ${cur_dir}/conf/enable-php7.0.conf /usr/local/nginx/conf/enable-php7.0.conf

    sleep 2

    lnmp start

    rm -rf ${cur_dir}/src/${Php_Ver}

    if [ -s ${MPHP_Path}/sbin/php-fpm ] && [ -s ${MPHP_Path}/etc/php.ini ] && [ -s ${MPHP_Path}/bin/php ]; then
        echo "==========================================="
        Echo_Green "You have successfully install ${Php_Ver} "
        echo "==========================================="
    else
        rm -rf ${MPHP_Path}
        Echo_Red "Failed to install ${Php_Ver}, you can download /root/install-mphp7.0.log from your server, and upload install-mphp7.0.log to LNMP Forum."
    fi
}

Install_MPHP7.1()
{
    lnmp stop

    cd ${cur_dir}/src
    Download_Files ${Download_Mirror}/web/php/${Php_Ver}.tar.bz2 ${Php_Ver}.tar.bz2
    Echo_Blue "[+] Installing ${Php_Ver}"
    Tarj_Cd ${Php_Ver}.tar.bz2 ${Php_Ver}
    ./configure --prefix=${MPHP_Path} --with-config-file-path=${MPHP_Path}/etc --with-config-file-scan-dir=${MPHP_Path}/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --enable-mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --enable-intl --enable-pcntl --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --with-xsl ${PHP_Modules_Options}

    make ZEND_EXTRA_LIBS='-liconv'
    make install

    echo "Copy new php configure file..."
    mkdir -p ${MPHP_Path}/{etc,conf.d}
    \cp php.ini-production ${MPHP_Path}/etc/php.ini

    cd ${cur_dir}
    # php extensions
    echo "Modify php.ini......"
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' ${MPHP_Path}/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server/g' ${MPHP_Path}/etc/php.ini

    echo "Install ZendGuardLoader for PHP 7.1..."
    echo "unavailable now."

    echo "Write ZendGuardLoader to php.ini..."
    cat >${MPHP_Path}/conf.d/002-zendguardloader.ini<<EOF
[Zend ZendGuard Loader]
;php7.1 do not support zendguardloader,after support you can uncomment the following line.
;zend_extension=/usr/local/zend/ZendGuardLoader.so
;zend_loader.enable=1
;zend_loader.disable_licensing=0
;zend_loader.obfuscation_level_support=3
;zend_loader.license_path=
EOF

    echo "Creating new php-fpm configure file..."
    cat >${MPHP_Path}/etc/php-fpm.conf<<EOF
[global]
pid = ${MPHP_Path}/var/run/php-fpm.pid
error_log = ${MPHP_Path}/var/log/php-fpm.log
log_level = notice

[www]
listen = /tmp/php-cgi7.1.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 6
request_terminate_timeout = 100
request_slowlog_timeout = 0
slowlog = var/log/slow.log
EOF

    echo "Copy php-fpm init.d file..."
    \cp ${cur_dir}/src/${Php_Ver}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm7.1
    chmod +x /etc/init.d/php-fpm7.1

    StartUp php-fpm7.1

    \cp ${cur_dir}/conf/enable-php7.1.conf /usr/local/nginx/conf/enable-php7.1.conf

    sleep 2

    lnmp start

    rm -rf ${cur_dir}/src/${Php_Ver}

    if [ -s ${MPHP_Path}/sbin/php-fpm ] && [ -s ${MPHP_Path}/etc/php.ini ] && [ -s ${MPHP_Path}/bin/php ]; then
        echo "==========================================="
        Echo_Green "You have successfully install ${Php_Ver} "
        echo "==========================================="
    else
        rm -rf ${MPHP_Path}
        Echo_Red "Failed to install ${Php_Ver}, you can download /root/install-mphp7.1.log from your server, and upload install-mphp7.1.log to LNMP Forum."
    fi
}
#!/bin/bash

DB_Info=('MySQL 5.1.73' 'MySQL 5.5.56' 'MySQL 5.6.36' 'MySQL 5.7.18' 'MariaDB 5.5.56' 'MariaDB 10.0.30' 'MariaDB 10.1.23')
PHP_Info=('PHP 5.2.17' 'PHP 5.3.29' 'PHP 5.4.45' 'PHP 5.5.38' 'PHP 5.6.31' 'PHP 7.0.21' 'PHP 7.1.7')
Apache_Info=('Apache 2.2.34' 'Apache 2.4.27')

Database_Selection()
{
#which MySQL Version do you want to install?
    DBSelect="2"
    Echo_Yellow "You have 5 options for your DataBase install."
    echo "1: Install ${DB_Info[0]}"
    echo "2: Install ${DB_Info[1]} (Default)"
    echo "3: Install ${DB_Info[2]}"
    echo "4: Install ${DB_Info[3]}"
    echo "5: Install ${DB_Info[4]}"
    echo "6: Install ${DB_Info[5]}"
    echo "7: Install ${DB_Info[6]}"
    echo "0: DO NOT Install MySQL/MariaDB"
    read -p "Enter your choice (1, 2, 3, 4, 5, 6, 7 or 0): " DBSelect

    case "${DBSelect}" in
    1)
        echo "You will install ${DB_Info[0]}"
        ;;
    2)
        echo "You will install ${DB_Info[1]}"
        ;;
    3)
        echo "You will Install ${DB_Info[2]}"
        ;;
    4)
        echo "You will install ${DB_Info[3]}"
        ;;
    5)
        echo "You will install ${DB_Info[4]}"
        ;;
    6)
        echo "You will install ${DB_Info[5]}"
        ;;
    7)
        echo "You will install ${DB_Info[6]}"
        ;;
    0)
        echo "Do not install MySQL/MariaDB!"
        ;;
    *)
        echo "No input,You will install ${DB_Info[1]}"
        DBSelect="2"
    esac

    if [[ "${DBSelect}" = "3" || "${DBSelect}" = "4" || "${DBSelect}" = "6" || "${DBSelect}" = "7" ]] && [ `free -m | grep Mem | awk '{print  $2}'` -le 1024 ]; then
        echo "Memory less than 1GB, can't install MySQL 5.6, 5.7 or MairaDB 10!"
        exit 1
    fi

    if [[ "${DBSelect}" = "5" || "${DBSelect}" = "6" || "${DBSelect}" = "7" ]]; then
        MySQL_Bin="/usr/local/mariadb/bin/mysql"
        MySQL_Config="/usr/local/mariadb/bin/mysql_config"
        MySQL_Dir="/usr/local/mariadb"
    elif [[ "${DBSelect}" = "1" || "${DBSelect}" = "2" || "${DBSelect}" = "3" || "${DBSelect}" = "4" ]]; then
        MySQL_Bin="/usr/local/mysql/bin/mysql"
        MySQL_Config="/usr/local/mysql/bin/mysql_config"
        MySQL_Dir="/usr/local/mysql"
    fi

    if [[ "${DBSelect}" != "0" ]]; then
        #set mysql root password
        echo "==========================="
        DB_Root_Password="root"
        Echo_Yellow "Please setup root password of MySQL.(Default password: root)"
        read -p "Please enter: " DB_Root_Password
        if [ "${DB_Root_Password}" = "" ]; then
            DB_Root_Password="root"
        fi
        echo "MySQL root password: ${DB_Root_Password}"

        #do you want to enable or disable the InnoDB Storage Engine?
        echo "==========================="

        InstallInnodb="y"
        Echo_Yellow "Do you want to enable or disable the InnoDB Storage Engine?"
        read -p "Default enable,Enter your choice [Y/n]: " InstallInnodb

        case "${InstallInnodb}" in
        [yY][eE][sS]|[yY])
            echo "You will enable the InnoDB Storage Engine"
            InstallInnodb="y"
            ;;
        [nN][oO]|[nN])
            echo "You will disable the InnoDB Storage Engine!"
            InstallInnodb="n"
            ;;
        *)
            echo "No input,The InnoDB Storage Engine will enable."
            InstallInnodb="y"
        esac
    fi
}

PHP_Selection()
{
#which PHP Version do you want to install?
    echo "==========================="

    PHPSelect="3"
    Echo_Yellow "You have 6 options for your PHP install."
    echo "1: Install ${PHP_Info[0]}"
    echo "2: Install ${PHP_Info[1]}"
    echo "3: Install ${PHP_Info[2]}"
    echo "4: Install ${PHP_Info[3]} (Default)"
    echo "5: Install ${PHP_Info[4]}"
    echo "6: Install ${PHP_Info[5]}"
    echo "7: Install ${PHP_Info[6]}"
    read -p "Enter your choice (1, 2, 3, 4, 5, 6 or 7): " PHPSelect

    case "${PHPSelect}" in
    1)
        echo "You will install ${PHP_Info[0]}"
        if [[ "${DBSelect}" = 0 ]]; then
            echo "You didn't select MySQL/MariaDB can't select ${PHP_Info[0]}!"
            exit 1
        fi
        ;;
    2)
        echo "You will install ${PHP_Info[1]}"
        ;;
    3)
        echo "You will Install ${PHP_Info[2]}"
        ;;
    4)
        echo "You will install ${PHP_Info[3]}"
        ;;
    5)
        echo "You will install ${PHP_Info[4]}"
        ;;
    6)
        echo "You will install ${PHP_Info[5]}"
        ;;
    7)
        echo "You will install ${PHP_Info[6]}"
        ;;
    *)
        echo "No input,You will install ${PHP_Info[3]}"
        PHPSelect="4"
    esac
}

MemoryAllocator_Selection()
{
#which Memory Allocator do you want to install?
    echo "==========================="

    SelectMalloc="1"
    Echo_Yellow "You have 3 options for your Memory Allocator install."
    echo "1: Don't install Memory Allocator. (Default)"
    echo "2: Install Jemalloc"
    echo "3: Install TCMalloc"
    read -p "Enter your choice (1, 2 or 3): " SelectMalloc

    case "${SelectMalloc}" in
    1)
        echo "You will install not install Memory Allocator."
        ;;
    2)
        echo "You will install JeMalloc"
        ;;
    3)
        echo "You will Install TCMalloc"
        ;;
    *)
        echo "No input,You will not install Memory Allocator."
        SelectMalloc="1"
    esac

    if [ "${SelectMalloc}" =  "1" ]; then
        MySQL51MAOpt=''
        MySQL55MAOpt=''
        NginxMAOpt=''
    elif [ "${SelectMalloc}" =  "2" ]; then
        MySQL51MAOpt='--with-mysqld-ldflags=-ljemalloc'
        MySQL55MAOpt="-DCMAKE_EXE_LINKER_FLAGS='-ljemalloc' -DWITH_SAFEMALLOC=OFF"
        MariaDBMAOpt=''
        NginxMAOpt="--with-ld-opt='-ljemalloc'"
    elif [ "${SelectMalloc}" =  "3" ]; then
        MySQL51MAOpt='--with-mysqld-ldflags=-ltcmalloc'
        MySQL55MAOpt="-DCMAKE_EXE_LINKER_FLAGS='-ltcmalloc' -DWITH_SAFEMALLOC=OFF"
        MariaDBMAOpt="-DCMAKE_EXE_LINKER_FLAGS='-ltcmalloc' -DWITH_SAFEMALLOC=OFF"
        NginxMAOpt='--with-google_perftools_module'
    fi
}

Dispaly_Selection()
{
    Database_Selection
    PHP_Selection
    MemoryAllocator_Selection
}

Apache_Selection()
{
    echo "==========================="
#set Server Administrator Email Address
    ServerAdmin=""
    read -p "Please enter Administrator Email Address: " ServerAdmin
    if [ "${ServerAdmin}" == "" ]; then
        echo "Administrator Email Address will set to webmaster@example.com!"
        ServerAdmin="webmaster@example.com"
    else
    echo "==========================="
    echo Server Administrator Email: "${ServerAdmin}"
    echo "==========================="
    fi

#which Apache Version do you want to install?
    echo "==========================="

    ApacheSelect="1"
    Echo_Yellow "You have 2 options for your Apache install."
    echo "1: Install ${Apache_Info[0]} (Default)"
    echo "2: Install ${Apache_Info[1]}"
    read -p "Enter your choice (1 or 2): " ApacheSelect

    if [ "${ApacheSelect}" = "1" ]; then
        echo "You will install ${Apache_Info[0]}"
    elif [ "${ApacheSelect}" = "2" ]; then
        echo "You will install ${Apache_Info[1]}"
    else
        echo "No input,You will install ${Apache_Info[0]}"
        ApacheSelect="1"
    fi
    if [[ "${PHPSelect}" = "1" && "${ApacheSelect}" = "2" ]]; then
        Echo_Red "PHP 5.2.17 is not compatible with Apache 2.4.*."
        Echo_Red "Force use Apache 2.2.31"
        ApacheSelect="1"
    fi
}

Kill_PM()
{
    if ps aux | grep "yum" | grep -qv "grep"; then
        killall yum
    elif ps aux | grep "apt-get" | grep -qv "grep"; then
        killall apt-get
    fi
}

Press_Install()
{
    echo ""
    Echo_Green "Press any key to install...or Press Ctrl+c to cancel"
    OLDCONFIG=`stty -g`
    stty -icanon -echo min 1 time 0
    dd count=1 2>/dev/null
    stty ${OLDCONFIG}
    . include/version.sh
    Kill_PM
}

Press_Start()
{
    echo ""
    Echo_Green "Press any key to start...or Press Ctrl+c to cancel"
    OLDCONFIG=`stty -g`
    stty -icanon -echo min 1 time 0
    dd count=1 2>/dev/null
    stty ${OLDCONFIG}
}

Install_LSB()
{
    echo "[+] Installing lsb..."
    if [ "$PM" = "yum" ]; then
        yum -y install redhat-lsb
    elif [ "$PM" = "apt" ]; then
        apt-get update
        apt-get --no-install-recommends install -y lsb-release
    fi
}

Get_Dist_Version()
{
    if [ -s /usr/bin/python3 ]; then
        eval ${DISTRO}_Version=`/usr/bin/python3 -c 'import platform; print(platform.linux_distribution()[1])'`
    elif [ -s /usr/bin/python2 ]; then
        eval ${DISTRO}_Version=`/usr/bin/python2 -c 'import platform; print platform.linux_distribution()[1]'`
    fi
    if [ $? -ne 0 ]; then
        Install_LSB
        eval ${DISTRO}_Version=`lsb_release -rs`
    fi
}

Get_Dist_Name()
{
    if grep -Eqi "CentOS" /etc/issue || grep -Eq "CentOS" /etc/*-release; then
        DISTRO='CentOS'
        PM='yum'
    elif grep -Eqi "Red Hat Enterprise Linux Server" /etc/issue || grep -Eq "Red Hat Enterprise Linux Server" /etc/*-release; then
        DISTRO='RHEL'
        PM='yum'
    elif grep -Eqi "Aliyun" /etc/issue || grep -Eq "Aliyun" /etc/*-release; then
        DISTRO='Aliyun'
        PM='yum'
    elif grep -Eqi "Fedora" /etc/issue || grep -Eq "Fedora" /etc/*-release; then
        DISTRO='Fedora'
        PM='yum'
    elif grep -Eqi "Amazon Linux AMI" /etc/issue || grep -Eq "Amazon Linux AMI" /etc/*-release; then
        DISTRO='Amazon'
        PM='yum'
    elif grep -Eqi "Debian" /etc/issue || grep -Eq "Debian" /etc/*-release; then
        DISTRO='Debian'
        PM='apt'
    elif grep -Eqi "Ubuntu" /etc/issue || grep -Eq "Ubuntu" /etc/*-release; then
        DISTRO='Ubuntu'
        PM='apt'
    elif grep -Eqi "Raspbian" /etc/issue || grep -Eq "Raspbian" /etc/*-release; then
        DISTRO='Raspbian'
        PM='apt'
    elif grep -Eqi "Deepin" /etc/issue || grep -Eq "Deepin" /etc/*-release; then
        DISTRO='Deepin'
        PM='apt'
    elif grep -Eqi "Mint" /etc/issue || grep -Eq "Mint" /etc/*-release; then
        DISTRO='Mint'
        PM='apt'
    else
        DISTRO='unknow'
    fi
    Get_OS_Bit
}

Get_RHEL_Version()
{
    Get_Dist_Name
    if [ "${DISTRO}" = "RHEL" ]; then
        if grep -Eqi "release 5." /etc/redhat-release; then
            echo "Current Version: RHEL Ver 5"
            RHEL_Ver='5'
        elif grep -Eqi "release 6." /etc/redhat-release; then
            echo "Current Version: RHEL Ver 6"
            RHEL_Ver='6'
        elif grep -Eqi "release 7." /etc/redhat-release; then
            echo "Current Version: RHEL Ver 7"
            RHEL_Ver='7'
        fi
    fi
}

Get_OS_Bit()
{
    if [[ `getconf WORD_BIT` = '32' && `getconf LONG_BIT` = '64' ]] ; then
        Is_64bit='y'
    else
        Is_64bit='n'
    fi
}

Get_ARM()
{
    if uname -m | grep -Eqi "arm"; then
        Is_ARM='y'
    fi
}

Download_Files()
{
    local URL=$1
    local FileName=$2
    if [ -s "${FileName}" ]; then
        echo "${FileName} [found]"
    else
        echo "Notice: ${FileName} not found!!!download now..."
        wget -c --progress=bar:force --prefer-family=IPv4 --no-check-certificate ${URL}
    fi
}

Tar_Cd()
{
    local FileName=$1
    local DirName=$2
    cd ${cur_dir}/src
    [[ -d "${DirName}" ]] && rm -rf ${DirName}
    echo "Uncompress ${FileName}..."
    tar zxf ${FileName}
    echo "cd ${DirName}..."
    cd ${DirName}
}

Tarj_Cd()
{
    local FileName=$1
    local DirName=$2
    cd ${cur_dir}/src
    [[ -d "${DirName}" ]] && rm -rf ${DirName}
    echo "Uncompress ${FileName}..."
    tar jxf ${FileName}
    echo "cd ${DirName}..."
    cd ${DirName}
}

Check_LNMPConf()
{
    if [ ! -s "${cur_dir}/lnmp.conf" ]; then
        Echo_Red "lnmp.conf was not exsit!"
        exit 1
    fi
    if [[ "${Download_Mirror}" = "" || "${MySQL_Data_Dir}" = "" || "${MariaDB_Data_Dir}" = "" || "${Default_Website_Dir}" = "" ]]; then
        Echo_Red "Can't get values from lnmp.conf!"
        exit 1
    fi
    if [[ "${MySQL_Data_Dir}" = "/" || "${MariaDB_Data_Dir}" = "/" || "${Default_Website_Dir}" = "/" ]]; then
        Echo_Red "Can't set MySQL/MariaDB/Website Directory to / !"
        exit 1
    fi
}

Print_APP_Ver()
{
    echo "You will install ${Stack} stack."
    if [ "${Stack}" != "lamp" ]; then
        echo ${Nginx_Ver}
    fi

    if [[ "${DBSelect}" = "1" || "${DBSelect}" = "2" || "${DBSelect}" = "3" || "${DBSelect}" = "4" ]]; then
        echo "${Mysql_Ver}"
    elif [[ "${DBSelect}" = "5" || "${DBSelect}" = "6" || "${DBSelect}" = "7" ]]; then
        echo "${Mariadb_Ver}"
    elif [ "${DBSelect}" = "0" ]; then
        echo "Do not install MySQL/MariaDB!"
    fi

    echo "${Php_Ver}"

    if [ "${Stack}" != "lnmp" ]; then
        echo "${Apache_Ver}"
    fi

    if [ "${SelectMalloc}" = "2" ]; then
        echo "${Jemalloc_Ver}"
    elif [ "${SelectMalloc}" = "3" ]; then
        echo "${TCMalloc_Ver}"
    fi
    echo "Enable InnoDB: ${InstallInnodb}"
    echo "Print lnmp.conf infomation..."
    echo "Download Mirror: ${Download_Mirror}"
    echo "Nginx Additional Modules: ${Nginx_Modules_Options}"
    echo "PHP Additional Modules: ${PHP_Modules_Options}"
    if [[ "${DBSelect}" = "1" || "${DBSelect}" = "2" || "${DBSelect}" = "3" || "${DBSelect}" = "4" ]]; then
        echo "Database Directory: ${MySQL_Data_Dir}"
    elif [[ "${DBSelect}" = "5" || "${DBSelect}" = "6" || "${DBSelect}" = "7" ]]; then
        echo "Database Directory: ${MariaDB_Data_Dir}"
    elif [ "${DBSelect}" = "0" ]; then
        echo "Do not install MySQL/MariaDB!"
    fi
    echo "Default Website Directory: ${Default_Website_Dir}"
}

Print_Sys_Info()
{
    eval echo "${DISTRO} \${${DISTRO}_Version}"
    cat /etc/issue
    cat /etc/*-release
    uname -a
    MemTotal=`free -m | grep Mem | awk '{print  $2}'`
    echo "Memory is: ${MemTotal} MB "
    df -h
}

StartUp()
{
    init_name=$1
    echo "Add ${init_name} service at system startup..."
    if [ "$PM" = "yum" ]; then
        chkconfig --add ${init_name}
        chkconfig ${init_name} on
    elif [ "$PM" = "apt" ]; then
        update-rc.d -f ${init_name} defaults
    fi
}

Remove_StartUp()
{
    init_name=$1
    echo "Removing ${init_name} service at system startup..."
    if [ "$PM" = "yum" ]; then
        chkconfig ${init_name} off
        chkconfig --del ${init_name}
    elif [ "$PM" = "apt" ]; then
        update-rc.d -f ${init_name} remove
    fi
}

Check_Mirror()
{
    if [ ! -s /usr/bin/curl ]; then
        if [ "$PM" = "yum" ]; then
            yum install -y curl
        elif [ "$PM" = "apt" ]; then
            apt-get update
            apt-get install -y curl
        fi
    fi
    country=`curl -sSk --connect-timeout 30 -m 60 https://ip.vpser.net/country`
    echo "Server Location: ${country}"
    if [ "${Download_Mirror}" = "https://soft.vpser.net" ]; then
        mirror_code=`curl -o /dev/null -m 20 --connect-timeout 20 -sk -w %{http_code} http://soft.vpser.net`
        if [ "${mirror_code}" != "200" ]; then
            if [ "${country}" = "CN" ]; then
                mirror_code=`curl -o /dev/null -m 20 --connect-timeout 20 -sk -w %{http_code} http://soft1.vpser.net`
                if [ "${mirror_code}" = "200" ]; then
                    echo "Change to mirror http://soft1.vpser.net"
                    Download_Mirror='http://soft1.vpser.net'
                else
                    echo "Change to mirror fttp://soft.vpser.net"
                    Download_Mirror='ftp://soft.vpser.net'
                fi
            else
                mirror_code=`curl -o /dev/null -m 20 --connect-timeout 20 -sk -w %{http_code} http://soft2.vpser.net`
                if [ "${mirror_code}" = "200" ]; then
                    echo "Change to mirror http://soft2.vpser.net"
                    Download_Mirror='http://soft2.vpser.net'
                else
                    echo "Change to mirror ftp://soft.vpser.net"
                    Download_Mirror='ftp://soft.vpser.net'
                fi
            fi
        fi
    fi
}

Color_Text()
{
  echo -e " \e[0;$2m$1\e[0m"
}

Echo_Red()
{
  echo $(Color_Text "$1" "31")
}

Echo_Green()
{
  echo $(Color_Text "$1" "32")
}

Echo_Yellow()
{
  echo $(Color_Text "$1" "33")
}

Echo_Blue()
{
  echo $(Color_Text "$1" "34")
}

Get_PHP_Ext_Dir()
{
    Cur_PHP_Version="`/usr/local/php/bin/php-config --version`"
    zend_ext_dir="`/usr/local/php/bin/php-config --extension-dir`/"
}

Check_Stack()
{
    if [[ -s /usr/local/php/sbin/php-fpm && -s /usr/local/php/etc/php-fpm.conf && -s /etc/init.d/php-fpm && -s /usr/local/nginx/sbin/nginx ]]; then
        Get_Stack="lnmp"
    elif [[ -s /usr/local/nginx/sbin/nginx && -s /usr/local/apache/bin/httpd && -s /usr/local/apache/conf/httpd.conf && -s /etc/init.d/httpd && ! -s /usr/local/php/sbin/php-fpm ]]; then
        Get_Stack="lnmpa"
    elif [[ -s /usr/local/apache/bin/httpd && -s /usr/local/apache/conf/httpd.conf && -s /etc/init.d/httpd && ! -s /usr/local/php/sbin/php-fpm ]]; then
        Get_Stack="lamp"
    else
        Get_Stack="unknow"
    fi
}

Check_DB()
{
    if [[ -s /usr/local/mariadb/bin/mysql && -s /usr/local/mariadb/bin/mysqld_safe && -s /etc/my.cnf ]]; then
        MySQL_Bin="/usr/local/mariadb/bin/mysql"
        MySQL_Config="/usr/local/mariadb/bin/mysql_config"
        MySQL_Dir="/usr/local/mariadb"
        Is_MySQL="n"
        DB_Name="mariadb"
    elif [[ -s /usr/local/mysql/bin/mysql && -s /usr/local/mysql/bin/mysqld_safe && -s /etc/my.cnf ]]; then
        MySQL_Bin="/usr/local/mysql/bin/mysql"
        MySQL_Config="/usr/local/mysql/bin/mysql_config"
        MySQL_Dir="/usr/local/mysql"
        Is_MySQL="y"
        DB_Name="mysql"
    else
        Is_MySQL="None"
        DB_Name="None"
    fi
}

Do_Query()
{
    echo "$1" >/tmp/.mysql.tmp
    Check_DB
    ${MySQL_Bin} --defaults-file=~/.my.cnf </tmp/.mysql.tmp
    return $?
}

Make_TempMycnf()
{
    cat >~/.my.cnf<<EOF
[client]
user=root
password='$1'
EOF
    chmod 600 ~/.my.cnf
}

Verify_DB_Password()
{
    Check_DB
    status=1
    while [ $status -eq 1 ]; do
        read -s -p "Enter current root password of Database (Password will not shown): " DB_Root_Password
        Make_TempMycnf "${DB_Root_Password}"
        Do_Query ""
        status=$?
    done
    echo "OK, MySQL root password correct."
}

TempMycnf_Clean()
{
    if [ -s ~/.my.cnf ]; then
        rm -f ~/.my.cnf
    fi
    if [ -s /tmp/.mysql.tmp ]; then
        rm -f /tmp/.mysql.tmp
    fi
}#!/bin/bash

Set_Timezone()
{
    Echo_Blue "Setting timezone..."
    rm -rf /etc/localtime
    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
}

CentOS_InstallNTP()
{
    Echo_Blue "[+] Installing ntp..."
    yum install -y ntp
    ntpdate -u pool.ntp.org
    date
    start_time=$(date +%s)
}

Deb_InstallNTP()
{
    apt-get update -y
    Echo_Blue "[+] Installing ntp..."
    apt-get install -y ntpdate
    ntpdate -u pool.ntp.org
    date
    start_time=$(date +%s)
}

CentOS_RemoveAMP()
{
    Echo_Blue "[-] Yum remove packages..."
    rpm -qa|grep httpd
    rpm -e httpd httpd-tools --nodeps
    rpm -qa|grep mysql
    rpm -e mysql mysql-libs --nodeps
    rpm -qa|grep php
    rpm -e php-mysql php-cli php-gd php-common php --nodeps

    Remove_Error_Libcurl

    yum -y remove httpd*
    yum -y remove mysql-server mysql mysql-libs
    yum -y remove php*
    yum clean all
}

Deb_RemoveAMP()
{
    Echo_Blue "[-] apt-get remove packages..."
    apt-get update -y
    for removepackages in apache2 apache2-doc apache2-utils apache2.2-common apache2.2-bin apache2-mpm-prefork apache2-doc apache2-mpm-worker mysql-client mysql-server mysql-common mysql-server-core-5.5 mysql-client-5.5 php5 php5-common php5-cgi php5-cli php5-mysql php5-curl php5-gd;
    do apt-get purge -y $removepackages; done
    killall apache2
    dpkg -l |grep apache
    dpkg -P apache2 apache2-doc apache2-mpm-prefork apache2-utils apache2.2-common
    dpkg -l |grep mysql
    dpkg -P mysql-server mysql-common libmysqlclient15off libmysqlclient15-dev
    dpkg -l |grep php
    dpkg -P php5 php5-common php5-cli php5-cgi php5-mysql php5-curl php5-gd
    apt-get autoremove -y && apt-get clean
}

Disable_Selinux()
{
    if [ -s /etc/selinux/config ]; then
        sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/selinux/config
    fi
}

Xen_Hwcap_Setting()
{
    if [ -s /etc/ld.so.conf.d/libc6-xen.conf ]; then
        sed -i 's/hwcap 1 nosegneg/hwcap 0 nosegneg/g' /etc/ld.so.conf.d/libc6-xen.conf
    fi
}

Check_Hosts()
{
    if grep -Eqi '^127.0.0.1[[:space:]]*localhost' /etc/hosts; then
        echo "Hosts: ok."
    else
        echo "127.0.0.1 localhost.localdomain localhost" >> /etc/hosts
    fi
    pingresult=`ping -c1 lnmp.org 2>&1`
    echo "${pingresult}"
    if echo "${pingresult}" | grep -q "unknown host"; then
        echo "DNS...fail"
        echo "Writing nameserver to /etc/resolv.conf ..."
        echo -e "nameserver 208.67.220.220\nnameserver 114.114.114.114" > /etc/resolv.conf
    else
        echo "DNS...ok"
    fi
}

RHEL_Modify_Source()
{
    Get_RHEL_Version
    \cp ${cur_dir}/conf/CentOS-Base-163.repo /etc/yum.repos.d/CentOS-Base-163.repo
    sed -i "s/\$releasever/${RHEL_Ver}/g" /etc/yum.repos.d/CentOS-Base-163.repo
    sed -i "s/RPM-GPG-KEY-CentOS-6/RPM-GPG-KEY-CentOS-${RHEL_Ver}/g" /etc/yum.repos.d/CentOS-Base-163.repo
    yum clean all
    yum makecache
}

Ubuntu_Modify_Source()
{
    CodeName=''
    if grep -Eqi "10.10" /etc/*-release || echo "${Ubuntu_Version}" | grep -Eqi '^10.10'; then
        CodeName='maverick'
    elif grep -Eqi "11.04" /etc/*-release || echo "${Ubuntu_Version}" | grep -Eqi '^11.04'; then
        CodeName='natty'
    elif  grep -Eqi "11.10" /etc/*-release || echo "${Ubuntu_Version}" | grep -Eqi '^11.10'; then
        CodeName='oneiric'
    elif grep -Eqi "12.10" /etc/*-release || echo "${Ubuntu_Version}" | grep -Eqi '^12.10'; then
        CodeName='quantal'
    elif grep -Eqi "13.04" /etc/*-release || echo "${Ubuntu_Version}" | grep -Eqi '^13.04'; then
        CodeName='raring'
    elif grep -Eqi "13.10" /etc/*-release || echo "${Ubuntu_Version}" | grep -Eqi '^13.10'; then
        CodeName='saucy'
    elif grep -Eqi "10.04" /etc/*-release || echo "${Ubuntu_Version}" | grep -Eqi '^10.04'; then
        CodeName='lucid'
    elif grep -Eqi "14.10" /etc/*-release || echo "${Ubuntu_Version}" | grep -Eqi '^14.10'; then
        CodeName='utopic'
    elif grep -Eqi "15.04" /etc/*-release || echo "${Ubuntu_Version}" | grep -Eqi '^15.04'; then
        Ubuntu_Deadline vivid
    elif grep -Eqi "12.04" /etc/*-release || echo "${Ubuntu_Version}" | grep -Eqi '^12.04'; then
        Ubuntu_Deadline precise
    elif grep -Eqi "15.10" /etc/*-release || echo "${Ubuntu_Version}" | grep -Eqi '^15.10'; then
        Ubuntu_Deadline wily
    elif grep -Eqi "16.10" /etc/*-release || echo "${Ubuntu_Version}" | grep -Eqi '^16.10'; then
        Ubuntu_Deadline yakkety
    elif grep -Eqi "14.04" /etc/*-release || echo "${Ubuntu_Version}" | grep -Eqi '^14.04'; then
        Ubuntu_Deadline trusty
    elif grep -Eqi "17.04" /etc/*-release || echo "${Ubuntu_Version}" | grep -Eqi '^17.04'; then
        Ubuntu_Deadline zesty
    fi
    if [ "${CodeName}" != "" ]; then
        \cp /etc/apt/sources.list /etc/apt/sources.list.$(date +"%Y%m%d")
        cat > /etc/apt/sources.list<<EOF
deb http://old-releases.ubuntu.com/ubuntu/ ${CodeName} main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ ${CodeName}-security main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ ${CodeName}-updates main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ ${CodeName}-proposed main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu/ ${CodeName}-backports main restricted universe multiverse
deb-src http://old-releases.ubuntu.com/ubuntu/ ${CodeName} main restricted universe multiverse
deb-src http://old-releases.ubuntu.com/ubuntu/ ${CodeName}-security main restricted universe multiverse
deb-src http://old-releases.ubuntu.com/ubuntu/ ${CodeName}-updates main restricted universe multiverse
deb-src http://old-releases.ubuntu.com/ubuntu/ ${CodeName}-proposed main restricted universe multiverse
deb-src http://old-releases.ubuntu.com/ubuntu/ ${CodeName}-backports main restricted universe multiverse
EOF
    fi
}

Check_Old_Releases_URL()
{
    OR_Status=`wget --spider --server-response http://old-releases.ubuntu.com/ubuntu/dists/$1/Release 2>&1 | awk '/^  HTTP/{print $2}'`
    if [ ${OR_Status} != "404" ]; then
        echo "Ubuntu old-releases status: ${OR_Status}";
        CodeName=$1
    fi
}

Ubuntu_Deadline()
{
    vivid_deadline=`date -d "2016-2-24 00:00:00" +%s`
    precise_deadline=`date -d "2017-5-27 00:00:00" +%s`
    wily_deadline=`date -d "2016-7-22 00:00:00" +%s`
    yakkety_deadline=`date -d "2017-7-22 00:00:00" +%s`
    trusty_deadline=`date -d "2019-7-22 00:00:00" +%s`
    zesty_deadline=`date -d "2018-1-31 00:00:00" +%s`
    cur_time=`date  +%s`
    case "$1" in
        vivid)
            if [ ${cur_time} -gt ${vivid_deadline} ]; then
                echo "${cur_time} > ${vivid_deadline}"
                Check_Old_Releases_URL vivid
            fi
            ;;
        precise)
            if [ ${cur_time} -gt ${precise_deadline} ]; then
                echo "${cur_time} > ${precise_deadline}"
                Check_Old_Releases_URL precise
            fi
            ;;
        wily)
            if [ ${cur_time} -gt ${wily_deadline} ]; then
                echo "${cur_time} > ${wily_deadline}"
                Check_Old_Releases_URL wily
            fi
            ;;
        yakkety)
            if [ ${cur_time} -gt ${yakkety_deadline} ]; then
                echo "${cur_time} > ${yakkety_deadline}"
                Check_Old_Releases_URL yakkety
            fi
            ;;
        trusty)
            if [ ${cur_time} -gt ${trusty_deadline} ]; then
                echo "${cur_time} > ${trusty_deadline}"
                Check_Old_Releases_URL trusty
            fi
            ;;
        zesty)
            if [ ${cur_time} -gt ${zesty_deadline} ]; then
                echo "${cur_time} > ${zesty_deadline}"
                Check_Old_Releases_URL zesty
            fi
            ;;
    esac
}

CentOS_Dependent()
{
    \cp /etc/yum.conf /etc/yum.conf.lnmp
    sed -i 's:exclude=.*:exclude=:g' /etc/yum.conf

    Echo_Blue "[+] Yum installing dependent packages..."
    for packages in make cmake gcc gcc-c++ gcc-g77 flex bison file libtool libtool-libs autoconf kernel-devel patch wget crontabs libjpeg libjpeg-devel libpng libpng-devel libpng10 libpng10-devel gd gd-devel libxml2 libxml2-devel zlib zlib-devel glib2 glib2-devel unzip tar bzip2 bzip2-devel libevent libevent-devel ncurses ncurses-devel curl curl-devel libcurl libcurl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel libidn libidn-devel openssl openssl-devel vim-minimal gettext gettext-devel ncurses-devel gmp-devel pspell-devel unzip libcap diffutils ca-certificates net-tools libc-client-devel psmisc libXpm-devel git-core c-ares-devel libicu-devel libxslt libxslt-devel xz expat-devel;
    do yum -y install $packages; done

    mv -f /etc/yum.conf.lnmp /etc/yum.conf
}

Deb_Dependent()
{
    Echo_Blue "[+] Apt-get installing dependent packages..."
    apt-get update -y
    apt-get autoremove -y
    apt-get -fy install
    export DEBIAN_FRONTEND=noninteractive
    apt-get --no-install-recommends install -y build-essential gcc g++ make
    for packages in debian-keyring debian-archive-keyring build-essential gcc g++ make cmake autoconf automake re2c wget cron bzip2 libzip-dev libc6-dev bison file rcconf flex vim bison m4 gawk less cpp binutils diffutils unzip tar bzip2 libbz2-dev libncurses5 libncurses5-dev libtool libevent-dev openssl libssl-dev zlibc libsasl2-dev libltdl3-dev libltdl-dev zlib1g zlib1g-dev libbz2-1.0 libbz2-dev libglib2.0-0 libglib2.0-dev libpng3 libjpeg62 libjpeg62-dev libjpeg-dev libpng-dev libpng12-0 libpng12-dev libkrb5-dev curl libcurl3 libcurl3-gnutls libcurl4-gnutls-dev libcurl4-openssl-dev libpq-dev libpq5 gettext libjpeg-dev libpng12-dev libxml2-dev libcap-dev ca-certificates libc-client2007e-dev psmisc patch git libc-ares-dev libicu-dev e2fsprogs libxslt libxslt1-dev libc-client-dev xz-utils libexpat1-dev;
    do apt-get --no-install-recommends install -y $packages --force-yes; done
}

Check_Download()
{
    Echo_Blue "[+] Downloading files..."
    cd ${cur_dir}/src
    Download_Files ${Download_Mirror}/lib/autoconf/${Autoconf_Ver}.tar.gz ${Autoconf_Ver}.tar.gz
    Download_Files ${Download_Mirror}/web/libiconv/${Libiconv_Ver}.tar.gz ${Libiconv_Ver}.tar.gz
    Download_Files ${Download_Mirror}/web/libmcrypt/${LibMcrypt_Ver}.tar.gz ${LibMcrypt_Ver}.tar.gz
    Download_Files ${Download_Mirror}/web/mcrypt/${Mcypt_Ver}.tar.gz ${Mcypt_Ver}.tar.gz
    Download_Files ${Download_Mirror}/web/mhash/${Mhash_Ver}.tar.bz2 ${Mhash_Ver}.tar.bz2
    Download_Files ${Download_Mirror}/lib/freetype/${Freetype_Ver}.tar.bz2 ${Freetype_Ver}.tar.bz2
    Download_Files ${Download_Mirror}/lib/curl/${Curl_Ver}.tar.bz2 ${Curl_Ver}.tar.bz2
    Download_Files ${Download_Mirror}/web/pcre/${Pcre_Ver}.tar.bz2 ${Pcre_Ver}.tar.bz2
    if [ "${SelectMalloc}" = "2" ]; then
        Download_Files ${Download_Mirror}/lib/jemalloc/${Jemalloc_Ver}.tar.bz2 ${Jemalloc_Ver}.tar.bz2
    elif [ "${SelectMalloc}" = "3" ]; then
        Download_Files ${Download_Mirror}/lib/tcmalloc/${TCMalloc_Ver}.tar.gz ${TCMalloc_Ver}.tar.gz
        Download_Files ${Download_Mirror}/lib/libunwind/${Libunwind_Ver}.tar.gz ${Libunwind_Ver}.tar.gz
    fi
    Download_Files ${Download_Mirror}/web/nginx/${Nginx_Ver}.tar.gz ${Nginx_Ver}.tar.gz
    if [[ "${DBSelect}" = "1" || "${DBSelect}" = "2" || "${DBSelect}" = "3" || "${DBSelect}" = "4" ]]; then
        Download_Files ${Download_Mirror}/datebase/mysql/${Mysql_Ver}.tar.gz ${Mysql_Ver}.tar.gz
    elif [[ "${DBSelect}" = "5" || "${DBSelect}" = "6" || "${DBSelect}" = "7" ]]; then
        Download_Files ${Download_Mirror}/datebase/mariadb/${Mariadb_Ver}.tar.gz ${Mariadb_Ver}.tar.gz
    fi
    Download_Files ${Download_Mirror}/web/php/${Php_Ver}.tar.bz2 ${Php_Ver}.tar.bz2
    if [ ${PHPSelect} = "1" ]; then
        Download_Files ${Download_Mirror}/web/phpfpm/${Php_Ver}-fpm-0.5.14.diff.gz ${Php_Ver}-fpm-0.5.14.diff.gz
    fi
    Download_Files ${Download_Mirror}/datebase/phpmyadmin/${PhpMyAdmin_Ver}.tar.xz ${PhpMyAdmin_Ver}.tar.xz
    Download_Files ${Download_Mirror}/prober/p.tar.gz p.tar.gz
    if [ "${Stack}" != "lnmp" ]; then
        Download_Files ${Download_Mirror}/web/apache/${Apache_Ver}.tar.bz2 ${Apache_Ver}.tar.bz2
        Download_Files ${Download_Mirror}/web/apache/${APR_Ver}.tar.bz2 ${APR_Ver}.tar.bz2
        Download_Files ${Download_Mirror}/web/apache/${APR_Util_Ver}.tar.bz2 ${APR_Util_Ver}.tar.bz2
    fi
    if [ "${Enable_Nginx_Openssl}" = 'y' ]; then
        Download_Files ${Download_Mirror}/lib/openssl/${Openssl_Ver}.tar.gz ${Openssl_Ver}.tar.gz
    fi
}

Install_Autoconf()
{
    Echo_Blue "[+] Installing ${Autoconf_Ver}"
    Tar_Cd ${Autoconf_Ver}.tar.gz ${Autoconf_Ver}
    ./configure --prefix=/usr/local/autoconf-2.13
    make && make install
    cd ${cur_dir}/src/
    rm -rf ${cur_dir}/src/${Autoconf_Ver}
}

Install_Libiconv()
{
    Echo_Blue "[+] Installing ${Libiconv_Ver}"
    Tar_Cd ${Libiconv_Ver}.tar.gz ${Libiconv_Ver}
    patch -p0 < ${cur_dir}/src/patch/libiconv-glibc-2.16.patch
    ./configure --enable-static
    make && make install
    cd ${cur_dir}/src/
    rm -rf ${cur_dir}/src/${Libiconv_Ver}
}

Install_Libmcrypt()
{
    Echo_Blue "[+] Installing ${LibMcrypt_Ver}"
    Tar_Cd ${LibMcrypt_Ver}.tar.gz ${LibMcrypt_Ver}
    ./configure
    make && make install
    /sbin/ldconfig
    cd libltdl/
    ./configure --enable-ltdl-install
    make && make install
    ln -sf /usr/local/lib/libmcrypt.la /usr/lib/libmcrypt.la
    ln -sf /usr/local/lib/libmcrypt.so /usr/lib/libmcrypt.so
    ln -sf /usr/local/lib/libmcrypt.so.4 /usr/lib/libmcrypt.so.4
    ln -sf /usr/local/lib/libmcrypt.so.4.4.8 /usr/lib/libmcrypt.so.4.4.8
    ldconfig
    cd ${cur_dir}/src/
    rm -rf ${cur_dir}/src/${LibMcrypt_Ver}
}

Install_Mcrypt()
{
    Echo_Blue "[+] Installing ${Mcypt_Ver}"
    Tar_Cd ${Mcypt_Ver}.tar.gz ${Mcypt_Ver}
    ./configure
    make && make install
    cd ${cur_dir}/src/
    rm -rf ${cur_dir}/src/${Mcypt_Ver}
}

Install_Mhash()
{
    Echo_Blue "[+] Installing ${Mhash_Ver}"
    Tarj_Cd ${Mhash_Ver}.tar.bz2 ${Mhash_Ver}
    ./configure
    make && make install
    ln -sf /usr/local/lib/libmhash.a /usr/lib/libmhash.a
    ln -sf /usr/local/lib/libmhash.la /usr/lib/libmhash.la
    ln -sf /usr/local/lib/libmhash.so /usr/lib/libmhash.so
    ln -sf /usr/local/lib/libmhash.so.2 /usr/lib/libmhash.so.2
    ln -sf /usr/local/lib/libmhash.so.2.0.1 /usr/lib/libmhash.so.2.0.1
    ldconfig
    cd ${cur_dir}/src/
    rm -rf ${cur_dir}/src/${Mhash_Ver}
}

Install_Freetype()
{
    Echo_Blue "[+] Installing ${Freetype_Ver}"
    Tarj_Cd ${Freetype_Ver}.tar.bz2 ${Freetype_Ver}
    ./configure --prefix=/usr/local/freetype
    make && make install

    cat > /etc/ld.so.conf.d/freetype.conf<<EOF
/usr/local/freetype/lib
EOF
    ldconfig
    ln -sf /usr/local/freetype/include/freetype2 /usr/local/include
    ln -sf /usr/local/freetype/include/ft2build.h /usr/local/include
    cd ${cur_dir}/src/
    rm -rf ${cur_dir}/src/${Freetype_Ver}
}

Install_Curl()
{
    if [[ ! -s /usr/local/curl/bin/curl || ! -s /usr/local/curl/lib/libcurl.so || ! -s /usr/local/curl/include/curl/curl.h ]];then
        Echo_Blue "[+] Installing ${Curl_Ver}"
        Tarj_Cd ${Curl_Ver}.tar.bz2 ${Curl_Ver}
        ./configure --prefix=/usr/local/curl --enable-ares --without-nss --with-ssl
        make && make install
        cd ${cur_dir}/src/
        rm -rf ${cur_dir}/src/${Curl_Ver}
    fi
    Remove_Error_Libcurl
}

Install_Pcre()
{
    if [ ! -s /usr/bin/pcre-config ] || /usr/bin/pcre-config --version | grep -vEqi '^8.';then
        Echo_Blue "[+] Installing ${Pcre_Ver}"
        Tarj_Cd ${Pcre_Ver}.tar.bz2 ${Pcre_Ver}
        ./configure
        make && make install
        cd ${cur_dir}/src/
        rm -rf ${cur_dir}/src/${Pcre_Ver}
    fi
}

Install_Jemalloc()
{
    Echo_Blue "[+] Installing ${Jemalloc_Ver}"
    cd ${cur_dir}/src
    Tarj_Cd ${Jemalloc_Ver}.tar.bz2 ${Jemalloc_Ver}
    ./configure
    make && make install
    ldconfig
    cd ${cur_dir}/src/
    rm -rf ${cur_dir}/src/${Jemalloc_Ver}
}

Install_TCMalloc()
{
    Echo_Blue "[+] Installing ${TCMalloc_Ver}"
    if [ "${Is_64bit}" = "y" ] ; then
        Tar_Cd ${Libunwind_Ver}.tar.gz ${Libunwind_Ver}
        CFLAGS=-fPIC ./configure
        make CFLAGS=-fPIC
        make CFLAGS=-fPIC install
        rm -rf ${cur_dir}/src/${Libunwind_Ver}
    fi
    Tar_Cd ${TCMalloc_Ver}.tar.gz ${TCMalloc_Ver}
    if [ "${Is_64bit}" = "y" ] ; then
        ./configure
    else
        ./configure --enable-frame-pointers
    fi
    make && make install
    ldconfig
    cd ${cur_dir}/src/
    rm -rf ${cur_dir}/src/${TCMalloc_Ver}
}

Install_Icu4c()
{
    if [ ! -s /usr/bin/icu-config ] || /usr/bin/icu-config --version | grep '^3.'; then
        Echo_Blue "[+] Installing ${Libicu4c_Ver}"
        cd ${cur_dir}/src
        Download_Files ${Download_Mirror}/lib/icu4c/${Libicu4c_Ver}-src.tgz ${Libicu4c_Ver}-src.tgz
        Tar_Cd ${Libicu4c_Ver}-src.tgz icu/source
        ./configure --prefix=/usr
        make && make install
        cd ${cur_dir}/src/
        rm -rf ${cur_dir}/src/icu
    fi
}

Install_Boost()
{
    Echo_Blue "[+] Installing ${Boost_Ver}"
    if [ "$PM" = "yum" ]; then
        yum -y install python-devel
    elif [ "$PM" = "apt" ]; then
        apt-get update
        apt-get install -y python-dev
    fi
    cd ${cur_dir}/src
    Download_Files ${Download_Mirror}/lib/boost/${Boost_Ver}.tar.bz2 ${Boost_Ver}.tar.bz2
    Tarj_Cd ${Boost_Ver}.tar.bz2 ${Boost_Ver}
    ./bootstrap.sh
    ./b2
    ./b2 install
    cd ${cur_dir}/src/
    rm -rf ${cur_dir}/src/${Boost_Ver}
}

Install_Openssl()
{
    if [ ! -s /usr/local/openssl/bin/openssl ] || /usr/local/openssl/bin/openssl version | grep -v 'OpenSSL 1.0.2'; then
        Echo_Blue "[+] Installing ${Openssl_Ver}"
        cd ${cur_dir}/src
        Download_Files ${Download_Mirror}/lib/openssl/${Openssl_Ver}.tar.gz ${Openssl_Ver}.tar.gz
        [[ -d "${Openssl_Ver}" ]] && rm -rf ${Openssl_Ver}
        Tar_Cd ${Openssl_Ver}.tar.gz ${Openssl_Ver}
        ./config -fPIC --prefix=/usr/local/openssl --openssldir=/usr/local/openssl
        make depend
        make && make install
        cd ${cur_dir}/src/
        rm -rf ${cur_dir}/src/${Openssl_Ver}
    fi
}

CentOS_Lib_Opt()
{
    if [ "${Is_64bit}" = "y" ] ; then
        ln -sf /usr/lib64/libpng.* /usr/lib/
        ln -sf /usr/lib64/libjpeg.* /usr/lib/
    fi

    ulimit -v unlimited

    if [ `grep -L "/lib"    '/etc/ld.so.conf'` ]; then
        echo "/lib" >> /etc/ld.so.conf
    fi

    if [ `grep -L '/usr/lib'    '/etc/ld.so.conf'` ]; then
        echo "/usr/lib" >> /etc/ld.so.conf
        #echo "/usr/lib/openssl/engines" >> /etc/ld.so.conf
    fi

    if [ -d "/usr/lib64" ] && [ `grep -L '/usr/lib64'    '/etc/ld.so.conf'` ]; then
        echo "/usr/lib64" >> /etc/ld.so.conf
        #echo "/usr/lib64/openssl/engines" >> /etc/ld.so.conf
    fi

    if [ `grep -L '/usr/local/lib'    '/etc/ld.so.conf'` ]; then
        echo "/usr/local/lib" >> /etc/ld.so.conf
    fi

    ldconfig

    cat >>/etc/security/limits.conf<<eof
* soft nproc 65535
* hard nproc 65535
* soft nofile 65535
* hard nofile 65535
eof

    echo "fs.file-max=65535" >> /etc/sysctl.conf
}

Deb_Lib_Opt()
{
    if [ "${Is_64bit}" = "y" ] ; then
        ln -sf /usr/lib/x86_64-linux-gnu/libpng* /usr/lib/
        ln -sf /usr/lib/x86_64-linux-gnu/libjpeg* /usr/lib/
    else
        ln -sf /usr/lib/i386-linux-gnu/libpng* /usr/lib/
        ln -sf /usr/lib/i386-linux-gnu/libjpeg* /usr/lib/
        ln -sf /usr/include/i386-linux-gnu/asm /usr/include/asm
    fi

    ulimit -v unlimited

    if [ `grep -L "/lib"    '/etc/ld.so.conf'` ]; then
        echo "/lib" >> /etc/ld.so.conf
    fi

    if [ `grep -L '/usr/lib'    '/etc/ld.so.conf'` ]; then
        echo "/usr/lib" >> /etc/ld.so.conf
    fi

    if [ -d "/usr/lib64" ] && [ `grep -L '/usr/lib64'    '/etc/ld.so.conf'` ]; then
        echo "/usr/lib64" >> /etc/ld.so.conf
    fi

    if [ `grep -L '/usr/local/lib'    '/etc/ld.so.conf'` ]; then
        echo "/usr/local/lib" >> /etc/ld.so.conf
    fi

    if [ -d /usr/include/x86_64-linux-gnu/curl ]; then
        ln -sf /usr/include/x86_64-linux-gnu/curl /usr/include/
    elif [ -d /usr/include/i386-linux-gnu/curl ]; then
        ln -sf /usr/include/i386-linux-gnu/curl /usr/include/
    fi

    if [ -d /usr/include/arm-linux-gnueabihf/curl ]; then
        ln -sf /usr/include/arm-linux-gnueabihf/curl /usr/include/
    fi

    ldconfig

    cat >>/etc/security/limits.conf<<eof
* soft nproc 65535
* hard nproc 65535
* soft nofile 65535
* hard nofile 65535
eof

    echo "fs.file-max=65535" >> /etc/sysctl.conf
}

Remove_Error_Libcurl()
{
    if [ -s /usr/local/lib/libcurl.so ]; then
        rm -f /usr/local/lib/libcurl*
    fi
}#!/bin/bash

Export_PHP_Autoconf()
{
    export PHP_AUTOCONF=/usr/local/autoconf-2.13/bin/autoconf
    export PHP_AUTOHEADER=/usr/local/autoconf-2.13/bin/autoheader
}

Ln_PHP_Bin()
{
    ln -sf /usr/local/php/bin/php /usr/bin/php
    ln -sf /usr/local/php/bin/phpize /usr/bin/phpize
    ln -sf /usr/local/php/bin/pear /usr/bin/pear
    ln -sf /usr/local/php/bin/pecl /usr/bin/pecl
    if [ "${Stack}" = "lnmp" ]; then
        ln -sf /usr/local/php/sbin/php-fpm /usr/bin/php-fpm
    fi
    rm -f /usr/local/php/conf.d/*
}

Pear_Pecl_Set()
{
    pear config-set php_ini /usr/local/php/etc/php.ini
    pecl config-set php_ini /usr/local/php/etc/php.ini
}

Install_Composer()
{
    curl -sS --connect-timeout 30 -m 60 https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    if [ $? -eq 0 ]; then
        echo "Composer install successfully."
    else
        if [ -s /usr/local/php/bin/php ]; then
            wget --prefer-family=IPv4 --no-check-certificate -T 120 -t3 ${Download_Mirror}/web/php/composer/composer.phar -O /usr/local/bin/composer
            if [ $? -eq 0 ]; then
                echo "Composer install successfully."
            else
                echo "Composer install failed!"
            fi
            chmod +x /usr/local/bin/composer
        fi
    fi
}

Check_Curl()
{
    if [ -s /usr/local/curl/bin/curl ]; then
        Echo_Green "Curl ...ok"
    else
        Install_Curl
    fi
}

Install_PHP_52()
{
    Echo_Blue "[+] Installing ${Php_Ver}..."
    Check_Curl
    Export_PHP_Autoconf
    cd ${cur_dir}/src && rm -rf ${Php_Ver}
    tar jxf ${Php_Ver}.tar.bz2
    if [ "${Stack}" = "lnmp" ]; then
        gzip -cd ${Php_Ver}-fpm-0.5.14.diff.gz | patch -d ${Php_Ver} -p1
    fi
    cd ${Php_Ver}/
    patch -p1 < ${cur_dir}/src/patch/php-5.2.17-max-input-vars.patch
    patch -p0 < ${cur_dir}/src/patch/php-5.2.17-xml.patch
    patch -p1 < ${cur_dir}/src/patch/debian_patches_disable_SSLv2_for_openssl_1_0_0.patch
    patch -p1 < ${cur_dir}/src/patch/php-5.2-multipart-form-data.patch
    ./buildconf --force
    if [ "${Stack}" = "lnmp" ]; then
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --with-mysql=${MySQL_Dir} --with-mysqli=${MySQL_Config} --with-pdo-mysql=${MySQL_Dir} --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --enable-discard-path --enable-magic-quotes --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl=/usr/local/curl --enable-mbregex --enable-fastcgi --enable-fpm --enable-force-cgi-redirect --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --with-mime-magic ${PHP_Modules_Options}
    else
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --with-apxs2=/usr/local/apache/bin/apxs --with-mysql=${MySQL_Dir} --with-mysqli=${MySQL_Config} --with-pdo-mysql=${MySQL_Dir} --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --enable-discard-path --enable-magic-quotes --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl=/usr/local/curl --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --with-mime-magic ${PHP_Modules_Options}
    fi
    make ZEND_EXTRA_LIBS='-liconv'
    make install

    mkdir -p /usr/local/php/{etc,conf.d}
    \cp php.ini-dist /usr/local/php/etc/php.ini
    cd ../

    Ln_PHP_Bin

    # php extensions
    sed -i 's#extension_dir = "./"#extension_dir = "/usr/local/php/lib/php/extensions/no-debug-non-zts-20060613/"\n#' /usr/local/php/etc/php.ini
    sed -i 's#output_buffering =.*#output_buffering = On#' /usr/local/php/etc/php.ini
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' /usr/local/php/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' /usr/local/php/etc/php.ini
    sed -i 's/; cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' /usr/local/php/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' /usr/local/php/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,fsocket/g' /usr/local/php/etc/php.ini
    Pear_Pecl_Set

    cd ${cur_dir}/src
    if [ "${Is_64bit}" = "y" ] ; then
        Download_Files ${Download_Mirror}/web/zend/ZendOptimizer-3.3.9-linux-glibc23-x86_64.tar.gz
        tar zxf ZendOptimizer-3.3.9-linux-glibc23-x86_64.tar.gz
        mkdir -p /usr/local/zend/
        \cp ZendOptimizer-3.3.9-linux-glibc23-x86_64/data/5_2_x_comp/ZendOptimizer.so /usr/local/zend/
    else
        Download_Files ${Download_Mirror}/web/zend/ZendOptimizer-3.3.9-linux-glibc23-i386.tar.gz
        tar zxf ZendOptimizer-3.3.9-linux-glibc23-i386.tar.gz
        mkdir -p /usr/local/zend/
        \cp ZendOptimizer-3.3.9-linux-glibc23-i386/data/5_2_x_comp/ZendOptimizer.so /usr/local/zend/
    fi

    cat >/usr/local/php/conf.d/002-zendoptimizer.ini<<EOF
[Zend Optimizer]
zend_optimizer.optimization_level=1
zend_extension="/usr/local/zend/ZendOptimizer.so"
EOF

    if [ "${Stack}" = "lnmp" ]; then
        rm -f /usr/local/php/etc/php-fpm.conf
        \cp ${cur_dir}/conf/php-fpm5.2.conf /usr/local/php/etc/php-fpm.conf
        \cp ${cur_dir}/init.d/init.d.php-fpm5.2 /etc/init.d/php-fpm
        chmod +x /etc/init.d/php-fpm
    fi
}

Install_PHP_53()
{
    Echo_Blue "[+] Installing ${Php_Ver}..."
    Check_Curl
    Tarj_Cd ${Php_Ver}.tar.bz2 ${Php_Ver}
    patch -p1 < ${cur_dir}/src/patch/php-5.3-multipart-form-data.patch
    if [ "${Stack}" = "lnmp" ]; then
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-magic-quotes --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl=/usr/local/curl --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo ${PHP_Modules_Options}
    else
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --with-apxs2=/usr/local/apache/bin/apxs --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-magic-quotes --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl=/usr/local/curl --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo ${PHP_Modules_Options}
    fi

    make ZEND_EXTRA_LIBS='-liconv'
    make install

    Ln_PHP_Bin

    echo "Copy new php configure file..."
    mkdir -p /usr/local/php/{etc,conf.d}
    \cp php.ini-production /usr/local/php/etc/php.ini

    cd ${cur_dir}
    # php extensions
    echo "Modify php.ini......"
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' /usr/local/php/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' /usr/local/php/etc/php.ini
    sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' /usr/local/php/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' /usr/local/php/etc/php.ini
    sed -i 's/register_long_arrays =.*/;register_long_arrays = On/g' /usr/local/php/etc/php.ini
    sed -i 's/magic_quotes_gpc =.*/;magic_quotes_gpc = On/g' /usr/local/php/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server/g' /usr/local/php/etc/php.ini
    Pear_Pecl_Set
    Install_Composer

    echo "Install ZendGuardLoader for PHP 5.3..."
    cd ${cur_dir}/src
    if [ "${Is_64bit}" = "y" ] ; then
        Download_Files ${Download_Mirror}/web/zend/ZendGuardLoader-php-5.3-linux-glibc23-x86_64.tar.gz
        tar zxf ZendGuardLoader-php-5.3-linux-glibc23-x86_64.tar.gz
        mkdir -p /usr/local/zend/
        \cp ZendGuardLoader-php-5.3-linux-glibc23-x86_64/php-5.3.x/ZendGuardLoader.so /usr/local/zend/
    else
        Download_Files ${Download_Mirror}/web/zend/ZendGuardLoader-php-5.3-linux-glibc23-i386.tar.gz
        tar zxf ZendGuardLoader-php-5.3-linux-glibc23-i386.tar.gz
        mkdir -p /usr/local/zend/
        \cp ZendGuardLoader-php-5.3-linux-glibc23-i386/php-5.3.x/ZendGuardLoader.so /usr/local/zend/
    fi

    echo "Write ZendGuardLoader to php.ini..."
    cat >/usr/local/php/conf.d/002-zendguardloader.ini<<EOF
[Zend ZendGuard Loader]
zend_extension=/usr/local/zend/ZendGuardLoader.so
zend_loader.enable=1
zend_loader.disable_licensing=0
zend_loader.obfuscation_level_support=3
zend_loader.license_path=
EOF

if [ "${Stack}" = "lnmp" ]; then
    echo "Creating new php-fpm configure file..."
    cat >/usr/local/php/etc/php-fpm.conf<<EOF
[global]
pid = /usr/local/php/var/run/php-fpm.pid
error_log = /usr/local/php/var/log/php-fpm.log
log_level = notice

[www]
listen = /tmp/php-cgi.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 6
request_terminate_timeout = 100
request_slowlog_timeout = 0
slowlog = var/log/slow.log
EOF

    echo "Copy php-fpm init.d file..."
    \cp ${cur_dir}/src/${Php_Ver}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
    chmod +x /etc/init.d/php-fpm
fi
}

Install_PHP_54()
{
    Echo_Blue "[+] Installing ${Php_Ver}..."
    Tarj_Cd ${Php_Ver}.tar.bz2 ${Php_Ver}
    if [ "${Stack}" = "lnmp" ]; then
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-intl --with-xsl ${PHP_Modules_Options}
    else
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --with-apxs2=/usr/local/apache/bin/apxs --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-intl --with-xsl ${PHP_Modules_Options}
    fi

    make ZEND_EXTRA_LIBS='-liconv'
    make install

    Ln_PHP_Bin

    echo "Copy new php configure file..."
    mkdir -p /usr/local/php/{etc,conf.d}
    \cp php.ini-production /usr/local/php/etc/php.ini

    cd ${cur_dir}
    # php extensions
    echo "Modify php.ini......"
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' /usr/local/php/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' /usr/local/php/etc/php.ini
    sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' /usr/local/php/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' /usr/local/php/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server/g' /usr/local/php/etc/php.ini
    Pear_Pecl_Set
    Install_Composer

    echo "Install ZendGuardLoader for PHP 5.4..."
    cd ${cur_dir}/src
    if [ "${Is_64bit}" = "y" ] ; then
        Download_Files ${Download_Mirror}/web/zend/ZendGuardLoader-70429-PHP-5.4-linux-glibc23-x86_64.tar.gz
        tar zxf ZendGuardLoader-70429-PHP-5.4-linux-glibc23-x86_64.tar.gz
        mkdir -p /usr/local/zend/
        \cp ZendGuardLoader-70429-PHP-5.4-linux-glibc23-x86_64/php-5.4.x/ZendGuardLoader.so /usr/local/zend/
    else
        Download_Files ${Download_Mirror}/web/zend/ZendGuardLoader-70429-PHP-5.4-linux-glibc23-i386.tar.gz
        tar zxf ZendGuardLoader-70429-PHP-5.4-linux-glibc23-i386.tar.gz
        mkdir -p /usr/local/zend/
        \cp ZendGuardLoader-70429-PHP-5.4-linux-glibc23-i386/php-5.4.x/ZendGuardLoader.so /usr/local/zend/
    fi

    echo "Write ZendGuardLoader to php.ini..."
    cat >/usr/local/php/conf.d/002-zendguardloader.ini<<EOF
[Zend ZendGuard Loader]
zend_extension=/usr/local/zend/ZendGuardLoader.so
zend_loader.enable=1
zend_loader.disable_licensing=0
zend_loader.obfuscation_level_support=3
zend_loader.license_path=
EOF

if [ "${Stack}" = "lnmp" ]; then
    echo "Creating new php-fpm configure file..."
    cat >/usr/local/php/etc/php-fpm.conf<<EOF
[global]
pid = /usr/local/php/var/run/php-fpm.pid
error_log = /usr/local/php/var/log/php-fpm.log
log_level = notice

[www]
listen = /tmp/php-cgi.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 6
request_terminate_timeout = 100
request_slowlog_timeout = 0
slowlog = var/log/slow.log
EOF

    echo "Copy php-fpm init.d file..."
    \cp ${cur_dir}/src/${Php_Ver}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
    chmod +x /etc/init.d/php-fpm
fi
}

Install_PHP_55()
{
    Echo_Blue "[+] Installing ${Php_Ver}..."
    Tarj_Cd ${Php_Ver}.tar.bz2 ${Php_Ver}
    if [ "${Stack}" = "lnmp" ]; then
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --enable-intl --with-xsl ${PHP_Modules_Options}
    else
       ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --with-apxs2=/usr/local/apache/bin/apxs --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --enable-intl --with-xsl ${PHP_Modules_Options}
    fi

    make ZEND_EXTRA_LIBS='-liconv'
    make install

    Ln_PHP_Bin

    echo "Copy new php configure file..."
    mkdir -p /usr/local/php/{etc,conf.d}
    \cp php.ini-production /usr/local/php/etc/php.ini

    cd ${cur_dir}
    # php extensions
    echo "Modify php.ini..."
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' /usr/local/php/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' /usr/local/php/etc/php.ini
    sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' /usr/local/php/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' /usr/local/php/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server/g' /usr/local/php/etc/php.ini
    Pear_Pecl_Set
    Install_Composer

    echo "Install ZendGuardLoader for PHP 5.5..."
    cd ${cur_dir}/src
    if [ "${Is_64bit}" = "y" ] ; then
        Download_Files ${Download_Mirror}/web/zend/zend-loader-php5.5-linux-x86_64.tar.gz
        tar zxf zend-loader-php5.5-linux-x86_64.tar.gz
        mkdir -p /usr/local/zend/
        \cp zend-loader-php5.5-linux-x86_64/ZendGuardLoader.so /usr/local/zend/
    else
        Download_Files ${Download_Mirror}/web/zend/zend-loader-php5.5-linux-i386.tar.gz
        tar zxf zend-loader-php5.5-linux-i386.tar.gz
        mkdir -p /usr/local/zend/
        \cp zend-loader-php5.5-linux-i386/ZendGuardLoader.so /usr/local/zend/
    fi

    echo "Write ZendGuardLoader to php.ini..."
    cat >/usr/local/php/conf.d/002-zendguardloader.ini<<EOF
[Zend ZendGuard Loader]
zend_extension=/usr/local/zend/ZendGuardLoader.so
zend_loader.enable=1
zend_loader.disable_licensing=0
zend_loader.obfuscation_level_support=3
zend_loader.license_path=
EOF

if [ "${Stack}" = "lnmp" ]; then
    echo "Creating new php-fpm configure file..."
    cat >/usr/local/php/etc/php-fpm.conf<<EOF
[global]
pid = /usr/local/php/var/run/php-fpm.pid
error_log = /usr/local/php/var/log/php-fpm.log
log_level = notice

[www]
listen = /tmp/php-cgi.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 6
request_terminate_timeout = 100
request_slowlog_timeout = 0
slowlog = var/log/slow.log
EOF

    echo "Copy php-fpm init.d file..."
    \cp ${cur_dir}/src/${Php_Ver}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
    chmod +x /etc/init.d/php-fpm
fi
}

Install_PHP_56()
{
    Echo_Blue "[+] Installing ${Php_Ver}"
    Tarj_Cd ${Php_Ver}.tar.bz2 ${Php_Ver}
    if [ "${Stack}" = "lnmp" ]; then
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --enable-intl --with-xsl ${PHP_Modules_Options}
    else
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --with-apxs2=/usr/local/apache/bin/apxs --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --enable-intl --with-xsl ${PHP_Modules_Options}
    fi

    make ZEND_EXTRA_LIBS='-liconv'
    make install

    Ln_PHP_Bin

    echo "Copy new php configure file..."
    mkdir -p /usr/local/php/{etc,conf.d}
    \cp php.ini-production /usr/local/php/etc/php.ini

    cd ${cur_dir}
    # php extensions
    echo "Modify php.ini......"
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' /usr/local/php/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' /usr/local/php/etc/php.ini
    sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' /usr/local/php/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' /usr/local/php/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server/g' /usr/local/php/etc/php.ini
    Pear_Pecl_Set
    Install_Composer

    echo "Install ZendGuardLoader for PHP 5.6..."
    cd ${cur_dir}/src
    if [ "${Is_64bit}" = "y" ] ; then
        Download_Files ${Download_Mirror}/web/zend/zend-loader-php5.6-linux-x86_64.tar.gz
        tar zxf zend-loader-php5.6-linux-x86_64.tar.gz
        mkdir -p /usr/local/zend/
        \cp zend-loader-php5.6-linux-x86_64/ZendGuardLoader.so /usr/local/zend/
    else
        Download_Files ${Download_Mirror}/web/zend/zend-loader-php5.6-linux-i386.tar.gz
        tar zxf zend-loader-php5.6-linux-i386.tar.gz
        mkdir -p /usr/local/zend/
        \cp zend-loader-php5.6-linux-i386/ZendGuardLoader.so /usr/local/zend/
    fi

    echo "Write ZendGuardLoader to php.ini..."
    cat >/usr/local/php/conf.d/002-zendguardloader.ini<<EOF
[Zend ZendGuard Loader]
zend_extension=/usr/local/zend/ZendGuardLoader.so
zend_loader.enable=1
zend_loader.disable_licensing=0
zend_loader.obfuscation_level_support=3
zend_loader.license_path=
EOF

if [ "${Stack}" = "lnmp" ]; then
    echo "Creating new php-fpm configure file..."
    cat >/usr/local/php/etc/php-fpm.conf<<EOF
[global]
pid = /usr/local/php/var/run/php-fpm.pid
error_log = /usr/local/php/var/log/php-fpm.log
log_level = notice

[www]
listen = /tmp/php-cgi.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 6
request_terminate_timeout = 100
request_slowlog_timeout = 0
slowlog = var/log/slow.log
EOF

    echo "Copy php-fpm init.d file..."
    \cp ${cur_dir}/src/${Php_Ver}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
    chmod +x /etc/init.d/php-fpm
fi
}

Install_PHP_7()
{
    Echo_Blue "[+] Installing ${Php_Ver}"
    Tarj_Cd ${Php_Ver}.tar.bz2 ${Php_Ver}
    if [ "${Stack}" = "lnmp" ]; then
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --enable-mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --enable-intl --enable-pcntl --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --with-xsl ${PHP_Modules_Options}
    else
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --with-apxs2=/usr/local/apache/bin/apxs --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --enable-intl --enable-pcntl --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --with-xsl ${PHP_Modules_Options}
    fi

    make ZEND_EXTRA_LIBS='-liconv'
    make install

    Ln_PHP_Bin

    echo "Copy new php configure file..."
    mkdir -p /usr/local/php/{etc,conf.d}
    \cp php.ini-production /usr/local/php/etc/php.ini

    cd ${cur_dir}
    # php extensions
    echo "Modify php.ini......"
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' /usr/local/php/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' /usr/local/php/etc/php.ini
    sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' /usr/local/php/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' /usr/local/php/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server/g' /usr/local/php/etc/php.ini
    Pear_Pecl_Set
    Install_Composer

    echo "Install ZendGuardLoader for PHP 7.0..."
    echo "unavailable now."

    echo "Write ZendGuardLoader to php.ini..."
    cat >/usr/local/php/conf.d/002-zendguardloader.ini<<EOF
[Zend ZendGuard Loader]
;php7 do not support zendguardloader,after support you can uncomment the following line.
;zend_extension=/usr/local/zend/ZendGuardLoader.so
;zend_loader.enable=1
;zend_loader.disable_licensing=0
;zend_loader.obfuscation_level_support=3
;zend_loader.license_path=
EOF

if [ "${Stack}" = "lnmp" ]; then
    echo "Creating new php-fpm configure file..."
    cat >/usr/local/php/etc/php-fpm.conf<<EOF
[global]
pid = /usr/local/php/var/run/php-fpm.pid
error_log = /usr/local/php/var/log/php-fpm.log
log_level = notice

[www]
listen = /tmp/php-cgi.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 6
request_terminate_timeout = 100
request_slowlog_timeout = 0
slowlog = var/log/slow.log
EOF

    echo "Copy php-fpm init.d file..."
    \cp ${cur_dir}/src/${Php_Ver}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
    chmod +x /etc/init.d/php-fpm
fi
}

Install_PHP_71()
{
    Echo_Blue "[+] Installing ${Php_Ver}"
    Tarj_Cd ${Php_Ver}.tar.bz2 ${Php_Ver}
    if [ "${Stack}" = "lnmp" ]; then
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --enable-mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --enable-intl --enable-pcntl --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --with-xsl ${PHP_Modules_Options}
    else
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --with-apxs2=/usr/local/apache/bin/apxs --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --enable-intl --enable-pcntl --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --with-xsl ${PHP_Modules_Options}
    fi

    make ZEND_EXTRA_LIBS='-liconv'
    make install

    Ln_PHP_Bin

    echo "Copy new php configure file..."
    mkdir -p /usr/local/php/{etc,conf.d}
    \cp php.ini-production /usr/local/php/etc/php.ini

    cd ${cur_dir}
    # php extensions
    echo "Modify php.ini......"
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' /usr/local/php/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' /usr/local/php/etc/php.ini
    sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' /usr/local/php/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' /usr/local/php/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server/g' /usr/local/php/etc/php.ini
    Pear_Pecl_Set
    Install_Composer

    echo "Install ZendGuardLoader for PHP 7.1..."
    echo "unavailable now."

    echo "Write ZendGuardLoader to php.ini..."
    cat >/usr/local/php/conf.d/002-zendguardloader.ini<<EOF
[Zend ZendGuard Loader]
;php7.1 do not support zendguardloader,after support you can uncomment the following line.
;zend_extension=/usr/local/zend/ZendGuardLoader.so
;zend_loader.enable=1
;zend_loader.disable_licensing=0
;zend_loader.obfuscation_level_support=3
;zend_loader.license_path=
EOF

if [ "${Stack}" = "lnmp" ]; then
    echo "Creating new php-fpm configure file..."
    cat >/usr/local/php/etc/php-fpm.conf<<EOF
[global]
pid = /usr/local/php/var/run/php-fpm.pid
error_log = /usr/local/php/var/log/php-fpm.log
log_level = notice

[www]
listen = /tmp/php-cgi.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 6
request_terminate_timeout = 100
request_slowlog_timeout = 0
slowlog = var/log/slow.log
EOF

    echo "Copy php-fpm init.d file..."
    \cp ${cur_dir}/src/${Php_Ver}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
    chmod +x /etc/init.d/php-fpm
fi
}

LNMP_PHP_Opt()
{
    if [[ ${MemTotal} -gt 1024 && ${MemTotal} -le 2048 ]]; then
        sed -i "s#pm.max_children.*#pm.max_children = 20#" /usr/local/php/etc/php-fpm.conf
        sed -i "s#pm.start_servers.*#pm.start_servers = 10#" /usr/local/php/etc/php-fpm.conf
        sed -i "s#pm.min_spare_servers.*#pm.min_spare_servers = 10#" /usr/local/php/etc/php-fpm.conf
        sed -i "s#pm.max_spare_servers.*#pm.max_spare_servers = 20#" /usr/local/php/etc/php-fpm.conf
    elif [[ ${MemTotal} -gt 2048 && ${MemTotal} -le 4096 ]]; then
        sed -i "s#pm.max_children.*#pm.max_children = 40#" /usr/local/php/etc/php-fpm.conf
        sed -i "s#pm.start_servers.*#pm.start_servers = 20#" /usr/local/php/etc/php-fpm.conf
        sed -i "s#pm.min_spare_servers.*#pm.min_spare_servers = 20#" /usr/local/php/etc/php-fpm.conf
        sed -i "s#pm.max_spare_servers.*#pm.max_spare_servers = 40#" /usr/local/php/etc/php-fpm.conf
    elif [[ ${MemTotal} -gt 4096 && ${MemTotal} -le 8192 ]]; then
        sed -i "s#pm.max_children.*#pm.max_children = 60#" /usr/local/php/etc/php-fpm.conf
        sed -i "s#pm.start_servers.*#pm.start_servers = 30#" /usr/local/php/etc/php-fpm.conf
        sed -i "s#pm.min_spare_servers.*#pm.min_spare_servers = 30#" /usr/local/php/etc/php-fpm.conf
        sed -i "s#pm.max_spare_servers.*#pm.max_spare_servers = 60#" /usr/local/php/etc/php-fpm.conf
    elif [[ ${MemTotal} -gt 8192 ]]; then
        sed -i "s#pm.max_children.*#pm.max_children = 80#" /usr/local/php/etc/php-fpm.conf
        sed -i "s#pm.start_servers.*#pm.start_servers = 40#" /usr/local/php/etc/php-fpm.conf
        sed -i "s#pm.min_spare_servers.*#pm.min_spare_servers = 40#" /usr/local/php/etc/php-fpm.conf
        sed -i "s#pm.max_spare_servers.*#pm.max_spare_servers = 80#" /usr/local/php/etc/php-fpm.conf
    fi
}

Creat_PHP_Tools()
{
    echo "Create PHP Info Tool..."
    cat >${Default_Website_Dir}/phpinfo.php<<eof
<?php
phpinfo();
?>
eof

    echo "Copy PHP Prober..."
    cd ${cur_dir}/src
    tar zxf p.tar.gz
    \cp p.php ${Default_Website_Dir}/p.php

    \cp ${cur_dir}/conf/index.html ${Default_Website_Dir}/index.html
    \cp ${cur_dir}/conf/lnmp.gif ${Default_Website_Dir}/lnmp.gif

    if [ ${PHPSelect} -ge 4 ]; then
        echo "Copy Opcache Control Panel..."
        \cp ${cur_dir}/conf/ocp.php ${Default_Website_Dir}/ocp.php
    fi
    echo "============================Install PHPMyAdmin================================="
    [[ -d ${Default_Website_Dir}/phpmyadmin ]] && rm -rf ${Default_Website_Dir}/phpmyadmin
    tar Jxf ${PhpMyAdmin_Ver}.tar.xz
    mv ${PhpMyAdmin_Ver} ${Default_Website_Dir}/phpmyadmin
    \cp ${cur_dir}/conf/config.inc.php ${Default_Website_Dir}/phpmyadmin/config.inc.php
    sed -i 's/LNMPORG/LNMP.org_0'$RANDOM`date '+%s'`$RANDOM'9_VPSer.net/g' ${Default_Website_Dir}/phpmyadmin/config.inc.php
    mkdir ${Default_Website_Dir}/phpmyadmin/{upload,save}
    chmod 755 -R ${Default_Website_Dir}/phpmyadmin/
    chown www:www -R ${Default_Website_Dir}/phpmyadmin/
    echo "============================phpMyAdmin install completed======================="
}

PHP_with_curl()
{
    Get_ARM
    if [[ "${DISTRO}" = "CentOS" && "${Is_ARM}" = "y" ]];then
        Install_Curl
        with_curl='--with-curl=/usr/local/curl'
    else
        with_curl='--with-curl'
    fi
}

PHP_with_openssl()
{
    if /usr/bin/openssl version | grep -Eqi "OpenSSL 1.1.*"; then
        if ( [ "${PHPSelect}" != "" ] &&  echo "${PHPSelect}" | grep -vEqi "6|7" ) || ( [ "${php_version}" != "" ] && echo "${php_version}" | grep -vEqi '^7.' ); then
            Install_Openssl
            with_openssl='--with-openssl=/usr/local/openssl'
        else
            with_openssl='--with-openssl'
        fi
    else
        with_openssl='--with-openssl'
    fi
}
#!/bin/bash

Deb_Check_MySQL()
{
    apt-get purge -y mysql-client mysql-server mysql-common mysql-server-core-5.5 mysql-client-5.5
    rm -f /etc/my.cnf
    rm -rf /etc/mysql/
}

MySQL_ARM_Patch()
{
    Get_ARM
    if [ "${Is_ARM}" = "y" ]; then
        patch -p1 < ${cur_dir}/src/patch/mysql-5.5-fix-arm-client_plugin.patch
    fi
}

MySQL_Sec_Setting()
{
    if [ -d "/proc/vz" ];then
        ulimit -s unlimited
    fi

    StartUp mysql
    /etc/init.d/mysql start

    ln -sf /usr/local/mysql/bin/mysql /usr/bin/mysql
    ln -sf /usr/local/mysql/bin/mysqldump /usr/bin/mysqldump
    ln -sf /usr/local/mysql/bin/myisamchk /usr/bin/myisamchk
    ln -sf /usr/local/mysql/bin/mysqld_safe /usr/bin/mysqld_safe
    ln -sf /usr/local/mysql/bin/mysqlcheck /usr/bin/mysqlcheck

    /usr/local/mysql/bin/mysqladmin -u root password "${DB_Root_Password}"
    if [ $? -ne 0 ]; then
        echo "failed, try other way..."
        cat >~/.emptymy.cnf<<EOF
[client]
user=root
password=''
EOF
        if [ "${DBSelect}" = "4" ] || echo "${mysql_version}" | grep -Eqi '^5.7.'; then
            /usr/local/mysql/bin/mysql --defaults-file=~/.emptymy.cnf -e "SET PASSWORD FOR 'root'@'localhost' = PASSWORD('${DB_Root_Password}');"
            [ $? -eq 0 ] && echo "Set password Sucessfully." || echo "Set password failed!"
        else
            /usr/local/mysql/bin/mysql --defaults-file=~/.emptymy.cnf -e "UPDATE mysql.user SET Password=PASSWORD('${DB_Root_Password}') WHERE User='root';"
            [ $? -eq 0 ] && echo "Set password Sucessfully." || echo "Set password failed!"
            /usr/local/mysql/bin/mysql --defaults-file=~/.emptymy.cnf -e "FLUSH PRIVILEGES;"
            [ $? -eq 0 ] && echo "FLUSH PRIVILEGES Sucessfully." || echo "FLUSH PRIVILEGES failed!"
        fi
        rm -f ~/.emptymy.cnf
    fi
    /etc/init.d/mysql restart

    Make_TempMycnf "${DB_Root_Password}"
    Do_Query ""
    if [ $? -eq 0 ]; then
        echo "OK, MySQL root password correct."
    fi
    echo "Update root password..."
    if [ "${DBSelect}" = "4" ] || echo "${mysql_version}" | grep -Eqi '^5.7.'; then
        Do_Query "UPDATE mysql.user SET authentication_string=PASSWORD('${DB_Root_Password}') WHERE User='root';"
    else
        Do_Query "UPDATE mysql.user SET Password=PASSWORD('${DB_Root_Password}') WHERE User='root';"
    fi
    [ $? -eq 0 ] && echo " ... Success." || echo " ... Failed!"
    echo "Remove anonymous users..."
    Do_Query "DELETE FROM mysql.user WHERE User='';"
    Do_Query "DROP USER ''@'%';"
    [ $? -eq 0 ] && echo " ... Success." || echo " ... Failed!"
    echo "Disallow root login remotely..."
    Do_Query "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
    [ $? -eq 0 ] && echo " ... Success." || echo " ... Failed!"
    echo "Remove test database..."
    Do_Query "DROP DATABASE test;"
    [ $? -eq 0 ] && echo " ... Success." || echo " ... Failed!"
    echo "Reload privilege tables..."
    Do_Query "FLUSH PRIVILEGES;"
    [ $? -eq 0 ] && echo " ... Success." || echo " ... Failed!"

    /etc/init.d/mysql restart
    /etc/init.d/mysql stop
}

MySQL_Opt()
{
    if [[ ${MemTotal} -gt 1024 && ${MemTotal} -lt 2048 ]]; then
        sed -i "s#^key_buffer_size.*#key_buffer_size = 32M#" /etc/my.cnf
        sed -i "s#^table_open_cache.*#table_open_cache = 128#" /etc/my.cnf
        sed -i "s#^sort_buffer_size.*#sort_buffer_size = 768K#" /etc/my.cnf
        sed -i "s#^read_buffer_size.*#read_buffer_size = 768K#" /etc/my.cnf
        sed -i "s#^myisam_sort_buffer_size.*#myisam_sort_buffer_size = 8M#" /etc/my.cnf
        sed -i "s#^thread_cache_size.*#thread_cache_size = 16#" /etc/my.cnf
        sed -i "s#^query_cache_size.*#query_cache_size = 16M#" /etc/my.cnf
        sed -i "s#^tmp_table_size.*#tmp_table_size = 32M#" /etc/my.cnf
        sed -i "s#^innodb_buffer_pool_size.*#innodb_buffer_pool_size = 128M#" /etc/my.cnf
        sed -i "s#^innodb_log_file_size.*#innodb_log_file_size = 32M#" /etc/my.cnf
        sed -i "s#^performance_schema_max_table_instances.*#performance_schema_max_table_instances = 1000" /etc/my.cnf
    elif [[ ${MemTotal} -ge 2048 && ${MemTotal} -lt 4096 ]]; then
        sed -i "s#^key_buffer_size.*#key_buffer_size = 64M#" /etc/my.cnf
        sed -i "s#^table_open_cache.*#table_open_cache = 256#" /etc/my.cnf
        sed -i "s#^sort_buffer_size.*#sort_buffer_size = 1M#" /etc/my.cnf
        sed -i "s#^read_buffer_size.*#read_buffer_size = 1M#" /etc/my.cnf
        sed -i "s#^myisam_sort_buffer_size.*#myisam_sort_buffer_size = 16M#" /etc/my.cnf
        sed -i "s#^thread_cache_size.*#thread_cache_size = 32#" /etc/my.cnf
        sed -i "s#^query_cache_size.*#query_cache_size = 32M#" /etc/my.cnf
        sed -i "s#^tmp_table_size.*#tmp_table_size = 64M#" /etc/my.cnf
        sed -i "s#^innodb_buffer_pool_size.*#innodb_buffer_pool_size = 256M#" /etc/my.cnf
        sed -i "s#^innodb_log_file_size.*#innodb_log_file_size = 64M#" /etc/my.cnf
        sed -i "s#^performance_schema_max_table_instances.*#performance_schema_max_table_instances = 2000" /etc/my.cnf
    elif [[ ${MemTotal} -ge 4096 && ${MemTotal} -lt 8192 ]]; then
        sed -i "s#^key_buffer_size.*#key_buffer_size = 128M#" /etc/my.cnf
        sed -i "s#^table_open_cache.*#table_open_cache = 512#" /etc/my.cnf
        sed -i "s#^sort_buffer_size.*#sort_buffer_size = 2M#" /etc/my.cnf
        sed -i "s#^read_buffer_size.*#read_buffer_size = 2M#" /etc/my.cnf
        sed -i "s#^myisam_sort_buffer_size.*#myisam_sort_buffer_size = 32M#" /etc/my.cnf
        sed -i "s#^thread_cache_size.*#thread_cache_size = 64#" /etc/my.cnf
        sed -i "s#^query_cache_size.*#query_cache_size = 64M#" /etc/my.cnf
        sed -i "s#^tmp_table_size.*#tmp_table_size = 64M#" /etc/my.cnf
        sed -i "s#^innodb_buffer_pool_size.*#innodb_buffer_pool_size = 512M#" /etc/my.cnf
        sed -i "s#^innodb_log_file_size.*#innodb_log_file_size = 128M#" /etc/my.cnf
        sed -i "s#^performance_schema_max_table_instances.*#performance_schema_max_table_instances = 4000" /etc/my.cnf
    elif [[ ${MemTotal} -ge 8192 && ${MemTotal} -lt 16384 ]]; then
        sed -i "s#^key_buffer_size.*#key_buffer_size = 256M#" /etc/my.cnf
        sed -i "s#^table_open_cache.*#table_open_cache = 1024#" /etc/my.cnf
        sed -i "s#^sort_buffer_size.*#sort_buffer_size = 4M#" /etc/my.cnf
        sed -i "s#^read_buffer_size.*#read_buffer_size = 4M#" /etc/my.cnf
        sed -i "s#^myisam_sort_buffer_size.*#myisam_sort_buffer_size = 64M#" /etc/my.cnf
        sed -i "s#^thread_cache_size.*#thread_cache_size = 128#" /etc/my.cnf
        sed -i "s#^query_cache_size.*#query_cache_size = 128M#" /etc/my.cnf
        sed -i "s#^tmp_table_size.*#tmp_table_size = 128M#" /etc/my.cnf
        sed -i "s#^innodb_buffer_pool_size.*#innodb_buffer_pool_size = 1024M#" /etc/my.cnf
        sed -i "s#^innodb_log_file_size.*#innodb_log_file_size = 256M#" /etc/my.cnf
        sed -i "s#^performance_schema_max_table_instances.*#performance_schema_max_table_instances = 6000" /etc/my.cnf
    elif [[ ${MemTotal} -ge 16384 && ${MemTotal} -lt 32768 ]]; then
        sed -i "s#^key_buffer_size.*#key_buffer_size = 512M#" /etc/my.cnf
        sed -i "s#^table_open_cache.*#table_open_cache = 2048#" /etc/my.cnf
        sed -i "s#^sort_buffer_size.*#sort_buffer_size = 8M#" /etc/my.cnf
        sed -i "s#^read_buffer_size.*#read_buffer_size = 8M#" /etc/my.cnf
        sed -i "s#^myisam_sort_buffer_size.*#myisam_sort_buffer_size = 128M#" /etc/my.cnf
        sed -i "s#^thread_cache_size.*#thread_cache_size = 256#" /etc/my.cnf
        sed -i "s#^query_cache_size.*#query_cache_size = 256M#" /etc/my.cnf
        sed -i "s#^tmp_table_size.*#tmp_table_size = 256M#" /etc/my.cnf
        sed -i "s#^innodb_buffer_pool_size.*#innodb_buffer_pool_size = 2048M#" /etc/my.cnf
        sed -i "s#^innodb_log_file_size.*#innodb_log_file_size = 512M#" /etc/my.cnf
        sed -i "s#^performance_schema_max_table_instances.*#performance_schema_max_table_instances = 8000" /etc/my.cnf
    elif [[ ${MemTotal} -ge 32768 ]]; then
        sed -i "s#^key_buffer_size.*#key_buffer_size = 1024M#" /etc/my.cnf
        sed -i "s#^table_open_cache.*#table_open_cache = 4096#" /etc/my.cnf
        sed -i "s#^sort_buffer_size.*#sort_buffer_size = 16M#" /etc/my.cnf
        sed -i "s#^read_buffer_size.*#read_buffer_size = 16M#" /etc/my.cnf
        sed -i "s#^myisam_sort_buffer_size.*#myisam_sort_buffer_size = 256M#" /etc/my.cnf
        sed -i "s#^thread_cache_size.*#thread_cache_size = 512#" /etc/my.cnf
        sed -i "s#^query_cache_size.*#query_cache_size = 512M#" /etc/my.cnf
        sed -i "s#^tmp_table_size.*#tmp_table_size = 512M#" /etc/my.cnf
        sed -i "s#^innodb_buffer_pool_size.*#innodb_buffer_pool_size = 4096M#" /etc/my.cnf
        sed -i "s#^innodb_log_file_size.*#innodb_log_file_size = 1024M#" /etc/my.cnf
        sed -i "s#^performance_schema_max_table_instances.*#performance_schema_max_table_instances = 10000" /etc/my.cnf
    fi
}

Check_MySQL_Data_Dir()
{
    if [ -d "${MySQL_Data_Dir}" ]; then
        datetime=$(date +"%Y%m%d%H%M%S")
        mkdir -p /root/mysql-data-dir-backup${datetime}/
        \cp ${MySQL_Data_Dir}/* /root/mysql-data-dir-backup${datetime}/
        rm -rf ${MySQL_Data_Dir}/*
    else
        mkdir -p ${MySQL_Data_Dir}
    fi
}

Install_MySQL_51()
{
    Echo_Blue "[+] Installing ${Mysql_Ver}..."
    rm -f /etc/my.cnf
    Tar_Cd ${Mysql_Ver}.tar.gz ${Mysql_Ver}
    if [ "${InstallInnodb}" = "y" ]; then
        ./configure --prefix=/usr/local/mysql --with-extra-charsets=complex --enable-thread-safe-client --enable-assembler --with-mysqld-ldflags=-all-static --with-charset=utf8 --enable-thread-safe-client --with-big-tables --with-readline --with-ssl --with-embedded-server --enable-local-infile --with-plugins=innobase ${MySQL51MAOpt}
    else
        ./configure --prefix=/usr/local/mysql --with-extra-charsets=complex --enable-thread-safe-client --enable-assembler --with-mysqld-ldflags=-all-static --with-charset=utf8 --enable-thread-safe-client --with-big-tables --with-readline --with-ssl --with-embedded-server --enable-local-infile ${MySQL51MAOpt}
    fi
    sed -i '/set -ex;/,/done/d' Makefile
    make && make install
    cd ../

    groupadd mysql
    useradd -s /sbin/nologin -M -g mysql mysql

    cat > /etc/my.cnf<<EOF
[client]
#password	= your_password
port		= 3306
socket		= /tmp/mysql.sock

[mysqld]
port		= 3306
socket		= /tmp/mysql.sock
datadir = ${MySQL_Data_Dir}
skip-external-locking
key_buffer_size = 16M
max_allowed_packet = 1M
table_open_cache = 64
sort_buffer_size = 512K
net_buffer_length = 8K
read_buffer_size = 256K
read_rnd_buffer_size = 512K
myisam_sort_buffer_size = 8M
thread_cache_size = 8
query_cache_size = 8M
tmp_table_size = 16M

#skip-networking
max_connections = 500
max_connect_errors = 100
open_files_limit = 65535

log-bin=mysql-bin
binlog_format=mixed
server-id	= 1
expire_logs_days = 10

default_storage_engine = InnoDB
#innodb_file_per_table = 1
#innodb_data_home_dir = ${MySQL_Data_Dir}
#innodb_data_file_path = ibdata1:10M:autoextend
#innodb_log_group_home_dir = ${MySQL_Data_Dir}
#innodb_buffer_pool_size = 16M
#innodb_additional_mem_pool_size = 2M
#innodb_log_file_size = 5M
#innodb_log_buffer_size = 8M
#innodb_flush_log_at_trx_commit = 1
#innodb_lock_wait_timeout = 50

[mysqldump]
quick
max_allowed_packet = 16M

[mysql]
no-auto-rehash

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout
EOF
    if [ "${InstallInnodb}" = "y" ]; then
        sed -i 's:^#innodb:innodb:g' /etc/my.cnf
    else
        sed -i '/^default_storage_engine/d' /etc/my.cnf
        sed -i 's#default_storage_engine.*#default_storage_engine = MyISAM#' /etc/my.cnf
    fi
    MySQL_Opt
    Check_MySQL_Data_Dir
    chown -R mysql:mysql ${MySQL_Data_Dir}
    /usr/local/mysql/bin/mysql_install_db --user=mysql --datadir=${MySQL_Data_Dir}
    chgrp -R mysql /usr/local/mysql/.
    \cp /usr/local/mysql/share/mysql/mysql.server /etc/init.d/mysql
    chmod 755 /etc/init.d/mysql

    cat > /etc/ld.so.conf.d/mysql.conf<<EOF
    /usr/local/mysql/lib/mysql
    /usr/local/lib
EOF
    ldconfig

    ln -sf /usr/local/mysql/lib/mysql /usr/lib/mysql
    ln -sf /usr/local/mysql/include/mysql /usr/include/mysql

    MySQL_Sec_Setting
}

Install_MySQL_55()
{
    Echo_Blue "[+] Installing ${Mysql_Ver}..."
    rm -f /etc/my.cnf
    Tar_Cd ${Mysql_Ver}.tar.gz ${Mysql_Ver}
    MySQL_ARM_Patch
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DSYSCONFDIR=/etc -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DWITH_READLINE=1 -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 ${MySQL55MAOpt}
    make && make install

    groupadd mysql
    useradd -s /sbin/nologin -M -g mysql mysql

    cat > /etc/my.cnf<<EOF
[client]
#password	= your_password
port		= 3306
socket		= /tmp/mysql.sock

[mysqld]
port		= 3306
socket		= /tmp/mysql.sock
datadir = ${MySQL_Data_Dir}
skip-external-locking
key_buffer_size = 16M
max_allowed_packet = 1M
table_open_cache = 64
sort_buffer_size = 512K
net_buffer_length = 8K
read_buffer_size = 256K
read_rnd_buffer_size = 512K
myisam_sort_buffer_size = 8M
thread_cache_size = 8
query_cache_size = 8M
tmp_table_size = 16M

#skip-networking
max_connections = 500
max_connect_errors = 100
open_files_limit = 65535

log-bin=mysql-bin
binlog_format=mixed
server-id	= 1
expire_logs_days = 10

default_storage_engine = InnoDB
#innodb_file_per_table = 1
#innodb_data_home_dir = ${MySQL_Data_Dir}
#innodb_data_file_path = ibdata1:10M:autoextend
#innodb_log_group_home_dir = ${MySQL_Data_Dir}
#innodb_buffer_pool_size = 16M
#innodb_additional_mem_pool_size = 2M
#innodb_log_file_size = 5M
#innodb_log_buffer_size = 8M
#innodb_flush_log_at_trx_commit = 1
#innodb_lock_wait_timeout = 50

[mysqldump]
quick
max_allowed_packet = 16M

[mysql]
no-auto-rehash

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout
EOF
    if [ "${InstallInnodb}" = "y" ]; then
        sed -i 's:^#innodb:innodb:g' /etc/my.cnf
    else
        sed -i '/^default_storage_engine/d' /etc/my.cnf
        sed -i '/skip-external-locking/i\default_storage_engine = MyISAM\nloose-skip-innodb' /etc/my.cnf
    fi
    MySQL_Opt
    Check_MySQL_Data_Dir
    chown -R mysql:mysql ${MySQL_Data_Dir}
    /usr/local/mysql/scripts/mysql_install_db --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql --datadir=${MySQL_Data_Dir} --user=mysql
    chgrp -R mysql /usr/local/mysql/.
    \cp support-files/mysql.server /etc/init.d/mysql
    chmod 755 /etc/init.d/mysql

    cat > /etc/ld.so.conf.d/mysql.conf<<EOF
/usr/local/mysql/lib
/usr/local/lib
EOF
    ldconfig
    ln -sf /usr/local/mysql/lib/mysql /usr/lib/mysql
    ln -sf /usr/local/mysql/include/mysql /usr/include/mysql

    MySQL_Sec_Setting
}

Install_MySQL_56()
{
    Echo_Blue "[+] Installing ${Mysql_Ver}..."
    rm -f /etc/my.cnf
    Tar_Cd ${Mysql_Ver}.tar.gz ${Mysql_Ver}
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DSYSCONFDIR=/etc -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 ${MySQL55MAOpt}
    make && make install

    groupadd mysql
    useradd -s /sbin/nologin -M -g mysql mysql

    cat > /etc/my.cnf<<EOF
[client]
#password   = your_password
port        = 3306
socket      = /tmp/mysql.sock

[mysqld]
port        = 3306
socket      = /tmp/mysql.sock
datadir = ${MySQL_Data_Dir}
skip-external-locking
key_buffer_size = 16M
max_allowed_packet = 1M
table_open_cache = 64
sort_buffer_size = 512K
net_buffer_length = 8K
read_buffer_size = 256K
read_rnd_buffer_size = 512K
myisam_sort_buffer_size = 8M
thread_cache_size = 8
query_cache_size = 8M
tmp_table_size = 16M
performance_schema_max_table_instances = 500

explicit_defaults_for_timestamp = true
#skip-networking
max_connections = 500
max_connect_errors = 100
open_files_limit = 65535

log-bin=mysql-bin
binlog_format=mixed
server-id   = 1
expire_logs_days = 10

#loose-innodb-trx=0
#loose-innodb-locks=0
#loose-innodb-lock-waits=0
#loose-innodb-cmp=0
#loose-innodb-cmp-per-index=0
#loose-innodb-cmp-per-index-reset=0
#loose-innodb-cmp-reset=0
#loose-innodb-cmpmem=0
#loose-innodb-cmpmem-reset=0
#loose-innodb-buffer-page=0
#loose-innodb-buffer-page-lru=0
#loose-innodb-buffer-pool-stats=0
#loose-innodb-metrics=0
#loose-innodb-ft-default-stopword=0
#loose-innodb-ft-inserted=0
#loose-innodb-ft-deleted=0
#loose-innodb-ft-being-deleted=0
#loose-innodb-ft-config=0
#loose-innodb-ft-index-cache=0
#loose-innodb-ft-index-table=0
#loose-innodb-sys-tables=0
#loose-innodb-sys-tablestats=0
#loose-innodb-sys-indexes=0
#loose-innodb-sys-columns=0
#loose-innodb-sys-fields=0
#loose-innodb-sys-foreign=0
#loose-innodb-sys-foreign-cols=0

default_storage_engine = InnoDB
#innodb_file_per_table = 1
#innodb_data_home_dir = ${MySQL_Data_Dir}
#innodb_data_file_path = ibdata1:10M:autoextend
#innodb_log_group_home_dir = ${MySQL_Data_Dir}
#innodb_buffer_pool_size = 16M
#innodb_log_file_size = 5M
#innodb_log_buffer_size = 8M
#innodb_flush_log_at_trx_commit = 1
#innodb_lock_wait_timeout = 50

[mysqldump]
quick
max_allowed_packet = 16M

[mysql]
no-auto-rehash

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout
EOF

    if [ "${InstallInnodb}" = "y" ]; then
        sed -i 's:^#innodb:innodb:g' /etc/my.cnf
    else
        sed -i '/^default_storage_engine/d' /etc/my.cnf
        sed -i '/skip-external-locking/i\innodb=OFF\nignore-builtin-innodb\nskip-innodb\ndefault_storage_engine = MyISAM\ndefault_tmp_storage_engine = MyISAM' /etc/my.cnf
        sed -i 's/^#loose-innodb/loose-innodb/g' /etc/my.cnf
    fi
    MySQL_Opt
    Check_MySQL_Data_Dir
    chown -R mysql:mysql ${MySQL_Data_Dir}
    /usr/local/mysql/scripts/mysql_install_db --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql --datadir=${MySQL_Data_Dir} --user=mysql
    chgrp -R mysql /usr/local/mysql/.
    \cp support-files/mysql.server /etc/init.d/mysql
    chmod 755 /etc/init.d/mysql

    cat > /etc/ld.so.conf.d/mysql.conf<<EOF
    /usr/local/mysql/lib
    /usr/local/lib
EOF
    ldconfig
    ln -sf /usr/local/mysql/lib/mysql /usr/lib/mysql
    ln -sf /usr/local/mysql/include/mysql /usr/include/mysql

    MySQL_Sec_Setting
}

Install_MySQL_57()
{
    Install_Boost
    Echo_Blue "[+] Installing ${Mysql_Ver}..."
    rm -f /etc/my.cnf
    Tar_Cd ${Mysql_Ver}.tar.gz ${Mysql_Ver}
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DSYSCONFDIR=/etc -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 ${MySQL55MAOpt}
    make && make install

    groupadd mysql
    useradd -s /sbin/nologin -M -g mysql mysql

    cat > /etc/my.cnf<<EOF
[client]
#password   = your_password
port        = 3306
socket      = /tmp/mysql.sock

[mysqld]
port        = 3306
socket      = /tmp/mysql.sock
datadir = ${MySQL_Data_Dir}
skip-external-locking
key_buffer_size = 16M
max_allowed_packet = 1M
table_open_cache = 64
sort_buffer_size = 512K
net_buffer_length = 8K
read_buffer_size = 256K
read_rnd_buffer_size = 512K
myisam_sort_buffer_size = 8M
thread_cache_size = 8
query_cache_size = 8M
tmp_table_size = 16M
performance_schema_max_table_instances = 500

explicit_defaults_for_timestamp = true
#skip-networking
max_connections = 500
max_connect_errors = 100
open_files_limit = 65535

log-bin=mysql-bin
binlog_format=mixed
server-id   = 1
expire_logs_days = 10
early-plugin-load = ""

#loose-innodb-trx=0
#loose-innodb-locks=0
#loose-innodb-lock-waits=0
#loose-innodb-cmp=0
#loose-innodb-cmp-per-index=0
#loose-innodb-cmp-per-index-reset=0
#loose-innodb-cmp-reset=0
#loose-innodb-cmpmem=0
#loose-innodb-cmpmem-reset=0
#loose-innodb-buffer-page=0
#loose-innodb-buffer-page-lru=0
#loose-innodb-buffer-pool-stats=0
#loose-innodb-metrics=0
#loose-innodb-ft-default-stopword=0
#loose-innodb-ft-inserted=0
#loose-innodb-ft-deleted=0
#loose-innodb-ft-being-deleted=0
#loose-innodb-ft-config=0
#loose-innodb-ft-index-cache=0
#loose-innodb-ft-index-table=0
#loose-innodb-sys-tables=0
#loose-innodb-sys-tablestats=0
#loose-innodb-sys-indexes=0
#loose-innodb-sys-columns=0
#loose-innodb-sys-fields=0
#loose-innodb-sys-foreign=0
#loose-innodb-sys-foreign-cols=0

default_storage_engine = InnoDB
#innodb_file_per_table = 1
#innodb_data_home_dir = ${MySQL_Data_Dir}
#innodb_data_file_path = ibdata1:10M:autoextend
#innodb_log_group_home_dir = ${MySQL_Data_Dir}
#innodb_buffer_pool_size = 16M
#innodb_log_file_size = 5M
#innodb_log_buffer_size = 8M
#innodb_flush_log_at_trx_commit = 1
#innodb_lock_wait_timeout = 50

[mysqldump]
quick
max_allowed_packet = 16M

[mysql]
no-auto-rehash

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout
EOF

    if [ "${InstallInnodb}" = "y" ]; then
        sed -i 's:^#innodb:innodb:g' /etc/my.cnf
    else
        sed -i '/^default_storage_engine/d' /etc/my.cnf
        sed -i '/skip-external-locking/i\innodb=OFF\nignore-builtin-innodb\nskip-innodb\ndefault_storage_engine = MyISAM\ndefault_tmp_storage_engine = MyISAM' /etc/my.cnf
        sed -i 's/^#loose-innodb/loose-innodb/g' /etc/my.cnf
    fi
    MySQL_Opt
    Check_MySQL_Data_Dir
    chown -R mysql:mysql ${MySQL_Data_Dir}
    /usr/local/mysql/bin/mysqld --initialize-insecure --basedir=/usr/local/mysql --datadir=${MySQL_Data_Dir} --user=mysql
    chgrp -R mysql /usr/local/mysql/.
    \cp support-files/mysql.server /etc/init.d/mysql
    chmod 755 /etc/init.d/mysql

    cat > /etc/ld.so.conf.d/mysql.conf<<EOF
    /usr/local/mysql/lib
    /usr/local/lib
EOF
    ldconfig
    ln -sf /usr/local/mysql/lib/mysql /usr/lib/mysql
    ln -sf /usr/local/mysql/include/mysql /usr/include/mysql

    MySQL_Sec_Setting
}
#!/bin/bash

Backup_MySQL()
{
    echo "Starting backup all databases..."
    echo "If the database is large, the backup time will be longer."
    /usr/local/mysql/bin/mysqldump --defaults-file=~/.my.cnf --all-databases > /root/mysql_all_backup${Upgrade_Date}.sql
    if [ $? -eq 0 ]; then
        echo "MySQL databases backup successfully.";
    else
        echo "MySQL databases backup failed,Please backup databases manually!"
        exit 1
    fi
    lnmp stop
    mv /usr/local/mysql /usr/local/oldmysql${Upgrade_Date}
    mv /etc/init.d/mysql /usr/local/oldmysql${Upgrade_Date}/init.d.mysql.bak.${Upgrade_Date}
    mv /etc/my.cnf /usr/local/oldmysql${Upgrade_Date}/my.cnf.bak.${Upgrade_Date}
    if [ "${MySQL_Data_Dir}" != "/usr/local/mysql/var" ]; then
        mv ${MySQL_Data_Dir} ${MySQL_Data_Dir}${Upgrade_Date}
    fi
    if echo "${mysql_version}" | grep -Eqi '^5.5.' &&  echo "${cur_mysql_version}" | grep -Eqi '^5.6.';then
        sed -i 's/STATS_PERSISTENT=0//g' /root/mysql_all_backup${Upgrade_Date}.sql
    fi
}

Upgrade_MySQL51()
{
    Tar_Cd mysql-${mysql_version}.tar.gz mysql-${mysql_version}
    if [ $InstallInnodb = "y" ]; then
        ./configure --prefix=/usr/local/mysql --with-extra-charsets=complex --enable-thread-safe-client --enable-assembler --with-mysqld-ldflags=-all-static --with-charset=utf8 --enable-thread-safe-client --with-big-tables --with-readline --with-ssl --with-embedded-server --enable-local-infile --with-plugins=innobase ${MySQL51MAOpt}
    else
        ./configure --prefix=/usr/local/mysql --with-extra-charsets=complex --enable-thread-safe-client --enable-assembler --with-mysqld-ldflags=-all-static --with-charset=utf8 --enable-thread-safe-client --with-big-tables --with-readline --with-ssl --with-embedded-server --enable-local-infile ${MySQL51MAOpt}
    fi
    sed -i '/set -ex;/,/done/d' Makefile
    make && make install
    cd ../

    groupadd mysql
    useradd -s /sbin/nologin -M -g mysql mysql

cat > /etc/my.cnf<<EOF
[client]
#password	= your_password
port		= 3306
socket		= /tmp/mysql.sock

[mysqld]
port		= 3306
socket		= /tmp/mysql.sock
datadir = ${MySQL_Data_Dir}
skip-external-locking
key_buffer_size = 16M
max_allowed_packet = 1M
table_open_cache = 64
sort_buffer_size = 512K
net_buffer_length = 8K
read_buffer_size = 256K
read_rnd_buffer_size = 512K
myisam_sort_buffer_size = 8M
thread_cache_size = 8
query_cache_size = 8M
tmp_table_size = 16M

#skip-networking
max_connections = 500
max_connect_errors = 100
open_files_limit = 65535

log-bin=mysql-bin
binlog_format=mixed
server-id	= 1
expire_logs_days = 10

default_storage_engine = InnoDB
#innodb_data_home_dir = ${MySQL_Data_Dir}
#innodb_data_file_path = ibdata1:10M:autoextend
#innodb_log_group_home_dir = ${MySQL_Data_Dir}
#innodb_buffer_pool_size = 16M
#innodb_additional_mem_pool_size = 2M
#innodb_log_file_size = 5M
#innodb_log_buffer_size = 8M
#innodb_flush_log_at_trx_commit = 1
#innodb_lock_wait_timeout = 50

[mysqldump]
quick
max_allowed_packet = 16M

[mysql]
no-auto-rehash

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout
EOF
    if [ "${InstallInnodb}" = "y" ]; then
        sed -i 's:^#innodb:innodb:g' /etc/my.cnf
    else
        sed -i '/^default_storage_engine/d' /etc/my.cnf
        sed -i '/skip-external-locking/i\default_storage_engine = MyISAM\nloose-skip-innodb' /etc/my.cnf
    fi
    MySQL_Opt
    if [ -d "${MySQL_Data_Dir}" ]; then
        rm -rf ${MySQL_Data_Dir}/*
    else
        mkdir -p ${MySQL_Data_Dir}
    fi
    chown -R mysql:mysql ${MySQL_Data_Dir}
    /usr/local/mysql/scripts/mysql_install_db --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql --datadir=${MySQL_Data_Dir} --user=mysql

    cat > /etc/ld.so.conf.d/mysql.conf<<EOF
/usr/local/mysql/lib
/usr/local/lib
EOF
    ldconfig
    ln -sf /usr/local/mysql/lib/mysql /usr/lib/mysql
    ln -sf /usr/local/mysql/include/mysql /usr/include/mysql
}

Upgrade_MySQL55()
{
    echo "Starting upgrade MySQL..."

    Tar_Cd mysql-${mysql_version}.tar.gz mysql-${mysql_version}
    MySQL_ARM_Patch
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DSYSCONFDIR=/etc -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DWITH_READLINE=1 -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 ${MySQL55MAOpt}
    make && make install

    groupadd mysql
    useradd -s /sbin/nologin -M -g mysql mysql

    cat > /etc/my.cnf<<EOF
[client]
#password	= your_password
port		= 3306
socket		= /tmp/mysql.sock

[mysqld]
port		= 3306
socket		= /tmp/mysql.sock
datadir = ${MySQL_Data_Dir}
skip-external-locking
key_buffer_size = 16M
max_allowed_packet = 1M
table_open_cache = 64
sort_buffer_size = 512K
net_buffer_length = 8K
read_buffer_size = 256K
read_rnd_buffer_size = 512K
myisam_sort_buffer_size = 8M
thread_cache_size = 8
query_cache_size = 8M
tmp_table_size = 16M

#skip-networking
max_connections = 500
max_connect_errors = 100
open_files_limit = 65535

log-bin=mysql-bin
binlog_format=mixed
server-id	= 1
expire_logs_days = 10

default_storage_engine = InnoDB
#innodb_data_home_dir = ${MySQL_Data_Dir}
#innodb_data_file_path = ibdata1:10M:autoextend
#innodb_log_group_home_dir = ${MySQL_Data_Dir}
#innodb_buffer_pool_size = 16M
#innodb_additional_mem_pool_size = 2M
#innodb_log_file_size = 5M
#innodb_log_buffer_size = 8M
#innodb_flush_log_at_trx_commit = 1
#innodb_lock_wait_timeout = 50

[mysqldump]
quick
max_allowed_packet = 16M

[mysql]
no-auto-rehash

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout
EOF
    if [ "${InstallInnodb}" = "y" ]; then
        sed -i 's:^#innodb:innodb:g' /etc/my.cnf
    else
        sed -i '/^default_storage_engine/d' /etc/my.cnf
        sed -i '/skip-external-locking/i\default_storage_engine = MyISAM\nloose-skip-innodb' /etc/my.cnf
    fi
    MySQL_Opt
    if [ -d "${MySQL_Data_Dir}" ]; then
        rm -rf ${MySQL_Data_Dir}/*
    else
        mkdir -p ${MySQL_Data_Dir}
    fi
    chown -R mysql:mysql ${MySQL_Data_Dir}
    /usr/local/mysql/scripts/mysql_install_db --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql --datadir=${MySQL_Data_Dir} --user=mysql

    cat > /etc/ld.so.conf.d/mysql.conf<<EOF
/usr/local/mysql/lib
/usr/local/lib
EOF
    ldconfig
    ln -sf /usr/local/mysql/lib/mysql /usr/lib/mysql
    ln -sf /usr/local/mysql/include/mysql /usr/include/mysql
}

Upgrade_MySQL56()
{
    echo "Starting upgrade MySQL..."
    Tar_Cd mysql-${mysql_version}.tar.gz mysql-${mysql_version}
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DSYSCONFDIR=/etc -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 ${MySQL55MAOpt}
    make && make install

    groupadd mysql
    useradd -s /sbin/nologin -M -g mysql mysql

cat > /etc/my.cnf<<EOF
[client]
#password   = your_password
port        = 3306
socket      = /tmp/mysql.sock

[mysqld]
port        = 3306
socket      = /tmp/mysql.sock
datadir = ${MySQL_Data_Dir}
skip-external-locking
key_buffer_size = 16M
max_allowed_packet = 1M
table_open_cache = 64
sort_buffer_size = 512K
net_buffer_length = 8K
read_buffer_size = 256K
read_rnd_buffer_size = 512K
myisam_sort_buffer_size = 8M
thread_cache_size = 8
query_cache_size = 8M
tmp_table_size = 16M
performance_schema_max_table_instances = 500

explicit_defaults_for_timestamp = true
#skip-networking
max_connections = 500
max_connect_errors = 100
open_files_limit = 65535

log-bin=mysql-bin
binlog_format=mixed
server-id   = 1
expire_logs_days = 10

#loose-innodb-trx=0
#loose-innodb-locks=0
#loose-innodb-lock-waits=0
#loose-innodb-cmp=0
#loose-innodb-cmp-per-index=0
#loose-innodb-cmp-per-index-reset=0
#loose-innodb-cmp-reset=0
#loose-innodb-cmpmem=0
#loose-innodb-cmpmem-reset=0
#loose-innodb-buffer-page=0
#loose-innodb-buffer-page-lru=0
#loose-innodb-buffer-pool-stats=0
#loose-innodb-metrics=0
#loose-innodb-ft-default-stopword=0
#loose-innodb-ft-inserted=0
#loose-innodb-ft-deleted=0
#loose-innodb-ft-being-deleted=0
#loose-innodb-ft-config=0
#loose-innodb-ft-index-cache=0
#loose-innodb-ft-index-table=0
#loose-innodb-sys-tables=0
#loose-innodb-sys-tablestats=0
#loose-innodb-sys-indexes=0
#loose-innodb-sys-columns=0
#loose-innodb-sys-fields=0
#loose-innodb-sys-foreign=0
#loose-innodb-sys-foreign-cols=0

default_storage_engine = InnoDB
#innodb_data_home_dir = ${MySQL_Data_Dir}
#innodb_data_file_path = ibdata1:10M:autoextend
#innodb_log_group_home_dir = ${MySQL_Data_Dir}
#innodb_buffer_pool_size = 16M
#innodb_log_file_size = 5M
#innodb_log_buffer_size = 8M
#innodb_flush_log_at_trx_commit = 1
#innodb_lock_wait_timeout = 50

[mysqldump]
quick
max_allowed_packet = 16M

[mysql]
no-auto-rehash

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout
EOF

    if [ "${InstallInnodb}" = "y" ]; then
        sed -i 's:^#innodb:innodb:g' /etc/my.cnf
    else
        sed -i '/^default_storage_engine/d' /etc/my.cnf
        sed -i '/skip-external-locking/i\innodb = OFF\nignore-builtin-innodb\nskip-innodb\ndefault_storage_engine = MyISAM\ndefault_tmp_storage_engine = MyISAM' /etc/my.cnf
        sed -i 's/^#loose-innodb/loose-innodb/g' /etc/my.cnf
    fi
    MySQL_Opt
    if [ -d "${MySQL_Data_Dir}" ]; then
        rm -rf ${MySQL_Data_Dir}/*
    else
        mkdir -p ${MySQL_Data_Dir}
    fi
    chown -R mysql:mysql ${MySQL_Data_Dir}
    /usr/local/mysql/scripts/mysql_install_db --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql --datadir=${MySQL_Data_Dir} --user=mysql

    cat > /etc/ld.so.conf.d/mysql.conf<<EOF
/usr/local/mysql/lib
/usr/local/lib
EOF

    ldconfig
    ln -sf /usr/local/mysql/lib/mysql /usr/lib/mysql
    ln -sf /usr/local/mysql/include/mysql /usr/include/mysql
}

Upgrade_MySQL57()
{
    Install_Boost
    echo "Starting upgrade MySQL..."
    Tar_Cd mysql-${mysql_version}.tar.gz mysql-${mysql_version}
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DSYSCONFDIR=/etc -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 ${MySQL55MAOpt}
    make && make install

    groupadd mysql
    useradd -s /sbin/nologin -M -g mysql mysql

cat > /etc/my.cnf<<EOF
[client]
#password   = your_password
port        = 3306
socket      = /tmp/mysql.sock

[mysqld]
port        = 3306
socket      = /tmp/mysql.sock
datadir = ${MySQL_Data_Dir}
skip-external-locking
key_buffer_size = 16M
max_allowed_packet = 1M
table_open_cache = 64
sort_buffer_size = 512K
net_buffer_length = 8K
read_buffer_size = 256K
read_rnd_buffer_size = 512K
myisam_sort_buffer_size = 8M
thread_cache_size = 8
query_cache_size = 8M
tmp_table_size = 16M
performance_schema_max_table_instances = 500

explicit_defaults_for_timestamp = true
#skip-networking
max_connections = 500
max_connect_errors = 100
open_files_limit = 65535

log-bin=mysql-bin
binlog_format=mixed
server-id   = 1
expire_logs_days = 10
early-plugin-load = ""

#loose-innodb-trx=0
#loose-innodb-locks=0
#loose-innodb-lock-waits=0
#loose-innodb-cmp=0
#loose-innodb-cmp-per-index=0
#loose-innodb-cmp-per-index-reset=0
#loose-innodb-cmp-reset=0
#loose-innodb-cmpmem=0
#loose-innodb-cmpmem-reset=0
#loose-innodb-buffer-page=0
#loose-innodb-buffer-page-lru=0
#loose-innodb-buffer-pool-stats=0
#loose-innodb-metrics=0
#loose-innodb-ft-default-stopword=0
#loose-innodb-ft-inserted=0
#loose-innodb-ft-deleted=0
#loose-innodb-ft-being-deleted=0
#loose-innodb-ft-config=0
#loose-innodb-ft-index-cache=0
#loose-innodb-ft-index-table=0
#loose-innodb-sys-tables=0
#loose-innodb-sys-tablestats=0
#loose-innodb-sys-indexes=0
#loose-innodb-sys-columns=0
#loose-innodb-sys-fields=0
#loose-innodb-sys-foreign=0
#loose-innodb-sys-foreign-cols=0

default_storage_engine = InnoDB
#innodb_data_home_dir = ${MySQL_Data_Dir}
#innodb_data_file_path = ibdata1:10M:autoextend
#innodb_log_group_home_dir = ${MySQL_Data_Dir}
#innodb_buffer_pool_size = 16M
#innodb_log_file_size = 5M
#innodb_log_buffer_size = 8M
#innodb_flush_log_at_trx_commit = 1
#innodb_lock_wait_timeout = 50

[mysqldump]
quick
max_allowed_packet = 16M

[mysql]
no-auto-rehash

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout
EOF

    if [ "${InstallInnodb}" = "y" ]; then
        sed -i 's:^#innodb:innodb:g' /etc/my.cnf
    else
        sed -i '/^default_storage_engine/d' /etc/my.cnf
        sed -i '/skip-external-locking/i\innodb = OFF\nignore-builtin-innodb\nskip-innodb\ndefault_storage_engine = MyISAM\ndefault_tmp_storage_engine = MyISAM' /etc/my.cnf
        sed -i 's/^#loose-innodb/loose-innodb/g' /etc/my.cnf
    fi
    MySQL_Opt
    if [ -d "${MySQL_Data_Dir}" ]; then
        rm -rf ${MySQL_Data_Dir}/*
    else
        mkdir -p ${MySQL_Data_Dir}
    fi
    chown -R mysql:mysql ${MySQL_Data_Dir}
    /usr/local/mysql/bin/mysqld --initialize-insecure --basedir=/usr/local/mysql --datadir=${MySQL_Data_Dir} --user=mysql

    cat > /etc/ld.so.conf.d/mysql.conf<<EOF
/usr/local/mysql/lib
/usr/local/lib
EOF

    ldconfig
    ln -sf /usr/local/mysql/lib/mysql /usr/lib/mysql
    ln -sf /usr/local/mysql/include/mysql /usr/include/mysql
}

Restore_Start_MySQL()
{
    chgrp -R mysql /usr/local/mysql/.
    \cp ${cur_dir}/src/mysql-${mysql_version}/support-files/mysql.server /etc/init.d/mysql
    chmod 755 /etc/init.d/mysql

    ldconfig

    MySQL_Sec_Setting
    /etc/init.d/mysql start

    echo "Restore backup databases..."
    /usr/local/mysql/bin/mysql --defaults-file=~/.my.cnf < /root/mysql_all_backup${Upgrade_Date}.sql
    echo "Repair databases..."
    /usr/local/mysql/bin/mysql_upgrade -u root -p${DB_Root_Password}

    /etc/init.d/mysql stop
    TempMycnf_Clean
    cd ${cur_dir} && rm -rf ${cur_dir}/src/mysql-${mysql_version}

    lnmp start
    if [[ -s /usr/local/mysql/bin/mysql && -s /usr/local/mysql/bin/mysqld_safe && -s /etc/my.cnf ]]; then
        Echo_Green "======== upgrade MySQL completed ======"
    else
        Echo_Red "======== upgrade MySQL failed ======"
        Echo_Red "upgrade MySQL log: /root/upgrade_mysql.log"
        echo "You upload upgrade_mysql.log to LNMP Forum for help."
    fi
}

Upgrade_MySQL()
{
    Check_DB
    if [ "${Is_MySQL}" = "n" ]; then
        Echo_Red "Current database was MariaDB, Can't run MySQL upgrade script."
        exit 1
    fi

    Verify_DB_Password

    cur_mysql_version=`/usr/local/mysql/bin/mysql -V | awk '{print $5}' | tr -d ","`
    mysql_version=""
    echo "Current MYSQL Version:${cur_mysql_version}"
    echo "You can get version number from http://dev.mysql.com/downloads/mysql/"
    Echo_Yellow "Please input MySQL Version you want."
    read -p "(example: 5.5.45 ): " mysql_version
    if [ "${mysql_version}" = "" ]; then
        echo "Error: You must input MySQL Version!!"
        exit 1
    fi

    if [ "${mysql_version}" == "${cur_mysql_version}" ]; then
        echo "Error: The upgrade MYSQL Version is the same as the old Version!!"
        exit 1
    fi

    #do you want to install the InnoDB Storage Engine?
    echo "==========================="

    InstallInnodb="y"
    Echo_Yellow "Do you want to install the InnoDB Storage Engine?"
    read -p "(Default yes,if you want please enter: y , if not please enter: n): " InstallInnodb

    case "${InstallInnodb}" in
    [yY][eE][sS]|[yY])
        echo "You will install the InnoDB Storage Engine"
        InstallInnodb="y"
        ;;
    [nN][oO]|[nN])
        echo "You will NOT install the InnoDB Storage Engine!"
        InstallInnodb="n"
        ;;
    *)
        echo "No input, The InnoDB Storage Engine will enable."
        InstallInnodb="y"
        ;;
    esac

    mysql_short_version=`echo ${mysql_version} | cut -d. -f1-2`

    echo "=================================================="
    echo "You will upgrade MySQL Version to ${mysql_version}"
    echo "=================================================="

    if [ -s /usr/local/include/jemalloc/jemalloc.h ] && lsof -n|grep "libjemalloc.so"|grep -q "mysqld"; then
        MySQL51MAOpt='--with-mysqld-ldflags=-ljemalloc'
        MySQL55MAOpt="-DCMAKE_EXE_LINKER_FLAGS='-ljemalloc' -DWITH_SAFEMALLOC=OFF"
    elif [ -s /usr/local/include/gperftools/tcmalloc.h ] && lsof -n|grep "libtcmalloc.so"|grep -q "mysqld"; then
        MySQL51MAOpt='--with-mysqld-ldflags=-ltcmalloc'
        MySQL55MAOpt="-DCMAKE_EXE_LINKER_FLAGS='-ltcmalloc' -DWITH_SAFEMALLOC=OFF"
    else
        MySQL51MAOpt=''
        MySQL55MAOpt=''
    fi

    Press_Start

    echo "============================check files=================================="
    cd ${cur_dir}/src
    if [ -s mysql-${mysql_version}.tar.gz ]; then
        echo "mysql-${mysql_version}.tar.gz [found]"
    else
        echo "Notice: mysql-${mysql_version}.tar.gz not found!!!download now......"
        country=`curl -sSk --connect-timeout 10 -m 60 https://ip.vpser.net/country`
        if [ "${country}" = "CN" ]; then
            wget -c --progress=bar:force http://mirrors.sohu.com/mysql/MySQL-${mysql_short_version}/mysql-${mysql_version}.tar.gz
            if [ $? -ne 0 ]; then
                wget -c --progress=bar:force http://cdn.mysql.com/Downloads/MySQL-${mysql_short_version}/mysql-${mysql_version}.tar.gz
            fi
        else
            wget -c --progress=bar:force http://cdn.mysql.com/Downloads/MySQL-${mysql_short_version}/mysql-${mysql_version}.tar.gz
        fi
        if [ $? -eq 0 ]; then
            echo "Download mysql-${mysql_version}.tar.gz successfully!"
        else
            echo "You enter MySQL Version was:"${mysql_version}
            Echo_Red "Error! You entered a wrong version number, please check!"
            sleep 5
            exit 1
        fi
    fi
    echo "============================check files=================================="

    Backup_MySQL
    if [ "${mysql_short_version}" = "5.1" ]; then
        Upgrade_MySQL51
    elif [ "${mysql_short_version}" = "5.5" ]; then
        Upgrade_MySQL55
    elif [ "${mysql_short_version}" = "5.6" ]; then
        Upgrade_MySQL56
    elif [ "${mysql_short_version}" = "5.7" ]; then
        Upgrade_MySQL57
    fi
    Restore_Start_MySQL
}
#!/bin/bash

Install_PHPMemcache()
{
    echo "Install memcache php extension..."
    cd ${cur_dir}/src
    if echo "${Cur_PHP_Version}" | grep -Eqi '^7.';then
        rm -rf pecl-memcache
        git clone https://github.com/websupport-sk/pecl-memcache.git
        cd pecl-memcache
    else
        Download_Files ${Download_Mirror}/web/memcache/${PHPMemcache_Ver}.tgz ${PHPMemcache_Ver}.tgz
        Tar_Cd ${PHPMemcache_Ver}.tgz ${PHPMemcache_Ver}
    fi
    ${PHP_Path}/bin/phpize
    ./configure --with-php-config=${PHP_Path}/bin/php-config
    make && make install
    cd ../
}

Install_PHPMemcached()
{
    echo "Install memcached php extension..."
    cd ${cur_dir}/src
    Get_Dist_Name
    if [ "$PM" = "yum" ]; then
        yum install cyrus-sasl-devel -y
        Get_Dist_Version
        if echo "${CentOS_Version}" | grep -Eqi '^5.'; then
            yum install gcc44 gcc44-c++ libstdc++44-devel -y
            export CC="gcc44"
            export CXX="g++44"
        fi
    elif [ "$PM" = "apt" ]; then
        apt-get install libsasl2-2 sasl2-bin libsasl2-2 libsasl2-dev libsasl2-modules -y
    fi
    Download_Files ${Download_Mirror}/web/libmemcached/${Libmemcached_Ver}.tar.gz
    Tar_Cd ${Libmemcached_Ver}.tar.gz ${Libmemcached_Ver}
    ./configure --prefix=/usr/local/libmemcached --with-memcached
    make && make install
    cd ../

    cd ${cur_dir}/src
    if echo "${Cur_PHP_Version}" | grep -Eqi '^7.';then
        Download_Files ${Download_Mirror}/web/php-memcached/${PHP7Memcached_Ver}.tgz ${PHP7Memcached_Ver}.tgz
        Tar_Cd ${PHP7Memcached_Ver}.tgz ${PHP7Memcached_Ver}
    else
        Download_Files ${Download_Mirror}/web/php-memcached/${PHPMemcached_Ver}.tgz ${PHPMemcached_Ver}.tgz
        Tar_Cd ${PHPMemcached_Ver}.tgz ${PHPMemcached_Ver}
    fi
    ${PHP_Path}/bin/phpize
    ./configure --with-php-config=${PHP_Path}/bin/php-config --enable-memcached --with-libmemcached-dir=/usr/local/libmemcached
    make && make install
    cd ../
}

Install_Memcached()
{
    ver="1"
    echo "Which memcached php extension do you choose:"
    echo "Install php-memcache,(Discuz x) please enter: 1"
    echo "Install php-memcached, please enter: 2"
    read -p "Enter 1 or 2 (Default 1): " ver

    if [ "${ver}" = "1" ]; then
        echo "You choose php-memcache"
        PHP_ZTS="memcache.so"
    elif [ "${ver}" = "2" ]; then
        echo "You choose php-memcached"
        PHP_ZTS="memcached.so"
    else
        ver="1"
        echo "You choose php-memcache"
        PHP_ZTS="memcache.so"
    fi

    echo "====== Installing memcached ======"
    Press_Start

    rm -f ${PHP_Path}/conf.d/005-memcached.ini
    Addons_Get_PHP_Ext_Dir
    zend_ext=${zend_ext_dir}${PHP_ZTS}
    if [ -s "${zend_ext}" ]; then
        rm -f "${zend_ext}"
    fi

    cat >${PHP_Path}/conf.d/005-memcached.ini<<EOF
extension = ${PHP_ZTS}
EOF

    echo "Install memcached..."
    cd ${cur_dir}/src
    if [ -s /usr/local/memcached/bin/memcached ]; then
        echo "Memcached already exists."
    else
        Download_Files ${Download_Mirror}/web/memcached/${Memcached_Ver}.tar.gz ${Memcached_Ver}.tar.gz
        Tar_Cd ${Memcached_Ver}.tar.gz ${Memcached_Ver}
        ./configure --prefix=/usr/local/memcached
        make &&make install
        cd ../
        rm -rf ${cur_dir}/src/${Memcached_Ver}

        ln -sf /usr/local/memcached/bin/memcached /usr/bin/memcached

        \cp ${cur_dir}/init.d/init.d.memcached /etc/init.d/memcached
        chmod +x /etc/init.d/memcached
        useradd -s /sbin/nologin nobody
    fi

    if [ ! -d /var/lock/subsys ]; then
      mkdir -p /var/lock/subsys
    fi

    StartUp memcached

    if [ "${ver}" = "1" ]; then
        Install_PHPMemcache
    elif [ "${ver}" = "2" ]; then
        Install_PHPMemcached
    fi

    echo "Copy Memcached PHP Test file..."
    \cp ${cur_dir}/conf/memcached${ver}.php ${Default_Website_Dir}/memcached.php

    Restart_PHP

    if [ -s /sbin/iptables ]; then
        /sbin/iptables -A INPUT -p tcp --dport 11211 -j DROP
        /sbin/iptables -A INPUT -p udp --dport 11211 -j DROP
        if [ "$PM" = "yum" ]; then
            service iptables save
        elif [ "$PM" = "apt" ]; then
            iptables-save > /etc/iptables.rules
        fi
    fi

    echo "Starting Memcached..."
    /etc/init.d/memcached start

    if [ -s "${zend_ext}" ] && [ -s /usr/local/memcached/bin/memcached ]; then
        Echo_Green "====== Memcached install completed ======"
        Echo_Green "Memcached installed successfully, enjoy it!"
    else
        rm -f ${PHP_Path}/conf.d/005-memcached.ini
        Echo_Red "Memcached install failed!"
    fi
}

Uninstall_Memcached()
{
    echo "You will uninstall Memcached..."
    Press_Start
    rm -f ${PHP_Path}/conf.d/005-memcached.ini
    Restart_PHP
    Remove_StartUp memcached
    echo "Delete Memcached files..."
    rm -rf /usr/local/libmemcached
    rm -rf /usr/local/memcached
    rm -rf /etc/init.d/memcached
    rm -rf /usr/bin/memcached
    if [ -s /sbin/iptables ]; then
        /sbin/iptables -D INPUT -p tcp --dport 11211 -j DROP
        /sbin/iptables -D INPUT -p udp --dport 11211 -j DROP
        if [ "$PM" = "yum" ]; then
            service iptables save
        elif [ "$PM" = "apt" ]; then
            iptables-save > /etc/iptables.rules
        fi
    fi
    Echo_Green "Uninstall Memcached completed."
}
#!/bin/bash

Install_Opcache()
{

    Echo_Red "Install Opcache will auto uninstall eAccelerator if exists..."
    echo "====== Installing zend opcache ======"
    Press_Start

    echo "Uninstall eAccelerator..."
    rm -f ${PHP_Path}/conf.d/004-opcache.ini

    Addons_Get_PHP_Ext_Dir
    zend_ext="${zend_ext_dir}opcache.so"
    if echo "${Cur_PHP_Version}" | grep -Eqi '^5.[234].'; then
        if [ -s "${zend_ext}" ]; then
            rm -f "${zend_ext}"
        fi
    fi

    if echo "${Cur_PHP_Version}" | grep -Eqi '^5.2.'; then
        echo "Zend Opcache do NOT SUPPORT PHP 5.2.* and lower version of php 5.3"
        sleep 1
        exit 1
    elif echo "${Cur_PHP_Version}" | grep -Eqi '^5.3.'; then
        if echo ${Cur_PHP_Version} | grep -vEqi '^5.3.2[0-9]';then
            echo "If PHP under version 5.3.20, we do not recommend install opcache, it maybe cause 502 Bad Gateway error!"
            sleep 3
            exit 1
        fi
    elif echo "${Cur_PHP_Version}" | grep -Eqi '^5.4.'; then
        echo "${Cur_PHP_Version}"
    elif echo "${Cur_PHP_Version}" | grep -Eqi '^5.[56].' || echo "${Cur_PHP_Version}" | grep -Eqi '^7.'; then
        cat >${PHP_Path}/conf.d/004-opcache.ini<<EOF
[Zend Opcache]
zend_extension="opcache.so"
opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.revalidate_freq=60
opcache.fast_shutdown=1
opcache.enable_cli=1
EOF

        echo "Copy Opcache Control Panel..."
        \cp ${cur_dir}/conf/ocp.php ${Default_Website_Dir}/ocp.php
        Restart_PHP
        if [ -s "${zend_ext}" ]; then
            Echo_Green "====== Opcache install completed ======"
            Echo_Green "Opcache installed successfully, enjoy it!"
            exit 0
        else
            rm -f ${PHP_Path}/conf.d/004-opcache.ini
            Echo_Red "OPcache install failed!"
            exit 1
        fi
    else
        echo "Error: can't get php version!"
        echo "Maybe php was didn't install or php configuration file has errors.Please check."
        sleep 3
        exit 1
    fi

    cd ${cur_dir}/src

    if [ -d "${ZendOpcache_Ver}" ]; then
        rm -rf "${ZendOpcache_Ver}"
    fi

    Download_Files ${Download_Mirror}/web/opcache/${ZendOpcache_Ver}.tgz ${ZendOpcache_Ver}.tgz
    Tar_Cd ${ZendOpcache_Ver}.tgz ${ZendOpcache_Ver}
    ${PHP_Path}/bin/phpize
    ./configure --with-php-config=${PHP_Path}/bin/php-config
    make
    make install
    cd ../

    cat >${PHP_Path}/conf.d/004-opcache.ini<<EOF
[Zend Opcache]
zend_extension="opcache.so"
opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.revalidate_freq=60
opcache.fast_shutdown=1
opcache.enable_cli=1
EOF

    echo "Copy Opcache Control Panel..."
    \cp $cur_dir/conf/ocp.php ${Default_Website_Dir}/ocp.php

    Restart_PHP

    if [ -s "${zend_ext}" ]; then
        echo "====== Opcache install completed ======"
        echo "Opcache installed successfully, enjoy it!"
    else
        rm -f ${PHP_Path}/conf.d/004-opcache.ini
        echo "OPcache install failed!"
    fi
}

Uninstall_Opcache()
{
    echo "You will uninstall opcache..."
    Press_Start
    rm -f ${PHP_Path}/conf.d/004-opcache.ini
    Restart_PHP
    Echo_Green "Uninstall Opcache completed."
}
#!/bin/bash

Backup_MariaDB()
{
    echo "Starting backup all databases..."
    echo "If the database is large, the backup time will be longer."
    /usr/local/mariadb/bin/mysqldump --defaults-file=~/.my.cnf --all-databases > /root/mariadb_all_backup${Upgrade_Date}.sql
    if [ $? -eq 0 ]; then
        echo "MariaDB databases backup successfully.";
    else
        echo "MariaDB databases backup failed,Please backup databases manually!"
        exit 1
    fi
    lnmp stop

    mv /usr/local/mariadb /usr/local/oldmariadb${Upgrade_Date}
    mv /etc/init.d/mariadb /usr/local/oldmariadb${Upgrade_Date}/init.d.mariadb.bak.${Upgrade_Date}
    mv /etc/my.cnf /usr/local/oldmariadb${Upgrade_Date}/my.cnf.mariadb.bak.${Upgrade_Date}
    if [ "${MariaDB_Data_Dir}" != "/usr/local/mariadb/var" ]; then
        mv ${MariaDB_Data_Dir} ${MariaDB_Data_Dir}${Upgrade_Date}
    fi
    if echo "${mariadb_version}" | grep -Eqi '^5.5.' &&  echo "${cur_mariadb_version}" | grep -Eqi '^10.';then
        sed -i 's/STATS_PERSISTENT=0//g' /root/mariadb_all_backup${Upgrade_Date}.sql
    fi
}

Upgrade_MariaDB()
{
    Check_DB
    if [ "${Is_MySQL}" = "y" ]; then
        Echo_Red "Current database was MySQL, Can't run MariaDB upgrade script."
        exit 1
    fi

    Verify_DB_Password

    cur_mariadb_version=`/usr/local/mariadb/bin/mysql -V | awk '{print $5}' | tr -d "\-MariaDB,"`
    mariadb_version=""
    echo "Current MariaDB Version:${cur_mariadb_version}"
    echo "You can get version number from https://downloads.mariadb.org/"
    Echo_Yellow "Please enter MariaDB Version you want."
    read -p "(example: 10.0.21 ): " mariadb_version
    if [ "${mariadb_version}" = "" ]; then
        echo "Error: You must input MariaDB Version!!"
        exit 1
    fi

    #do you want to install the InnoDB Storage Engine?
    echo "==========================="

    InstallInnodb="y"
    Echo_Yellow "Do you want to install the InnoDB Storage Engine?"
    read -p "(Default yes, if you want please enter: y , if not please enter: n): " InstallInnodb

    case "${InstallInnodb}" in
    [yY][eE][sS]|[yY])
        echo "You will install the InnoDB Storage Engine"
        InstallInnodb="y"
        ;;
    [nN][oO]|[nN])
        echo "You will NOT install the InnoDB Storage Engine!"
        InstallInnodb="n"
        ;;
    *)
        echo "No input, The InnoDB Storage Engine will enable."
        InstallInnodb="y"
    esac

    echo "====================================================================="
    echo "You will upgrade MariaDB V${cur_mariadb_version} to V${mariadb_version}"
    echo "====================================================================="

    if [ -s /usr/local/include/jemalloc/jemalloc.h ] && lsof -n|grep "libjemalloc.so"|grep -q "mysqld"; then
        MariaDBMAOpt=''
    elif [ -s /usr/local/include/gperftools/tcmalloc.h ] && lsof -n|grep "libtcmalloc.so"|grep -q "mysqld"; then
        MariaDBMAOpt="-DCMAKE_EXE_LINKER_FLAGS='-ltcmalloc' -DWITH_SAFEMALLOC=OFF"
    else
        MariaDBMAOpt=''
    fi

    Press_Start

    echo "============================check files=================================="
    cd ${cur_dir}/src
    if [ -s mariadb-${mariadb_version}.tar.gz ]; then
        echo "mariadb-${mariadb_version}.tar.gz [found]"
    else
        echo "Notice: mariadb-${mariadb_version}.tar.gz not found!!!download now......"
        wget -c --progress=bar:force https://downloads.mariadb.org/interstitial/mariadb-${mariadb_version}/source/mariadb-${mariadb_version}.tar.gz
        if [ $? -eq 0 ]; then
            echo "Download mariadb-${mariadb_version}.tar.gz successfully!"
        else
            wget -c --progress=bar:force https://downloads.mariadb.org/interstitial/mariadb-${mariadb_version}/kvm-tarbake-jaunty-x86/mariadb-${mariadb_version}.tar.gz
            if [ $? -eq 0 ]; then
                echo "Download mariadb-${mariadb_version}.tar.gz successfully!"
            else
                echo "You enter MariaDB Version was:"${mariadb_version}
                Echo_Red "Error! You entered a wrong version number, please check!"
                sleep 5
                exit 1
            fi
        fi
    fi
    echo "============================check files=================================="

    Backup_MariaDB

    echo "Starting upgrade MariaDB..."
    Tar_Cd mariadb-${mariadb_version}.tar.gz mariadb-${mariadb_version}
    if echo "${mariadb_version}" | grep -Eqi '^10.[123].';then
        cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mariadb -DWITH_ARIA_STORAGE_ENGINE=1 -DWITH_XTRADB_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DWITH_READLINE=1 -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 -DWITHOUT_TOKUDB=1 ${MariaDBMAOpt}
    else
        cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mariadb -DWITH_ARIA_STORAGE_ENGINE=1 -DWITH_XTRADB_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DWITH_READLINE=1 -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 ${MariaDBMAOpt}
    fi
    make && make install

    groupadd mariadb
    useradd -s /sbin/nologin -M -g mariadb mariadb

cat > /etc/my.cnf<<EOF
[client]
#password	= your_password
port		= 3306
socket		= /tmp/mysql.sock

[mysqld]
port		= 3306
socket		= /tmp/mysql.sock
user    = mariadb
basedir = /usr/local/mariadb
datadir = ${MariaDB_Data_Dir}
log_error = ${MariaDB_Data_Dir}/mariadb.err
pid-file = ${MariaDB_Data_Dir}/mariadb.pid
skip-external-locking
key_buffer_size = 16M
max_allowed_packet = 1M
table_open_cache = 64
sort_buffer_size = 512K
net_buffer_length = 8K
read_buffer_size = 256K
read_rnd_buffer_size = 512K
myisam_sort_buffer_size = 8M
thread_cache_size = 8
query_cache_size = 8M
tmp_table_size = 16M

#skip-networking
max_connections = 500
max_connect_errors = 100
open_files_limit = 65535

log-bin=mysql-bin
binlog_format=mixed
server-id	= 1
expire_logs_days = 10

default_storage_engine = InnoDB
#innodb_file_per_table = 1
#innodb_data_home_dir = ${MariaDB_Data_Dir}
#innodb_data_file_path = ibdata1:10M:autoextend
#innodb_log_group_home_dir = ${MariaDB_Data_Dir}
#innodb_buffer_pool_size = 16M
#innodb_log_file_size = 5M
#innodb_log_buffer_size = 8M
#innodb_flush_log_at_trx_commit = 1
#innodb_lock_wait_timeout = 50

[mysqldump]
quick
max_allowed_packet = 16M

[mysql]
no-auto-rehash

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout
EOF
    if [ "${InstallInnodb}" = "y" ]; then
        sed -i 's:^#innodb:innodb:g' /etc/my.cnf
    else
        sed -i '/^default_storage_engine/d' /etc/my.cnf
        sed -i '/skip-external-locking/i\default_storage_engine = MyISAM\nloose-skip-innodb' /etc/my.cnf
    fi
    MySQL_Opt
    if [ -d "${MariaDB_Data_Dir}" ]; then
        rm -rf ${MariaDB_Data_Dir}/*
    else
        mkdir -p ${MariaDB_Data_Dir}
    fi
    chown -R mariadb:mariadb ${MariaDB_Data_Dir}
    /usr/local/mariadb/scripts/mysql_install_db --defaults-file=/etc/my.cnf --basedir=/usr/local/mariadb --datadir=${MariaDB_Data_Dir} --user=mariadb
    chgrp -R mariadb /usr/local/mariadb/.
    \cp support-files/mysql.server /etc/init.d/mariadb
    chmod 755 /etc/init.d/mariadb

    Mariadb_Sec_Setting
    /etc/init.d/mariadb start

    echo "Restore backup databases..."
    /usr/local/mariadb/bin/mysql --defaults-file=~/.my.cnf < /root/mariadb_all_backup${Upgrade_Date}.sql
    echo "Repair databases..."
    /usr/local/mariadb/bin/mysql_upgrade -u root -p${DB_Root_Password}

    /etc/init.d/mariadb stop
    TempMycnf_Clean
    cd ${cur_dir} && rm -rf ${cur_dir}/src/mariadb-${mariadb_version}

    lnmp start
    if [[ -s /usr/local/mariadb/bin/mysql && -s /usr/local/mariadb/bin/mysqld_safe && -s /etc/my.cnf ]]; then
        Echo_Green "======== upgrade MariaDB completed ======"
    else
        Echo_Red "======== upgrade MariaDB failed ======"
        Echo_Red "upgrade MariaDB log: /root/upgrade_mariadb.log"
        echo "You upload upgrade_mariadb.log to LNMP Forum for help."
    fi
}
#!/bin/bash

Autoconf_Ver='autoconf-2.13'
Libiconv_Ver='libiconv-1.14'
LibMcrypt_Ver='libmcrypt-2.5.8'
Mcypt_Ver='mcrypt-2.6.8'
Mhash_Ver='mhash-0.9.9.9'
Freetype_Ver='freetype-2.7'
Curl_Ver='curl-7.51.0'
Pcre_Ver='pcre-8.39'
Jemalloc_Ver='jemalloc-4.5.0'
TCMalloc_Ver='gperftools-2.5'
Libunwind_Ver='libunwind-1.1'
Libicu4c_Ver='icu4c-58_1'
Boost_Ver='boost_1_59_0'
Openssl_Ver='openssl-1.0.2l'
Nginx_Ver='nginx-1.12.1'
if [ "${DBSelect}" = "1" ]; then
    Mysql_Ver='mysql-5.1.73'
elif [ "${DBSelect}" = "2" ]; then
    Mysql_Ver='mysql-5.5.56'
elif [ "${DBSelect}" = "3" ]; then
    Mysql_Ver='mysql-5.6.36'
elif [ "${DBSelect}" = "4" ]; then
    Mysql_Ver='mysql-5.7.18'
elif [ "${DBSelect}" = "5" ]; then
    Mariadb_Ver='mariadb-5.5.56'
elif [ "${DBSelect}" = "6" ]; then
    Mariadb_Ver='mariadb-10.0.30'
elif [ "${DBSelect}" = "7" ]; then
    Mariadb_Ver='mariadb-10.1.23'
fi
if [ "${PHPSelect}" = "1" ]; then
    Php_Ver='php-5.2.17'
elif [ "${PHPSelect}" = "2" ]; then
    Php_Ver='php-5.3.29'
elif [ "${PHPSelect}" = "3" ]; then
    Php_Ver='php-5.4.45'
elif [ "${PHPSelect}" = "4" ]; then
    Php_Ver='php-5.5.38'
elif [ "${PHPSelect}" = "5" ]; then
    Php_Ver='php-5.6.31'
elif [ "${PHPSelect}" = "6" ]; then
    Php_Ver='php-7.0.21'
elif [ "${PHPSelect}" = "7" ]; then
    Php_Ver='php-7.1.7'
fi
if [[ "${PHPSelect}" = "1" || "${PHPSelect}" = "2" || "${PHPSelect}" = "3" ]]; then
    PhpMyAdmin_Ver='phpMyAdmin-4.0.10.20-all-languages'
else
    PhpMyAdmin_Ver='phpMyAdmin-4.7.3-all-languages'
fi
APR_Ver='apr-1.6.2'
APR_Util_Ver='apr-util-1.6.0'
if [ "${ApacheSelect}" = "1" ]; then
    Apache_Ver='httpd-2.2.34'
elif [ "${ApacheSelect}" = "2" ]; then
    Apache_Ver='httpd-2.4.27'
fi

Pureftpd_Ver='pure-ftpd-1.0.45'

XCache_Ver='xcache-3.2.0'
ImageMagick_Ver='ImageMagick-7.0.5-7'
Imagick_Ver='imagick-3.4.3'
ZendOpcache_Ver='zendopcache-7.0.5'
Redis_Stable_Ver='redis-3.2.8'
PHPRedis_Ver='redis-3.1.3'
Memcached_Ver='memcached-1.4.36'
Libmemcached_Ver='libmemcached-1.0.18'
PHPMemcached_Ver='memcached-2.2.0'
PHP7Memcached_Ver='memcached-3.0.3'
PHPMemcache_Ver='memcache-3.0.8'
PHPOldApcu_Ver='apcu-4.0.11'
PHPNewApcu_Ver='apcu-5.1.8'
PHPApcu_Bc_Ver='apcu_bc-1.0.3'#!/bin/bash

Upgrade_phpMyAdmin()
{
    phpMyAdmin_Version=""
    echo "You can get version number from https://www.phpmyadmin.net/downloads/"
    read -p "Please enter phpMyAdmin version you want, (example: 4.6.6 ): " phpMyAdmin_Version
    if [ "${phpMyAdmin_Version}" = "" ]; then
        echo "Error: You must enter a phpMyAdmin version!!"
        exit 1
    fi
    echo "+---------------------------------------------------------+"
    echo "|   You will upgrade phpMyAdmin version to ${phpMyAdmin_Version}"
    echo "+---------------------------------------------------------+"

    Press_Start

    echo "============================check files=================================="
    cd ${cur_dir}/src
    if [ -s phpMyAdmin-${phpMyAdmin_Version}-all-languages.tar.xz ]; then
        echo "phpMyAdmin-${phpMyAdmin_Version}-all-languages.tar.xz [found]"
    else
        echo "Notice: phpMyAdmin-${phpMyAdmin_Version}-all-languages.tar.xz not found!!!download now......"
        wget -c --progress=bar:force https://files.phpmyadmin.net/phpMyAdmin/${phpMyAdmin_Version}/phpMyAdmin-${phpMyAdmin_Version}-all-languages.tar.xz
        if [ $? -eq 0 ]; then
            echo "Download phpMyAdmin-${phpMyAdmin_Version}-all-languages.tar.xz successfully!"
        else
            echo "You enter phpMyAdmin Version was:"${phpMyAdmin_Version}
            Echo_Red "Error! You entered a wrong version number, please check!"
            sleep 5
            exit 1
        fi
    fi
    echo "============================check files=================================="
    echo "Backup old phpMyAdmin..."
    mv ${Default_Website_Dir}/phpmyadmin ${Default_Website_Dir}/phpmyadmin${Upgrade_Date}
    echo "Uncompress phpMyAdmin-${phpMyAdmin_Version}-all-languages.tar.xz ..."
    tar Jxf phpMyAdmin-${phpMyAdmin_Version}-all-languages.tar.xz
    mv phpMyAdmin-${phpMyAdmin_Version}-all-languages ${Default_Website_Dir}/phpmyadmin
    \cp ${cur_dir}/conf/config.inc.php ${Default_Website_Dir}/phpmyadmin/config.inc.php
    sed -i 's/LNMPORG/LNMP.org_0'$RANDOM`date '+%s'`$RANDOM'9_VPSer.net/g' ${Default_Website_Dir}/phpmyadmin/config.inc.php
    mkdir ${Default_Website_Dir}/phpmyadmin/{upload,save}
    chmod 755 -R ${Default_Website_Dir}/phpmyadmin/
    chown www:www -R ${Default_Website_Dir}/phpmyadmin/
    Echo_Green "======== upgrade phpMyAdmin completed ======"
}
#!/bin/bash

Install_ImageMagic()
{
    echo "====== Installing ImageMagic ======"
    Press_Start

    rm -f ${PHP_Path}/conf.d/008-imagick.ini
    Addons_Get_PHP_Ext_Dir
    zend_ext="${zend_ext_dir}imagick.so"
    if [ -s "${zend_ext}" ]; then
        rm -f "${zend_ext}"
    fi

    if [[ "${DISTRO}" = "CentOS" || "${DISTRO}" = "RHEL" || "${DISTRO}" = "Aliyun" || "${DISTRO}" = "Amazon" ]]; then
        yum install -y epel-release
    fi
    if [ "$PM" = "yum" ]; then
        yum install -y libwebp-devel
    elif [ "$PM" = "apt" ]; then
        apt-get update
        apt-get install -y libwebp-dev
    fi

    cd ${cur_dir}/src
    if [ -s /usr/local/imagemagick/bin/convert ]; then
        echo "ImageMagick already exists."
    else
        if echo "${Cur_PHP_Version}" | grep -Eqi '^5.2.';then
            Download_Files ${Download_Mirror}/web/imagemagick/ImageMagick-6.8.8-9.tar.gz ImageMagick-6.8.8-9.tar.gz
            Tar_Cd ImageMagick-6.8.8-9.tar.gz ImageMagick-6.8.8-9
        else
            Download_Files ${Download_Mirror}/web/imagemagick/${ImageMagick_Ver}.tar.bz2 ${ImageMagick_Ver}.tar.bz2
            Tarj_Cd ${ImageMagick_Ver}.tar.bz2 ${ImageMagick_Ver}
        fi

        ./configure --prefix=/usr/local/imagemagick
        make && make install
        cd ../
        rm -rf ${cur_dir}/src/${ImageMagick_Ver}
    fi

    if echo "${Cur_PHP_Version}" | grep -Eqi '^5.2.';then
        Download_Files ${Download_Mirror}/web/imagick/imagick-3.1.2.tgz imagick-3.1.2.tgz
        Tar_Cd imagick-3.1.2.tgz imagick-3.1.2
    else
        Download_Files ${Download_Mirror}/web/imagick/${Imagick_Ver}.tgz ${Imagick_Ver}.tgz
        Tar_Cd ${Imagick_Ver}.tgz ${Imagick_Ver}
    fi
    ${PHP_Path}/bin/phpize
    ./configure --with-php-config=${PHP_Path}/bin/php-config --with-imagick=/usr/local/imagemagick
    make && make install
    cd ../

    cat >${PHP_Path}/conf.d/008-imagick.ini<<EOF
extension = "imagick.so"
EOF

    if [ -s "${zend_ext}" ] && [ -s /usr/local/imagemagick/bin/convert ]; then
        Restart_PHP
        Echo_Green "====== ImageMagick install completed ======"
        Echo_Green "ImageMagick installed successfully, enjoy it!"
    else
        rm -f ${PHP_Path}/conf.d/008-imagick.ini
        Echo_Red "imagick install failed!"
    fi
}

Uninstall_ImageMagick()
{
    echo "You will uninstall ImageMagick..."
    Press_Start
    rm -f ${PHP_Path}/conf.d/008-imagick.ini
    echo "Delete ImageMagick directory..."
    rm -rf /usr/local/imagemagick
    Restart_PHP
    Echo_Green "Uninstall ImageMagick completed."
}
#!/bin/bash

Check_Stack_Choose()
{
    Check_Stack
    if [[ "${Get_Stack}" = "lnmp" && "${Stack}" = "" ]]; then
        echo "Current Stack: ${Get_Stack}, please run: ./upgrade.sh php"
        exit 1
    elif [[ "${Get_Stack}" = "lnmpa" || "${Get_Stack}" = "lamp" ]] && [[ "${Stack}" = "lnmp" ]]; then
        echo "Current Stack: ${Get_Stack}, please run: ./upgrade.sh phpa"
        exit 1
    fi
}

Start_Upgrade_PHP()
{
    Check_Stack_Choose
    Check_DB
    php_version=""
    Get_PHP_Ext_Dir
    echo "Current PHP Version:${Cur_PHP_Version}"
    echo "You can get version number from http://www.php.net/"
    read -p "Please enter a PHP Version you want: " php_version
    if [ "${php_version}" = "" ]; then
        echo "Error: You must enter a corrent php version!!"
        exit 1
    fi
    Press_Start
    if [ -s php-${php_version}.tar.bz2 ]; then
        echo "php-${php_version}.tar.bz2 [found]"
    else
        echo "Notice: php-$php_version.tar.bz2 not found!!!download now..."
        cd ${cur_dir}/src
        country=`curl -sSk --connect-timeout 10 -m 60 https://ip.vpser.net/country`
        if [ "${country}" = "CN" ]; then
            wget -c --progress=bar:force http://cn2.php.net/distributions/php-${php_version}.tar.bz2
            if [ $? -ne 0 ]; then
                wget -c --progress=bar:force http://php.net/distributions/php-${php_version}.tar.bz2
            fi
        else
            wget -c --progress=bar:force http://php.net/distributions/php-${php_version}.tar.bz2
        fi
        if [ $? -eq 0 ]; then
            echo "Download php-${php_version}.tar.bz2 successfully!"
        else
            wget -c --progress=bar:force http://museum.php.net/php5/php-${php_version}.tar.bz2
            if [ $? -eq 0 ]; then
                echo "Download php-${php_version}.tar.bz2 successfully!"
            else
                echo "You enter PHP Version was:"${php_version}
                Echo_Red "Error! You entered a wrong version number, please check!"
                exit 1
            fi
        fi
    fi

    if echo "${php_version}" | grep -Eqi '^5.2.';then
        Download_Files ${Download_Mirror}/web/phpfpm/php-${php_version}-fpm-0.5.14.diff.gz php-${php_version}-fpm-0.5.14.diff.gz
    fi
    lnmp stop

    if [ "${Stack}" = "lnmp" ]; then
        mv /usr/local/php /usr/local/oldphp${Upgrade_Date}
        mv /etc/init.d/php-fpm /usr/local/oldphp${Upgrade_Date}/init.d.php-fpm.bak.${Upgrade_Date}
    else
        if echo "${Cur_PHP_Version}" | grep -Eqi '^7.';then
            mv /usr/local/apache/modules/libphp7.so /usr/local/apache/modules/libphp7.so.bak.${Upgrade_Date}
        else
            mv /usr/local/apache/modules/libphp5.so /usr/local/apache/modules/libphp5.so.bak.${Upgrade_Date}
        fi
        mv /usr/local/php /usr/local/oldphp${Upgrade_Date}
        \cp /usr/local/apache/conf/httpd.conf /usr/local/apache/conf/httpd.conf.bak.${Upgrade_Date}
        if echo "${Cur_PHP_Version}" | grep -Eqi '^7.' && echo "${php_version}" | grep -Eqi '^5.';then
            sed -i '/libphp7.so/d' /usr/local/apache/conf/httpd.conf
        fi
    fi

}

Check_Autoconf()
{
    if [[ -s /usr/local/autoconf-2.13/bin/autoconf && -s /usr/local/autoconf-2.13/bin/autoheader ]]; then
        Echo_Green "Autconf 2.13...ok"
        export PHP_AUTOCONF=/usr/local/autoconf-2.13/bin/autoconf
        export PHP_AUTOHEADER=/usr/local/autoconf-2.13/bin/autoheader
    else
        Install_Autoconf
    fi
}

Check_ICU()
{
    echo "Check icu..."
    if [ "$PM" = "yum" ]; then
        yum -y install libicu-devel
    elif [ "$PM" = "apt" ]; then
        apt-get update
        apt-get install -y libicu-dev
    fi
    Install_Icu4c
}

Ln_PHP_Bin()
{
    ln -sf /usr/local/php/bin/php /usr/bin/php
    ln -sf /usr/local/php/bin/phpize /usr/bin/phpize
    ln -sf /usr/local/php/bin/pear /usr/bin/pear
    ln -sf /usr/local/php/bin/pecl /usr/bin/pecl
    if [ "${Stack}" = "lnmp" ]; then
        ln -sf /usr/local/php/sbin/php-fpm /usr/bin/php-fpm
    fi
}

Pear_Pecl_Set()
{
    pear config-set php_ini /usr/local/php/etc/php.ini
    pecl config-set php_ini /usr/local/php/etc/php.ini
}

Check_PHP_Upgrade_Files()
{
    rm -rf ${cur_dir}/src/php-${php_version}
    if [ "${Stack}" = "lnmp" ]; then
        if [[ -s /usr/local/php/sbin/php-fpm && -s /etc/init.d/php-fpm && -s /usr/local/php/etc/php.ini && -s /usr/local/php/bin/php ]]; then
            Echo_Green "======== upgrade php completed ======"
        else
            Echo_Red "======== upgrade php failed ======"
            Echo_Red "upgrade php log: /root/upgrade_lnmp_php.log"
            echo "You upload upgrade_lnmp_php.log to LNMP Forum for help."
        fi
    else
        if echo "${php_version}" | grep -Eqi '^7.';then
            if [[ -s /usr/local/apache/bin/httpd && -s /usr/local/apache/modules/libphp7.so && -s /usr/local/apache/conf/httpd.conf ]]; then
                Echo_Green "======== upgrade php completed ======"
            else
                Echo_Red "======== upgrade php failed ======"
                Echo_Red "upgrade php log: /root/upgrade_a_php.log"
                echo "You upload upgrade_a_php.log to LNMP Forum for help."
            fi
        else
            if [[ -s /usr/local/apache/modules/libphp5.so && -s /usr/local/php/etc/php.ini && -s /usr/local/php/bin/php ]]; then
                Echo_Green "======== upgrade php completed ======"
            else
                Echo_Red "======== upgrade php failed ======"
                Echo_Red "upgrade php log: /root/upgrade_a_php.log"
                echo "You upload upgrade_a_php.log to LNMP Forum for help."
            fi
        fi
    fi
}

Upgrade_PHP_52()
{
    if [ ${DB_Name} == "None" ]; then
        echo "MySQL or MariaDB not found!"
        exit 1
    fi
    Check_Curl
    Check_Autoconf
    cd ${cur_dir}/src && rm -rf php-${php_version}
    tar jxf php-${php_version}.tar.bz2
    if [ "${Stack}" = "lnmp" ]; then
        gzip -cd php-${php_version}-fpm-0.5.14.diff.gz | patch -d php-${php_version} -p1
    fi
    cd php-${php_version}/
    patch -p1 < ${cur_dir}/src/patch/php-5.2.17-max-input-vars.patch
    patch -p0 < ${cur_dir}/src/patch/php-5.2.17-xml.patch
    patch -p1 < ${cur_dir}/src/patch/debian_patches_disable_SSLv2_for_openssl_1_0_0.patch
    patch -p1 < ${cur_dir}/src/patch/php-5.2-multipart-form-data.patch
    ./buildconf --force
    if [ "${Stack}" = "lnmp" ]; then
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --with-mysql=${MySQL_Dir} --with-mysqli=${MySQL_Config} --with-pdo-mysql=${MySQL_Dir} --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --enable-discard-path --enable-magic-quotes --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl=/usr/local/curl --enable-mbregex --enable-fastcgi --enable-fpm --enable-force-cgi-redirect --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --with-mime-magic ${PHP_Modules_Options}
    else
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --with-apxs2=/usr/local/apache/bin/apxs --with-mysql=${MySQL_Dir} --with-mysqli=${MySQL_Config} --with-pdo-mysql=${MySQL_Dir} --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --enable-discard-path --enable-magic-quotes --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl=/usr/local/curl --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --with-mime-magic ${PHP_Modules_Options}
    fi
    make ZEND_EXTRA_LIBS='-liconv'
    make install

    mkdir -p /usr/local/php/{etc,conf.d}
    \cp php.ini-dist /usr/local/php/etc/php.ini
    cd ../

    Ln_PHP_Bin

    # php extensions
    sed -i 's#extension_dir = "./"#extension_dir = "/usr/local/php/lib/php/extensions/no-debug-non-zts-20060613/"\n#' /usr/local/php/etc/php.ini
    sed -i 's#output_buffering =.*#output_buffering = On#' /usr/local/php/etc/php.ini
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' /usr/local/php/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' /usr/local/php/etc/php.ini
    sed -i 's/; cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' /usr/local/php/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' /usr/local/php/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,fsocket/g' /usr/local/php/etc/php.ini
    Pear_Pecl_Set

    cd ${cur_dir}/src
    if [ "${Is_64bit}" = "y" ] ; then
        Download_Files ${Download_Mirror}/web/zend/ZendOptimizer-3.3.9-linux-glibc23-x86_64.tar.gz ZendOptimizer-3.3.9-linux-glibc23-x86_64.tar.gz
        tar zxf ZendOptimizer-3.3.9-linux-glibc23-x86_64.tar.gz
        mkdir -p /usr/local/zend/
        \cp ZendOptimizer-3.3.9-linux-glibc23-x86_64/data/5_2_x_comp/ZendOptimizer.so /usr/local/zend/
    else
        Download_Files ${Download_Mirror}/web/zend/ZendOptimizer-3.3.9-linux-glibc23-i386.tar.gz ZendOptimizer-3.3.9-linux-glibc23-i386.tar.gz
        tar zxf ZendOptimizer-3.3.9-linux-glibc23-i386.tar.gz
        mkdir -p /usr/local/zend/
        \cp ZendOptimizer-3.3.9-linux-glibc23-i386/data/5_2_x_comp/ZendOptimizer.so /usr/local/zend/
    fi

    cat >/usr/local/php/conf.d/002-zendoptimizer.ini<<EOF
[Zend Optimizer]
zend_optimizer.optimization_level=1
zend_extension="/usr/local/zend/ZendOptimizer.so"
EOF

    if [ "${Stack}" = "lnmp" ]; then
        rm -f /usr/local/php/etc/php-fpm.conf
        \cp ${cur_dir}/conf/php-fpm5.2.conf /usr/local/php/etc/php-fpm.conf
        \cp ${cur_dir}/init.d/init.d.php-fpm5.2 /etc/init.d/php-fpm
        chmod +x /etc/init.d/php-fpm
        LNMP_PHP_Opt
    fi
    lnmp start
    Check_PHP_Upgrade_Files
}

Upgrade_PHP_53()
{
    Echo_Blue "Start install php-${php_version}"
    Check_Curl
    Tarj_Cd php-${php_version}.tar.bz2 php-${php_version}
    patch -p1 < ${cur_dir}/src/patch/php-5.3-multipart-form-data.patch
    if [ "${Stack}" = "lnmp" ]; then
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-magic-quotes --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl=/usr/local/curl --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo ${PHP_Modules_Options}
    else
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --with-apxs2=/usr/local/apache/bin/apxs --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-magic-quotes --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl=/usr/local/curl --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo ${PHP_Modules_Options}
    fi

    make ZEND_EXTRA_LIBS='-liconv'
    make install

    Ln_PHP_Bin

    echo "Copy new php configure file."
    mkdir -p /usr/local/php/{etc,conf.d}
    \cp php.ini-production /usr/local/php/etc/php.ini

    cd ${cur_dir}
    # php extensions
    echo "Modify php.ini......"
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' /usr/local/php/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' /usr/local/php/etc/php.ini
    sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' /usr/local/php/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' /usr/local/php/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server/g' /usr/local/php/etc/php.ini
    Pear_Pecl_Set
    Install_Composer

    echo "Install ZendGuardLoader..."
    cd ${cur_dir}/src
    if [ "${Is_64bit}" = "y" ] ; then
        Download_Files ${Download_Mirror}/web/zend/ZendGuardLoader-php-5.3-linux-glibc23-x86_64.tar.gz ZendGuardLoader-php-5.3-linux-glibc23-x86_64.tar.gz
        tar zxf ZendGuardLoader-php-5.3-linux-glibc23-x86_64.tar.gz
        mkdir -p /usr/local/zend/
        \cp ZendGuardLoader-php-5.3-linux-glibc23-x86_64/php-5.3.x/ZendGuardLoader.so /usr/local/zend/
    else
        Download_Files ${Download_Mirror}/web/zend/ZendGuardLoader-php-5.3-linux-glibc23-i386.tar.gz ZendGuardLoader-php-5.3-linux-glibc23-i386.tar.gz
        tar zxf ZendGuardLoader-php-5.3-linux-glibc23-i386.tar.gz
        mkdir -p /usr/local/zend/
        \cp ZendGuardLoader-php-5.3-linux-glibc23-i386/php-5.3.x/ZendGuardLoader.so /usr/local/zend/
    fi

    echo "Write ZendGuardLoader to php.ini......"
    cat >/usr/local/php/conf.d/002-zendguardloader.ini<<EOF
[Zend Optimizer]
zend_extension=/usr/local/zend/ZendGuardLoader.so
zend_loader.enable=1
zend_loader.disable_licensing=0
zend_loader.obfuscation_level_support=3
zend_loader.license_path=
EOF

if [ "${Stack}" = "lnmp" ]; then
    echo "Creating new php-fpm configure file......"
    cat >/usr/local/php/etc/php-fpm.conf<<EOF
[global]
pid = /usr/local/php/var/run/php-fpm.pid
error_log = /usr/local/php/var/log/php-fpm.log
log_level = notice

[www]
listen = /tmp/php-cgi.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 6
request_terminate_timeout = 100
request_slowlog_timeout = 0
slowlog = var/log/slow.log
EOF

    echo "Copy php-fpm init.d file......"
    \cp ${cur_dir}/src/php-${php_version}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
    chmod +x /etc/init.d/php-fpm
    LNMP_PHP_Opt
fi

    lnmp start
    Check_PHP_Upgrade_Files
}

Upgrade_PHP_54()
{
    Echo_Blue "Start install php-${php_version}"
    Check_ICU
    Tarj_Cd php-${php_version}.tar.bz2 php-${php_version}
    if [ "${Stack}" = "lnmp" ]; then
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-intl --with-xsl ${PHP_Modules_Options}
    else
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --with-apxs2=/usr/local/apache/bin/apxs --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-intl --with-xsl ${PHP_Modules_Options}
    fi

    make ZEND_EXTRA_LIBS='-liconv'
    make install

    Ln_PHP_Bin

    echo "Copy new php configure file."
    mkdir -p /usr/local/php/{etc,conf.d}
    \cp php.ini-production /usr/local/php/etc/php.ini

    cd ${cur_dir}
    # php extensions
    echo "Modify php.ini......"
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' /usr/local/php/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' /usr/local/php/etc/php.ini
    sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' /usr/local/php/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' /usr/local/php/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server/g' /usr/local/php/etc/php.ini
    Pear_Pecl_Set
    Install_Composer

    echo "Install ZendGuardLoader..."
    cd ${cur_dir}/src
    if [ "${Is_64bit}" = "y" ] ; then
        Download_Files ${Download_Mirror}/web/zend/ZendGuardLoader-70429-PHP-5.4-linux-glibc23-x86_64.tar.gz ZendGuardLoader-70429-PHP-5.4-linux-glibc23-x86_64.tar.gz
        tar zxf ZendGuardLoader-70429-PHP-5.4-linux-glibc23-x86_64.tar.gz
        mkdir -p /usr/local/zend/
        \cp ZendGuardLoader-70429-PHP-5.4-linux-glibc23-x86_64/php-5.4.x/ZendGuardLoader.so /usr/local/zend/
    else
        Download_Files ${Download_Mirror}/web/zend/ZendGuardLoader-70429-PHP-5.4-linux-glibc23-i386.tar.gz ZendGuardLoader-70429-PHP-5.4-linux-glibc23-i386.tar.gz
        tar zxf ZendGuardLoader-70429-PHP-5.4-linux-glibc23-i386.tar.gz
        mkdir -p /usr/local/zend/
        \cp ZendGuardLoader-70429-PHP-5.4-linux-glibc23-i386/php-5.4.x/ZendGuardLoader.so /usr/local/zend/
    fi

    echo "Write ZendGuardLoader to php.ini......"
    cat >/usr/local/php/conf.d/002-zendguardloader.ini<<EOF
[Zend ZendGuard Loader]
zend_extension=/usr/local/zend/ZendGuardLoader.so
zend_loader.enable=1
zend_loader.disable_licensing=0
zend_loader.obfuscation_level_support=3
zend_loader.license_path=
EOF

if [ "${Stack}" = "lnmp" ]; then
    echo "Creating new php-fpm configure file......"
    cat >/usr/local/php/etc/php-fpm.conf<<EOF
[global]
pid = /usr/local/php/var/run/php-fpm.pid
error_log = /usr/local/php/var/log/php-fpm.log
log_level = notice

[www]
listen = /tmp/php-cgi.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 6
request_terminate_timeout = 100
request_slowlog_timeout = 0
slowlog = var/log/slow.log
EOF

    echo "Copy php-fpm init.d file......"
    \cp ${cur_dir}/src/php-${php_version}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
    chmod +x /etc/init.d/php-fpm
    LNMP_PHP_Opt
fi

    lnmp start
    Check_PHP_Upgrade_Files
}

Upgrade_PHP_556()
{
    Echo_Blue "Start install php-${php_version}"
    Check_ICU
    Tarj_Cd php-${php_version}.tar.bz2 php-${php_version}
    if [ "${Stack}" = "lnmp" ]; then
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --enable-intl --with-xsl ${PHP_Modules_Options}
    else
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --with-apxs2=/usr/local/apache/bin/apxs --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --enable-intl --with-xsl ${PHP_Modules_Options}
    fi

    make ZEND_EXTRA_LIBS='-liconv'
    make install

    Ln_PHP_Bin

    echo "Copy new php configure file."
    mkdir -p /usr/local/php/{etc,conf.d}
    \cp php.ini-production /usr/local/php/etc/php.ini

    cd ${cur_dir}
    # php extensions
    echo "Modify php.ini......"
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' /usr/local/php/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' /usr/local/php/etc/php.ini
    sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' /usr/local/php/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' /usr/local/php/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server/g' /usr/local/php/etc/php.ini
    Pear_Pecl_Set
    Install_Composer

    if echo "${php_version}" | grep -Eqi '^5.5.';then
        echo "Install ZendGuardLoader for PHP 5.5..."
        cd ${cur_dir}/src
        if [ "${Is_64bit}" = "y" ] ; then
            Download_Files ${Download_Mirror}/web/zend/zend-loader-php5.5-linux-x86_64.tar.gz zend-loader-php5.5-linux-x86_64.tar.gz
            tar zxf zend-loader-php5.5-linux-x86_64.tar.gz
            mkdir -p /usr/local/zend/
            \cp zend-loader-php5.5-linux-x86_64/ZendGuardLoader.so /usr/local/zend/
        else
            Download_Files ${Download_Mirror}/web/zend/zend-loader-php5.5-linux-i386.tar.gz zend-loader-php5.5-linux-i386.tar.gz
            tar zxf zend-loader-php5.5-linux-i386.tar.gz
            mkdir -p /usr/local/zend/
            \cp zend-loader-php5.5-linux-i386/ZendGuardLoader.so /usr/local/zend/
        fi
    elif echo "${php_version}" | grep -Eqi '^5.6.';then
        echo "Install ZendGuardLoader for PHP 5.6..."
        cd ${cur_dir}/src
        if [ "${Is_64bit}" = "y" ] ; then
            Download_Files ${Download_Mirror}/web/zend/zend-loader-php5.6-linux-x86_64.tar.gz zend-loader-php5.6-linux-x86_64.tar.gz
            tar zxf zend-loader-php5.6-linux-x86_64.tar.gz
            mkdir -p /usr/local/zend/
            \cp zend-loader-php5.6-linux-x86_64/ZendGuardLoader.so /usr/local/zend/
        else
            Download_Files ${Download_Mirror}/web/zend/zend-loader-php5.6-linux-i386.tar.gz zend-loader-php5.6-linux-i386.tar.gz
            tar zxf zend-loader-php5.6-linux-i386.tar.gz
            mkdir -p /usr/local/zend/
            \cp zend-loader-php5.6-linux-i386/ZendGuardLoader.so /usr/local/zend/
        fi
    fi

    echo "Write ZendGuardLoader to php.ini......"
    cat >/usr/local/php/conf.d/002-zendguardloader.ini<<EOF
[Zend ZendGuard Loader]
zend_extension=/usr/local/zend/ZendGuardLoader.so
zend_loader.enable=1
zend_loader.disable_licensing=0
zend_loader.obfuscation_level_support=3
zend_loader.license_path=
EOF

    echo "Download Opcache Control Panel..."
    \cp ${cur_dir}/conf/ocp.php /home/wwwroot/default/ocp.php

if [ "${Stack}" = "lnmp" ]; then
    echo "Creating new php-fpm configure file......"
    cat >/usr/local/php/etc/php-fpm.conf<<EOF
[global]
pid = /usr/local/php/var/run/php-fpm.pid
error_log = /usr/local/php/var/log/php-fpm.log
log_level = notice

[www]
listen = /tmp/php-cgi.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 6
request_terminate_timeout = 100
request_slowlog_timeout = 0
slowlog = var/log/slow.log
EOF

    echo "Copy php-fpm init.d file......"
    \cp ${cur_dir}/src/php-${php_version}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
    chmod +x /etc/init.d/php-fpm
    LNMP_PHP_Opt
fi

    lnmp start
    Check_PHP_Upgrade_Files
}

Upgrade_PHP_7()
{
    Echo_Blue "[+] Installing ${php_version}"
    Check_ICU
    Tarj_Cd php-${php_version}.tar.bz2 php-${php_version}
    if [ "${Stack}" = "lnmp" ]; then
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --enable-fpm --with-fpm-user=www --with-fpm-group=www --enable-mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --enable-intl --enable-pcntl --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --with-xsl ${PHP_Modules_Options}
    else
        ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/conf.d --with-apxs2=/usr/local/apache/bin/apxs --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir=/usr/local/freetype --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization ${with_curl} --enable-mbregex --enable-mbstring --enable-intl --enable-pcntl --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf ${with_openssl} --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --disable-fileinfo --enable-opcache --with-xsl ${PHP_Modules_Options}
    fi

    make ZEND_EXTRA_LIBS='-liconv'
    make install

    Ln_PHP_Bin

    echo "Copy new php configure file..."
    mkdir -p /usr/local/php/{etc,conf.d}
    \cp php.ini-production /usr/local/php/etc/php.ini

    cd ${cur_dir}
    # php extensions
    echo "Modify php.ini......"
    sed -i 's/post_max_size =.*/post_max_size = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/upload_max_filesize =.*/upload_max_filesize = 50M/g' /usr/local/php/etc/php.ini
    sed -i 's/;date.timezone =.*/date.timezone = PRC/g' /usr/local/php/etc/php.ini
    sed -i 's/short_open_tag =.*/short_open_tag = On/g' /usr/local/php/etc/php.ini
    sed -i 's/;cgi.fix_pathinfo=.*/cgi.fix_pathinfo=0/g' /usr/local/php/etc/php.ini
    sed -i 's/max_execution_time =.*/max_execution_time = 300/g' /usr/local/php/etc/php.ini
    sed -i 's/disable_functions =.*/disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,popen,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server/g' /usr/local/php/etc/php.ini
    Pear_Pecl_Set
    Install_Composer

    echo "Install ZendGuardLoader for PHP 7..."
    echo "unavailable now."

    echo "Write ZendGuardLoader to php.ini..."
    cat >/usr/local/php/conf.d/002-zendguardloader.ini<<EOF
[Zend ZendGuard Loader]
;php7 do not support zendguardloader,after support you can uncomment the following line.
;zend_extension=/usr/local/zend/ZendGuardLoader.so
;zend_loader.enable=1
;zend_loader.disable_licensing=0
;zend_loader.obfuscation_level_support=3
;zend_loader.license_path=
EOF

if [ "${Stack}" = "lnmp" ]; then
    echo "Creating new php-fpm configure file..."
    cat >/usr/local/php/etc/php-fpm.conf<<EOF
[global]
pid = /usr/local/php/var/run/php-fpm.pid
error_log = /usr/local/php/var/log/php-fpm.log
log_level = notice

[www]
listen = /tmp/php-cgi.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www
listen.group = www
listen.mode = 0666
user = www
group = www
pm = dynamic
pm.max_children = 10
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 6
request_terminate_timeout = 100
request_slowlog_timeout = 0
slowlog = var/log/slow.log
EOF

    echo "Copy php-fpm init.d file..."
    \cp ${cur_dir}/src/php-${php_version}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
    chmod +x /etc/init.d/php-fpm
    LNMP_PHP_Opt
fi
    if [ "${Stack}" != "lnmp" ]; then
        sed -i '/^LoadModule php5_module/d' /usr/local/apache/conf/httpd.conf
    fi
    lnmp start
    Check_PHP_Upgrade_Files
}

Upgrade_PHP()
{
    Start_Upgrade_PHP
    PHP_with_curl
    PHP_with_openssl
    if echo "${php_version}" | grep -Eqi '^5.2.';then
        Upgrade_PHP_52
    elif echo "${php_version}" | grep -Eqi '^5.3.';then
        Upgrade_PHP_53
    elif echo "${php_version}" | grep -Eqi '^5.4.';then
        Upgrade_PHP_54
    elif echo "${php_version}" | grep -Eqi '^5.[56].';then
        Upgrade_PHP_556
    elif echo "${php_version}" | grep -Eqi '^7.[01].';then
        Upgrade_PHP_7
    fi
}
#!/bin/bash

Install_Apache_22()
{
    Echo_Blue "[+] Installing ${Apache_Ver}..."
    if [ "${Stack}" = "lamp" ]; then
        groupadd www
        useradd -s /sbin/nologin -g www www
        mkdir -p ${Default_Website_Dir}
        chmod +w ${Default_Website_Dir}
        mkdir -p /home/wwwlogs
        chmod 777 /home/wwwlogs
        chown -R www:www ${Default_Website_Dir}
    fi
    Tarj_Cd ${Apache_Ver}.tar.bz2 ${Apache_Ver}
    ./configure --prefix=/usr/local/apache --enable-mods-shared=most --enable-headers --enable-mime-magic --enable-proxy --enable-so --enable-rewrite --with-ssl --enable-ssl --enable-deflate --enable-suexec --with-included-apr --with-mpm=prefork --with-expat=builtin
    make && make install

    mv /usr/local/apache/conf/httpd.conf /usr/local/apache/conf/httpd.conf.bak
    if [ "${Stack}" = "lamp" ]; then
        \cp ${cur_dir}/conf/httpd22-lamp.conf /usr/local/apache/conf/httpd.conf
        \cp ${cur_dir}/conf/httpd-vhosts-lamp.conf /usr/local/apache/conf/extra/httpd-vhosts.conf
        \cp ${cur_dir}/conf/httpd22-ssl.conf /usr/local/apache/conf/extra/httpd-ssl.conf
        \cp ${cur_dir}/conf/enable-apache-ssl-vhost-example.conf /usr/local/apache/conf/enable-apache-ssl-vhost-example.conf
    elif [ "${Stack}" = "lnmpa" ]; then
        \cp ${cur_dir}/conf/httpd22-lnmpa.conf /usr/local/apache/conf/httpd.conf
        \cp ${cur_dir}/conf/httpd-vhosts-lnmpa.conf /usr/local/apache/conf/extra/httpd-vhosts.conf
    fi
    \cp ${cur_dir}/conf/httpd-default.conf /usr/local/apache/conf/extra/httpd-default.conf
    \cp ${cur_dir}/conf/mod_remoteip.conf /usr/local/apache/conf/extra/mod_remoteip.conf

    sed -i 's/ServerAdmin you@example.com/ServerAdmin '${ServerAdmin}'/g' /usr/local/apache/conf/httpd.conf
    sed -i 's/webmaster@example.com/'${ServerAdmin}'/g' /usr/local/apache/conf/extra/httpd-vhosts.conf
    mkdir -p /usr/local/apache/conf/vhost

    if [ "${Stack}" = "lnmpa" ]; then
        \cp ${cur_dir}/src/patch/mod_remoteip.c .
        /usr/local/apache/bin/apxs -i -c -n mod_remoteip.so mod_remoteip.c
        sed -i 's/#LoadModule/LoadModule/g' /usr/local/apache/conf/extra/mod_remoteip.conf
    fi

    ln -sf /usr/local/lib/libltdl.so.3 /usr/lib/libltdl.so.3
    mkdir /usr/local/apache/conf/vhost

    if [ "${Default_Website_Dir}" != "/home/wwwroot/default" ]; then
        sed -i "s#/home/wwwroot/default#${Default_Website_Dir}#g" /usr/local/apache/conf/httpd.conf
        sed -i "s#/home/wwwroot/default#${Default_Website_Dir}#g" /usr/local/apache/conf/extra/httpd-vhosts.conf
    fi

    if [[ "${PHPSelect}" = "6" || "${PHPSelect}" = "7" ]]; then
        sed -i '/^LoadModule php5_module/d' /usr/local/apache/conf/httpd.conf
    fi

    \cp ${cur_dir}/init.d/init.d.httpd /etc/init.d/httpd
    chmod +x /etc/init.d/httpd
}

Install_Apache_24()
{
    Echo_Blue "[+] Installing ${Apache_Ver}..."
    if [ "${Stack}" = "lamp" ]; then
        groupadd www
        useradd -s /sbin/nologin -g www www
        mkdir -p ${Default_Website_Dir}
        chmod +w ${Default_Website_Dir}
        mkdir -p /home/wwwlogs
        chmod 777 /home/wwwlogs
        chown -R www:www ${Default_Website_Dir}
    fi
    Tarj_Cd ${Apache_Ver}.tar.bz2 ${Apache_Ver}
    cd srclib
    if [ -s "${cur_dir}/src/${APR_Ver}.tar.bz2" ]; then
        echo "${APR_Ver}.tar.bz2 [found]"
        cp ${cur_dir}/src/${APR_Ver}.tar.bz2 .
    else
        Download_Files ${Download_Mirror}/web/apache/${APR_Ver}.tar.bz2 ${APR_Ver}.tar.bz2
    fi
    if [ -s "${cur_dir}/src/${APR_Util_Ver}.tar.bz2" ]; then
        echo "${APR_Util_Ver}.tar.bz2 [found]"
        cp ${cur_dir}/src/${APR_Util_Ver}.tar.bz2 .
    else
        Download_Files ${Download_Mirror}/web/apache/${APR_Util_Ver}.tar.bz2 ${APR_Util_Ver}.tar.bz2
    fi
    tar jxf ${APR_Ver}.tar.bz2
    tar jxf ${APR_Util_Ver}.tar.bz2
    mv ${APR_Ver} apr
    mv ${APR_Util_Ver} apr-util
    cd ..
    ./configure --prefix=/usr/local/apache --enable-mods-shared=most --enable-headers --enable-mime-magic --enable-proxy --enable-so --enable-rewrite --with-ssl --enable-ssl --enable-deflate --with-pcre --with-included-apr --with-apr-util --enable-mpms-shared=all --with-mpm=prefork --enable-remoteip
    make && make install

    mv /usr/local/apache/conf/httpd.conf /usr/local/apache/conf/httpd.conf.bak
    if [ "${Stack}" = "lamp" ]; then
        \cp ${cur_dir}/conf/httpd24-lamp.conf /usr/local/apache/conf/httpd.conf
        \cp ${cur_dir}/conf/httpd-vhosts-lamp.conf /usr/local/apache/conf/extra/httpd-vhosts.conf
        \cp ${cur_dir}/conf/httpd24-ssl.conf /usr/local/apache/conf/extra/httpd-ssl.conf
        \cp ${cur_dir}/conf/enable-apache-ssl-vhost-example.conf /usr/local/apache/conf/enable-apache-ssl-vhost-example.conf
    elif [ "${Stack}" = "lnmpa" ]; then
        \cp ${cur_dir}/conf/httpd24-lnmpa.conf /usr/local/apache/conf/httpd.conf
        \cp ${cur_dir}/conf/httpd-vhosts-lnmpa.conf /usr/local/apache/conf/extra/httpd-vhosts.conf
    fi
    \cp ${cur_dir}/conf/httpd-default.conf /usr/local/apache/conf/extra/httpd-default.conf
    \cp ${cur_dir}/conf/mod_remoteip.conf /usr/local/apache/conf/extra/mod_remoteip.conf
    mkdir /usr/local/apache/conf/vhost

    sed -i 's/NameVirtualHost .*//g' /usr/local/apache/conf/extra/httpd-vhosts.conf
    if [ "${Default_Website_Dir}" != "/home/wwwroot/default" ]; then
        sed -i "s#/home/wwwroot/default#${Default_Website_Dir}#g" /usr/local/apache/conf/httpd.conf
        sed -i "s#/home/wwwroot/default#${Default_Website_Dir}#g" /usr/local/apache/conf/extra/httpd-vhosts.conf
    fi

    if [[ "${PHPSelect}" = "6" || "${PHPSelect}" = "7" ]]; then
        sed -i '/^LoadModule php5_module/d' /usr/local/apache/conf/httpd.conf
    fi

    \cp ${cur_dir}/init.d/init.d.httpd /etc/init.d/httpd
    chmod +x /etc/init.d/httpd
}
#!/bin/bash

Nginx_Dependent()
{
    if [ "$PM" = "yum" ]; then
        rpm -e httpd httpd-tools --nodeps
        yum -y remove httpd*
        for packages in make gcc gcc-c++ gcc-g77 wget crontabs zlib zlib-devel openssl openssl-devel;
        do yum -y install $packages; done
    elif [ "$PM" = "apt" ]; then
        apt-get update -y
        dpkg -P apache2 apache2-doc apache2-mpm-prefork apache2-utils apache2.2-common
        for removepackages in apache2 apache2-doc apache2-utils apache2.2-common apache2.2-bin apache2-mpm-prefork apache2-doc apache2-mpm-worker;
        do apt-get purge -y $removepackages; done
        for packages in debian-keyring debian-archive-keyring build-essential gcc g++ make autoconf automake wget cron openssl libssl-dev zlib1g zlib1g-dev ;
        do apt-get --no-install-recommends install -y $packages --force-yes; done
    fi
}

Install_Only_Nginx()
{
    clear
    echo "+-----------------------------------------------------------------------+"
    echo "|              Install Nginx for LNMP, Written by Licess                |"
    echo "+-----------------------------------------------------------------------+"
    echo "|                     A tool to only install Nginx.                     |"
    echo "+-----------------------------------------------------------------------+"
    echo "|           For more information please visit https://lnmp.org          |"
    echo "+-----------------------------------------------------------------------+"
    Press_Install
    Echo_Blue "Install dependent packages..."
    cd ${cur_dir}/src
    Nginx_Dependent
    cd ${cur_dir}/src
    Download_Files ${Download_Mirror}/web/pcre/${Pcre_Ver}.tar.bz2 ${Pcre_Ver}.tar.bz2
    Install_Pcre
    if [ `grep -L '/usr/local/lib'    '/etc/ld.so.conf'` ]; then
        echo "/usr/local/lib" >> /etc/ld.so.conf
    fi
    ldconfig
    Download_Files ${Download_Mirror}/web/nginx/${Nginx_Ver}.tar.gz ${Nginx_Ver}.tar.gz
    Install_Nginx
    StartUp nginx
    /etc/init.d/nginx start
    Add_Iptables_Rules
    \cp ${cur_dir}/conf/index.html ${Default_Website_Dir}/index.html
    Check_Nginx_Files
    exit 0
    exit 0
}

Install_Database()
{
    echo "============================check files=================================="
    cd ${cur_dir}/src
    if [[ "${DBSelect}" = "1" || "${DBSelect}" = "2" || "${DBSelect}" = "3" || "${DBSelect}" = "4" ]]; then
        Download_Files ${Download_Mirror}/datebase/mysql/${Mysql_Ver}.tar.gz ${Mysql_Ver}.tar.gz
    elif [[ "${DBSelect}" = "5" || "${DBSelect}" = "6" || "${DBSelect}" = "7" ]]; then
        Download_Files ${Download_Mirror}/datebase/mariadb/${Mariadb_Ver}.tar.gz ${Mariadb_Ver}.tar.gz
    fi
    echo "============================check files=================================="

    Echo_Blue "Install dependent packages..."
    if [ "$PM" = "yum" ]; then
        CentOS_Dependent
    elif [ "$PM" = "apt" ]; then
        Deb_Dependent
    fi
    if [ "${DBSelect}" = "1" ]; then
        Install_MySQL_51
    elif [ "${DBSelect}" = "2" ]; then
        Install_MySQL_55
    elif [ "${DBSelect}" = "3" ]; then
        Install_MySQL_56
    elif [ "${DBSelect}" = "4" ]; then
        Install_MySQL_57
    elif [ "${DBSelect}" = "5" ]; then
        Install_MariaDB_5
    elif [ "${DBSelect}" = "6" ]; then
        Install_MariaDB_10
    elif [ "${DBSelect}" = "7" ]; then
        Install_MariaDB_101
    fi
    TempMycnf_Clean

    if [[ "${DBSelect}" = "5" || "${DBSelect}" = "6" || "${DBSelect}" = "7" ]]; then
        StartUp mariadb
        /etc/init.d/mariadb start
    elif [[ "${DBSelect}" = "1" || "${DBSelect}" = "2" || "${DBSelect}" = "3" || "${DBSelect}" = "4" ]]; then
        StartUp mysql
        /etc/init.d/mysql start
    fi

    Check_DB_Files
    if [[ "${isDB}" = "ok" ]]; then
        if [[ "${DBSelect}" = "1" || "${DBSelect}" = "2" || "${DBSelect}" = "3" || "${DBSelect}" = "4" ]]; then
            Echo_Green "MySQL root password: ${DB_Root_Password}"
            Echo_Green "Install ${Mysql_Ver} completed! enjoy it."
            exit 0
            exit 0
        elif [[ "${DBSelect}" = "5" || "${DBSelect}" = "6" || "${DBSelect}" = "7" ]]; then
            Echo_Green "MariaDB root password: ${DB_Root_Password}"
            Echo_Green "Install ${Mariadb_Ver} completed! enjoy it."
            exit 0
            exit 0
        fi
    fi
}

Install_Only_Database()
{
    clear
    echo "+-----------------------------------------------------------------------+"
    echo "|      Install MySQL/MariaDB database for LNMP, Written by Licess       |"
    echo "+-----------------------------------------------------------------------+"
    echo "|               A tool to install MySQL/MariaDB for LNMP                |"
    echo "+-----------------------------------------------------------------------+"
    echo "|           For more information please visit https://lnmp.org          |"
    echo "+-----------------------------------------------------------------------+"

    Get_Dist_Name
    Check_DB
    if [ ${DB_Name} != "None" ]; then
        echo "You have install ${DB_Name}!"
        exit 1
    fi

    Database_Selection
    Press_Install
    Install_Database 2>&1 | tee /root/install_database.log
}
#!/bin/bash

Add_Iptables_Rules()
{
    #add iptables firewall rules
    if [ -s /sbin/iptables ]; then
        /sbin/iptables -I INPUT 1 -i lo -j ACCEPT
        /sbin/iptables -I INPUT 2 -m state --state ESTABLISHED,RELATED -j ACCEPT
        /sbin/iptables -I INPUT 3 -p tcp --dport 22 -j ACCEPT
        /sbin/iptables -I INPUT 4 -p tcp --dport 80 -j ACCEPT
        /sbin/iptables -I INPUT 5 -p tcp --dport 443 -j ACCEPT
        /sbin/iptables -I INPUT 6 -p tcp --dport 3306 -j DROP
        /sbin/iptables -I INPUT 7 -p icmp -m icmp --icmp-type 8 -j ACCEPT
        if [ "$PM" = "yum" ]; then
            service iptables save
            if [ -s /usr/sbin/firewalld ]; then
                systemctl stop firewalld
                systemctl disable firewalld
            fi
        elif [ "$PM" = "apt" ]; then
            iptables-save > /etc/iptables.rules
            cat >/etc/network/if-post-down.d/iptables<<EOF
#!/bin/bash
iptables-save > /etc/iptables.rules
EOF
            chmod +x /etc/network/if-post-down.d/iptables
            cat >/etc/network/if-pre-up.d/iptables<<EOF
#!/bin/bash
iptables-restore < /etc/iptables.rules
EOF
            chmod +x /etc/network/if-pre-up.d/iptables
        fi
    fi
}

Add_LNMP_Startup()
{
    echo "Add Startup and Starting LNMP..."
    \cp ${cur_dir}/conf/lnmp /bin/lnmp
    chmod +x /bin/lnmp
    StartUp nginx
    /etc/init.d/nginx start
    if [[ "${DBSelect}" = "5" || "${DBSelect}" = "6" || "${DBSelect}" = "7" ]]; then
        StartUp mariadb
        /etc/init.d/mariadb start
        sed -i 's#/etc/init.d/mysql#/etc/init.d/mariadb#' /bin/lnmp
    elif [[ "${DBSelect}" = "1" || "${DBSelect}" = "2" || "${DBSelect}" = "3" || "${DBSelect}" = "4" ]]; then
        StartUp mysql
        /etc/init.d/mysql start
    elif [ "${DBSelect}" = "0" ]; then
        sed -i 's#/etc/init.d/mysql.*##' /bin/lnmp
    fi
    StartUp php-fpm
    /etc/init.d/php-fpm start
    if [ "${PHPSelect}" = "1" ]; then
        sed -i 's#/usr/local/php/var/run/php-fpm.pid#/usr/local/php/logs/php-fpm.pid#' /bin/lnmp
    fi
}

Add_LNMPA_Startup()
{
    echo "Add Startup and Starting LNMPA..."
    \cp ${cur_dir}/conf/lnmpa /bin/lnmp
    chmod +x /bin/lnmp
    StartUp nginx
    /etc/init.d/nginx start
    if [[ "${DBSelect}" = "5" || "${DBSelect}" = "6" || "${DBSelect}" = "7" ]]; then
        StartUp mariadb
        /etc/init.d/mariadb start
        sed -i 's#/etc/init.d/mysql#/etc/init.d/mariadb#' /bin/lnmp
    elif [[ "${DBSelect}" = "1" || "${DBSelect}" = "2" || "${DBSelect}" = "3" || "${DBSelect}" = "4" ]]; then
        StartUp mysql
        /etc/init.d/mysql start
    elif [ "${DBSelect}" = "0" ]; then
        sed -i 's#/etc/init.d/mysql.*##' /bin/lnmp
    fi
    StartUp httpd
    /etc/init.d/httpd start
}

Add_LAMP_Startup()
{
    echo "Add Startup and Starting LAMP..."
    \cp ${cur_dir}/conf/lamp /bin/lnmp
    chmod +x /bin/lnmp
    StartUp httpd
    /etc/init.d/httpd start
    if [[ "${DBSelect}" = "5" || "${DBSelect}" = "6" || "${DBSelect}" = "7" ]]; then
        StartUp mariadb
        /etc/init.d/mariadb start
        sed -i 's#/etc/init.d/mysql#/etc/init.d/mariadb#' /bin/lnmp
    elif [[ "${DBSelect}" = "1" || "${DBSelect}" = "2" || "${DBSelect}" = "3" || "${DBSelect}" = "4" ]]; then
        StartUp mysql
        /etc/init.d/mysql start
    elif [ "${DBSelect}" = "0" ]; then
        sed -i 's#/etc/init.d/mysql.*##' /bin/lnmp
    fi
}

Check_Nginx_Files()
{
    isNginx=""
    echo "============================== Check install =============================="
    echo "Checking ..."
    if [[ -s /usr/local/nginx/conf/nginx.conf && -s /usr/local/nginx/sbin/nginx ]]; then
        Echo_Green "Nginx: OK"
        isNginx="ok"
    else
        Echo_Red "Error: Nginx install failed."
    fi
}

Check_DB_Files()
{
    isDB=""
    if [[ "${DBSelect}" = "5" || "${DBSelect}" = "6" || "${DBSelect}" = "7" ]]; then
        if [[ -s /usr/local/mariadb/bin/mysql && -s /usr/local/mariadb/bin/mysqld_safe && -s /etc/my.cnf ]]; then
            Echo_Green "MariaDB: OK"
            isDB="ok"
        else
            Echo_Red "Error: MariaDB install failed."
        fi
    elif [[ "${DBSelect}" = "1" || "${DBSelect}" = "2" || "${DBSelect}" = "3" || "${DBSelect}" = "4" ]]; then
        if [[ -s /usr/local/mysql/bin/mysql && -s /usr/local/mysql/bin/mysqld_safe && -s /etc/my.cnf ]]; then
            Echo_Green "MySQL: OK"
            isDB="ok"
        else
            Echo_Red "Error: MySQL install failed."
        fi
    elif [ "${DBSelect}" = "0" ]; then
        Echo_Green "Do not install MySQL/MariaDB."
        isDB="ok"
    fi
}

Check_PHP_Files()
{
    isPHP=""
    if [ "${Stack}" = "lnmp" ]; then
        if [[ -s /usr/local/php/sbin/php-fpm && -s /usr/local/php/etc/php.ini && -s /usr/local/php/bin/php ]]; then
            Echo_Green "PHP: OK"
            Echo_Green "PHP-FPM: OK"
            isPHP="ok"
        else
            Echo_Red "Error: PHP install failed."
        fi
    else
        if [[ -s /usr/local/php/bin/php && -s /usr/local/php/etc/php.ini ]]; then
            Echo_Green "PHP: OK"
            isPHP="ok"
        else
            Echo_Red "Error: PHP install failed."
        fi
    fi
}

Check_Apache_Files()
{
    isApache=""
    if [[ "${PHPSelect}" = "6" || "${PHPSelect}" = "7" ]]; then
        if [[ -s /usr/local/apache/bin/httpd && -s /usr/local/apache/modules/libphp7.so && -s /usr/local/apache/conf/httpd.conf ]]; then
            Echo_Green "Apache: OK"
            isApache="ok"
        else
            Echo_Red "Error: Apache install failed."
        fi
    else
        if [[ -s /usr/local/apache/bin/httpd && -s /usr/local/apache/modules/libphp5.so && -s /usr/local/apache/conf/httpd.conf ]]; then
            Echo_Green "Apache: OK"
            isApache="ok"
        else
            Echo_Red "Error: Apache install failed."
        fi
    fi
}

Clean_Src_Dir()
{
    echo "Clean src directory..."
    if [[ "${DBSelect}" = "1" || "${DBSelect}" = "2" || "${DBSelect}" = "3" || "${DBSelect}" = "4" ]]; then
        rm -rf ${cur_dir}/src/${Mysql_Ver}
    elif [[ "${DBSelect}" = "5" || "${DBSelect}" = "6" || "${DBSelect}" = "7" ]]; then
        rm -rf ${cur_dir}/src/${Mariadb_Ver}
    fi
    rm -rf ${cur_dir}/src/${Php_Ver}
    if [ "${Stack}" = "lnmp" ]; then
        rm -rf ${cur_dir}/src/${Nginx_Ver}
    elif [ "${Stack}" = "lnmpa" ]; then
        rm -rf ${cur_dir}/src/${Nginx_Ver}
        rm -rf ${cur_dir}/src/${Apache_Ver}
    elif [ "${Stack}" = "lamp" ]; then
        rm -rf ${cur_dir}/src/${Apache_Ver}
    fi
}

Print_Sucess_Info()
{
    Clean_Src_Dir
    echo "+------------------------------------------------------------------------+"
    echo "|          LNMP V${LNMP_Ver} for ${DISTRO} Linux Server, Written by Licess          |"
    echo "+------------------------------------------------------------------------+"
    echo "|           For more information please visit https://lnmp.org           |"
    echo "+------------------------------------------------------------------------+"
    echo "|    lnmp status manage: lnmp {start|stop|reload|restart|kill|status}    |"
    echo "+------------------------------------------------------------------------+"
    echo "|  phpMyAdmin: http://IP/phpmyadmin/                                     |"
    echo "|  phpinfo: http://IP/phpinfo.php                                        |"
    echo "|  Prober:  http://IP/p.php                                              |"
    echo "+------------------------------------------------------------------------+"
    echo "|  Add VirtualHost: lnmp vhost add                                       |"
    echo "+------------------------------------------------------------------------+"
    echo "|  Default directory: ${Default_Website_Dir}                              |"
    if [ "${DBSelect}" != "0" ]; then
        echo "+------------------------------------------------------------------------+"
        echo "|  MySQL/MariaDB root password: ${DB_Root_Password}                          |"
    fi
    echo "+------------------------------------------------------------------------+"
    lnmp status
    if [ -s /bin/ss ]; then
        ss -ntl
    else
        netstat -ntl
    fi
    stop_time=$(date +%s)
    echo "Install lnmp takes $(((stop_time-start_time)/60)) minutes."
    Echo_Green "Install lnmp V${LNMP_Ver} completed! enjoy it."
}

Print_Failed_Info()
{
    if [ -s /bin/lnmp ]; then
        rm -f /bin/lnmp
    fi
    Echo_Red "Sorry, Failed to install LNMP!"
    Echo_Red "Please visit https://bbs.vpser.net/forum-25-1.html feedback errors and logs."
    Echo_Red "You can download /root/lnmp-install.log from your server,and upload lnmp-install.log to LNMP Forum."
}

Check_LNMP_Install()
{
    Check_Nginx_Files
    Check_DB_Files
    Check_PHP_Files
    if [[ "${isNginx}" = "ok" && "${isDB}" = "ok" && "${isPHP}" = "ok" ]]; then
        Print_Sucess_Info
    else
        Print_Failed_Info
    fi
}

Check_LNMPA_Install()
{
    Check_Nginx_Files
    Check_DB_Files
    Check_PHP_Files
    Check_Apache_Files
    if [[ "${isNginx}" = "ok" && "${isDB}" = "ok" && "${isPHP}" = "ok"  &&"${isApache}" = "ok" ]]; then
        Print_Sucess_Info
    else
        Print_Failed_Info
    fi
}

Check_LAMP_Install()
{
    Check_Apache_Files
    Check_DB_Files
    Check_PHP_Files
    if [[ "${isApache}" = "ok" && "${isDB}" = "ok" && "${isPHP}" = "ok" ]]; then
        Print_Sucess_Info
    else
        Print_Failed_Info
    fi
}
#!/bin/bash

Backup_MySQL2()
{
    echo "Starting backup all databases..."
    echo "If the database is large, the backup time will be longer."
    /usr/local/mysql/bin/mysqldump --defaults-file=~/.my.cnf --all-databases > /root/mysql_all_backup${Upgrade_Date}.sql
    if [ $? -eq 0 ]; then
        echo "MySQL databases backup successfully.";
    else
        echo "MySQL databases backup failed,Please backup databases manually!"
        exit 1
    fi
    lnmp stop
    echo "Remove autostart..."
    Remove_StartUp mysql
    mv /usr/local/mysql /usr/local/mysql2mariadb${Upgrade_Date}
    mv /etc/init.d/mysql /usr/local/mysql2mariadb${Upgrade_Date}/init.dmysql2mariadb.bak.${Upgrade_Date}
    mv /etc/my.cnf /usr/local/mysql2mariadb${Upgrade_Date}/my.cnf.mysql2mariadbbak.${Upgrade_Date}
    if [ "${MariaDB_Data_Dir}" != "/usr/local/mariadb/var" ]; then
        mv ${MariaDB_Data_Dir} ${MariaDB_Data_Dir}${Upgrade_Date}
    fi
    if echo "${mariadb_version}" | grep -Eqi '^5.5.' &&  echo "${cur_mysql_version}" | grep -Eqi '^5.6.';then
        sed -i 's/STATS_PERSISTENT=0//g' /root/mysql_all_backup${Upgrade_Date}.sql
    fi
}

Upgrade_MySQL2MariaDB()
{
    Check_DB
    if [ "${Is_MySQL}" = "n" ]; then
        Echo_Red "Current database was MariaDB, Can't run MySQL2MariaDB upgrade script."
        exit 1
    fi
    Verify_DB_Password

    cur_mysql_version=`/usr/local/mysql/bin/mysql -V | awk '{print $5}' | tr -d ","`
    mariadb_version=""
    echo "Current MySQL Version:${cur_mysql_version}"
    echo "You can get version number from https://downloads.mariadb.org/"
    Echo_Yellow "Please enter MariaDB Version you want."
    read -p "(example: 10.0.21 ): " mariadb_version
    if [ "${mariadb_version}" = "" ]; then
        echo "Error: You must input MariaDB Version!!"
        exit 1
    fi

    #do you want to install the InnoDB Storage Engine?
    echo "==========================="

    InstallInnodb="y"
    Echo_Yellow "Do you want to install the InnoDB Storage Engine?"
    read -p "(Default yes, if you want please enter: y , if not please enter: n): " InstallInnodb

    case "${InstallInnodb}" in
    [yY][eE][sS]|[yY])
        echo "You will install the InnoDB Storage Engine"
        InstallInnodb="y"
        ;;
    [nN][oO]|[nN])
        echo "You will NOT install the InnoDB Storage Engine!"
        InstallInnodb="n"
        ;;
    *)
        echo "No input, The InnoDB Storage Engine will enable."
        InstallInnodb="y"
    esac

    echo "====================================================================="
    echo "You will upgrade MySQL V${cur_mysql_version} to MariaDB V${mariadb_version}"
    echo "====================================================================="

    if [ -s /usr/local/include/jemalloc/jemalloc.h ] && lsof -n|grep "libjemalloc.so"|grep -q "mysqld"; then
        MariaDBMAOpt=''
    elif [ -s /usr/local/include/gperftools/tcmalloc.h ] && lsof -n|grep "libtcmalloc.so"|grep -q "mysqld"; then
        MariaDBMAOpt="-DCMAKE_EXE_LINKER_FLAGS='-ltcmalloc' -DWITH_SAFEMALLOC=OFF"
    else
        MariaDBMAOpt=''
    fi

    Press_Start

    echo "============================check files=================================="
    cd ${cur_dir}/src
    if [ -s mariadb-${mariadb_version}.tar.gz ]; then
        echo "mariadb-${mariadb_version}.tar.gz [found]"
    else
        echo "Notice: mariadb-${mariadb_version}.tar.gz not found!!!download now......"
        wget -c --progress=bar:force https://downloads.mariadb.org/interstitial/mariadb-${mariadb_version}/source/mariadb-${mariadb_version}.tar.gz
        if [ $? -eq 0 ]; then
            echo "Download mariadb-${mariadb_version}.tar.gz successfully!"
        else
            wget -c --progress=bar:force https://downloads.mariadb.org/interstitial/mariadb-${mariadb_version}/kvm-tarbake-jaunty-x86/mariadb-${mariadb_version}.tar.gz
            if [ $? -eq 0 ]; then
                echo "Download mariadb-${mariadb_version}.tar.gz successfully!"
            else
                echo "You enter MySQL Version was:"${mariadb_version}
                Echo_Red "Error! You entered a wrong version number, please check!"
                sleep 5
                exit 1
            fi
        fi
    fi
    echo "============================check files=================================="

    Backup_MySQL2

    echo "Starting upgrade MySQL to MariaDB..."
    Tar_Cd mariadb-${mariadb_version}.tar.gz mariadb-${mariadb_version}
    if echo "${mariadb_version}" | grep -Eqi '^10.[123].';then
        cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mariadb -DWITH_ARIA_STORAGE_ENGINE=1 -DWITH_XTRADB_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DWITH_READLINE=1 -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 -DWITHOUT_TOKUDB=1 ${MariaDBMAOpt}
    else
        cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mariadb -DWITH_ARIA_STORAGE_ENGINE=1 -DWITH_XTRADB_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_FEDERATED_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci -DWITH_READLINE=1 -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 ${MariaDBMAOpt}
    fi
    make && make install

    groupadd mariadb
    useradd -s /sbin/nologin -M -g mariadb mariadb

    cat > /etc/my.cnf<<EOF
[client]
#password	= your_password
port		= 3306
socket		= /tmp/mysql.sock

[mysqld]
port		= 3306
socket		= /tmp/mysql.sock
user    = mariadb
basedir = /usr/local/mariadb
datadir = ${MariaDB_Data_Dir}
log_error = ${MariaDB_Data_Dir}/mariadb.err
pid-file = ${MariaDB_Data_Dir}/mariadb.pid
skip-external-locking
key_buffer_size = 16M
max_allowed_packet = 1M
table_open_cache = 64
sort_buffer_size = 512K
net_buffer_length = 8K
read_buffer_size = 256K
read_rnd_buffer_size = 512K
myisam_sort_buffer_size = 8M
thread_cache_size = 8
query_cache_size = 8M
tmp_table_size = 16M

#skip-networking
max_connections = 500
max_connect_errors = 100
open_files_limit = 65535

log-bin=mysql-bin
binlog_format=mixed
server-id	= 1
expire_logs_days = 10

default_storage_engine = InnoDB
#innodb_file_per_table = 1
#innodb_data_home_dir = ${MariaDB_Data_Dir}
#innodb_data_file_path = ibdata1:10M:autoextend
#innodb_log_group_home_dir = ${MariaDB_Data_Dir}
#innodb_buffer_pool_size = 16M
#innodb_log_file_size = 5M
#innodb_log_buffer_size = 8M
#innodb_flush_log_at_trx_commit = 1
#innodb_lock_wait_timeout = 50

[mysqldump]
quick
max_allowed_packet = 16M

[mysql]
no-auto-rehash

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout
EOF

    if [ "${InstallInnodb}" = "y" ]; then
        sed -i 's:^#innodb:innodb:g' /etc/my.cnf
    else
        sed -i '/^default_storage_engine/d' /etc/my.cnf
        sed -i '/skip-external-locking/i\default_storage_engine = MyISAM\nloose-skip-innodb' /etc/my.cnf
    fi
    MySQL_Opt
    if [ -d "${MariaDB_Data_Dir}" ]; then
        rm -rf ${MariaDB_Data_Dir}/*
    else
        mkdir -p ${MariaDB_Data_Dir}
    fi
    chown -R mariadb:mariadb ${MariaDB_Data_Dir}
    /usr/local/mariadb/scripts/mysql_install_db --defaults-file=/etc/my.cnf --basedir=/usr/local/mariadb --datadir=${MariaDB_Data_Dir} --user=mariadb
    chgrp -R mariadb /usr/local/mariadb/.
    \cp support-files/mysql.server /etc/init.d/mariadb
    chmod 755 /etc/init.d/mariadb

    Mariadb_Sec_Setting
    /etc/init.d/mariadb start

    echo "Restore backup databases..."
    /usr/local/mariadb/bin/mysql --defaults-file=~/.my.cnf < /root/mysql_all_backup${Upgrade_Date}.sql
    [ $? -eq 0 ] && echo "MariaDB databases import successfully." || echo "MariaDB databases import failed,Please import databases manually!"

    echo "Repair databases..."
    /usr/local/mariadb/bin/mysql_upgrade -u root -p${DB_Root_Password}

    echo "Add to autostart..."
    StartUp mariadb
    echo "Stopping MariaDB..."
    /etc/init.d/mariadb stop
    TempMycnf_Clean
    cd ${cur_dir} && rm -rf ${cur_dir}/src/mariadb-${mariadb_version}

    sed -i 's#/etc/init.d/mysql#/etc/init.d/mariadb#g' /bin/lnmp

    lnmp start
    if [[ -s /usr/local/mariadb/bin/mysql && -s /usr/local/mariadb/bin/mysqld_safe && -s /etc/my.cnf ]]; then
        Echo_Green "======== upgrade MySQL to MariaDB completed ======"
    else
        Echo_Red "======== upgrade MySQL to MariaDB failed ======"
        Echo_Red "upgrade MariaDB log: /root/upgrade_mysql2mariadb.log"
        echo "You upload upgrade_mysql2mariadb.log to LNMP Forum for help."
    fi
}
 #!/bin/bash

Install_XCache()
{
    echo "You will install ${XCache_Ver}..."

    xadmin_pass=""
    while :;do
        read -p "Please enter admin password of XCache Administration Page: " xadmin_pass
        if [ "${xadmin_pass}" != "" ]; then
            echo "================================================="
            echo "Your admin password of XCache was: ${xadmin_pass}"
            echo "================================================="
            break
        else
            Echo_Red "Password cannot be empty!"
        fi
    done
    xmd5pass=`echo -n "${xadmin_pass}" |md5sum |awk '{print $1}'`
    echo "====== Installing XCache ======"
    Press_Start

    rm -f ${PHP_Path}/conf.d/006-xcache.ini
    Addons_Get_PHP_Ext_Dir
    zend_ext="${zend_ext_dir}xcache.so"
    if [ -s "${zend_ext}" ]; then
        rm -f "${zend_ext}"
    fi

    cpu_count=`cat /proc/cpuinfo |grep -c processor`

    cd ${cur_dir}/src
    Download_Files ${Download_Mirror}/web/xcache/${XCache_Ver}.tar.gz ${XCache_Ver}.tar.gz
    Tar_Cd ${XCache_Ver}.tar.gz ${XCache_Ver}
    ${PHP_Path}/bin/phpize
    ./configure --enable-xcache --enable-xcache-coverager --enable-xcache-optimizer --with-php-config=${PHP_Path}/bin/php-config
    make
    make install
    cd ../

    cat >${PHP_Path}/conf.d/006-xcache.ini<<EOF
[xcache-common]
extension = xcache.so

[xcache.admin]
xcache.admin.enable_auth = On
xcache.admin.user = "admin"
;run: echo -n "yourpassword" |md5sum |awk '{print $1}' to get md5 password
xcache.admin.pass = "${xmd5pass}"

[xcache]
xcache.shm_scheme =        "mmap"
xcache.size  =               20M
; set to cpu count (cat /proc/cpuinfo |grep -c processor)
xcache.count =                 ${cpu_count}
xcache.slots =                8K
xcache.ttl   =                 0
xcache.gc_interval =           0
xcache.var_size  =            4M
xcache.var_count =             1
xcache.var_slots =            8K
xcache.var_ttl   =             0
xcache.var_maxttl   =          0
xcache.var_gc_interval =     300
xcache.readonly_protection = Off
; for *nix, xcache.mmap_path is a file path, not directory. (auto create/overwrite)
; Use something like "/tmp/xcache" instead of "/dev/*" if you want to turn on ReadonlyProtection
; different process group of php won't share the same /tmp/xcache
xcache.mmap_path =    "/tmp/xcache"
xcache.coredump_directory =   ""
xcache.experimental =        Off
xcache.cacher =               On
xcache.stat   =               On
xcache.optimizer =           Off

[xcache.coverager]
; enabling this feature will impact performance
; enable only if xcache.coverager == On && xcache.coveragedump_directory == "non-empty-value"
; enable coverage data collecting and xcache_coverager_start/stop/get/clean() functions
xcache.coverager =          Off
xcache.coveragedump_directory = ""

EOF

    touch /tmp/xcache && chown www:www /tmp/xcache

    \cp -a ${cur_dir}/src/${XCache_Ver}/htdocs ${Default_Website_Dir}/xcache
    chown www:www -R ${Default_Website_Dir}/xcache

    if [ -s "${zend_ext}" ]; then
        Restart_PHP
        Echo_Green "======== xcache install completed ======"
        Echo_Green "XCache installed successfully, enjoy it!"
    else
        rm -f ${PHP_Path}/conf.d/006-xcache.ini
        Echo_Red "XCache install failed!"
    fi
}

Uninstall_XCache()
{
    echo "You will uninstall XCache..."
    Press_Start
    rm -f ${PHP_Path}/conf.d/006-xcache.ini
    echo "Delete xcache files..."
    rm -rf ${Default_Website_Dir}/xcache
    Restart_PHP
    Echo_Green "Uninstall XCache completed."
}
#!/bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

# Check if user is root
if [ $(id -u) != "0" ]; then
    echo "Error: You must be root to run this script, please use root to install lnmp"
    exit 1
fi

cur_dir=$(pwd)
Stack=$1
if [ "${Stack}" = "" ]; then
    Stack="lnmp"
else
    Stack=$1
fi

LNMP_Ver='1.4'
. lnmp.conf
. include/main.sh
. include/init.sh
. include/mysql.sh
. include/mariadb.sh
. include/php.sh
. include/nginx.sh
. include/apache.sh
. include/end.sh
. include/only.sh
. include/multiplephp.sh

Get_Dist_Name

if [ "${DISTRO}" = "unknow" ]; then
    Echo_Red "Unable to get Linux distribution name, or do NOT support the current distribution."
    exit 1
fi

if [[ "${Stack}" = "lnmp" || "${Stack}" = "lnmpa" || "${Stack}" = "lamp" ]]; then
    if [ -f /bin/lnmp ]; then
        Echo_Red "You have installed LNMP!"
        echo -e "If you want to reinstall LNMP, please BACKUP your data.\nand run uninstall script: ./uninstall.sh before you install."
        exit 1
    fi
fi

Check_LNMPConf

clear
echo "+------------------------------------------------------------------------+"
echo "|          LNMP V${LNMP_Ver} for ${DISTRO} Linux Server, Written by Licess          |"
echo "+------------------------------------------------------------------------+"
echo "|        A tool to auto-compile & install LNMP/LNMPA/LAMP on Linux       |"
echo "+------------------------------------------------------------------------+"
echo "|           For more information please visit https://lnmp.org           |"
echo "+------------------------------------------------------------------------+"

Init_Install()
{
    Press_Install
    Print_APP_Ver
    Get_Dist_Version
    Print_Sys_Info
    Check_Hosts
    Check_Mirror
    if [ "${DISTRO}" = "RHEL" ]; then
        RHEL_Modify_Source
    fi
    if [ "${DISTRO}" = "Ubuntu" ]; then
        Ubuntu_Modify_Source
    fi
    Set_Timezone
    if [ "$PM" = "yum" ]; then
        CentOS_InstallNTP
        CentOS_RemoveAMP
        CentOS_Dependent
    elif [ "$PM" = "apt" ]; then
        Deb_InstallNTP
        Xen_Hwcap_Setting
        Deb_RemoveAMP
        Deb_Dependent
    fi
    Disable_Selinux
    Check_Download
    Install_Autoconf
    Install_Libiconv
    Install_Libmcrypt
    Install_Mhash
    Install_Mcrypt
    Install_Freetype
    Install_Pcre
    Install_Icu4c
    if [ "${SelectMalloc}" = "2" ]; then
        Install_Jemalloc
    elif [ "${SelectMalloc}" = "3" ]; then
        Install_TCMalloc
    fi
    if [ "$PM" = "yum" ]; then
        CentOS_Lib_Opt
    elif [ "$PM" = "apt" ]; then
        Deb_Lib_Opt
        Deb_Check_MySQL
    fi
    if [ "${DBSelect}" = "1" ]; then
        Install_MySQL_51
    elif [ "${DBSelect}" = "2" ]; then
        Install_MySQL_55
    elif [ "${DBSelect}" = "3" ]; then
        Install_MySQL_56
    elif [ "${DBSelect}" = "4" ]; then
        Install_MySQL_57
    elif [ "${DBSelect}" = "5" ]; then
        Install_MariaDB_5
    elif [ "${DBSelect}" = "6" ]; then
        Install_MariaDB_10
    elif [ "${DBSelect}" = "7" ]; then
        Install_MariaDB_101
    fi
    TempMycnf_Clean
    PHP_with_curl
    PHP_with_openssl
}

LNMP_Stack()
{
    Init_Install
    if [ "${PHPSelect}" = "1" ]; then
        Install_PHP_52
    elif [ "${PHPSelect}" = "2" ]; then
        Install_PHP_53
    elif [ "${PHPSelect}" = "3" ]; then
        Install_PHP_54
    elif [ "${PHPSelect}" = "4" ]; then
        Install_PHP_55
    elif [ "${PHPSelect}" = "5" ]; then
        Install_PHP_56
    elif [ "${PHPSelect}" = "6" ]; then
        Install_PHP_7
    elif [ "${PHPSelect}" = "7" ]; then
        Install_PHP_71
    fi
    LNMP_PHP_Opt
    Install_Nginx
    Creat_PHP_Tools
    Add_Iptables_Rules
    Add_LNMP_Startup
    Check_LNMP_Install
}

LNMPA_Stack()
{
    Apache_Selection
    Init_Install
    if [ "${ApacheSelect}" = "1" ]; then
        Install_Apache_22
    else
        Install_Apache_24
    fi
    if [ "${PHPSelect}" = "1" ]; then
        Install_PHP_52
    elif [ "${PHPSelect}" = "2" ]; then
        Install_PHP_53
    elif [ "${PHPSelect}" = "3" ]; then
        Install_PHP_54
    elif [ "${PHPSelect}" = "4" ]; then
        Install_PHP_55
    elif [ "${PHPSelect}" = "5" ]; then
        Install_PHP_56
    elif [ "${PHPSelect}" = "6" ]; then
        Install_PHP_7
    elif [ "${PHPSelect}" = "7" ]; then
        Install_PHP_71
    fi
    Install_Nginx
    Creat_PHP_Tools
    Add_Iptables_Rules
    Add_LNMPA_Startup
    Check_LNMPA_Install
}

LAMP_Stack()
{
    Apache_Selection
    Init_Install
    if [ "${ApacheSelect}" = "1" ]; then
        Install_Apache_22
    else
        Install_Apache_24
    fi
    if [ "${PHPSelect}" = "1" ]; then
        Install_PHP_52
    elif [ "${PHPSelect}" = "2" ]; then
        Install_PHP_53
    elif [ "${PHPSelect}" = "3" ]; then
        Install_PHP_54
    elif [ "${PHPSelect}" = "4" ]; then
        Install_PHP_55
    elif [ "${PHPSelect}" = "5" ]; then
        Install_PHP_56
    elif [ "${PHPSelect}" = "6" ]; then
        Install_PHP_7
    elif [ "${PHPSelect}" = "7" ]; then
        Install_PHP_71
    fi
    Creat_PHP_Tools
    Add_Iptables_Rules
    Add_LAMP_Startup
    Check_LAMP_Install
}

case "${Stack}" in
    lnmp)
        Dispaly_Selection
        LNMP_Stack 2>&1 | tee /root/lnmp-install.log
        ;;
    lnmpa)
        Dispaly_Selection
        LNMPA_Stack 2>&1 | tee /root/lnmp-install.log
        ;;
    lamp)
        Dispaly_Selection
        LAMP_Stack 2>&1 | tee /root/lnmp-install.log
        ;;
    nginx)
        Install_Only_Nginx 2>&1 | tee /root/nginx-install.log
        ;;
    db)
        Install_Only_Database
        ;;
    mphp)
        Install_Multiplephp
        ;;
    *)
        Echo_Red "Usage: $0 {lnmp|lnmpa|lamp}"
        ;;
esac

exit
#!/bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

# Check if user is root
if [ $(id -u) != "0" ]; then
    echo "Error: You must be root to run this script!"
    exit 1
fi
clear
echo "+----------------------------------------------------------+"
echo "|          Pureftpd for LNMP,  Written by Licess           |"
echo "+----------------------------------------------------------+"
echo "|This script is a tool to install pureftpd for LNMP        |"
echo "+----------------------------------------------------------+"
echo "|For more information please visit https://lnmp.org        |"
echo "+----------------------------------------------------------+"
echo "|Usage: ./pureftpd.sh                                      |"
echo "+----------------------------------------------------------+"
cur_dir=$(pwd)
action=$1

. lnmp.conf
. include/main.sh
. include/init.sh

Get_Dist_Name

Install_Pureftpd()
{
    Press_Install

    Echo_Blue "Installing dependent packages..."
    if [ "$PM" = "yum" ]; then
        yum -y install make gcc gcc-c++ gcc-g77 openssl openssl-devel
    elif [ "$PM" = "apt" ]; then
        apt-get update -y
        apt-get install -y build-essential gcc g++ make openssl libssl-dev
    fi
    Echo_Blue "Download files..."
    cd ${cur_dir}/src
    Download_Files ${Download_Mirror}/ftp/pure-ftpd/${Pureftpd_Ver}.tar.bz2 ${Pureftpd_Ver}.tar.bz2
    if [ $? -eq 0 ]; then
        echo "Download ${Pureftpd_Ver}.tar.bz2 successfully!"
    else
        Download_Files https://download.pureftpd.org/pub/pure-ftpd/releases/${Pureftpd_Ver}.tar.bz2 ${Pureftpd_Ver}.tar.bz2
    fi

    Echo_Blue "Installing pure-ftpd..."
    Tarj_Cd ${Pureftpd_Ver}.tar.bz2 ${Pureftpd_Ver}
    ./configure --prefix=/usr/local/pureftpd CFLAGS=-O2 --with-puredb --with-quotas --with-cookie --with-virtualhosts --with-diraliases --with-sysquotas --with-ratios --with-altlog --with-paranoidmsg --with-shadow --with-welcomemsg --with-throttling --with-uploadscript --with-language=english --with-rfc2640 --with-ftpwho --with-tls

    make && make install

    Echo_Blue "Copy configure files..."
    mkdir /usr/local/pureftpd/etc
    \cp ${cur_dir}/conf/pure-ftpd.conf /usr/local/pureftpd/etc/pure-ftpd.conf
    if [ -L /etc/init.d/pureftpd ]; then
        rm -f /etc/init.d/pureftpd
    fi
    \cp ${cur_dir}/init.d/init.d.pureftpd /etc/init.d/pureftpd
    chmod +x /etc/init.d/pureftpd
    touch /usr/local/pureftpd/etc/pureftpd.passwd
    touch /usr/local/pureftpd/etc/pureftpd.pdb

    StartUp pureftpd

    cd ..
    rm -rf ${cur_dir}/src/${Pureftpd_Ver}

    if [ -s /sbin/iptables ]; then
        if [ -s /bin/lnmp ]; then
            /sbin/iptables -I INPUT 7 -p tcp --dport 20 -j ACCEPT
            /sbin/iptables -I INPUT 8 -p tcp --dport 21 -j ACCEPT
            /sbin/iptables -I INPUT 9 -p tcp --dport 20000:30000 -j ACCEPT
        else
            /sbin/iptables -I INPUT -p tcp --dport 20 -j ACCEPT
            /sbin/iptables -I INPUT -p tcp --dport 21 -j ACCEPT
            /sbin/iptables -I INPUT -p tcp --dport 20000:30000 -j ACCEPT
        fi
        if [ "${PM}" = "yum" ]; then
            service iptables save
        elif [ "${PM}" = "apt" ]; then
            /sbin/iptables-save > /etc/iptables.rules
        fi
    fi

    if [ ! -s /bin/lnmp ]; then
        \cp ${cur_dir}/conf/lnmp /bin/lnmp
        chmod +x /bin/lnmp
    fi
    id -u www
    if [ $? -ne 0 ]; then
        groupadd www
        useradd -s /sbin/nologin -g www www
    fi

    if [[ -s /usr/local/pureftpd/sbin/pure-ftpd && -s /usr/local/pureftpd/etc/pure-ftpd.conf && -s /etc/init.d/pureftpd ]]; then
        Echo_Blue "Starting pureftpd..."
        /etc/init.d/pureftpd start
        Echo_Green "+----------------------------------------------------------------------+"
        Echo_Green "| Install Pure-FTPd completed,enjoy it!"
        Echo_Green "| =>use command: lnmp ftp {add|list|del|show} to manage FTP users."
        Echo_Green "+----------------------------------------------------------------------+"
        Echo_Green "| For more information please visit https://lnmp.org"
        Echo_Green "+----------------------------------------------------------------------+"
    else
        Echo_Red "Pureftpd install failed!"
    fi
}

Uninstall_Pureftpd()
{
    if [ ! -f /usr/local/pureftpd/sbin/pure-ftpd ]; then
        Echo_Red "Pureftpd was not installed!"
        exit 1
    fi
    echo "Stop pureftpd..."
    /etc/init.d/pureftpd stop
    echo "Remove service..."
    Remove_StartUp pureftpd
    echo "Delete files..."
    rm -f /etc/init.d/pureftpd
    rm -rf /usr/local/pureftpd
    echo "Pureftpd uninstall completed."
}

if [ "${action}" = "uninstall" ]; then
    Uninstall_Pureftpd
else
    Install_Pureftpd 2>&1 | tee /root/pureftpd-install.log
fi
#!/bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

# Check if user is root
if [ $(id -u) != "0" ]; then
    echo "Error: You must be root to run this script"
    exit 1
fi

cur_dir=$(pwd)
action=$1
action2=$2

. lnmp.conf
. include/main.sh
. include/init.sh
. include/version.sh
. include/eaccelerator.sh
. include/xcache.sh
. include/memcached.sh
. include/opcache.sh
. include/redis.sh
. include/imageMagick.sh
. include/ionCube.sh
. include/apcu.sh

Display_Addons_Menu()
{
    echo "##### cache / optimizer / accelerator #####"
    echo "1: eAccelerator"
    echo "2: XCache"
    echo "3: Memcached"
    echo "4: opcache"
    echo "5: Redis"
    echo "6: apcu"
    echo "##### Image Processing #####"
    echo "7: imageMagick"
    echo "##### encryption/decryption utility for PHP #####"
    echo "8: ionCube Loader"
    echo "exit: Exit current script"
    echo "#####################################################"
    read -p "Enter your choice (1, 2, 3, 4, 5, 6, 7, 8 or exit): " action2
}

Restart_PHP()
{
    if [ -s /usr/local/apache/bin/httpd ] && [ -s /usr/local/apache/conf/httpd.conf ] && [ -s /etc/init.d/httpd ]; then
        echo "Restarting Apache......"
        /etc/init.d/httpd restart
    else
        echo "Restarting php-fpm......"
        ${PHPFPM_Initd} restart
    fi
}

clear
echo "+-----------------------------------------------------------------------+"
echo "|            Addons script for LNMP V1.4, Written by Licess             |"
echo "+-----------------------------------------------------------------------+"
echo "|    A tool to Install cache,optimizer,accelerator...addons for LNMP    |"
echo "+-----------------------------------------------------------------------+"
echo "|           For more information please visit https://lnmp.org          |"
echo "+-----------------------------------------------------------------------+"

Select_PHP()
{
    if [[ ! -s /usr/local/php5.2/sbin/php-fpm && ! -s /usr/local/nginx/conf/enable-php5.2.conf ]] && [[ ! -s /usr/local/php5.3/sbin/php-fpm && ! -s /usr/local/nginx/conf/enable-php5.3.conf ]] && [[ ! -s /usr/local/php5.4/sbin/php-fpm && ! -s /usr/local/nginx/conf/enable-php5.4.conf ]] && [[ ! -s /usr/local/php5.5/sbin/php-fpm && ! -s /usr/local/nginx/conf/enable-php5.5.conf ]] && [[ ! -s /usr/local/php5.6/sbin/php-fpm && ! -s /usr/local/nginx/conf/enable-php5.6.conf ]] && [[ ! -s /usr/local/php7.0/sbin/php-fpm && ! -s /usr/local/nginx/conf/enable-php7.0.conf ]] && [[ ! -s /usr/local/php7.1/sbin/php-fpm && ! -s /usr/local/nginx/conf/enable-php7.1.conf ]]; then
        PHP_Path='/usr/local/php'
        PHPFPM_Initd='/etc/init.d/php-fpm'
    else
        echo "Multiple PHP version found, Please select the PHP version."
        Cur_PHP_Version="`/usr/local/php/bin/php-config --version`"
        Echo_Green "1: Default Main PHP ${Cur_PHP_Version}"
        if [[ -s /usr/local/php5.2/sbin/php-fpm && -s /usr/local/nginx/conf/enable-php5.2.conf && -s /etc/init.d/php-fpm5.2 ]]; then
            Echo_Green "2: PHP 5.2 [found]"
        fi
        if [[ -s /usr/local/php5.3/sbin/php-fpm && -s /usr/local/nginx/conf/enable-php5.3.conf && -s /etc/init.d/php-fpm5.3 ]]; then
            Echo_Green "3: PHP 5.3 [found]"
        fi
        if [[ -s /usr/local/php5.4/sbin/php-fpm && -s /usr/local/nginx/conf/enable-php5.4.conf && -s /etc/init.d/php-fpm5.4 ]]; then
            Echo_Green "4: PHP 5.4 [found]"
        fi
        if [[ -s /usr/local/php5.5/sbin/php-fpm && -s /usr/local/nginx/conf/enable-php5.5.conf && -s /etc/init.d/php-fpm5.5 ]]; then
            Echo_Green "5: PHP 5.5 [found]"
        fi
        if [[ -s /usr/local/php5.6/sbin/php-fpm && -s /usr/local/nginx/conf/enable-php5.6.conf && -s /etc/init.d/php-fpm5.6 ]]; then
            Echo_Green "6: PHP 5.6 [found]"
        fi
        if [[ -s /usr/local/php7.0/sbin/php-fpm && -s /usr/local/nginx/conf/enable-php7.0.conf && -s /etc/init.d/php-fpm7.0 ]]; then
            Echo_Green "7: PHP 7.0 [found]"
        fi
        if [[ -s /usr/local/php7.1/sbin/php-fpm && -s /usr/local/nginx/conf/enable-php7.1.conf && -s /etc/init.d/php-fpm7.1 ]]; then
            Echo_Green "8: PHP 7.1 [found]"
        fi
        Echo_Yellow "Enter your choice (1, 2, 3, 4, 5, 6 ,7 or 8): "
        read php_select
        case "${php_select}" in
            1)
                echo "Current selection: PHP ${Cur_PHP_Version}"
                PHP_Path='/usr/local/php'
                PHPFPM_Initd='/etc/init.d/php-fpm'
                ;;
            2)
                echo "Current selection: PHP `/usr/local/php5.2/bin/php-config --version`"
                PHP_Path='/usr/local/php5.2'
                PHPFPM_Initd='/etc/init.d/php-fpm5.2'
                ;;
            3)
                echo "Current selection: PHP `/usr/local/php5.3/bin/php-config --version`"
                PHP_Path='/usr/local/php5.3'
                PHPFPM_Initd='/etc/init.d/php-fpm5.3'
                ;;
            4)
                echo "Current selection: PHP `/usr/local/php5.4/bin/php-config --version`"
                PHP_Path='/usr/local/php5.4'
                PHPFPM_Initd='/etc/init.d/php-fpm5.4'
                ;;
            5)
                echo "Current selection: PHP `/usr/local/php5.5/bin/php-config --version`"
                PHP_Path='/usr/local/php5.5'
                PHPFPM_Initd='/etc/init.d/php-fpm5.5'
                ;;
            6)
                echo "Current selection: PHP `/usr/local/php5.6/bin/php-config --version`"
                PHP_Path='/usr/local/php5.6'
                PHPFPM_Initd='/etc/init.d/php-fpm5.6'
                ;;
            7)
                echo "Current selection:: PHP `/usr/local/php7.0/bin/php-config --version`"
                PHP_Path='/usr/local/php7.0'
                PHPFPM_Initd='/etc/init.d/php-fpm7.0'
                ;;
            8)
                echo "Current selection:: PHP `/usr/local/php7.1/bin/php-config --version`"
                PHP_Path='/usr/local/php7.1'
                PHPFPM_Initd='/etc/init.d/php-fpm7.1'
                ;;
            *)
                echo "Default,Current selection: PHP ${Cur_PHP_Version}"
                php_select="1"
                PHP_Path='/usr/local/php'
                PHPFPM_Initd='/etc/init.d/php-fpm'
                ;;
        esac
    fi
}

Addons_Get_PHP_Ext_Dir()
{
    Cur_PHP_Version="`${PHP_Path}/bin/php-config --version`"
    zend_ext_dir="`${PHP_Path}/bin/php-config --extension-dir`/"
}

if [[ "${action}" == "" || "${action2}" == "" ]]; then
    action='install'
    Display_Addons_Menu
fi
Get_Dist_Name
Select_PHP

    case "${action}" in
    install)
        case "${action2}" in
            1|e[aA]ccelerator)
                Install_eAccelerator
                ;;
            2|[xX]cache)
                Install_XCache
                ;;
            3|[mM]emcached)
                Install_Memcached
                ;;
            4|opcache)
                Install_Opcache
                ;;
            5|[rR]edis)
                Install_Redis
                ;;
            6|apcu)
                Install_Apcu
                ;;
            7|image[mM]agick)
                Install_ImageMagic
                ;;
            8|ion[cC]ube)
                Install_ionCube
                ;;
            [eE][xX][iI][tT])
                exit 1
                ;;
            *)
                echo "Usage: ./addons.sh {install|uninstall} {eaccelerator|xcache|memcached|opcache|redis|imagemagick|ioncube}"
                ;;
        esac
        ;;
    uninstall)
        case "${action2}" in
            e[aA]ccelerator)
                Uninstall_eAccelerator
                ;;
            [xX]cache)
                Uninstall_XCache
                ;;
            [mM]emcached)
                Uninstall_Memcached
                ;;
            opcache)
                Uninstall_Opcache
                ;;
            [rR]edis)
                Uninstall_Redis
                ;;
            apcu)
                Uninstall_Apcu
                ;;
            image[mM]agick)
                Uninstall_ImageMagick
                ;;
            ion[cC]ube)
                Uninstall_ionCube
                ;;
            *)
                echo "Usage: ./addons.sh {install|uninstall} {eaccelerator|xcache|memcached|opcache|redis|apcu|imagemagick|ioncube}"
                ;;
        esac
        ;;
    [eE][xX][iI][tT])
        exit 1
        ;;
    *)
        echo "Usage: ./addons.sh {install|uninstall} {eaccelerator|xcache|memcached|opcache|redis|apcu|imagemagick|ioncube}"
        exit 1
        ;;
    esac
#!/bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

# Check if user is root
if [ $(id -u) != "0" ]; then
    echo "Error: You must be root to run this script"
    exit 1
fi

cur_dir=$(pwd)
action=$1
shopt -s extglob
Upgrade_Date=$(date +"%Y%m%d%H%M%S")

. lnmp.conf
. include/version.sh
. include/main.sh
. include/init.sh
. include/php.sh
. include/nginx.sh
. include/mysql.sh
. include/mariadb.sh
. include/upgrade_nginx.sh
. include/upgrade_php.sh
. include/upgrade_mysql.sh
. include/upgrade_mariadb.sh
. include/upgrade_mysql2mariadb.sh
. include/upgrade_phpmyadmin.sh

Get_Dist_Name
MemTotal=`free -m | grep Mem | awk '{print  $2}'`

Display_Upgrade_Menu()
{
    echo "1: Upgrade Nginx"
    echo "2: Upgrade MySQL"
    echo "3: Upgrade MariaDB"
    echo "4: Upgrade PHP for LNMP"
    echo "5: Upgrade PHP for LNMPA or LAMP"
    echo "6: Upgrade MySQL to MariaDB"
    echo "7: Upgrade phpMyAdmin"
    echo "exit: Exit current script"
    echo "###################################################"
    read -p "Enter your choice (1, 2, 3, 4, 5, 6, 7 or exit): " action
}

clear
echo "+-----------------------------------------------------------------------+"
echo "|            Upgrade script for LNMP V1.4, Written by Licess            |"
echo "+-----------------------------------------------------------------------+"
echo "|     A tool to upgrade Nginx,MySQL/Mariadb,PHP for LNMP/LNMPA/LAMP     |"
echo "+-----------------------------------------------------------------------+"
echo "|           For more information please visit https://lnmp.org          |"
echo "+-----------------------------------------------------------------------+"

if [ "${action}" == "" ]; then
    Display_Upgrade_Menu
fi

    case "${action}" in
    1|[nN][gG][iI][nN][xX])
        Upgrade_Nginx 2>&1 | tee /root/upgrade_nginx${Upgrade_Date}.log
        ;;
    2|[mM][yY][sS][qQ][lL])
        Upgrade_MySQL 2>&1 | tee /root/upgrade_mysq${Upgrade_Date}.log
        ;;
    3|[mM][aA][rR][iI][aA][dD][bB])
        Upgrade_MariaDB 2>&1 | tee /root/upgrade_mariadb${Upgrade_Date}.log
        ;;
    4|[pP][hP][pP])
        Stack="lnmp"
        Upgrade_PHP 2>&1 | tee /root/upgrade_lnmp_php${Upgrade_Date}.log
        ;;
    5|[pP][hP][pP][aA])
        Upgrade_PHP 2>&1 | tee /root/upgrade_a_php${Upgrade_Date}.log
        ;;
    6|[mM]2[mY])
        Upgrade_MySQL2MariaDB 2>&1 | tee /root/upgrade_mysql2mariadb${Upgrade_Date}.log
        ;;
    7|[pP][hH][pP][mM][yY][aA][dD][mM][iI][nN])
        Upgrade_phpMyAdmin 2>&1 | tee /root/upgrade_phpmyadmin${Upgrade_Date}.log
        ;;
    [eE][xX][iI][tT])
        exit 1
        ;;
    *)
        echo "Usage: ./upgrade.sh {nginx|mysql|mariadb|m2m|php|phpa|phpmyadmin}"
        exit 1
    ;;
    esac
#!/bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

# Check if user is root
if [ $(id -u) != "0" ]; then
    echo "Error: You must be root to run this script"
    exit 1
fi

cur_dir=$(pwd)

. lnmp.conf
. include/main.sh

Check_Stack
Check_DB

echo "+--------------------------------------------------+"
echo "|  A tool to upgrade lnmp manager from 1.x to 1.4  |"
echo "+--------------------------------------------------+"
echo "|For more information please visit https://lnmp.org|"
echo "+--------------------------------------------------+"

if [ "${Get_Stack}" == "unknow" ]; then
    Echo_Red "Can't get stack info."
    exit
elif [ "${Get_Stack}" == "lnmp" ]; then
    \cp ${cur_dir}/conf/lnmp /bin/lnmp
    chmod +x /bin/lnmp
    if [ ! -s /usr/local/nginx/conf/enable-php.conf ]; then
        \cp conf/enable-php.conf /usr/local/nginx/conf/enable-php.conf
    fi
    if [ ! -s /usr/local/nginx/conf/pathinfo.conf ]; then
        \cp conf/pathinfo.conf /usr/local/nginx/conf/pathinfo.conf
    fi
    if [ ! -s /usr/local/nginx/conf/enable-php-pathinfo.conf ]; then
        \cp conf/enable-php-pathinfo.conf /usr/local/nginx/conf/enable-php-pathinfo.conf
    fi
    if [ ! -f /usr/local/nginx/conf/none.conf ]; then
        \cp conf/rewrite/none.conf /usr/local/nginx/conf/none.conf
    fi
elif [ "${Get_Stack}" == "lnmpa" ]; then
    \cp ${cur_dir}/conf/lnmpa /bin/lnmp
    chmod +x /bin/lnmp
    \cp conf/proxy.conf /usr/local/nginx/conf/proxy.conf
    if [ ! -s /usr/local/nginx/conf/proxy-pass-php.conf ]; then
        \cp conf/proxy-pass-php.conf /usr/local/nginx/conf/proxy-pass-php.conf
    fi
elif [ "${Get_Stack}" == "lamp" ]; then
    \cp ${cur_dir}/conf/lamp /bin/lnmp
    chmod +x /bin/lnmp
    if /usr/local/apache/bin/httpd -v|grep -Eqi "Apache/2.2."; then
        \cp ${cur_dir}/conf/httpd22-ssl.conf  /usr/local/apache/conf/extra/httpd-ssl.conf
    elif /usr/local/apache/bin/httpd -v|grep -Eqi "Apache/2.4."; then
        \cp ${cur_dir}/conf/httpd24-ssl.conf  /usr/local/apache/conf/extra/httpd-ssl.conf
        sed -i 's/^#LoadModule socache_shmcb_module/LoadModule socache_shmcb_module/g' /usr/local/apache/conf/httpd.conf
        sed -i 's/^LoadModule lbmethod_heartbeat_module/#LoadModule lbmethod_heartbeat_module/g' /usr/local/apache/conf/httpd.conf
    fi
fi

if [ "${DB_Name}" = "mariadb" ]; then
    sed -i 's#/etc/init.d/mysql#/etc/init.d/mariadb#' /bin/lnmp
elif [ "${DB_Name}" = "None" ]; then
    sed -i 's#/etc/init.d/mysql.*##' /bin/lnmp
fi

Echo_Green "upgrade lnmp manager complete."#!/bin/bash
DIR="/data0/webdata/xiaofupai.com/"
#DIR="/home/test/xiaofupai.com/"
Time=$(date +%m-%d)
cd $DIR
git branch >/tmp/1.txt
grep "rel_${Time}" /tmp/1.txt &>/dev/null
if [ $? -eq 0 ];then
	git pull origin rel_test
	if [ $? -eq 0 ];then
		echo "更新成功~"
		git push origin rel_${Time}:rel_${Time}
		if [ $? -eq 0 ];then
			echo "已更新远程仓库~"
			exit 0
		else
			echo "更新远程仓库失败,请手动检查!"
		    exit 1
		fi
	else
        echo "更新失败,请用git status检查缓存区是否有未提交的文件!"
		exit 1
	fi
else
    git fetch origin rel_test:rel_${Time}
    git checkout rel_${Time}
    if [ $? -eq 0 ];then
        echo "上线成功~"
        rm -f /tmp/1.txt
	    git push origin rel_${Time}:rel_${Time}
	    if [ $? -eq 0 ];then
	        echo "已推送到远程仓库,分支名为 rel_${Time}"
	    else
		    echo "推送远程仓库失败,请手动检查冲突!"
		    exit 1
	    fi
    else
        echo "上线失败,请用git status检查缓存区是否有未提交的文件!"
	    echo "正在回滚~"
        Sum=$(awk '/\*/' /tmp/1.txt|sed -r 's#\* (.*)$#\1#g')
	    rm -f /tmp/1.txt
        git checkout $Sum
        if [ $? -eq 0 ];then
  	        echo "已回退版本~"
        else
  	        echo "回退失败,请手动回退!"
	        exit 1
        fi
    fi
fi##rsync
第1章 Rsync介绍
1.1 什么是Rsync？
cp本地复制
scp工具远程拷贝每次均为完整的拷贝，全量的。

Rsync是一款开源的，快速的，多功能的，可实现全量及增量的本地或远程数据同步备份的优秀工具。Rsync软件适用于unix/linux/windows等多种操作系统平台。

Rsync英文全称为Remote synchronization,从软件的名称就可以看出来，rsync具有可使本地和远程两台主机之间的数据快速复制同步镜像，远程备份的功能，这个功能类似ssh带的scp命令，但又优于scp命令的功能，scp每次都是全量拷贝，而rsync可以增量拷贝，当然rsync还可以在本地主机的不同分区或目录之间全量及增量的复制数据，这又类似cp命令，但同样也估优于cp命令，cp每次都是全量拷贝，而rsync可以增量拷贝。
小提示：利用rsync还可以实现删除文件和目录和功能，这又相当于rm命令！
一个rsync相当于scp,cp,rm,但是还优于他们每一个命令。
1.2 rsync特点：
在同步备份数据时，默认情况下，Rsync通过其独特的“quick check”（快速检查）算法，它仅同步大小或者最后修改时间发生变化的文件或目录，当然也可根据权限，属主等属性的变化同步，但需要指定相应的参数，甚至可以实现只同步一个文件里有变化的内容部分，所以，可以实现快速的同步备份数据。
1.3 工作场景中rsync的作用：
备份服务器功能作用介绍说明，采用备份方式(rsync)
    架构中服务器上的重要文件：/etc/hosts  /etc/passwd /etc/rc.local /log     
架构中服务器上的编写文件：服务配置文件(定时任务文件 sudo配置文件) 脚本文件 
1.4 rsync命令作用对比介绍(cp scp rm ls)
1.4.1 rsync第一个功能：完成cp命令
[root@backup ~]# cp -rp /etc/hosts /tmp/
[root@backup ~]# ll /tmp/
total 4
-rw-r--r--  1 root root 333 May  3 17:02 hosts
-rw-------. 1 root root   0 May  3 12:31 yum.log 
[root@backup ~]# rsync /etc/passwd /tmp/
[root@backup ~]# ll /tmp/passwd 
-rw-r--r-- 1 root root 1140 May  4 12:42 /tmp/passwd
1.4.2 rsync复制目录，需要加上-r参数
[root@backup ~]# mkdir lijinghua
[root@backup ~]# ll lijinghua/
total 0
[root@backup ~]# touch lijinghua/{a..c}
[root@backup ~]# ll lijinghua/
total 0
-rw-r--r-- 1 root root 0 May  4 12:44 a
-rw-r--r-- 1 root root 0 May  4 12:44 b
-rw-r--r-- 1 root root 0 May  4 12:44 c
复制 lijinghua目录到/tmp目录下
root@backup ~]# rsync -r lijinghua /tmp/
[root@backup ~]# rsync lijinghua /tmp/  #→不加-r，报错
skipping directory lijinghua

[root@backup ~]# rsync -r lijinghua /tmp/
[root@backup ~]# rsync lijinghua /tmp/
skipping directory lijinghua
[root@backup ~]# rm -rf /tmp/lijinghua/
[root@backup ~]# rsync -r lijinghua/ /tmp/
注意：rsync 复制目录的时候，比如复制的是lijinghua目录，
rsync -r lijinghua /tmp  lijinghua目录后面没有/,表示目录本身复制到/tmp下
rsync -r lijinghua/  /tmp  lijinghua目录后面有/,表示目录下所有数据文件进行复制到/tmp下
1.5 rsync第二个功能完成scp命令  
将hosts文件复制NFS服务器/tmp目录中
[root@backup ~]# scp -rp /etc/hosts 10.0.0.31:/tmp/
root@10.0.0.31's password: 
hosts                                           100%  333     0.3KB/s   00:00
查看nfs服务器/tmp目录：
[root@nfs01 tmp]# ll
total 4
-rw-r--r--  1 root root 333 May  3 17:02 hosts
-rw-------. 1 root root   0 May  3 12:31 yum.log
1.6 rsync第三个功能，rm命令
[root@backup ~]# rsync -r --delete lijinghua/ /tmp/
[root@backup ~]# ll /tmp/
total 0
-rw-r--r-- 1 root root 0 May  4 13:31 a
-rw-r--r-- 1 root root 0 May  4 13:31 b
-rw-r--r-- 1 root root 0 May  4 13:31 c
--delete无差异化同步，你有的，我也要有，我没有的，你也要有。
##--delete命令很危险，把/tmp 目录下原有的文件删除了。
1.7 rsync第四个功能： 类似ls命令
[root@backup ~]# rsync /tmp/
drwxrwxrwt        4096 2017/05/04 13:35:30 .
-rw-r--r--           0 2017/05/04 13:35:20 .log
-rw-r--r--           0 2017/05/04 13:31:01 a
-rw-r--r--           0 2017/05/04 13:31:01 b
-rw-r--r--           0 2017/05/04 13:31:01 c
-rw-r--r--           0 2017/05/04 13:35:30 yum.log
1.9 全量和增量的概念
全量：所有数据，不管你是否已经存在，都重新复制一遍
增量：所有数据，只复制进行变化的数据，（权限，大小等）已经存在的的文件不再进行复制。
第2章 Rsync的特性如下：
	支持拷贝特殊文件如链接文件，设备等
	可以有排除（tar？find？）指定文件或目录同步的功能，相当于打包命令tar的排除功能

tar zcvf backup_1.tar.gz  /opt/data  -exclude=lijinghua  说明：在打包/opt/data时就排除了lijinghua命名的目录和文件。
可以做到保持原文件或目录的权限，时间，软硬链接，属主，组等属性均不改变-p
下面的命令将备份/home 目录自 2008-01-29 以来修改过的文件
      # tar -N 2008-01-29 -zcvf /backups/inc-backup_$(date +%F).tar.gz /home
      下面的命令将备份 /home 目录昨天以来修改过的文件
      # tar -N $(date -d yesterday "+%F") -zcvf /backups/inc-backup_$(date +%F).tar.gz /home
	   添加文件到已经压缩的文件
      # tar -rf all.tar *.gif
 说明：这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。
	可以实现增量同步，既只同步发生变化的数据，因此数据传输效率很高（tar-N）
	可以使用rcp，rsh，ssh等方式来配合传输文件（rsync本身不对数据加密）
	可以通过socket（进程方式）传输文件和数据（服务端和客户端）※※※※※重点
	支持匿名的或认证（无需系统用户）的进程模式传输，可实现方便安全的进行数据备份及镜像
	rsync也相当于ls命令
2.1 Rsync软件服务工作应用常见
	定时任务+rsync方式
       全网数据备份方案(备份 验证 通知)
       备份服务器单点问题(多个备份服务器 同城灾备 异地灾备)
	实时同步+rsync方式
       用户上传的数据信息，进行实时的备份  


2.2 Rsync软件参数介绍
- -delete           实现无差异数据同步
--bwlimit=RATE   实现数据传输过程中限速
2.3 Rsync软件工作方式
1、本地复制方式（cp rm ls）
Local:  rsync [OPTION...] SRC... [DEST]
语法说明：
1）Rsync为同步的命令；
2）[OPTION]为同步时的参数选项
3）SRC为源，即待拷的分区，文件或目录等；
4）[DEST]为目的分区，文件或目录等；

实例1：把系统的hosts文件同步到/opt目录
[root@backup ~]# rsync /etc/hosts /opt/
[root@backup ~]# ls /opt/hosts 
/opt/hosts
实例2：把/etc/selinux目录拷贝到/tmp/rsync目录下下
[root@backup ~]# rsync -a /etc/selinux/ /tmp/rsync/
[root@backup ~]# ll /tmp/rsync/
-rw-r--r-- 1 root root  429 Jun 12 11:30 config
-rw-r--r-- 1 root root  326 Jul 23 10:20 hosts
-rw-r--r-- 1 root root  113 Nov 18  2016 restorecond.conf
-rw-r--r-- 1 root root   76 Nov 18  2016 restorecond_user.conf
-rw-r--r-- 1 root root 2271 Jul 24  2015 semanage.conf
drwxr-xr-x 6 root root 4096 Jun 12 11:24 targeted



[root@backup rsync]# rsync -a /etc/selinux /tmp/rsync/
[root@backup rsync]# ll
total 4
drwxr-xr-x 3 root root 4096 Jun 12 11:30 selinux

2.4 rsync复制目录总结:
1.	当复制目录时,目录后接上/,表示只复制目录下的内容
2.	当复制目录时,目录后不接上 /,表示只复制目录本身



2.5  借助ssh隧道传输方式（scp）    
    Access via remote shell:
    Pull: rsync [OPTION...] [USER@]HOST:SRC... [DEST]
    Push: rsync [OPTION...] SRC... [USER@]HOST:DEST

实例1：复制系统的hosts文件到远端的nfs机器
[root@backup ~]# rsync -rp -e "ssh -p 22" /etc/hosts  root@10.0.0.31:/tmp 
root@10.0.0.31's password:
[root@nfs01 tmp]# ll  #查看nfs /tmp目录
total 4
-rw-r--r--  1 root root 333 May  4 14:45 hosts
-rw-------. 1 root root   0 May  3 12:31 yum.log
参数说明：
-e使用隧道  -p ssh的端口号 root当前用户名  10.0.0.31:/tmp 远端机器的IP，:/tmp远端主机的目录

2.6 实例2：推送，将当前主机内容推送到远程主机
[root@backup ~]# rsync -avzP -e 'ssh -p 22' /etc/hosts root@172.16.1.31:/tmp/
root@172.16.1.31's password: 
sending incremental file list
hosts
   333 100%    0.00kB/s    0:00:00 (xfer#1, to-check=0/1)
 [root@nfs01 ~]# ll /tmp/  #查看同步的数
total 4
-rw-r--r--  1 root root 333 May  3 17:02 hosts
命令说明
-e 'ssh -p 22' 表示以ssh的方式通过22端口推送，如果不写默认22端口

2.7 实例3：将远程主机的内容拉取到当前主机
[root@backup tmp]# rsync -avzP -e 'ssh -p 22' root@nfs01:/opt /tmp/
root@nfs01's password: 
receiving incremental file list
opt/
opt/hosts
         333 100%  325.20kB/s    0:00:00 (xfer#1, to-check=1/3)
opt/rh/

sent 38 bytes  received 257 bytes  118.00 bytes/sec
total size is 333  speedup is 1.13

[root@backup tmp]# ll
total 8
-rw-r--r-- 1 root root    0 May  4 13:31 a
-rw-r--r-- 1 root root    0 May  4 13:31 b
-rw-r--r-- 1 root root    0 May  4 13:31 c
-rw-r--r-- 1 root root  333 May  4 14:43 hosts
drwxr-xr-x 3 root root 4096 May  4 14:51 opt

参数说明：
1）-avz相当于-vzrtopgDI，表示同步时文件和目录属性不变。
2）-P显示同步的过程，可以用--progress替换。
3）-e ‘ssh -p 22’表示通过ssh通道传输数据，可省略
4）root@nfs01:/opt 远程主机系统用户，:/opt远端的目录，这个nfs01主机名，必须是要在/etc/hosts文件解析了，才能用。
 5）/tmp本地的路径

2.8 Rsync命令同步参数
命令参数	说明
-v --verbose	详细模式输出，传输时的进度等信息
-z,--compress	传输时进行压缩以提高传输效率，--compress-level=num可按级别压缩
-a --archive重要	归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rtopgDI
-r,recurelve 归类于-a参数	对子目录以递归模式，即目录下的所有目录都同样传输，注意是小写的r.
-t,times 归类于-a参数	保持文件的时间信息
-o--ownew归类于-a参数	保持文件所属主信息
-p --perms 归类于-a 参数	保持文件权限
-g --group归类于-a参数	保持文件属组信息
-P --progress	显示同步的过程及传输时进度等信息
-D--devlces 归类于-a参数	保持设备文件信息
-l--links归类于-a参数	保留软链接小写l
-e,--rsh=command	使用的隧道协议（remote shell）,指定替代rsh的shell程序，例如ssh
--exclude=pattern模式
		指定排除不需要传输的文件信息（tar参数一样）
--exclude-from=file	文件名所在的目录文件，即可以实现排除多个文件(和tar一样)
--bwlimit=rate速率	limit I/O bandwidth;kbytes per second
limit socket I/O bandwidth 限速功能
案例：某DBA做数据同上，带宽占满，导致用户无法访问网站
--delete	让目标目录SRCT 和源目录数据DST目标一致，即无差异同步数据（我有的，你也要有，我没有的，你也不能有）
保持同步目录及文件属性：
这里的-avzP相当于-vzrtopgDIP(还多了Dl功能)，生产环境常用的参数选项为-avzP或-vzrtopgP
如果是放入脚本中，也可以把-v和-P去掉，这里的--progress（进度）可以用-P代替


2.9  实例2：增量复制
[root@backup ~]# rsync -avzP -e 'ssh -p 22' /etc/hosts root@172.16.1.31:/opt/
root@172.16.1.31's password: 
sending incremental file list

sent 30 bytes  received 12 bytes  16.80 bytes/sec
total size is 333  speedup is 7.93
##判断文件没有变化，根据增量同步原理，不进行数据传送

[root@backup ~]# rsync -avzP -e 'ssh -p 22' /etc/hosts root@172.16.1.31:/opt/
root@172.16.1.31's password: 
sending incremental file list
hosts
         333 100%    0.00kB/s    0:00:00 (xfer#1, to-check=0/1)

sent 204 bytes  received 37 bytes  53.56 bytes/sec
total size is 333  speedup is 1.38
##判断文件发生变化，根据增量同步原理，进行数据传送
[root@nfs01 tmp]# ll  ##查看远端机器/tmp目录
total 4
-rw-r--r--  1 root root 333 May  4 14:45 hosts
-rw-------. 1 root root   0 May  3 12:31 yum.log
2.10 远程复制数据方式
man rsync
Access via rsync daemon:  （守护进程，服务端和客户端）
 pull推，从本地将数据推到远端(这种模式比较好)
   Pull:rsync [OPTION...] [USER@]HOST::SRC... [DEST]   
Push:拉 rsync [OPTION...] SRC... [USER@]HOST::DEST
push拉，从远端主机内容拉取到当前主机
     rsync [OPTION...] SRC... rsync://[USER@]HOST[:PORT]/DEST

rsync远程复制数据方式类似于scp
01 scp命令--推

[root@backup ~]# scp -rp /etc/hosts  172.16.1.31 :/tmp/scp/
The authenticity of host ' 172.16.1.31 
root@172.16.1.31's password: 
hosts                                                                          100%  349     0.3KB/s   00:00    

01 scp命令-拉
[root@backup ~]# mv /etc/hosts /tmp/
[root@backup ~]# scp -rp  172.16.1.31 :/tmp/scp/hosts /etc/
root@172.16.1.31's password: 
hosts                                                                          100%  349     0.3KB/s   00:00    
[root@backup ~]# ll /etc/hosts
-rw-r--r-- 1 root root 349 Jul 26 10:18 /etc/hosts
	利用rsync命令实现---推
[root@backup ~]# rsync -rp /etc/hosts  172.16.1.31 :/tmp/rsync/
	 利用rsync命令实现---拉

[root@backup ~]# mv /etc/hosts /tmp/
[root@backup ~]# rsync -rp 172.16.1.31 :/tmp/rsync/hosts /etc/  
#将远端主机的目录拉到本地etc
root@172.16.1.31's password: 
[root@backup ~]# ll /etc/hosts
-rw-r--r-- 1 root root 349 Jul 26 10:54 /etc/hosts

2.11 推和拉的概念理解
 

2.12 文字版推和拉的概念：
备份服务器rsync服务端的汇总
所有rsync客户端将数据推给rsync服务端（这种模式比较好）
拉的概念：
备份服务器作为rsync客户端，其他服务器作为rsync服务器，backup客户端需要向其他rsync服务器拉取数据。（这种模式比较累）


2.13 服务端和客户端的概念(绘图理解)
 

第3章 使用守护进程方式数据传输(daemon)重点
3.1服务端配置:

1、查看rsync软件包是否安装
[root@backup ~]# rpm -qa|grep rsync
rsync-3.0.6-12.el6.x86_64
3.1 2、配置rsync服务端（配置文件）
vim /etc/rsyncd.conf  ##默认这个文件是没有的
###rsyncd.conf start###
uid = rsync
gid = rsync
use chroot = no
max connections = 200
timeout = 300
pid file = /var/run/rsyncd.pid
lock file = /var/run/rsync.lock
log file = /var/log/rsyncd.log
[backup]
path = /backup
ignore errors
read only = false
list = false
hosts allow = 172.16.1.0/24
hosts deny = 0.0.0.0/32
auth users = rsync_backup
secrets file = /etc/rsync.password
#rsync_config____________end

3.2 配置文件参数说明：
 


3.3 rsync备份服务器搭建--模块概念
 
3.3.1 案例：某DBA做数据同步，带宽占满，导致用户无法访问网站。
rsync -avz dbfile 10.0.0.41:/backup #没有给带宽做限制
rsync -avz --bwlimit=100 dbfile 172.16.1.41:／backup   #限定了带宽



3.4 开始部署rsync （rsync备份服务端）

1、创建用户
useradd -s /sbin/nologin -M rsync
[root@backup ~]# id rsync
uid=501(rsync) gid=501(rsync) groups=501(rsync)
2、创建rsync备份目录
mkdir /backup -p
[root@backup ~]# ll -ld /backup/
drwxr-xr-x 2 rsync rsync 4096 May  4 12:17 /backup/

3、修改备份目录权限
chown -R  rsync.rsync  /backup	
[root@backup ~]# ll -ld /backup/
drwxr-xr-x 2 rsync rsync 4096 May  4 12:24 /backup/
4、创建认证用户密码文件
[root@backup ~]# echo "rsync_backup:12345678" >/etc/rsync.password 
[root@backup ~]# cat /etc/rsync.password 
rsync_backup:12345678
5、修改用户密码权限
[root@backup ~]# ll /etc/rsync.password 
-rw-r--r-- 1 root root 20 May  4 12:05 /etc/rsync.password
[root@backup ~]# chmod 600 /etc/rsync.password
[root@backup ~]# ll /etc/rsync.password 
-rw------- 1 root root 20 May  4 12:05 /etc/rsync.password

6、启动rsync守护进程服务
[root@backup ~]# rsync --daemon
开机自启动rsync方法：
方法一：写到/etc/rc.local（重点）
[root@backup ~]# echo "# rsync boot info" >>/etc/rc.local 
[root@backup ~]# echo "rsync --daemon" >>/etc/rc.local 
[root@backup ~]# tail -2 /etc/rc.local 
# rsync boot info
rsync --daemon

方法二：编写脚本文件	
编写出脚本文件，可以利用rsync --daemon启动
将编写脚本文件，放置到 /etc/init.d/
脚本内容信息要添加：# chkconfig: 2345 55 25
添加执行权限
添加到chkconfig启动管理服务列表中
chkconfig -add rsync


方法三：利用一种服务xinetd,进行rsync服务启动（了解就行）
[root@backup ~]# yum install xinetd    #→安装xinetd
[root@backup ~]# vim /etc/xinetd.d/rsync  #→编辑配置文件
service rsync
{
        disable = no  #表示开启
        flags           = IPv6
        socket_type     = stream
        wait            = no
        user            = root
        server          = /usr/bin/rsync
        server_args     = --daemon
        log_on_failure  += USERID
}

[root@backup ~]# ps -ef|grep rsync  #查看进程
root       2805   2671  0 09:21 pts/0    00:00:00 grep rsync
[root@backup ~]# /etc/init.d/xinetd start
Starting xinetd:                                           [  OK  ]
[root@backup ~]# ps -ef|grep rsync
root       2817   2671  0 09:22 pts/0    00:00:00 grep rsync

[root@backup ~]# netstat -lntup|grep 873
tcp        0      0 :::873                      :::*                        LISTEN      2814/xinetd         
[root@backup ~]# /etc/init.d/xinetd stop
Stopping xinetd:                                           [  OK  ]
[root@backup ~]# rsync --daemon
[root@backup ~]# netstat -lntup|grep 873
tcp        0      0 0.0.0.0:873                 0.0.0.0:*                   LISTEN      2835/rsync          
tcp        0      0 :::873                      :::*                        LISTEN      2835/rsync          



三、xinetd自启动rsync服务
添加到chkconfig启动管理服务列表中
chkconfig xinetd on

3.5 关闭rsync服务：
kill进程号杀掉rsync
 [root@backup ~]# ps -ef|grep rsync  查看rsync进程号
root       1970      1  0 01:56 ?        00:00:00 rsync --daemon
root       2699   2671  0 08:44 pts/0    00:00:00 grep rsync
[root@backup ~]# kill 1970   ##杀死进程
[root@backup ~]# ps -ef|grep rsync 查看进程号
root       2704   2671  0 08:45 pts/0    00:00:00 grep rsync

killall进程名称（精确杀死）
[root@backup ~]# killall rsync  #杀死进程
[root@backup ~]# killall rsync
rsync: no process killed
[root@backup ~]# ps -ef|grep rsync   ##查看进程
root       2712   2671  0 08:48 pts/0    00:00:00 grep rsync

pkill使用进程名称杀死rsync服务
[root@backup ~]# rsync --daemon
[root@backup ~]# pkill rsync
[root@backup ~]# pkill rsync
[root@backup ~]# ps -ef|grep rsync
root       2725   2671  0 08:52 pts/0    00:00:00 grep rsync
扩展：如果不想用ps查看进程号，直接利用kill来结束进程脚本里的使用方法：
pid_num="/var/run/rsyncd.pid "  存放pid的文件
kill `cat $pid_num`
说明:kill和killall杀死之后都有提示
killall精确杀手 进程名
说明：pkill 杀进程时，不提示任何信息
 pkill 模式杀手(会造成误杀，慎用)，杀进程名



3.6 开始部署rsync客户端
1、	只要汲及到密码(明文)信息,都要把密码设置为600


	检查rsync软件是否安装:
[root@nfs01 ~]# rpm -qa|grep rsync
rsync-3.0.6-12.el6.x86_64

	创建密码文件

[root@backup ~]# cat /etc/rsync.password 
rsync_backup:12345678
提示：客户端的密码要和服务端的一致
3.7 2、将密码文件的权限设置为600（必须）
[root@nfs01 ~]# chmod 600 /etc/rsync.password 
[root@nfs01 ~]# ll -ld /etc/rsync.password 
-rw------- 1 root root 9 May  5 14:17 /etc/rsync.password
至此rsync客户端配置完成！！
3.8 3、客户端实现无需输入密码，同步数据
将rsync客户端的 /etc/sysconfig/network文件推送到备份服务器的/backup目录
[root@nfs01 ~]# rsync -avz /etc/sysconfig/network rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password
sending incremental file list
network
sent 98 bytes  received 27 bytes  250.00 bytes/sec
total size is 30  speedup is 0.24

	有时候你一个模块目录下还有好多目录,你可以直接将下面的子目录一起同步,会先创建这个目录,再把文件放进去
[root@nfs01 ~]# rsync -avz /etc/passwd rsync_backup@172.16.1.41::backup/lijinghua/ --password-file=/etc/rsync.password 
sending incremental file list
created directory lijinghua
passwd

服务端检查:
[root@backup backup]# ls -l /backup/lijinghua/
total 4
-rw-r--r-- 1 rsync rsync 1097 Jun 12 11:30 passwd

参数说明：
-a，归档模式，表示以递归方式传输文件，并保持所有文件属性
-v输出详细信息 
-z 传输时进行压缩以提高传输效率，
 -P显示同步的过程及传输时的进度等信
rsync_backup 服务端认证的用户
172.16.1.41  rsync服务端的IP地址（也可以写主机名）
::backup模块名
--password-file=/etc/rsync.password
免密码的操作，指定密码文件位置，如果不写，则会要求用户交互式输入密码

	查看rsync服务端备份目录
[root@backup backup]# ll
total 4
-rw-r--r-- 1 rsync rsync 30 May  3 17:06 network

3.8拉取测试：将rsync服务器端指定目录全部内容同步到客户端
[root@nfs01 ~]# rsync -avz rsync_backup@172.16.1.41::backup /backup/ --password-file=/etc/rsync.password 
receiving incremental file list
created directory /backup
./
network

sent 86 bytes  received 202 bytes  576.00 bytes/sec
total size is 30  speedup is 0.10
[root@nfs01 ~]# ll /backup/
total 4
-rw-r--r-- 1 501 501 30 May  3 17:06 network
命令说明：
和推送相比，只是两个目录换了个位置。


3.9 客户端访问服务器原理：
 

3.1 rsync软件服务端，配置多个模块

vim /etc/rsyncd.conf
##rsyncd.conf start##
uid = rsync
gid = rsync
use chroot = no
max connections = 200
timeout = 300
pid file = /var/run/rsyncd.pid
lock file = /var/run/rsync.lock
log file = /var/log/rsyncd.log
igonre errors
read only = false
list = false
hosts allow = 172.16.1.0/24
#hosts deny = 0.0.0.0/32
auth users = rsync_backup
secrets file = /etc/rsync.password
[backup]
path =  /backup
[nfsbackup]
path = /nfsbackup
#rsync_config_________end 

3.2 重启rsync服务
如果已经开启，先killall rsync杀死
rsync --daemon
ps -ef|grep rsync
2、创建指定的备份存储目录，并对备份存储目录进行授权    
[root@backup backup]# mkdir /data
[root@backup backup]# ll /data/
total 0
[root@backup backup]# chown -R  rsync.rsync /data/
[root@backup backup]# ls -ld /data/
drwxr-xr-x 2 rsync rsync 4096 May  5 15:07 /data/
3.3 rsync客户端测试同步数据
将客户端的/etc/hosts抢送到服务端的/data目录下
[root@nfs01 ~]# rsync -avz  /etc/hosts rsync_backup@172.16.1.41::data --password-file=/etc/rsync.password 
sending incremental file list
hosts

sent 201 bytes  received 27 bytes  456.00 bytes/sec
total size is 332  speedup is 1.46
查看rsync服务端data目录
[root@backup data]# ll /data/
total 4
-rw-r--r-- 1 rsync rsync 332 May  3 17:06 hosts


3.4 vim扩展命令
:11,18copy20     == 将11-18行信息复制到20行之后
   :11,18move20     == 将11-18行信息移动到20行之后
  :help copy
   :help move  


第4章 rsync扩展项
4.1 rsync传输数据文件排除功能
--exclude 排除指定的一个文件或目录


[root@nfs01 ~]# mkdir /lijinghua
[root@nfs01 ~]# mkdir /lijinghua/{a..c} -p
[root@nfs01 ~]# touch /lijinghua/{1..5}
[root@nfs01 ~]# tree /lijinghua/
/lijinghua/
├── 1
├── 2
├── 3
├── 4
├── 5
├── a
├── b
└── c
4.2 实例1排除a目录不要进行传送（客户端）
[root@nfs01 ~]# rsync -avzP --exclude=a /lijinghua/  rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password 
sending incremental file list
./
1
           0 100%    0.00kB/s    0:00:00 (xfer#1, to-check=6/8)
2
           0 100%    0.00kB/s    0:00:00 (xfer#2, to-check=5/8)
3
           0 100%    0.00kB/s    0:00:00 (xfer#3, to-check=4/8)
4
           0 100%    0.00kB/s    0:00:00 (xfer#4, to-check=3/8)
5
           0 100%    0.00kB/s    0:00:00 (xfer#5, to-check=2/8)
b/
c/

 rsync服务端查看/data目录
[root@backup ~]# ll /backup/
total 8
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 1

-rw-r--r-- 1 rsync rsync    0 May  5 15:28 2
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 3
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 4
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 5
drwxr-xr-x 2 rsync rsync 4096 May  5 15:28 b
drwxr-xr-x 2 rsync rsync 4096 May  5 15:28 c

4.3 实例2排除单个文件文件：
[root@nfs01 lijinghua]# rsync -avzP --exclude=a.txt /lijinghua/ rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password 
sending incremental file list
./
1
           0 100%    0.00kB/s    0:00:00 (xfer#1, to-check=7/9)
2
           0 100%    0.00kB/s    0:00:00 (xfer#2, to-check=6/9)
3
           0 100%    0.00kB/s    0:00:00 (xfer#3, to-check=5/9)
4
           0 100%    0.00kB/s    0:00:00 (xfer#4, to-check=4/9)
5
           0 100%    0.00kB/s    0:00:00 (xfer#5, to-check=3/9)
a/
b/
c/
查看rsync服务端backup目录结果
[root@backup backup]# ll
total 12
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 1
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 2
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 3
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 4
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 5
drwxr-xr-x 2 rsync rsync 4096 May  5 15:28 a
drwxr-xr-x 2 rsync rsync 4096 May  5 15:28 b
drwxr-xr-x 2 rsync rsync 4096 May  5 15:28 c


4.3.1 实例3：排除多个目录：
[root@nfs01 lijinghua]# rsync -avzP --exclude={a,b} /lijinghua/ rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password

rsync服务端查看效果
[root@backup backup]# ll
total 8
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 1
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 2
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 3
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 4
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 5
-rw-r--r-- 1 rsync rsync    0 May  5 15:52 a.txt
drwxr-xr-x 2 rsync rsync 4096 May  5 15:28 c
-rw-r--r-- 1 rsync rsync   25 May  5 16:02 paichu.txt
--exclude-from指定排除多个文件或目录，将排除信息写入到一个文件中，
利用--exclude-from=排除文件名
4.4 排除一个列表文件
[root@nfs01 lijinghua]# cat paichu.txt 
a
b
c
1
2
3
4
paichu.txt
#paichu.txt本身也排除

[root@nfs01 lijinghua]# rsync -avzP --exclude-from=./paichu.txt /lijinghua/  rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password 
sending incremental file list
./
5
           0 100%    0.00kB/s    0:00:00 (xfer#1, to-check=1/3)
a.	txt
服务端查看结果
[root@backup backup]# ll
total 0
-rw-r--r-- 1 rsync rsync 0 May  5 15:28 5
-rw-r--r-- 1 rsync rsync 0 May  5 15:52 a.txt

4.5 服务端排除文件或目录（了解）
4.6 修改配置文件
vim /etc/rsyncd.conf
auth users = rsync_backup
exclude = a b 1 2
secrets file = /etc/rsync.password
[backup]
重启rsync服务
如果已经启动：killall rsync
2、客户端将/lijinghua目录同步到服务端
[root@nfs01 lijinghua]# rsync -avzP /lijinghua rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password 
sending incremental file list
lijinghua/
skipping daemon-excluded file "lijinghua/1"
skipping daemon-excluded file "lijinghua/2"
lijinghua/3
skipping daemon-excluded directory "lijinghua/a"
*** Skipping any contents from this failed directory ***
skipping daemon-excluded directory "lijinghua/b"
*** Skipping any contents from this failed directory ***
lijinghua/c/

3.11客户端测试排除1，2文件和a b目录
[root@nfs01 lijinghua]# rsync -avzP /lijinghua rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password 
sending incremental file list
lijinghua/
skipping daemon-excluded file "lijinghua/1"
skipping daemon-excluded file "lijinghua/2"
skipping daemon-excluded directory "lijinghua/a"
*** Skipping any contents from this failed directory ***
skipping daemon-excluded directory "lijinghua/b"
*** Skipping any contents from this failed directory ***
lijinghua/c/
3、rsync服务端查看效果：
[root@backup lijinghua]# ll
total 8
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 3
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 4
-rw-r--r-- 1 rsync rsync    0 May  5 15:28 5
drwxr-xr-x 2 rsync rsync 4096 May  5 15:28 c
-rw-r--r-- 1 rsync rsync    0 May  5 17:07 c.txt
-rw-r--r-- 1 rsync rsync   25 May  5 16:02 paichu.txt
第5章 rsync访问权限控制  
权限配置中，权限设置范围为大者优先
拒绝的优先于允许的范围
rsync服务端权限设置
[root@backup backup]# vim /etc/rsyncd.conf
hosts allow = 172.16.1.0/24
#hosts deny = 0.0.0.0/32 黑名单大于白名单，所以优先，建议注释掉。  


5.1 rsync无差异数据同步
--delete 我有的，你也要有，我没有的，你也不能有
[root@nfs01 ~]# rsync -avzP --delete /lijinghua/ rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password 
sending incremental file list
./
deleting lijinghua/b/
deleting lijinghua/paichu.txt
deleting lijinghua/a.txt
deleting lijinghua/5
deleting lijinghua/4
cannot delete non-empty directory: lijinghua
skipping daemon-excluded file "1"
skipping daemon-excluded file "2"

skipping daemon-excluded file "3"
4
           0 100%    0.00kB/s    0:00:00 (xfer#1, to-check=7/12)
5
           0 100%    0.00kB/s    0:00:00 (xfer#2, to-check=6/12)
a.txt
           0 100%    0.00kB/s    0:00:00 (xfer#3, to-check=5/12)
c.txt
           0 100%    0.00kB/s    0:00:00 (xfer#4, to-check=4/12)
paichu.txt
          25 100%    0.00kB/s    0:00:00 (xfer#5, to-check=3/12)
skipping daemon-excluded directory "a"
*** Skipping any contents from this failed directory ***
b/
skipping daemon-excluded directory "c"
*** Skipping any contents from this failed directory ***

服务端查看效果
 

5.1rsync服务端配置文件列表功能
list=false  #→不能查看模块名
改为list=true  #→可以看到模块名称，默认参数就行
killall rsync
rsync --daemon
##客户端执行
[root@nfs01 ~]# rsync -avz rsync_backup@172.16.1.41::
backup         	
data  

5.2 Rsync企业应用之风险提示
特别说明：
执行 --delete参数从rsync服务器端往rsync客户端拉取数据时，一定要小心，最好不用，它比从rsync客户端带--delete参数往rsync服务端推送危险的多。客户端带--delete参数往服务端推送仅删除服务端模块下的数据，而前者有能力删除rsync客户端本地的所有数据包括跟下的所有目录。
	rsync推送企业工作场景：
1）备份 --delete 风险
本地有啥，远端就有啥，本地没有的远端有也要删除。服务器端的目录数据可能丢失。
	rsync拉取企业工作场景：
1）代码发布，下载。--delete风险
远端有啥，本地（客户端）就有啥，远端没有的本地有也要删除。本地的目录数据可能丢失。

5.3 rsync无差异同步的生产场景应用
一般是有需要两台服务器之间，必须要求数据一致，且时时性又不是很高的情况下，如两台负载均衡下面web服务器之间的同步，或者高可用双机配置之间的同步等，rsync无差异同步非常的危险，而且，有很多的替代方案，因此，生产场景没有特殊的需求，应避免使用。切记，有很多朋友都已经有了血的教训。

5.3.1 rsync优点：
1，增量备份，支持socket（daemon），集中备份（支持推拉，都是以客户端为参照物）。
2，远程SHELL通道模式还可以加密（SSH）传输，socket（daemon）需要加密传输，可以利用vpn服务或ipsec服务
5.3.2 rsync缺点：
	大量小文件时候同步的时候，比对时间较长，有的时候，同步过程中，rsync进程可能会停止，僵死了。
	同步大文件，10G这样的大文件有时也会出问题，中断。未完整同步前，是隐藏文件，可以通过续传（--partial）等参数实现传输
	一次性远程拷贝可以用scp，使用rsync同步数据，大量小文件要打成一个包再拷贝。（重要）

5.4 排错必备思想
	部署流程步骤熟练
	rsync原理理解
	学会看日志，rsync命令行输出，日志文件/var/log/rsyncd.log

5.4.1 Rsync服务端排错思路
	查看rsync服务配置文件路径是否正确，正确的默认路径为：/etc/rsyncd.conf
	查看配置文件里host allow,host deny，允许的IP网段是否是允许客户端访问的ip网段
	查看配置文件中path参数里的路径是否存在，权限是否正确（正常应为配置文件中的UID参数对应的属主和组）
	查看rsync服务是否启动。查看命令为：ps -ef|grep rsync。端口是否存在netstat -antup |grep 873
	查看iptables防火墙和selinux是否开启允许rsync服务通过，也可以考虑关闭。
	查看服务端rsync配置的密码文件是否为600的权限，密码文件格式是否正确，正确格式为：用户名：密码，文件路径和配置文件里的secrect files参数对应。
	如果是推送数据，要查看下，配置rsyncd.conf文件中用户是否对模块下目录有可读写的权限。






















#!/bin/bash
file="/tmp/ceshi/ceshi.txt"
if [ ! -e "$file" ]; then
        echo -e "哦,文件存在~,正在执行切割统计web并发日志~"
        cp  /tmp/ceshi/ceshi.txt  /tmp/statistics/statistics`date +%Y%m%d%H`.log
fi
#if  last  step success  then  empty
if [ $? -eq 0  ];then
>  /tmp/ceshi/ceshi.txt 
fi
find  /tmp/statistics/  -name "stat*" -mtime +15 -exec rm {} \;
线上数据库 锁库
FLUSH TABLES WITH READ LOCK;

------------解锁
UNLOCK TABLES;

迁移数据库文件
线上数据库数据提取(1.3分)
mysqldump -uroot -p  --default-character-set=utf8 -P3306 --opt     --single-transaction  zyd1   > /home/mysql`date +%Y%m%d%H%M%S`.sql

线上数据库密码
@niH6V26@YT616@@56EE

scp传送过去(两分钟)
#scp /home/  root@120.78.60.13:/home/mysqlbak/


新库删除之前的数据
mysql -uroot -p
drop database zyd1;
create database zyd1;
 
 
 新库导入 (6分)
mysql -uroot -p zyd1 < *.sql 


密码
@AS55sadd55SFkn


登录 导入
source /home/mysqlbak/ ;


线上连接数据库文件更改到新库上

vim  /www/web/zyd_aiziyoudao_com/App/Conf/db.php

数据库地址  120.78.60.13
用户 zyd1
数据库名字 zyd1
密码  FSd123@sfDVV5@61DV

=====================以防万一 原来的数据
       'DB_TYPE'=>'mysqli',
       'DB_HOST'=>'127.0.0.1',
       'DB_PORT'=>'3306',
       'DB_NAME'=>'zyd1',
       'DB_USER'=>'root',
       'DB_PWD'=>'@niH6V26@YT616@@56EE',
       'DB_PREFIX'=>'zyd1_');





线上数据库密码
@niH6V26@YT616@@56EE

负载地址 
120.78.204.189


主库
120.78.60.13 密码 @AS55sadd55SFkn
从1 
39.108.112.254 
从2
120.78.201.100


 









#!/bin/bash
#copy
cp /var/log/nginx/ssl-access.log /var/nginx/access`date +%Y%m%d%H`.log
#if  last  step success  then  empty
if [ $? -eq 0  ];then
 >  /var/log/nginx/ssl-access.log
fi
 while : ;do  netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a,S[a]}' |grep ESTABLISHED >> /tmp/ceshi/ceshi.txt  && echo `date +%Y%m%d%H%M%S` >> /tmp/ceshi/ceshi.txt ; sleep 1; done;
#!/bin/bash
cur_time=$(date "+%Y%m%d%H%M%S")
tmp_name="code$cur_time"
echo -e "正在从远端仓库拉去代码\n"
git clone git@git.oschina.net:vso/aiziyoudao.git
if [ $? -eq 0 ];then
    echo -e "已经成功拉取到代码,正在作业"
    exit 0
 else
	echo "拉取代码失败,请检查!"
    exit 1
fi
mv aiziyoudao $tmp_name


#数据库链接信息
DB_HOST="123.57.2.131"
DB_NAME="zyd1"
DB_USER="rootziyoudao"
DB_PWD="izjOTW8NctxJAV6D111"
db_file_name="$tmp_name/App/Conf/db.php"

#api连接地址
API_ADDRESS="hc.test.api.aiziyoudao.com"
api_file_name="$tmp_name/api.js"

sleep  1
echo  -e  "正在设置数据库连接信息/n"
#设置数据库连接信息
function set_db_info(){
	echo -e "开始设置数据库连接信息……\n"
	echo $1
	sed -i "s/'DB_HOST'=>'.*'/'DB_HOST'=>'$2'/g" $1
	sed -i "s/'DB_NAME'=>'.*'/'DB_NAME'=>'$3'/g" $1
	sed -i "s/'DB_USER'=>'.*'/'DB_USER'=>'$4'/g" $1
	sed -i "s/'DB_PWD'=>'.*'/'DB_PWD'=>'$5'/g" $1
	cat $1
	echo -e "ok\n"
}

#设置api文件配置信息
function set_api_config(){
	echo -e "开始设置api文件配置信息……\n"
	echo $1
	sed -i "s/api_host = '.*'/api_host = '$2'/g" $1
	cat $1
	echo -e "ok\n"
}


set_db_info $db_file_name $DB_HOST $DB_NAME $DB_USER $DB_PWD
set_api_config $api_file_name $API_ADDRESS
echo -e "正在复制文件/n"
sleep 1
cp $tmp_name/* test_aiziyoudao_com/public_html/ -rf
echo -e "正在删除临时文件/n"
sleep 1
rm -rf $tmp_name
echo -e "ok 已经完成本次作业/n"
王
smbpasswd 属于samba套件，能够实现添加或删除samba用户和为用户修改密码

217773

-a：向smbpasswd文件中添加用户； 
-c：指定samba的配置文件； 
-x：从smbpasswd文件中删除用户； 
-d：在smbpasswd文件中禁用指定的用户； 
-e：在smbpasswd文件中激活指定的用户； 
-n：将指定的用户的密码置空。

====================================================================================
统计
1.根据访问IP统计UV

awk '{print $1}'  access.log|sort | uniq -c |wc -l

2.统计访问URL统计PV

awk '{print $7}' access.log|wc -l

3.查询访问最频繁的URL

awk '{print $7}' access.log|sort | uniq -c |sort -n -k 1 -r|more

4.查询访问最频繁的IP

awk '{print $1}' access.log|sort | uniq -c |sort -n -k 1 -r|more

5.根据时间段统计查看日志

cat  access.log| sed -n '/14\/Mar\/2015:21/,/14\/Mar\/2015:22/p'|more

=============================================================================================================打印机

打印机：运行\\10.1.59.210  之后查看 开始菜单，设备和打印机
打印扫描：Ctrl +r mstsc 10.1.59.210 用户ww 密码123456 桌面佳能扫描图标 
投影 win + p
公司台式电脑DNS：首选211.167.230.100 备用114.114.114.114

============================================================================================================内存与cpu查看
使用内存前10
ps aux | sort -k4nr | head -n 10
使用cpu前10
ps aux | sort -k3nr | head -n 10
=============================================================================================================查看命令完整路径
查看命令完整路径(以sshd为例)
1   pidof sshd    #选择下面第一个
   26294 21941 21915 19768 19766 7356 7355 7353 7351

   ls -al 26294


2  查端口 
fuser -n tcp 80

#fuser -n tcp 80
80/tcp:              14198 14199 14200 14201 14202 14203 14207 14208 23044

ps -ef |grep 23044  #最后一个
==================================================================================================================samba添加新用户
samba添加新用户

useradd  user               #创建一个用户
cd /home/user               #cd到home该用户下面
smbpasswd -a user           #给用户来一个密码

=====================================================================================================================查找大文件

=====================================================================================

git reset --hard HEAD^   退回到上一个版本
git checkout --file         表示丢弃工作区的修改退回原始状态
git checkout file            // 由于是通过文件系统删除的所以可以通过checkout恢复
git checkout --file         // 表示丢弃工作区的修改退回原始状态(不包括以及添加到暂存区的修改
git log --graph --pretty=oneline --abbrev-commit                 //查看分支的提交情况

=======================================================================================
检查mysql主配置文件在哪里
#先找到命令路径
#然后
/usr/libexec/mysqld --verbose --help |grep -A 1 'Default options'

====================================================================================


查看公网地址
curl ifconfig.me

==================================================================================

内存不够了 
echo 3 > /proc/sys/vm/drop_caches

==========================================================================
优化yum源
#!/bin/sh
 yum -y install wget
\mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak
 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 
yum clean all && yum makecache


yum repolist

yum repolist all

======================================================
查看php编译路径(前面是php开启路径
/usr/local/webserver/php/bin/php -r 'phpinfo();'|more
两个重要的配置文件
/php/etc/php.ini
/php/etc/php-fpm.conf

whereis php-cgi


====================================================

李哥电话 : 13611381171

=================================
vim /etc/fstab
sysfs                   /sys                    sysfs   defaults        0 0
proc                    /proc                   proc    defaults        0 0
LABEL=SWAP-sda2         swap                    swap    defaults        0 0
172.16.1.196:/data0/web  /data0                 nfs     rw,soft,intr    0 0

mount -a   #重新挂载

=====================================
getconf ARG_MAX

=================================
pip下载

wget https://bootstrap.pypa.io/get-pip.py --no-check-certificate

python get-pip.py

===================================
主从分离

查询最大连接数
set global read_only=1;

====================
yum安装时 出现 database disk image is malformed 的错误，Google后发现是yum的数据缓存出问题了，解决办法如下
估计是由于yum的原数据损坏导致的，与rpm的数据库损坏类似，前者会导致更新不能正常执行，后者会导致安装失败并出现乱码，前者的解决参见yum更新和rpm安装包问题(rpmdb: PANIC: Invalid argument)，
后者的错误可以通过一下方法解决：
终端，依次输入：


yum clean metadata
yum clean dbcache
yum makecache

========================
设置初始密码
mysqld_safe --skip-grant-tables &
===========================
mysqldump -B --master-data=2 --single-transaction lijinghua |gzip>/data/backup/lijinghua_$(date +%F).sql.gz


===========================
mysqlddump备份避免输入密码(定时任务
[mysqldump]
user=username---- 我的是root
password=password----我的是1qazxsw2

#修改权限
chmod 600 .my.cnf
=================================


E: dpkg 被中断,您必须手工运行 sudo dpkg --configure -a解决此问题 

rm /var/lib/dpkg/updates/*  
或者还需要
apt-get update 
=================================
ubuntu安装 openssl时报错

 !!! OpenSSL is not properly installed on your system. !!!
  !!! Can not include OpenSSL headers files.            !!!
解决:
 apt-get install openssl 
 apt-get install libssl-dev
 
 ===========================
 
 mysql5.7 root密码
 
 
 忘记密码
 配置文件中mysqld模块加入以下一行
 skip-grant-tables
 重启登录直接回车,之后再把这一行取消掉
 
 set password for 'root'@'localhost'=password('123456');
  flush privileges; 
  
 use mysql;
 update user set authentication_string=PASSWORD("这里输入你要改的密码") where User='root'; #更改密码
 update user set plugin="mysql_native_password"; #如果没这一行可能也会报一个错误，因此需要运行这一行
 flush privileges; #更新所有操作权限

 use mysql;
 update user set authentication_string=PASSWORD("@AS55sadd55SFkn") where User='root'; 
 update user set plugin="mysql_native_password"; 
 flush privileges; 

 #就算登录进去 还需要重新set下密码
 SET PASSWORD = PASSWORD('@AS55sadd55SFkn');
  flush privileges; 
 
 
CHANGE MASTER TO
MASTER_HOST  ="",
MASTER_USER  ="slave",
MASTER_PASSWORD  ="111111",
MASTER_LOG_FILE  ="mysql-bin.000003",
MASTER_LOG_POS  = 1992;

 ===========================
 
 cmake 编译安装 重新编译 
 
 cd (源码目录)
 rm -f CMakeCache.txt
 make clean
 
 ==================================
ubuntu下编译安装将服务加入系统服务
#以mysql为例
cp support-files/mysql.server /etc/init.d/mysql
update-rc.d mysql defaults
update-rc.d mysql start 2 3 4 5 . stop 0 1 6

 ==================================
 没见过的添加用户方式(添加redis用户,且不创建家目录)
 
 adduser --system --group --no-create-home redis
 
 ==================
 show slave status \G;  sql线程和io线程 出错的可能解决办法
 
 mysql>stop slave;

mysql>SET GLOBAL SQL_SLAVE_SKIP_COUNTER=1;

mysql>START SLAVE; 

======================
导出数据前需要在 主数据库上 

 flush tables with read locak;

 ===================
 
 mysql5.7的一些优化
关于MySQL 5.7的并行复制建立在组提交的基础上，所有在主库上能够完成 Prepared 的语句表示没有数据冲突，
就可以在 Slave 节点并行复制。

查看组
 show global variables like '%group_commit%';
 

 主库 
 set global binlog_group_commit_sync_delay=10;
 
 
 
 从库配置文件添加
 slave-parallel-type=LOGICAL_CLOCK
slave-parallel-workers=4

或者 在线添加
 stop slave;
 set global slave_parallel_type='LOGICAL_CLOCK';
  set global slave_parallel_workers=4;
  start slave;
   show variables like 'slave_parallel_%';
   
 从库配置文件添加
 在 MySQL 5.7 中，推荐将 master-info-repository 和 relay-log-info-repository 设置为 TABLE ，来减小这部分的开销。
 
 master-info-repository = table
relay-log-info-repository = table
relay-log-recovery = ON

 ================================================================
 将mysql设置为只读
mysql> flush tables with read lock;
mysql> set global read_only=1;

将MySQL从只读设置为读写状态的命令：
mysql> unlock tables;
mysql> set global read_only=0;

设置为只读
set global read_only=1;
 
 上锁
 flush tables with read lock;
 解锁
 unlock tables;
 
CREATE USER 'repl'@'%' IDENTIFIED BY '123456';
GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';
 flush privileges; 

CHANGE MASTER TO
MASTER_HOST='172.18.252.146',
MASTER_USER='slave',
MASTER_PASSWORD='111111',
MASTER_LOG_FILE='mysql-bin.000064',
MASTER_LOG_POS=175463;

 ===============================
 
 ubuntu 下第一次使用crontab若手滑没有选择vim编辑器,莫慌
 请输入select-editor  选择3
 
==============================
生成密钥命令
ssh-keygen -t rsa

=============================mysql性能測試
测试: 
**********测试CPU:
sysbench --test=cpu --cpu-max-prime=2000 run
*********测试线程：
sysbench  --test=threads --num-threads=500 --thread-yields=100 --thread-locks=4 run
测试IO：--num-threads 开启的线程     --file-total-size 总的文件大小
1，prepare阶段，生成需要的测试文件，完成后会在当前目录下生成很多小文件。
sysbench --test=fileio --num-threads=16 --file-total-size=2G --file-test-mode=rndrw prepare     
2，run阶段
sysbench --test=fileio --num-threads=20 --file-total-size=2G --file-test-mode=rndrw run
3，清理测试时生成的文件
sysbench --test=fileio --num-threads=20 --file-total-size=2G --file-test-mode=rndrw cleanup
**********测试内存：
sysbench --test=memory --memory-block-size=8k --memory-total-size=1G run
测试 mutex   
sysbench --test=mutex --num-threads=1000 --mutex-num=1000 --mutex-locks=100000 --mutex-loops=10000 run
 
 *********测试OLTP
 1，prepare阶段，生成需要的测试表
 sysbench --test=oltp --mysql-table-engine=innodb --mysql-host=127.0.0.1 --mysql-db=test666 --oltp-table-size=1000000 --mysql-user=root --mysql-password=123456 prepare
 2，run阶段
 sysbench --num-threads=16 --test=oltp --mysql-table-engine=innodb --mysql-host=127.0.0.1 --mysql-db=test666 --oltp-table-size=100000  --num-threads=4  --mysql-user=root --mysql-password=123456 run
 3，清理测试时生成的测试表
 sysbench --num-threads=16 --test=oltp --mysql-table-engine=innodb --mysql-host=127.0.0.1 --mysql-db=test666 --oltp-table-size=1000000  --mysql-user=root --mysql-password=123456 cleanup
 
 ===================
 查看binlog
 
 SHOW BINARY LOGS;
 
 -==================
 
 
 
 
 lock
 sysbench --test=mutex --mutex-num=5000000 --mutex-locks=100000 --mutex-loops=100000 --num-threads=8 --max-requests=5000000 run
 
 读内存
 sysbench --test=memory --memory-access-mode=rnd --memory-total-size=16G --memory-block-size=4096  -memory-oper=read  --num-threads=8 --max-requests=50000 run
 写内存
sysbench --test=memory --memory-access-mode=rnd --memory-total-size=16G --memory-block-size=4096 --memory-oper=write --num-threads=8 --max-requests=50000 run

io测试
sysbench --test=fileio --init-rng=on --file-num=10 --num-threads=4 --file-total-size=4G --max-requests=10000 --file-block-size=8192  --file-test-mode=rndrw run

OLTP事务性测试
sysbench --mysql-user=root --test=oltp --mysql-host=localhost --mysql-socket=/usr/local/mysql/mysql.sock   --oltp-test-mode=complex --mysql-table-engine=innodb --oltp-table-size=1000000 --mysql-db=test \
 --oltp-table-name=sb_test_1kw --num-threads=4 --max-requests=1000000 run


============================
cmake 重新编译 需要删除一下文件
rm ./cmake_install.cmake
rm -r ./CMakeFiles
rm ./Makefile
rm ./CMakeCache.txt

========================================
mysql导入.sql文件
方法一:
mysql> use databaseName;  
mysql> set names utf8;  
mysql> source /home/abc/abc.sql;
方法二：
mysql -u用户名 -p密码 数据库名 < 数据库名.sql
#mysql -uabc_f -p abc < abc.sql


 
 =========================================
mysqldup -uroot -p  --default-character-set=utf8 -P3306 --opt   --max_allowed_packet=1048576 --net_buffer_length=16384  --single-transaction -A   > /home/mysql`date +%Y%m%d%H%M%S`.sql

mysql加上以下三个参数导入速度将大大增加
-e 使用包括几个VALUES列表的多行INSERT语法; 
--max_allowed_packet=XXX 客户端/服务器之间通信的缓存区的最大大小; 
--net_buffer_length=XXX  TCP/IP和套接字通信缓冲区大小,创建长度达net_buffer_length的行

===================================== ==================查询数据库信息
线程
show status like 'Threads%';

连接
show variables like '%max_connections%';

服务器曾经最大的连接数
show global status like 'Max_used_connections';

使用什么引擎
 show engines;
 
 当前打开的连接的数量
 show global status like 'Threads_connected' ;
 ======================================检查端口是否开启
 nc -zv localhost 80
 
 ====================================查看当前服务器的ip  地址详细信息
 curl ipinfo.io
 
 ====================================pv 命令 炫酷 电影打字效果
 echo "Tecmint [dot] com is the world's best website for qualitative Linux article" | pv -qL 1
 
 
 
 ====================================mysqldump备份出错
 
 
mysql_upgrade -u root -p --force

===================================mysql主从出错
Last_IO_Error: error connecting to master 'repl@172.18.252.146:3306' - retry

mysql重新建立账号,从库分别建立连接
======================================= ubuntu报错Syntax error: "(" unexpected解决方法

如果脚本语法没错的话,请看下面
代码对于标准bash而言没有错，因为Ubuntu为了加快开机速度，用dash代替了传统的bash，是dash在捣鬼。
解决方法是 取消dash
sudo dpkg-reconfigure dash
在选择项中选No，即可。

 ====================================mysql 查看数据库所有用户权限
 SELECT DISTINCT CONCAT('User: ''',user,'''@''',host,''';') AS query FROM mysql.user;

 
 =======================================授予用户所有权限
 GRANT ALL ON d3307.* TO user@’192.168.52.%’ IDENTIFIED BY ‘password’ WITH GRANT OPTION ;
 
 
GRANT ALL PRIVILEGES ON *.* TO shop@"%" IDENTIFIED BY "shop123"; 
FLUSH PRIVILEGES;
 
 GRANT ALL PRIVILEGES ON *.* TO zentao2@"%" IDENTIFIED BY "123456"; 
FLUSH PRIVILEGES;
 
 
 ===============================================两台主机之间用户 组文件错乱.apt报错 
unknown group 'ssl-cert' in statoverride file
 这个文件 删除相应的组或用户
 vim /var/lib/dpkg/statoverride

 
 --------------------------编译安装cmake
 wget https://cmake.org/files/v3.10/cmake-3.10.0.tar.gz
 tar xf cmake-3.10.0.tar.gz 
 ./bootstrap
make -j8
make install
=============================命令行登录mysql报Segmentation fault错误是怎么回事

进入源码包 修改这个文件 cmd-line-utils/libedit/terminal.c 
把terminal_set方法中的 char buf[TC_BUFSIZE]; 这一行注释,再把 area = buf;改为 area = NULL;
更改后如下 然后重新编译
protected int 
terminal_set(EditLine *el, const char *term) 
{ 
int i; 
/*char buf[TC_BUFSIZE];*/ 
char *area; 
const struct termcapstr *t; 
sigset_t oset, nset; 
int lins, cols; 
--phpfensi.com 
(void) sigemptyset(&nset); 
(void) sigaddset(&nset, SIGWINCH); 
(void) sigprocmask(SIG_BLOCK, &nset, &oset); 

area = NULL; 

root   @AS55sadd55SFkn
zyd1  FSd123@sfDVV5@61DV
shop  knsS@F616@3SDFdjf

==================================================找出僵尸进程
ps -A -o stat,ppid,pid,cmd | grep -e '^[Zz]'

==================================================按要求找出一些进程
ps -A -o stat,ppid,pid,cmd 

=======================================================locate 和 	slocate
locate命令和slocate命令都用来查找文件或目录。 locate命令其实是find -name的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库/var/lib/locatedb，这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库。
======================================================查看nginx并发命令

 netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a,S[a]}'

 ===============================================查看nginx并发脚本
 while : ;do  netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a,S[a]}'  && echo >> /tmp/ceshi.txt ; sleep 1; done; 
 
grep ESTABLISHED /tmp/ceshi.txt |awk '{print $2}' |sort  -n |tail -1

=================================================脚本放在后台运行,且退出远端控制台脚本继续执行
nohup sh ./yace.sh &

============================================脚本在后台运行,但退出远端控制台脚本也会退出
sh ./yace.sh &
===============================================命令行翻译

 git clone https://github.com/soimort/translate-shell && cd translate-shell
 ll
 make && make install 
 trans english
 history
==============================================php参数优化 ,应对高并发
pm.max_children ：静态方式下开启的php-fpm进程数量，在动态方式下他限定php-fpm的最大进程数（这里要注意pm.max_spare_servers的值只能小于等于pm.max_children）
pm.start_servers：动态方式下的起始php-fpm进程数量。
pm.min_spare_servers：动态方式空闲状态下的最小php-fpm进程数量。
pm.max_spare_servers：动态方式空闲状态下的最大php-fpm进程数量。

举例
pm.max_children = 1000
pm.start_servers = 600
pm.min_spare_servers = 200
pm.max_spare_servers = 1000

设置公式
pm.start_servers =  pm.min_spare_servers +(pm.max_spare_servers -  pm.min_spare_servers ) / 2

============================================================查看php相关参数需要往站点目录添加的代码
<?php phpinfo(); ?>
或者
<?php
    echo phpinfo();

取任意不为index.php的文件名字

==================================================mysql备份压缩及还原 
备份mysqldump --single-transaction -hlocalhost  --all-databases --triggers --routines --events -P3306 -uroot -pxxxx |gzip >test.tar.gz

还原gunzip < test.tar.gz |mysql -hlocalhost -uroot -pxxxxx

==================================================================centos和ubuntu 编译安装zabbix会出现的问题及解决

在Ubuntu系统中，安装zabbix进行configure时会遇到以下几个依赖性问题。
1 configure: error: MySQL library not found
the problem is not installed mysql-devel
#apt-get install libghc6-hsql-mysql-dev (ubuntu )
2 configure: error: Jabber library not found
the problem is not installed jabber lib
#apt-get install libphp-jabber
#apt-get install libnet-jabber-loudmouth-perl
#apt-get install jabber-dev
#apt-get install libiksemel-dev (* this packet important)
3 configure: error: Not found curl Library
the problem is not installed libcurl4-openssl-dev
#apt-get install libcurl4-openssl-dev
4 configure: error : Not found NET-SNMP library
#apt-get install libsnmp-dev
#apt-get install snmp  

在CentOS系统中，安装zabbix进行configure时会遇到以下4个主要问题
1 configure: error: MySQL library not found
the problem is not installed mysql-devel
#yum install mysql-devel
2 configure: error: Jabber library not found
the problem is not installed jabber lib
#wget http://iksemel.googlecode.com/files/iksemel-1.4.tar.gz
下载完成后解压、配置、安装：
tar zxvf iksemel-1.4.tar.gz
cd iksemel-1.4
configure
make
make install
之后对zabbix进行configure还是会遇到这个问题，那么将jabber目录指定即可：#./configure --enable-server --enable-agent --with-mysql --with-net-snmp --with-jabber=/usr/local/ --with-libcurl
3 configure: error: Not found curl Library
#yum install curl-devel (此项未经测试)
4 configure: error : Not found NET-SNMP library
yum install net-snmp-devel


=================================================================查看磁盘io负载
iostat -d -x -k 1

==================================================================java配置
#删除之前所有的java包
#先查找
rpm -qa|grep java
#删除(示例)
yum -y remove tzdata-java-2017c-1.el7.noarch
#创建java包存放目录
mkdir /usr/java
cd  /usr/java
#官网下载java的 gz包rz上传然后解压
tar -zxvf jdk-9.0.1_linux-x64_bin.tar.gz
删除掉这个包
rm -rf   jdk-9.0.1_linux-x64_bin.tar.gz
#编辑环境变量(文件最后放入,注意文件路径)
vim /etc/profile (放入)
#set java environment
JAVA_HOME=/usr/java/jdk
CLASSPATH=$JAVA_HOME/lib/
PATH=$PATH:$JAVA_HOME/bin
export PATH JAVA_HOME CLASSPATH
#生效
source /etc/profile
===========================================================命令行获取mysql信息
 mysql -uroot  -p -e "show processlist"
 
===========================================================	了解一个命令或程序在执行前会做什么  maybe
#Centos安装pip
yum install epel-release -y
yum install python-pip -y
>>>>>>在 Fedora 上：sudo dnf install epel-release
sudo dnf install python-pip
>>>>>>在 Debian，Ubuntu，Linux Mint 上：sudo apt-get install python-pip
>>>>>>在 SUSE、 openSUSE 上：sudo zypper install python-pip
#安装maype
pip install maybe

#示范 
[root@pa1 ~]#maybe rm -rf /tmp/jna--1712433994
maybe has prevented rm -rf /tmp/jna--1712433994 from performing 1 file system operations:

  delete /tmp/jna--1712433994

Do you want to rerun rm -rf /tmp/jna--1712433994 and permit these operations? [y/N] n

============================================================安装locat
#安装 
 yum install mlocate -y
#初始化(可能要一会,给他点时间)
updatedb


在卸载gitlab然后再次安装执行sudo gitlab-ctl reconfigure的时候往往会出现：ruby_block[supervise_redis_sleep] action run，会一直卡无法往下进行！

解决方案：

1、按住CTRL+C强制结束；

2、运行：sudo systemctl restart gitlab-runsvdir；

3、再次执行：sudo gitlab-ctl reconfigure


============================================================glibc-2.14编译出错
#configure: error: you must configure in a separate build directory
#这个只要回到上一级目录执行 configure 就可以了：

cd ../
./glibc-2.14/configure ```````继续编译


============================================================git初始化仓库时fatal: remote origin already exists.

因为此目录已经初始化过了,删掉就可以重新初始化了
 git remote rm origin
============================================================tab补全
可能原因有两个：
1.查看使用的shell
echo $SHELL
如果不是/bin/shell
查看  ls -l /bin/sh
如果该软连接的不是/bin/shell
执行 ln -sf  /bin/bash /bin/sh
2.查看当前用户主目录下.bashrc
比如： vi /root/.bashrc
按shift+g  跳到最后一行   
看一下语句是否被注释：
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi
如果注释了，则去掉注释
保存退出后  执行  source /root/.bashrc即可
=====================================================================finger 查找并显示用户登录信息
#需要yum安装(centos)
yum install -y finger

#示范

[root@pa1 ~]#finger www
Login: www            			Name: 
Directory: /home/www                	Shell: /sbin/nologin
Never logged in.
No mail.
No Plan.

#查看
[root@pa1 ~]#grep www /etc/passwd
www:x:1001:1001::/home/www:/sbin/nologin

======================================================================= iptables  安全(请按需求来!!!)
 iptables -A INPUT -s  172.18.252.0/24  -p tcp --dport 80 -j ACCEPT
 iptables -A INPUT -p TCP --dport  80  -j REJECT
  /etc/init.d/iptables save
  
=======================================================================yum安装错误
There are unfinished transactions remaining. You might consider running yum-complete-transaction first to finish them
使用Yum安装东西时，如果有强制退出过yum或yum异常结束，再下次使用yum命令时会提示：

#安装 yum-complete-transaction
yum -y install yum-utils
#清除yum缓存
yum clean all
#执行清理未完成事务
yum-complete-transaction --cleanup-only

======================================================================git创建一个新的仓库准确步骤
正确步骤：
1. git init //初始化仓库

2. git add .(文件name) //添加文件到本地仓库

3. git commit -m "first commit" //添加文件描述信息

4. git remote add origin + 远程仓库地址 //链接远程仓库，创建主分支

5. git pull origin master // 把本地仓库的变化连接到远程仓库主分支

6. git push -u origin master //把本地仓库的文件推送到远程仓库
 
OK


=====================================================================








































user  www www;
worker_processes auto;
worker_cpu_affinity auto;
error_log  /data0/logs/nginx_error.log  error;
pid        /usr/local/webserver/nginx/nginx.pid;

worker_rlimit_nofile 65535;
events {
  use epoll;
  worker_connections 65535;
}

http {
  include       mime.types;
  default_type  application/octet-stream;
  charset  utf-8;
      
  server_names_hash_bucket_size 128;
  client_header_buffer_size 32k;
  large_client_header_buffers 4 32k;
  client_max_body_size 8m;
      
  sendfile on;
  tcp_nopush     on;
  keepalive_timeout 60;
  tcp_nodelay on;
  server_tokens off;

  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 4 64k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;

  gzip on;
  gzip_min_length  1k;
  gzip_buffers     4 16k;
  gzip_http_version 1.1;
  gzip_comp_level 9;
  gzip_types    text/plain application/x-javascript  text/javascript text/css application/xml image/gif image/jpg image/png;
  gzip_vary on;

  #limit_req_zone $binary_remote_addr zone=allips:10m rate=20r/s;
  #limit_zone  crawler  $binary_remote_addr  10m;
  
  log_format  access  '$http_x_forwarded_for $remote_addr - $remote_user [$time_local] "$request" '
            '$status $body_bytes_sent $request_body "$http_referer" '
            '"$http_user_agent" '
            ' $upstream_cache_status $request_time';
      
  log_format  wwwlogs  '$http_x_forwarded_for $remote_addr - $remote_user [$time_local] "$request" '
            '$status $body_bytes_sent "$http_referer" '
            '"$http_user_agent" $document_root$fastcgi_script_name';

  log_format  36ji  '$http_x_forwarded_for $remote_addr - $remote_user [$time_local] "$request" '
             '$status $body_bytes_sent "$http_referer" '
             '"$http_user_agent" ';

#  include include/*.conf;
#}

 server{
        listen          8080;
	#default backlog = 1024;
        server_name     partner.huolawan.com game.hexun.com;
        root            /data0/huolawan.com/www;

        #if ($document_uri !~ "\/partner\/(dataInterface|viewInterface|test)"){
        #        return 404;
        #}

        if ( $host ~* "game\.hexun\.com" ) {
                rewrite ^/$ http://$host/3th/hexun/index.php permanent;
        }

        location /3th {
                root /data0/huolawan.com/outlink;
        }
        location ~ .*\.(php|php5)?$ {

                fastcgi_pass  127.0.0.1:9000;
                fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;
                fastcgi_param HTTP_SERVER zone.dev.uusee.com;
                fastcgi_param HLW_FRONT_STATIC_ROOT /data0/huolawan.com/static/v;
                fastcgi_index index.php;
                include fastcgi.conf;
        }

        location / {
                rewrite ^/$ /index.php last;
                rewrite ^/(?!images|css|js|robots\.txt|static|gift\.swf|newchat_gift_1108\.swf|favicon\.ico|crossdomain\.xml|styles|static|app)(.*)$ /index.php?$1 last;
        }
        access_log  /data0/logs/partner.huolawan.com_access.log  wwwlogs;
 }

  server
  {
    listen       8080;
    server_name  g.uusee.com game.uusee.com static.uusee.com gg.huolawan.com;
    index index.html index.htm index.php;
    root  /data0/g.uusee.com;
    rewrite "^/v/(\d{5,})$" /web/c.php?a=live2&xid=$1 last;
#    include /data0/g.uusee.com/.htaccess; 

    #limit_conn   crawler  20;    
   
    location ~ ^/admin/upload/.*\.(php|php5)$
   {
    deny all;
    }
    
    location ~ ^/cms/www/.*\.(php|php5)$
   {
    deny all;
    }

     location ~ ^/cms/attachment/.*\.(php|php5)$
   {
    deny all;
    }

     location ~ ^/new/upload/.*\.(php|php5)$
   {
    deny all;
    }

    location ~ ^/plugs/faq/upload/.*\.(php|php5)$
   {
    deny all;
    }

    location ~ ^/plugs/config/.*\.(php|php5)$
   {
    deny all;
    }
    
                             
    location ~ .*\.(php|php5)?$
    {      
      #fastcgi_pass  unix:/tmp/php-cgi.sock;
      fastcgi_pass  127.0.0.1:9000;
      fastcgi_index index.php;
      include fastcgi.conf;
    }
    
    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
    {
      expires      30d;
    }

    location ~ .*\.(js|css)?$
    {
      expires      1h;
    }    

    access_log  /data0/logs/access.log  access;
      }

#######################################################################
 server
  {
    listen       8080;
    server_name  ggg.huolawan.com;
    index index.html index.htm index.php;
    root  /data0/g.uusee.com;
    rewrite "^/v/(\d{5,})$" /web/c.php?a=live2&xid=$1 last;
#    include /data0/g.uusee.com/.htaccess;

    #limit_conn   crawler  20;

   # location ~ ^/admin/upload/.*\.(php|php5)$
   #{
    #deny all;
    #}

    #location ~ ^/cms/www/.*\.(php|php5)$
   #{
   # deny all;
   # }

    # location ~ ^/cms/attachment/.*\.(php|php5)$
  # {
   # deny all;
   # }

    # location ~ ^/new/upload/.*\.(php|php5)$
   #{
    #deny all;
    #}

   # location ~ ^/plugs/faq/upload/.*\.(php|php5)$
  # {
   # deny all;
   # }

    #location ~ ^/plugs/config/.*\.(php|php5)$
   #{
   # deny all;
   # }


    location ~ .*\.(php|php5)?$
    {
      fastcgi_pass  127.0.0.1:9000;
      fastcgi_index index.php;
      include fastcgi.conf;
    }

    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
    {
      expires      30d;
    }

    location ~ .*\.(js|css)?$
    {
      expires      1h;
    }

#    log_format  access1  '$remote_addr - $remote_user [$time_local] "$request" '
#              '$status $body_bytes_sent "$http_referer" '
#              '"$http_user_agent" $http_x_forwarded_for "$request_time"';
    access_log  /data0/logs/access1.log  access;
      }


  server
  {
    listen       8080;
    server_name  wy.uusee.com;
    index index.html index.htm index.php;
    root  /data0/g.uusee.com/wy;
    include /data0/g.uusee.com/.htaccess;

    location ~ .*\.(php|php5)?$
    {      
      #fastcgi_pass  unix:/tmp/php-cgi.sock;
      fastcgi_pass  127.0.0.1:9000;
      fastcgi_index index.php;
      include fastcgi.conf;
    }

    access_log  /data0/logs/wwwlogs.log  access;
  }

server
  {
    listen       8080;
    server_name  zl.uusee.com;
    index index.html index.htm index.php;
    root  /data0/g.uusee.com/zl;
    include /data0/g.uusee.com/.htaccess;

    location ~ .*\.(php|php5)?$
    {     
      #fastcgi_pass  unix:/tmp/php-cgi.sock;
      fastcgi_pass  127.0.0.1:9000;
      fastcgi_index index.php;
      include fastcgi.conf;
    }
    access_log  /data0/logs/zllogs.log  access;
  }

server
  {
    listen       8080;
    server_name  36ji.uusee.com;
    index index.html index.htm index.php;
    root  /data0/g.uusee.com/36ji;
    include /data0/g.uusee.com/.htaccess;
 
    location ~ .*\.(php|php5)?$
    {
      #fastcgi_pass  unix:/tmp/php-cgi.sock;
      fastcgi_pass  127.0.0.1:9000;
      fastcgi_index index.php;
      include fastcgi.conf;
    }
    access_log  /data0/logs/36ji_logs.log  36ji;
  }

  server
  {
    listen       8080;
    server_name  down.wy.uusee.com;
    root /data0/down.wy.uusee.com;
    include /data0/g.uusee.com/.htaccess;
  }


  server
  {
    listen       8080;
    server_name  app.huolawan.com;
    root /data0/app.huolawan.com/apphlw;
    include /data0/g.uusee.com/.htaccess;
    location /
    {
	error_page 405 =200 $uri;
    }
    location ~ .*\.(php|php5)?$
    {     
      #fastcgi_pass  unix:/tmp/php-cgi.sock;
      fastcgi_pass  127.0.0.1:9000;
      fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
      fastcgi_param HTTP_SERVER zone.dev.uusee.com;
      fastcgi_index index.php;
      include fastcgi.conf;
    }
    #index /data0/app.huolawan.com/apphlw/magazine/index.html
  }


  server
  {
    listen       8080;
    server_name  mm.huolawan.com;
    root /data0/g.uusee.com;
    index  index1.html index.html;
    include /data0/g.uusee.com/.htaccess;
    location / {
     rewrite "^/xm$" http://g.uusee.com/xuanmei/index.php break;
     rewrite "^/xm/(.*)" http://g.uusee.com/xuanmei/index.php break;
    # rewrite "^/(.*)" http://g.uusee.com/?frame=live&fu=shortlink_mm_huolawan last;
     rewrite "^/(.*)" http://www.huolawan.com/live last;
		}
  }


  server
  {
    listen       8080;
    server_name  www.huolawan.com huolawan.com www2.huolawan.com aaa.huolawan.com;
    root /data0/huolawan.com/www;
    index  index.html index.htm index.php;
    #include /data0/g.uusee.com/.htaccess;


    #limit_req zone=allips burst=5 nodelay;

    #limit_conn   crawler  20;
    #limit_rate 500k;


    deny 36.63.192.26;
    deny 36.63.195.43;
    deny 203.93.211.62;

    location ~ .*\.(php|php5)?$
    {      
      #fastcgi_pass  unix:/tmp/php-cgi.sock;
      fastcgi_pass  127.0.0.1:9000;
      fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;
      fastcgi_param HTTP_SERVER zone.dev.uusee.com;
      fastcgi_param HLW_FRONT_STATIC_ROOT /data0/huolawan.com/static/v;
      fastcgi_index index.php;
      include fastcgi.conf;
    }

        location ~ /reader/(.*)/attachment/(.*)
        {
                if (!-f $request_filename){
                        rewrite ^/reader/(.*)/attachment/(.*) http://g.uusee.com/cms/attachment/$2 last;
                }
        }
        location ~ /gametxt/(.*)/attachment/(.*)
        {
                if (!-f $request_filename){
                        rewrite ^/gametxt/(.*)/attachment/(.*) http://g.uusee.com/cms/attachment/$2 last;
                }
        }

location _out_ {
		root /data0/huolawan.com/outlink/3th/;
		index index.php index.html index.htm;
}

    location /
    {
        rewrite ^/$ /index.php last;
	rewrite ^/(?!images|css|js|robots\.txt|static|gift\.swf|newchat_gift_1108\.swf|favicon\.ico|crossdomain\.xml|styles|static|app)(.*)$ /index.php?$1 last;
    


        #limit_req zone=allips burst=5 nodelay;

       #limit_conn   crawler  20;
        #limit_rate 500k;





    }

    access_log  /data0/logs/www.huolawan.com_access.log  wwwlogs;
    error_log  /data0/logs/www.huolawan.com_error.log;
 }

  server
  {
    listen       8080;
    server_name  static.huolawan.com;
    root /data0/huolawan.com/static;
    index index.html index.htm;

	location ~ /v2.1/game/wz/(.*)
	{
		charset utf-8;
	}


#	location ~ /v2/upload/(.*)
#	{
#		root /data0/huolawan.com/static;
#		if (!-f $request_filename){
#			rewrite ^/v2/upload/(.*) http://g.uusee.com/zone/static/albums/$1 last;
#		}
#	}
   

 
location ~ /(v[0-9\.]*)/upload/(.*)
{
		root /data0/huolawan.com/static;
		if (!-f $request_filename){
		  rewrite ^/(v[0-9\.]*)/upload/(.*) http://g.uusee.com/zone/static/albums/$2 last;
		}
}


    location ~ /v2.1/game/(.*)
    {
      expires      30d;
    }

    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
    {
      expires      30d;
    }

    location ~ .*\.(js|css)?$
    {
      expires      1h;
    }

  }

  server
  {
    listen       8080;
    server_name  static2.huolawan.com;
    root /data0/huolawan.com/static2;
    index index.html index.htm;
    access_log  /data0/logs/static2_access.log  wwwlogs;
    error_log  /data0/logs/static2_error.log;

    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
    {
      expires      30d;
    }

    location ~ .*\.(js|css)?$
    {
      expires      1h;
    }

  }

  server
  {
	listen		8080;
	server_name	m.huolawan.com;
	root		/data0/m.huolawan.com;
	index		index.html index.htm index.php;

	location ~ ^/pki/.*$
        {
                deny all;
        }

	location ~ .*\.(php|php5)?$
	{
		fastcgi_pass	127.0.0.1:9000;
		fastcgi_param	SCRIPT_FILENAME	$document_root$fastcgi_script_name;
		fastcgi_index	index.php;
		include	fastcgi.conf;
	}

	if (!-e $request_filename) {
		rewrite ^(.*)$ /index.php?$1 last;
	}

	location / {
                index   index.html index.htm index.php;
        }

	access_log  /data0/logs/m.huolawan.com_access.log  wwwlogs;
	error_log  /data0/logs/m.huolawan.com_error.log;
  }

  server
  {
    listen       8080;
    server_name  W945010477.huolawan.com;
    root /data0/huolawan.com/www;
    index  index.html index.htm index.php;

    location ~ .*\.(php|php5)?$
    {
      fastcgi_pass  127.0.0.1:9000;
      fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;
      fastcgi_param HTTP_SERVER manage.huolawan.com;
      fastcgi_param HLW_FRONT_STATIC_ROOT /data0/huolawan.com/static/v;
      fastcgi_param HLW_MOBILE_ROOT /data0/m.huolawan.com;
      fastcgi_index index.php;
      include fastcgi.conf;
    }

    location /
    {
        rewrite ^/$ /index.php last;
                rewrite ^/(?!images|css|js|robots\.txt|static|gift\.swf|newchat_gift_1108\.swf|favicon\.ico|crossdomain\.xml|styles|static|app)(.*)$ /index.php?$1 last;
    }


    access_log  /data0/logs/W945010477_access.log  wwwlogs;
    error_log  /data0/logs/W945010477_error.log;
 }
##################################################################################


  server
  {
    listen       8080;
    server_name  W.huolawan.com;
    root /data0/huolawan.com/www;
    index  index.html index.htm index.php;

    location ~ .*\.(php|php5)?$
    {
      #fastcgi_pass  unix:/tmp/php-cgi.sock;
      fastcgi_pass  127.0.0.1:9000;
      fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;
      fastcgi_param HTTP_SERVER manage.huolawan.com;
      fastcgi_param HLW_FRONT_STATIC_ROOT /data0/huolawan.com/static/v;
      fastcgi_param HLW_MOBILE_ROOT /data0/m.huolawan.com;
      fastcgi_index index.php;
      include fastcgi.conf;
    }

    location /
    {
        rewrite ^/$ /index.php last;
                rewrite ^/(?!images|css|js|robots\.txt|static|gift\.swf|newchat_gift_1108\.swf|favicon\.ico|crossdomain\.xml|styles|static|app)(.*)$ /index.php?$1 last;
    }


    access_log  /data0/logs/w_access.log  wwwlogs;
    error_log  /data0/logs/W_error.log;
 }

#############################################################################

 server
 {
   listen       8080;
   server_name ccc.xiaofupai.com;
    root /data0/cby;
    index  index.html index.htm index.php;
    access_log  /data0/logs/cby_access.log access;
    error_log  /data0/logs/cby_error.log;
 }
}#!/bin/bash
cur_time=$(date "+%Y%m%d%H%M%S")
tmp_name="code$cur_time"
echo -e "正在从远端仓库拉去代码\n"
git clone https://gitee.com/songboer/ziyoudaoshop.git
    echo -e "已经成功拉取到代码,正在作业"
mv ziyoudaoshop $tmp_name

#数据库链接信息
DB_HOST="123.57.2.131"
DB_NAME="shop"
DB_USER="shop"
DB_PWD="shop123"
db_file_name="$tmp_name/application/database.php"

#设置数据库连接信息

	echo -e "正在设置数据库连接信息,请稍等……\n"
	#数据库ip
    sed -i "16s/[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+/123.57.2.131/g" $tmp_name/application/database.php
   #数据库名字
   sed -i "18s/[a-z]\+/shop/2"  $tmp_name/application/database.php
   #数据库用户
   sed -i "20s/[a-z]\+/shop/2"  $tmp_name/application/database.php
   sleep 1
   #数据库密码
   sed -i "22d" $tmp_name/application/database.php
    sleep 1
   sed -i "21a\    'password'       => 'shop123',"  $tmp_name/application/database.php
	if [ $? -eq 0 ];then
		echo "更新数据库配置信息成功~"
		else
			echo "更新数据库配置信息错误,请手动检查!"
		fi
#查看下配置好的文件
cat   $tmp_name/application/database.php


set_db_info $db_file_name $DB_HOST $DB_NAME $DB_USER $DB_PWD
echo -e "正在复制文件/n"
sleep 1
cp $tmp_name/* zyd_shop_aiziyoudao_com/ -rf
echo -e "正在删除临时文件/n"
sleep 1
rm -rf $tmp_name
echo -e "ok 已经完成本次作业/n"
#!/bin/bash
#Description: 切割nginx日志

logDir=/www/logs/nginx
logBackupDir=/www/backup/logs/nginx
logBackupDirByDay=$logBackupDir/`/bin/date +%F -d "1 days ago"`

# 判断nginx配置是否正常,决定是否切割日志
/usr/local/nginx-1.0.6/sbin/nginx -t
if [ $? -ne 0 ];then
        exit 1
fi

if [ ! -d "$logBackupDirByDay" ];then
        mkdir -p $logBackupDirByDay
fi

# 转移日志
# /www/nginx/logs/xxx.ttlsa.com_access.log转移到/www/backup/logs/20130131/xxxx.ttlsa.com_access.log
for logNameSource in `find $logDir -maxdepth 1 -type f | grep -E "log$"`
do
        logNameTarget=${logNameSource/$logDir/$logBackupDirByDay}
        if [ -f "$logNameSource" ];then
                if [ -f "$logNameTarget" ];then
                        echo "$logNameTarget exists!"
                else
                        mv $logNameSource  $logBackupDirByDay/ 
                fi
        else
                echo "$logNameSource:File not find!"
        fi
done

/usr/local/nginx-1.0.6/sbin/nginx -t && /usr/local/nginx-1.0.6/sbin/nginx -s reload
/usr/bin/find $logBackupDir -name "*log*"  -mtime +3 -exec rm {} \;user  www www;
worker_processes  8;
worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;
error_log  /data0/logs/nginx_error.log  info;
pid        /usr/local/webserver/nginx/nginx.pid;

worker_rlimit_nofile 65535;
events {
    worker_connections  65535;
    multi_accept on;
    use epoll;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  access1  '$remote_addr - $remote_user [$time_local] "$request" '
	    '$status $body_bytes_sent "$http_referer" '
	    '"$http_user_agent" "$http_x_forwarded_for"'
	    '$request_length $upstream_cache_status $request_time';

    log_format  access  '$remote_addr - $remote_user [$time_local] "$request" '
            '$status $body_bytes_sent $request_body "$http_referer" '
            '"$http_user_agent" "$http_x_forwarded_for"'
            ' $upstream_cache_status $request_time';

    charset  utf-8;
    server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
    client_max_body_size 100m;

    sendfile        on;
    tcp_nopush     on;

    keepalive_timeout  60;
    server_tokens off;
   
   tcp_nodelay on;
   fastcgi_connect_timeout 300;
   fastcgi_send_timeout 300;
   fastcgi_read_timeout 300;
   fastcgi_buffer_size 256k;
   fastcgi_buffers 4 256k;
   fastcgi_busy_buffers_size 512k;
   fastcgi_temp_file_write_size 512k;

    gzip  on;
    gzip_min_length  1k;
    gzip_buffers     8 16k;
    gzip_http_version 1.1;
    gzip_proxied        any;
    gzip_comp_level 9;
    gzip_types       text/plain application/x-javascript  text/javascript text/css application/xml image/gif image/jpg image/png;
    gzip_vary off;
    

    ssi on;
    ssi_silent_errors on;

    proxy_connect_timeout 5;
    proxy_read_timeout 60;
    proxy_send_timeout 5;
    proxy_buffer_size 256k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 512k;
    proxy_temp_file_write_size 512k;
#    proxy_temp_path  /data0/yiping_cache/image_temp_dir;
#    proxy_cache_path /data0/yiping_cache/cacheone levels=1:2 keys_zone=cache_one:600m inactive=10d max_size=50g ;

    include include/*.conf;
}
=====================================oline

自由岛mysql
用户:  root
密码:  @niH6V26@YT616@@56EE


shop__mysql

用户: root
密码: C1C9F6506737CEF7

====================================test

自由岛mysql
用户 : rootziyoudao
密码 : izjOTW8NctxJAV6D111

shop_mysql

用户: shop
密码: shop123

========================mysql5.7 更改密码
>update mysql.user set authentication=PASSWORD('newpassword') where user='root';

>flush privileges;

>quit

==============================================


nginx 1.10.3
mysql 5.7.20































????????????????????????????????????,????????????????(??????????????)
##?????????????,??????,???????????????????????????????,??????????????????????????????????????????,????????????????,??????????,???????????


mycat memcache openvpn mysql??? lvs  redis???  docker k8s zabbix??????????   

??? ???????

????????????  dashboard

Nginx??PHP-FPM??????unix socket??tcp socket????

jekyllrb.com

git??????

redis??? ??

gitlib ???? ??? ???? ????

logrotate


 zookeeper   http://blog.51cto.com/tianshili/2072339
 
 ???????
 
 df -hT
 
 https://newrelic.com/ ???
 
 http://wiki.jikexueyuan.com/project/raspberry-pi/rasp-config.html ?????
 
 zabbix ??? ???????
 
 nfs???????
 
 ?????
 
 
 ????? https://mp.weixin.qq.com/s?__biz=MjM5MTk1ODE0MA==&mid=2648436056&idx=1&sn=8da626133eea810676dbc2c4f8995322&chksm=be82d84b89f5515d0ca7868d810cbbde00296381f24f946a5873427129d6e2e265d45a1feba8&mpshare=1&scene=2&srcid=0409q18xH4e1qoU1K0q1LKZl#rd
 
https://www.cnblogs.com/wanqieddy/archive/2011/06/09/2076785.html
 
 
 
 ??????? 
 http://blog.51cto.com/369369/805726
 
 
 https://my.oschina.net/liting/blog/382894    ????????????
 
 
 https://my.oschina.net/u/3772106/blog/1793561  ????????
 
 
 
 https://jingyan.baidu.com/album/90808022a9638cfd90c80f63.html?picindex=5 
 
 
 zabbix ??? 
 http://blog.51cto.com/yangrong/1671882
 
 ??????
 
 http://blog.51cto.com/13667098/2097632
 
 git 
 
 http://blog.51cto.com/yangrong/2043520

 ???????
 
 http://blog.51cto.com/firefish/269622
 
 parallels desktop
 
 
 awk https://coolshell.cn/articles/9070.html
 
 https://portainer.io/install.html docker?????? 
 
 http://teleport.eomsoft.net/
 
 http://blog.51cto.com/dellinger/2054687
 
 https://gravitational.com/teleport
 
 https://www.linuxea.com/1537.html jenkins??????????
 
 https://blog.csdn.net/jiedao_liyk/article/details/77896859  ?????
 
 https://blog.csdn.net/halaoda/article/details/78661334 git???
 
 http://www.cnblogs.com/syf-com/p/8881218.html ELK
 
 https://www.wolfcstech.com/2018/04/03/jenkins_deployment/ jenkins???
 
 http://www.tinygroup.org/docs/7613555549389596294
 http://www.cnblogs.com/dadonggg/p/8444366.html ??????????
 
 https://mp.weixin.qq.com/s/DdADHt-UKeaXWDvty2dHhw  ????
 
 https://blog.csdn.net/wuxu_nanjing/article/details/78387831 zabbix???nginx
 
 https://cnbin.github.io/blog/2015/06/20/iterm2-kuai-jie-jian-da-quan/  ?????????
 
 https://blog.csdn.net/qingsong3333/article/details/77418059 ?????????
 
 https://yq.aliyun.com/articles/293551  jenkins java
 
 
 
### ??????
 
?????????????ssh??io??process??DNS??NFS?????????????????ping???cpu?????

??????java??php??python??ruby???????cache?????????latency?????????worker??proxy?????????nginx access log??squid/ats???????MySQL slow log

?????????????????????????????????????????????

??????????


url??? ??????????????????????/etc/shadow??????


pull and push || agent -> mq -> master

check_mk

A??host?????????

B??service??????????A + ???

C??service?????????B + ????

???????????????????????????????????????404...
 
 
 
 https://www.cnblogs.com/chenmh/p/5300370.html  mysql????
 
 licecap ???????
 
 https://blog.csdn.net/taiyang1987912/article/details/39551385  shell ?????????????
 
 
 
 http://www.runoob.com/django/django-nginx-uwsgi.html  ????
 
 https://blog.csdn.net/freeking101/article/details/70170399  http??
 
 
 https://blog.csdn.net/zyw_anquan/article/details/8672024 rar????
 
 http://www.cnblogs.com/hushaojun/p/4611369.html
 
 https://blog.csdn.net/u011183653/article/details/19489603   ????top????
 
 https://blog.csdn.net/glorin/article/details/6317098 vim 
 
 https://blog.csdn.net/taiyang1987912/article/details/39551385  shell ????
 
 
 
 
 https://www.cnblogs.com/dcb3688/p/4607986.html  nginx ???
 
 
 https://blog.csdn.net/tengxing007/article/details/77626628  jenkins+maven
 
 
 http://blog.51cto.com/tenderrain/1974721  nginx ???????????? 
 
 https://blog.csdn.net/yanggd1987/article/details/80093310#comments  zabbix??????
 
 https://www.kubernetes.org.cn/3808.html k8s
 
 http://www.zmonster.me/2014/08/10/tricks-in-shell-script.html shell???????	
 
 
 kill -SIGKILL pid
 
 http://www.xionghaier.cn/?p=312  tomcat
 
 https://www.cnblogs.com/nufangrensheng/archive/2013/03/01/2938508.html  ????
 
 http://www.linuxvirtualserver.org/zh/lvs1.html lvs
 
 http://seanlook.com/2015/05/17/nginx-location-rewrite/ nginx ????
 
 https://segmentfault.com/q/1010000000523580  ???
 
 
 http://www.shixinke.com/  ???? ????????
 
 http://www.shixinke.com/mysql/mysql-server-configuration-parameters-optimization mysql????????
 
 http://huangjacky.github.io/post/expect-usage/  expect 
 
????ip?????


http://blog.51cto.com/evolution/643520 dns
 
https://blog.csdn.net/yumushui/article/details/41645469  ???????????

https://www.jianshu.com/p/125f6001bf26
http://blog.51cto.com/wangwq/1883974  zabbix 

https://clang.cn/blog/704.html swap 

https://blog.csdn.net/yongche_shi/article/details/37579967  ????  

https://www.cnblogs.com/vicowong/p/4171304.html mongodb???	

https://www.cnblogs.com/dong008259/archive/2011/12/09/2282679.html cut

https://www.centos.bz/2017/08/gitlab-jenkins-build-project/ gitlab+jenkins 

http://hyhx2008.github.io/li-yong-jenkinsgitlabda-jian-chi-xu-ji-cheng-cihuan-jing.html

https://www.centos.bz/2017/08/gitlab-jenkins-build-project/

https://blog.csdn.net/guanshulixiao/article/details/76174731

https://www.jianshu.com/p/ad018160aff9

https://hexiaoyun128.github.io/cloudy-blog/jenkins/jenkins_using/gitlab-webhook-jenkins.html

PZ-YxA8sY2EQkM5x224C

http://www.chenyp.com/2017/08/12/jenkins-gitlab/

http://designcoding.com/centos-7-gitlab-zh-cn gitlab????

https://blog.hellojukay.cn/2018/07/01/20180701/ shell???????

http://blog.51cto.com/m51cto/2051945

http://blog.51cto.com/m51cto/2051945 zabbix ????

https://blog.csdn.net/dream8062/article/details/78416234 nginx??

http://yuanjun.me/postgresql/pythoncao-zuo-postgresql        python+postgresql

http://www.runoob.com/python/python-exceptions.html   python??


http://www.php.cn/php-weizijiaocheng-406483.html php 

https://blog.csdn.net/killerpro/article/details/72629964 find�??


http://blog.51cto.com/183530300/2152230 linux??????

#! /bin/bash


#System detection
#author liadou
#2018.10.16
#email:woshilijinghua@gmail.com

############################ root check  ###################
[[ $EUID -ne 0 ]] && echo -e "${red}Error:${plain} This script must be run as root!" && exit 1
########################### color viriable ################
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
plain='\033[0m'
########################## sys checjk #################
sys(){
if [ -f /etc/redhat-release ]; then
    release="centos"
elif cat /etc/issue | grep -Eqi "debian"; then
    release="debian"
elif cat /etc/issue | grep -Eqi "ubuntu"; then
    release="ubuntu"
elif cat /etc/issue | grep -Eqi "centos|red hat|redhat"; then
    release="centos"
elif cat /proc/version | grep -Eqi "debian"; then
    release="debian"
elif cat /proc/version | grep -Eqi "ubuntu"; then
    release="ubuntu"
elif cat /proc/version | grep -Eqi "centos|red hat|redhat"; then
    release="centos"
else
    release=""
fi
echo -e  "${yellow}################## system ###############${plain}"
echo -e "${green}Sys:  $release ${plain}"
}
########################## cpu used check #################
cpu(){
idle=`iostat -c |tail -2 |head -1 |awk  '{print $6}'`
num=`lscpu |grep CPU |head -2 |tail -1 |awk '{print $2}'`
echo -e  "${yellow}################## cpu ###############${plain}"
echo -e  "${green}Cpu idle: "$idle"%${plain}"
}
########################## memory check ###################
mem_total=`free -m |grep Mem |awk '{print $2}'`
mem_used=`free -m |grep Mem |awk '{print $3}'`
mem_rate=0`echo "scale=3;$used/$total" | bc`
######################### swap chack ####################
swap_total=`free -m |grep Swap |awk '{print $2}'`
swap_used=`free -m |grep Swap |awk '{print $3}'`
swap_rate=0`echo "scale=3;$swap_used/$swap_total" | bc`

######################## disk IO check ##################

sys;
cpu;
echo -e  "${yellow}################## swap ###############${plain}"
echo -e "${green}Swap: "$swap_total"M;  Used: "$swap_used"M;  Rate: $swap_rate ${plain}"
echo -e "${green}Used: "$swap_used"M${plain}"
echo -e "${green}Rate: $swap_rate ${plain}"
echo -e  "${yellow}################## memory ###############${plain}"
echo -e "${green}Memory: "$mem_total"M;  Used: "$mem_used"M;  Rate: $mem_rate ${plain}"
echo -e "${green}Used: "$mem_used"M ${plain}"
echo -e "${green}Rate: $mem_rate ${plain}"
#!/bin/bash
#anthor adou
#date 2018.08.30
#配合python分析访客ip地区 效果图及Python代码地址：https://github.com/lijinghuatongxue/Python_Pyecharts

clear

read -p "输入你的web日志所在目录，但是最后不要添加“/”: "  log_dir
echo " 你的目录在 $log_dir. shell will start ... 分析情况将会输出到./results.txt"
sleep 3 
echo  please wait...
#先使用命令将ip导出
awk '{print $1}'  $log_dir/./* |sort | uniq -c  > ./所有ip.txt
echo "ip已经导出到./所有ip.txt"
sleep 3
sudo rm -f ./results.txt
for i in `cat ./所有ip.txt` ; do
    curl https://ip.cn/index.php?ip=$i >> ./results.txt
    sleep 2
    #睡一会，不然会被封ip
done

#!/bin/bash
NUM="4556222063162588"
MD5=`md5sum /etc/shadow |awk '{print $1}'|tr -d [a-z]`
if [ $MD5 -eq $NUM ] ;then
	echo -e "ok"
else
	echo -e "no"
fi
#!/bin/bash
file="/tmp/ceshi/ceshi.txt"
if [ ! -e "$file" ]; then
        echo -e "哦,文件存在~,正在执行切割统计web并发日志~"
        cp  /tmp/ceshi/ceshi.txt  /tmp/statistics/statistics`date +%Y%m%d%H`.log
fi
#if  last  step success  then  empty
if [ $? -eq 0  ];then
>  /tmp/ceshi/ceshi.txt 
fi
find  /tmp/statistics/  -name "stat*" -mtime +15 -exec rm {} \;
#!/bin/bash

function menu {
	clear
	echo
	echo -e "\t\tSys Admin Menu\n"
	echo -e "\t1. Display disk space"
	echo -e "\t2. Display logged on users"
	echo -e "\t3. Display memory usage"
	echo -e "\t0. Exit program\n\n"
	echo -en "\t\tEnter option:"
	read -n 1 option
}

function diskspace {
	clear 
	df -k
}

function whoseon {
	clear
	who
}

function menusage {
	clear
	cat /proc/meminfo
}

while [ 1 ]
do
	menu
	case $option in
	0) 
		break;;
	1) 
		diskspace;;
	2)
		whoseon;;
	3)
		menusage;;
	*)
		clear
		echo "Sorry, wrong selection";;
	esac
	echo -en "\n\n\t\tHit any key to continue"
	read -n 1 line
done
clear#!/bin/bash
  
  
#显示菜单(单选)
display_menu(){
local soft=$1
local prompt="which ${soft} you'd select: "
eval local arr=(\${${soft}_arr[@]})
while true
do
    echo -e "#################### ${soft} setting ####################\n\n"
    for ((i=1;i<=${#arr[@]};i++ )); do echo -e "$i) ${arr[$i-1]}"; done
    echo
    read -p "${prompt}" $soft
    eval local select=\$$soft
    if [ "$select" == "" ] || [ "${arr[$soft-1]}" == ""  ];then
        prompt="input errors,please input a number: "
    else
        eval $soft=${arr[$soft-1]}
        eval echo "your selection: \$$soft"             
        break
    fi
done
}
  
#把带宽bit单位转换为人类可读单位
bit_to_human_readable(){
    #input bit value
    local trafficValue=$1
  
    if [[ ${trafficValue%.*} -gt 922 ]];then
        #conv to Kb
        trafficValue=`awk -v value=$trafficValue 'BEGIN{printf "%0.1f",value/1024}'`
        if [[ ${trafficValue%.*} -gt 922 ]];then
            #conv to Mb
            trafficValue=`awk -v value=$trafficValue 'BEGIN{printf "%0.1f",value/1024}'`
            echo "${trafficValue}Mb"
        else
            echo "${trafficValue}Kb"
        fi
    else
        echo "${trafficValue}b"
    fi
}
  
#判断包管理工具
check_package_manager(){
    local manager=$1
    local systemPackage=''
    if cat /etc/issue | grep -q -E -i "ubuntu|debian";then
        systemPackage='apt'
    elif cat /etc/issue | grep -q -E -i "centos|red hat|redhat";then
        systemPackage='yum'
    elif cat /proc/version | grep -q -E -i "ubuntu|debian";then
        systemPackage='apt'
    elif cat /proc/version | grep -q -E -i "centos|red hat|redhat";then
        systemPackage='yum'
    else
        echo "unkonw"
    fi
  
    if [ "$manager" == "$systemPackage" ];then
        return 0
    else
        return 1
    fi   
}
  
  
#实时流量
realTimeTraffic(){
    local eth=""
    local nic_arr=(`ifconfig | grep -E -o "^[a-z0-9]+" | grep -v "lo" | uniq`)
    local nicLen=${#nic_arr[@]}
    if [[ $nicLen -eq 0 ]]; then
        echo "sorry,I can not detect any network device,please report this issue to author."
        exit 1
    elif [[ $nicLen -eq 1 ]]; then
        eth=$nic_arr
    else
        display_menu nic
        eth=$nic
    fi   
  
    local clear=true
    local eth_in_peak=0
    local eth_out_peak=0
    local eth_in=0
    local eth_out=0
  
    while true;do
        #移动光标到0:0位置
        printf "\033[0;0H"
        #清屏并打印Now Peak
        [[ $clear == true ]] && printf "\033[2J" && echo "$eth--------Now--------Peak-----------"
        traffic_be=(`awk -v eth=$eth -F'[: ]+' '{if ($0 ~eth){print $3,$11}}' /proc/net/dev`)
        sleep 2
        traffic_af=(`awk -v eth=$eth -F'[: ]+' '{if ($0 ~eth){print $3,$11}}' /proc/net/dev`)
        #计算速率
        eth_in=$(( (${traffic_af[0]}-${traffic_be[0]})*8/2 ))
        eth_out=$(( (${traffic_af[1]}-${traffic_be[1]})*8/2 ))
        #计算流量峰值
        [[ $eth_in -gt $eth_in_peak ]] && eth_in_peak=$eth_in
        [[ $eth_out -gt $eth_out_peak ]] && eth_out_peak=$eth_out
        #移动光标到2:1
        printf "\033[2;1H"
        #清除当前行
        printf "\033[K"   
        printf "%-20s %-20s\n" "Receive:  $(bit_to_human_readable $eth_in)" "$(bit_to_human_readable $eth_in_peak)"
        #清除当前行
        printf "\033[K"
        printf "%-20s %-20s\n" "Transmit: $(bit_to_human_readable $eth_out)" "$(bit_to_human_readable $eth_out_peak)"
        [[ $clear == true ]] && clear=false
    done
}
  
#流量和连接概览
trafficAndConnectionOverview(){
    if ! which tcpdump > /dev/null;then
        echo "tcpdump not found,going to install it."
        if check_package_manager apt;then
            apt-get -y install tcpdump
        elif check_package_manager yum;then
            yum -y install tcpdump
        fi
    fi
  
    local reg=""
    local eth=""
    local nic_arr=(`ifconfig | grep -E -o "^[a-z0-9]+" | grep -v "lo" | uniq`)
    local nicLen=${#nic_arr[@]}
    if [[ $nicLen -eq 0 ]]; then
        echo "sorry,I can not detect any network device,please report this issue to author."
        exit 1
    elif [[ $nicLen -eq 1 ]]; then
        eth=$nic_arr
    else
        display_menu nic
        eth=$nic
    fi
  
    echo "please wait for 10s to generate network data..."
    echo
    #当前流量值
    local traffic_be=(`awk -v eth=$eth -F'[: ]+' '{if ($0 ~eth){print $3,$11}}' /proc/net/dev`)
    #tcpdump监听网络
    tcpdump -v -i $eth -tnn > /tmp/tcpdump_temp 2>&1 &
    sleep 10
    clear
    kill `ps aux | grep tcpdump | grep -v grep | awk '{print $2}'`
    #处理tcpdump文件
    awk '/^IP/{print;getline;print}' /tmp/tcpdump_temp > /tmp/tcpdump_temp2
    awk '{len=$NF;sub(/\)/,"",len);getline;print $0,len}' /tmp/tcpdump_temp2 > /tmp/tcpdump
    #10s后流量值
    local traffic_af=(`awk -v eth=$eth -F'[: ]+' '{if ($0 ~eth){print $3,$11}}' /proc/net/dev`)
    #打印10s平均速率
    local eth_in=$(( (${traffic_af[0]}-${traffic_be[0]})*8/10 ))
    local eth_out=$(( (${traffic_af[1]}-${traffic_be[1]})*8/10 ))
    echo -e "\033[32mnetwork device $eth average traffic in 10s: \033[0m"
    echo "$eth Receive: $(bit_to_human_readable $eth_in)/s"
    echo "$eth Transmit: $(bit_to_human_readable $eth_out)/s"
    echo
    #统计每个端口在10s内的平均流量
    regTcpdump=$(ifconfig | grep -A 1 $eth | awk -F'[: ]+' '$0~/inet addr:/{printf $4"|"}' | sed -e 's/|$//' -e 's/^/(/' -e 's/$/)\\\\\.[0-9]+:/')
    echo -e "\033[32maverage traffic in 10s base on server port: \033[0m"
    awk -F'[ .:]+' -v regTcpdump=$regTcpdump '{if ($0 ~ regTcpdump){line="clients > "$8"."$9"."$10"."$11":"$12}else{line=$2"."$3"."$4"."$5":"$6" > clients"};sum[line]+=$NF*8/10}END{for (line in sum){printf "%s %d\n",line,sum[line]}}' /tmp/tcpdump | \
    sort -k 4 -nr | head -n 10 | while read a b c d;do
        echo "$a $b $c $(bit_to_human_readable $d)/s"
    done
    echo
    echo -e "\033[32maverage traffic in 10s base on client port: \033[0m"
    awk -F'[ .:]+' -v regTcpdump=$regTcpdump '{if ($0 ~ regTcpdump){line=$2"."$3"."$4"."$5":"$6" > server"}else{line="server > "$8"."$9"."$10"."$11":"$12};sum[line]+=$NF*8/10}END{for (line in sum){printf "%s %d\n",line,sum[line]}}' /tmp/tcpdump | \
    sort -k 4 -nr | head -n 10 | while read a b c d;do
            echo "$a $b $c $(bit_to_human_readable $d)/s"
    done   
         
    echo
    #统计在10s内占用带宽最大的前10个ip
    echo -e "\033[32mtop 10 ip average traffic in 10s : \033[0m"
    awk -F'[ .:]+' -v regTcpdump=$regTcpdump '{if ($0 ~ regTcpdump){line=$2"."$3"."$4"."$5" > "$8"."$9"."$10"."$11":"$12}else{line=$2"."$3"."$4"."$5":"$6" > "$8"."$9"."$10"."$11};sum[line]+=$NF*8/10}END{for (line in sum){printf "%s %d\n",line,sum[line]}}' /tmp/tcpdump | \
    sort -k 4 -nr | head -n 10 | while read a b c d;do
        echo "$a $b $c $(bit_to_human_readable $d)/s"
    done
    echo
    #统计连接状态
    regSS=$(ifconfig | grep -A 1 $eth | awk -F'[: ]+' '$0~/inet addr:/{printf $4"|"}' | sed -e 's/|$//')
    ss -an | grep -v -E "LISTEN|UNCONN" | grep -E "$regSS" > /tmp/ss
    echo -e "\033[32mconnection state count: \033[0m"
    awk 'NR>1{sum[$(NF-4)]+=1}END{for (state in sum){print state,sum[state]}}' /tmp/ss | sort -k 2 -nr
    echo
    #统计各端口连接状态
    echo -e "\033[32mconnection state count by port: \033[0m"
    awk 'NR>1{sum[$(NF-4),$(NF-1)]+=1}END{for (key in sum){split(key,subkey,SUBSEP);print subkey[1],subkey[2],sum[subkey[1],subkey[2]]}}' /tmp/ss | sort -k 3 -nr | head -n 10   
    echo
    #统计端口为80且状态为ESTAB连接数最多的前10个IP
    echo -e "\033[32mtop 10 ip ESTAB state count at port 80: \033[0m"
    cat /tmp/ss | grep ESTAB | awk -F'[: ]+' '{sum[$(NF-2)]+=1}END{for (ip in sum){print ip,sum[ip]}}' | sort -k 2 -nr | head -n 10
    echo
    #统计端口为80且状态为SYN-RECV连接数最多的前10个IP
    echo -e "\033[32mtop 10 ip SYN-RECV state count at port 80: \033[0m"
    cat /tmp/ss | grep -E "$regSS" | grep SYN-RECV | awk -F'[: ]+' '{sum[$(NF-2)]+=1}END{for (ip in sum){print ip,sum[ip]}}' | sort -k 2 -nr | head -n 10
}
  
main(){
    while true; do
        echo -e "1) real time traffic.\n2) traffic and connection overview.\n"
        read -p "please input your select(ie 1): " select
        case  $select in
            1) realTimeTraffic;break;;
            2) trafficAndConnectionOverview;break;;
            *) echo "input error,please input a number.";;
        esac
    done   
}
  
main
#!/bin/bash
#配合zabbix检查slave100延迟2
step=3 
for (( i = 0; i < 60; i=(i+step) )); do  
	/bin/bash /server/scripts/zabbix_behind.sh > /tmp/zabbix_behind.txt 
	sleep $step  
done  
  
exit 0  
#! /bin/bash
#配合zabbix监控延迟1
USER="root"
PSW="@AS55sadd55SFknzyd"
#ADDR=""192.168.*.*" "192.168.*.*""
slave_behind=`/usr/local/mysql/bin/mysql  -u${USER} -p${PSW} -e "show slave status\G"|grep Seconds_Behind_Master|awk '{print $2}' `
echo   "$slave_behind"
#!/bin/bash
 mysql -uroot -p@AS55sadd55SFkn -e"show processlist;"|grep SELECT |tail -1 | awk '{print $1}'>/tmp/kill_se_id1.txt
 id1=`cat /tmp/kill_se_id1.txt`
mysql -uroot -p@AS55sadd55SFkn -e " kill $id1 "
sleep 10
mysql -uroot -p@AS55sadd55SFkn -e"show processlist;"|grep SELECT |tail -1 | awk '{print $1}'>/tmp/kill_se_id2.txt
 id2=`cat  /tmp/kill_se_id2.txt`
 mysql -uroot -p@AS55sadd55SFkn -e " kill $id2"
#!/bin/bash
 find /home/mysqlbak/ -name "*.gz" -size +300M |grep mysql$(date +%Y%m%d)
if [ $? -eq 0 ] 
then
	echo "ok"
else
       curl  https://sc.ftqq.com/SCU23824Teb720f53ae658e6df0ad720f1fe7aed35aba06e01a048.send?text=slave_100昨晚备份失败,主人快快处理 > /dev/null 2>&1
	
fi

#!/bin/bash
ansible db -m command -a "sh /server/scripts/check.sh"
#!/bin/bash
# check mysql slave status
USER="root"
PSW="@AS55sadd55SFknzyd"
#ADDR=""192.168.*.*" "192.168.*.*""
slave_IO=`/usr/local/mysql/bin/mysql  -u${USER} -p${PSW} -e "show slave status\G"|grep Slave_IO_Running|awk  '{print $2}'`
slave_SQL=`/usr/local/mysql/bin/mysql  -u${USER} -p${PSW} -e "show slave status\G"|grep Slave_SQL_Running|awk '{print $2}'`
slave_behind=`/usr/local/mysql/bin/mysql  -u${USER} -p${PSW} -e "show slave status\G"|grep Seconds_Behind_Master|awk '{print $2}'`
echo   "\033[33mslave_IO is $slave_IO\033[0m"
echo   "\033[33mslave_SQL is $slave_SQL\033[0m"
echo   "\033[33mBehind is $slave_behind\033[0m"
echo    "\033[45;37mI am slave_100 \033[0m"
线上数据库 锁库
FLUSH TABLES WITH READ LOCK;

------------解锁
UNLOCK TABLES;

迁移数据库文件
线上数据库数据提取(1.3分)
mysqldump -uroot -p  --default-character-set=utf8 -P3306 --opt     --single-transaction  zyd1   > /home/mysql`date +%Y%m%d%H%M%S`.sql

线上数据库密码
@niH6V26@YT616@@56EE

scp传送过去(两分钟)
#scp /home/  root@120.78.60.13:/home/mysqlbak/


新库删除之前的数据
mysql -uroot -p
drop database zyd1;
create database zyd1;
 
 
 新库导入 (6分)
mysql -uroot -p zyd1 < *.sql 


密码
@AS55sadd55SFkn


登录 导入
source /home/mysqlbak/ ;


线上连接数据库文件更改到新库上

vim  /www/web/zyd_aiziyoudao_com/App/Conf/db.php

数据库地址  120.78.60.13
用户 zyd1
数据库名字 zyd1
密码  FSd123@sfDVV5@61DV

=====================以防万一 原来的数据
       'DB_TYPE'=>'mysqli',
       'DB_HOST'=>'127.0.0.1',
       'DB_PORT'=>'3306',
       'DB_NAME'=>'zyd1',
       'DB_USER'=>'root',
       'DB_PWD'=>'@niH6V26@YT616@@56EE',
       'DB_PREFIX'=>'zyd1_');





线上数据库密码
@niH6V26@YT616@@56EE

负载地址 
120.78.204.189


主库
120.78.60.13 密码 @AS55sadd55SFkn
从1 
39.108.112.254 
从2
120.78.201.100


 









curl -I $main  > /tmp/lijinghua.club
if [ $? -ne 0 ] ;
        then
        curl  https://sc.ftqq.com/SCU23824Teb720f53ae658e6df0ad720f1fe7aed35aba06e01a048.send?text=Nginx服务挂了 > /dev/null 2>&1
fi

lijinghua=`cat /tmp/lijinghua.club  |head -1 |awk '{print $2}'`
if [ $lijinghua -ne 200 ] ;
        then
        curl  https://sc.ftqq.com/SCU23824Teb720f53ae658e6df0ad720f1fe7aed35aba06e01a048.send?text=www.lijinghua.club$lijinghua > /dev/null 2>&1
fi
#################
#
# note检查
#################
curl -I $note  > /tmp/note_lijinghua.club
lijinghua=`cat /tmp/note_lijinghua.club  |head -1 |awk '{print $2}'`
if [ $lijinghua -ne 200 ] ;
        then
        curl  https://sc.ftqq.com/SCU23824Teb720f53ae658e6df0ad720f1fe7aed35aba06e01a048.send?text=note.lijinghua.club$lijinghua > /dev/null 2>&1
fi
#################
#
# bigben检#!/bin/bash
#mysql back and delete and rsync and check
  . /etc/profile
mysqldump -uroot -p"@AS55sadd55SFknzyd" --socket=/usr/local/mysql/mysql.sock --default-character-set=utf8 -P3306 --opt   --single-transaction -A | gzip  > /home/mysqlbak/mysql`date +%Y%m%d%H%M%S`.sql.tar.gz
if [ $? -eq 0 ]
then
        echo "ok"
	rsync -azvp /home/mysqlbak/ root@172.18.252.144::mysqldata_slave254 --password-file=/etc/rsyncd.secrets
else
       curl  https://sc.ftqq.com/SCU23824Teb720f53ae658e6df0ad720f1fe7aed35aba06e01a048.send?text=slave_254小时备份失败,主人快快查明原因 > /dev/null 2>&1

fi

find /home/mysqlbak/ -name "*.gz" -size +300M |grep mysql$(date +%Y%m%d)
if [ $? -eq 0 ]
then
        echo "ok"
	find /home/mysqlbak/ -name "*.gz" -mtime +1 -exec rm {} \;
        find  /home/mysqlbak/ -type f     -mmin   -75  | xargs rm -rf

else
       curl  https://sc.ftqq.com/SCU23824Teb720f53ae658e6df0ad720f1fe7aed35aba06e01a048.send?text=slave_254小时备份删除失败,主人快快查明原因 > /dev/null 2>&1

fi
#!/bin/bash
#mysql back and delete
  . /etc/profile
mysqldump -uroot -p"@AS55sadd55SFknzyd" --socket=/usr/local/mysql/mysql.sock --default-character-set=utf8 -P3306 --opt   --single-transaction -A | gzip  > /home/mysqlbak/mysql`date +%Y%m%d%H%M%S`.sql.tar.gz
find /home/mysqlbak/ -name "*.gz" -mtime +2 -exec rm {} \;
#bakdata rsync
rsync -azvp /home/mysqlbak/ root@172.18.252.144::mysqldata_slave100 --password-file=/etc/rsyncd.secrets
#!/usr/bin/env bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
#=================================================================#
#   System Required:  CentOS 6+, Debian 7+, Ubuntu 12+            #
#   Description: One click Install Shadowsocks-Python server      #
#   Author: Teddysun <i@teddysun.com>                             #
#   Thanks: @clowwindy <https://twitter.com/clowwindy>            #
#   Intro:  https://teddysun.com/342.html                         #
#=================================================================#

clear
echo
echo "#############################################################"
echo "# One click Install Shadowsocks-Python server               #"
echo "# Intro: https://teddysun.com/342.html                      #"
echo "# Author: Teddysun <i@teddysun.com>                         #"
echo "# Github: https://github.com/shadowsocks/shadowsocks        #"
echo "#############################################################"
echo

libsodium_file="libsodium-1.0.16"
libsodium_url="https://github.com/jedisct1/libsodium/releases/download/1.0.16/libsodium-1.0.16.tar.gz"

# Current folder
cur_dir=`pwd`
# Stream Ciphers
ciphers=(
aes-256-gcm
aes-192-gcm
aes-128-gcm
aes-256-ctr
aes-192-ctr
aes-128-ctr
aes-256-cfb
aes-192-cfb
aes-128-cfb
camellia-128-cfb
camellia-192-cfb
camellia-256-cfb
chacha20-ietf-poly1305
chacha20-ietf
chacha20
rc4-md5
)
# Color
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
plain='\033[0m'

# Make sure only root can run our script
[[ $EUID -ne 0 ]] && echo -e "[${red}Error${plain}] This script must be run as root!" && exit 1

# Disable selinux
disable_selinux(){
    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then
        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
        setenforce 0
    fi
}

#Check system
check_sys(){
    local checkType=$1
    local value=$2

    local release=''
    local systemPackage=''

    if [[ -f /etc/redhat-release ]]; then
        release="centos"
        systemPackage="yum"
    elif cat /etc/issue | grep -Eqi "debian"; then
        release="debian"
        systemPackage="apt"
    elif cat /etc/issue | grep -Eqi "ubuntu"; then
        release="ubuntu"
        systemPackage="apt"
    elif cat /etc/issue | grep -Eqi "centos|red hat|redhat"; then
        release="centos"
        systemPackage="yum"
    elif cat /proc/version | grep -Eqi "debian"; then
        release="debian"
        systemPackage="apt"
    elif cat /proc/version | grep -Eqi "ubuntu"; then
        release="ubuntu"
        systemPackage="apt"
    elif cat /proc/version | grep -Eqi "centos|red hat|redhat"; then
        release="centos"
        systemPackage="yum"
    fi

    if [[ ${checkType} == "sysRelease" ]]; then
        if [ "$value" == "$release" ]; then
            return 0
        else
            return 1
        fi
    elif [[ ${checkType} == "packageManager" ]]; then
        if [ "$value" == "$systemPackage" ]; then
            return 0
        else
            return 1
        fi
    fi
}

# Get version
getversion(){
    if [[ -s /etc/redhat-release ]]; then
        grep -oE  "[0-9.]+" /etc/redhat-release
    else
        grep -oE  "[0-9.]+" /etc/issue
    fi
}

# CentOS version
centosversion(){
    if check_sys sysRelease centos; then
        local code=$1
        local version="$(getversion)"
        local main_ver=${version%%.*}
        if [ "$main_ver" == "$code" ]; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

# Get public IP address
get_ip(){
    local IP=$( ip addr | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | egrep -v "^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\." | head -n 1 )
    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )
    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )
    [ ! -z ${IP} ] && echo ${IP} || echo
}

get_char(){
    SAVEDSTTY=`stty -g`
    stty -echo
    stty cbreak
    dd if=/dev/tty bs=1 count=1 2> /dev/null
    stty -raw
    stty echo
    stty $SAVEDSTTY
}

# Pre-installation settings
pre_install(){
    if check_sys packageManager yum || check_sys packageManager apt; then
        # Not support CentOS 5
        if centosversion 5; then
            echo -e "$[{red}Error${plain}] Not supported CentOS 5, please change to CentOS 6+/Debian 7+/Ubuntu 12+ and try again."
            exit 1
        fi
    else
        echo -e "[${red}Error${plain}] Your OS is not supported. please change OS to CentOS/Debian/Ubuntu and try again."
        exit 1
    fi
    # Set shadowsocks config password
    echo "Please enter password for shadowsocks-python"
    read -p "(Default password: teddysun.com):" shadowsockspwd
    [ -z "${shadowsockspwd}" ] && shadowsockspwd="teddysun.com"
    echo
    echo "---------------------------"
    echo "password = ${shadowsockspwd}"
    echo "---------------------------"
    echo
    # Set shadowsocks config port
    while true
    do
    dport=$(shuf -i 9000-19999 -n 1)
    echo "Please enter a port for shadowsocks-python [1-65535]"
    read -p "(Default port: ${dport}):" shadowsocksport
    [ -z "$shadowsocksport" ] && shadowsocksport=${dport}
    expr ${shadowsocksport} + 1 &>/dev/null
    if [ $? -eq 0 ]; then
        if [ ${shadowsocksport} -ge 1 ] && [ ${shadowsocksport} -le 65535 ] && [ ${shadowsocksport:0:1} != 0 ]; then
            echo
            echo "---------------------------"
            echo "port = ${shadowsocksport}"
            echo "---------------------------"
            echo
            break
        fi
    fi
    echo -e "[${red}Error${plain}] Please enter a correct number [1-65535]"
    done

    # Set shadowsocks config stream ciphers
    while true
    do
    echo -e "Please select stream cipher for shadowsocks-python:"
    for ((i=1;i<=${#ciphers[@]};i++ )); do
        hint="${ciphers[$i-1]}"
        echo -e "${green}${i}${plain}) ${hint}"
    done
    read -p "Which cipher you'd select(Default: ${ciphers[0]}):" pick
    [ -z "$pick" ] && pick=1
    expr ${pick} + 1 &>/dev/null
    if [ $? -ne 0 ]; then
        echo -e "[${red}Error${plain}] Please enter a number"
        continue
    fi
    if [[ "$pick" -lt 1 || "$pick" -gt ${#ciphers[@]} ]]; then
        echo -e "[${red}Error${plain}] Please enter a number between 1 and ${#ciphers[@]}"
        continue
    fi
    shadowsockscipher=${ciphers[$pick-1]}
    echo
    echo "---------------------------"
    echo "cipher = ${shadowsockscipher}"
    echo "---------------------------"
    echo
    break
    done

    echo
    echo "Press any key to start...or Press Ctrl+C to cancel"
    char=`get_char`
    # Install necessary dependencies
    if check_sys packageManager yum; then
        yum install -y python python-devel python-setuptools openssl openssl-devel curl wget unzip gcc automake autoconf make libtool
    elif check_sys packageManager apt; then
        apt-get -y update
        apt-get -y install python python-dev python-setuptools openssl libssl-dev curl wget unzip gcc automake autoconf make libtool
    fi
    cd ${cur_dir}
}

# Download files
download_files(){
    # Download libsodium file
    if ! wget --no-check-certificate -O ${libsodium_file}.tar.gz ${libsodium_url}; then
        echo -e "[${red}Error${plain}] Failed to download ${libsodium_file}.tar.gz!"
        exit 1
    fi
    # Download Shadowsocks file
    if ! wget --no-check-certificate -O shadowsocks-master.zip https://github.com/shadowsocks/shadowsocks/archive/master.zip; then
        echo -e "[${red}Error${plain}] Failed to download shadowsocks python file!"
        exit 1
    fi
    # Download Shadowsocks init script
    if check_sys packageManager yum; then
        if ! wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks -O /etc/init.d/shadowsocks; then
            echo -e "[${red}Error${plain}] Failed to download shadowsocks chkconfig file!"
            exit 1
        fi
    elif check_sys packageManager apt; then
        if ! wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-debian -O /etc/init.d/shadowsocks; then
            echo -e "[${red}Error${plain}] Failed to download shadowsocks chkconfig file!"
            exit 1
        fi
    fi
}

# Config shadowsocks
config_shadowsocks(){
    cat > /etc/shadowsocks.json<<-EOF
{
    "server":"0.0.0.0",
    "server_port":${shadowsocksport},
    "local_address":"127.0.0.1",
    "local_port":1080,
    "password":"${shadowsockspwd}",
    "timeout":300,
    "method":"${shadowsockscipher}",
    "fast_open":false
}
EOF
}

# Firewall set
firewall_set(){
    echo -e "[${green}Info${plain}] firewall set start..."
    if centosversion 6; then
        /etc/init.d/iptables status > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            iptables -L -n | grep -i ${shadowsocksport} > /dev/null 2>&1
            if [ $? -ne 0 ]; then
                iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${shadowsocksport} -j ACCEPT
                iptables -I INPUT -m state --state NEW -m udp -p udp --dport ${shadowsocksport} -j ACCEPT
                /etc/init.d/iptables save
                /etc/init.d/iptables restart
            else
                echo -e "[${green}Info${plain}] port ${shadowsocksport} has already been set up."
            fi
        else
            echo -e "[${yellow}Warning${plain}] iptables looks like shutdown or not installed, please manually set it if necessary."
        fi
    elif centosversion 7; then
        systemctl status firewalld > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            firewall-cmd --permanent --zone=public --add-port=${shadowsocksport}/tcp
            firewall-cmd --permanent --zone=public --add-port=${shadowsocksport}/udp
            firewall-cmd --reload
        else
            echo -e "[${yellow}Warning${plain}] firewalld looks like not running or not installed, please enable port ${shadowsocksport} manually if necessary."
        fi
    fi
    echo -e "[${green}Info${plain}] firewall set completed..."
}

# Install Shadowsocks
install(){
    # Install libsodium
    if [ ! -f /usr/lib/libsodium.a ]; then
        cd ${cur_dir}
        tar zxf ${libsodium_file}.tar.gz
        cd ${libsodium_file}
        ./configure --prefix=/usr && make && make install
        if [ $? -ne 0 ]; then
            echo -e "[${red}Error${plain}] libsodium install failed!"
            install_cleanup
            exit 1
        fi
    fi

    ldconfig
    # Install Shadowsocks
    cd ${cur_dir}
    unzip -q shadowsocks-master.zip
    if [ $? -ne 0 ];then
        echo -e "[${red}Error${plain}] unzip shadowsocks-master.zip failed! please check unzip command."
        install_cleanup
        exit 1
    fi

    cd ${cur_dir}/shadowsocks-master
    python setup.py install --record /usr/local/shadowsocks_install.log

    if [ -f /usr/bin/ssserver ] || [ -f /usr/local/bin/ssserver ]; then
        chmod +x /etc/init.d/shadowsocks
        if check_sys packageManager yum; then
            chkconfig --add shadowsocks
            chkconfig shadowsocks on
        elif check_sys packageManager apt; then
            update-rc.d -f shadowsocks defaults
        fi
        /etc/init.d/shadowsocks start
    else
        echo
        echo -e "[${red}Error${plain}] Shadowsocks install failed! please visit https://teddysun.com/342.html and contact."
        install_cleanup
        exit 1
    fi

    clear
    echo
    echo -e "Congratulations, Shadowsocks-python server install completed!"
    echo -e "Your Server IP        : \033[41;37m $(get_ip) \033[0m"
    echo -e "Your Server Port      : \033[41;37m ${shadowsocksport} \033[0m"
    echo -e "Your Password         : \033[41;37m ${shadowsockspwd} \033[0m"
    echo -e "Your Encryption Method: \033[41;37m ${shadowsockscipher} \033[0m"
    echo
    echo "Welcome to visit:https://teddysun.com/342.html"
    echo "Enjoy it!"
    echo
}

# Install cleanup
install_cleanup(){
    cd ${cur_dir}
    rm -rf shadowsocks-master.zip shadowsocks-master ${libsodium_file}.tar.gz ${libsodium_file}
}

# Uninstall Shadowsocks
uninstall_shadowsocks(){
    printf "Are you sure uninstall Shadowsocks? (y/n) "
    printf "\n"
    read -p "(Default: n):" answer
    [ -z ${answer} ] && answer="n"
    if [ "${answer}" == "y" ] || [ "${answer}" == "Y" ]; then
        ps -ef | grep -v grep | grep -i "ssserver" > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            /etc/init.d/shadowsocks stop
        fi
        if check_sys packageManager yum; then
            chkconfig --del shadowsocks
        elif check_sys packageManager apt; then
            update-rc.d -f shadowsocks remove
        fi
        # delete config file
        rm -f /etc/shadowsocks.json
        rm -f /var/run/shadowsocks.pid
        rm -f /etc/init.d/shadowsocks
        rm -f /var/log/shadowsocks.log
        if [ -f /usr/local/shadowsocks_install.log ]; then
            cat /usr/local/shadowsocks_install.log | xargs rm -rf
        fi
        echo "Shadowsocks uninstall success!"
    else
        echo
        echo "uninstall cancelled, nothing to do..."
        echo
    fi
}

# Install Shadowsocks-python
install_shadowsocks(){
    disable_selinux
    pre_install
    download_files
    config_shadowsocks
    if check_sys packageManager yum; then
        firewall_set
    fi
    install
    install_cleanup
}

# Initialization step
action=$1
[ -z $1 ] && action=install
case "$action" in
    install|uninstall)
        ${action}_shadowsocks
        ;;
    *)
        echo "Arguments error! [${action}]"
        echo "Usage: `basename $0` [install|uninstall]"
    ;;
esac
#!/bin/bash
#copy
cp /var/log/nginx/ssl-access.log /var/nginx/access`date +%Y%m%d%H`.log
#if  last  step success  then  empty
if [ $? -eq 0  ];then
 >  /var/log/nginx/ssl-access.log
fi
#!/bin/bash

# 地址设置
http=https://www.blog.lijinghua.club/article/mysql_master_slave_recover
function menu {
	clear
	echo
	echo -e "\t\tSys Admin Menu\n"
	echo -e "\t1. 200并发100次循环"
	echo -e "\t2. 200并发200次循环"
	echo -e "\t3. 200并发2次循环"
	echo -e "\t0. Exit program\n\n"
	echo -en "\t\tEnter option:"
	read -n 1 option
}

function choose1 {
	clear 
	siege -c 200 -r 200 $http
}

function choose2 {
	clear
	siege -c 200 -r 100 $http
}

function choose3 {
	clear
	siege -c 20 -r 1 $http
}
while [ 1 ]
do
	menu
	case $option in
	0) 
		break;;
	1) 
		choose1;;
	2)
		choose2;;
	3)
		choose3;;
	*)
		clear
		echo "Sorry, wrong selection";;
	esac
	echo -en "\n\n\t\tHit any key to continue"
	read -n 1 line
done
clear
#!/bin/bash
num=`free -mh |awk '{print $7}'|grep -vw "M"|grep -v ^$ |tr -d "A-Z"`
limit=2
if [ `echo "$num < $limit" | bc` -eq 1 ] ;then
        curl  https://sc.ftqq.com/SCU23824Teb720f53ae658e6df0ad720f1fe7aed35aba06e01a048.send?text=web73的PHP内存告急,主人快快处理 > /dev/null 2>&1 
fi

 while : ;do  netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a,S[a]}' |grep ESTABLISHED >> /tmp/ceshi/ceshi.txt  && echo `date +%Y%m%d%H%M%S` >> /tmp/ceshi/ceshi.txt ; sleep 1; done;
#!/bin/bash
cur_time=$(date "+%Y%m%d%H%M%S")
tmp_name="code$cur_time"
apifile="/root/api.zip"
echo -e "正在从远端仓库拉去代码\n"
git clone https://gitee.com/vso/aiziyoudao.git
echo -e "已经成功拉取到代码"
mv aiziyoudao $tmp_name


#数据库链接信息
DB_HOST="172.18.252.146,172.18.252.147,172.18.252.145,172.18.252.154"
DB_NAME="zyd1"
DB_USER="root"
DB_PWD="@AS55sadd55SFknzyd"
db_file_name="$tmp_name/App/Conf/db.php"

#api连接地址
API_ADDRESS="https://api.aiziyoudao.com"
api_file_name="$tmp_name/api.js"

#设置数据库连接信息
	echo -e "开始设置数据库连接信息……\n"
	echo $tmp_name/App/Conf/db.php
	sed -i "s/'DB_HOST'=>'.*'/'DB_HOST'=>'$DB_HOST'/g" $tmp_name/App/Conf/db.php
	sed -i "s/'DB_NAME'=>'.*'/'DB_NAME'=>'$DB_NAME'/g" $tmp_name/App/Conf/db.php
	sed -i "s/'DB_USER'=>'.*'/'DB_USER'=>'$DB_USER'/g" $tmp_name/App/Conf/db.php
	sed -i "s/'DB_PWD'=>'.*'/'DB_PWD'=>'$DB_PWD'/g" $tmp_name/App/Conf/db.php
        sed -i "2a\    'DB_DEPLOY_TYPE' => 1,"  $tmp_name/App/Conf/db.php
        sed -i "9a\    'DB_RW_SEPARATE'=>true,"  $tmp_name/App/Conf/db.php
	cat $tmp_name/App/Conf/db.php
	echo -e "数据库连接文件配置ok\n"

#设置api文件配置信息并替换原先站点目录
        sed -i "4d"  $api_file_name
        sed -i "3a\ var api_host = 'https://api.aiziyoudao.com';"  $api_file_name
if [ $? -eq 0 ];then
        echo "更新api.js文件成功~"
        echo -e "正在复制zyd站点目录....../n"
        cp $tmp_name/*  /www/webserver/webserver/zyd_aiziyoudao_com/ -rf
   else
        echo -e "更新api.js文件失败!"
fi  
#替换api站点目录,此操作必须在测试站推送站点目录之后进行
        echo -e "正在复制api站点目录....../n"
        unzip -n /root/api.zip  -d /tmp
        cp /tmp/hc_test_api_aiziyoudao_com/* /www/webserver/webserver/api_aiziyoudao_com/ -rf
        cp  api_database.php  /www/webserver/webserver/api_aiziyoudao_com/application/database.php  
if [ $? -eq 0 ];then
	echo "更新成功"
   else
        echo -e "更新api站点目录失败!您是否在测试站操作=====>> sh /www/web/api_sync.sh"
fi

#删除临时站点目录
echo -e "正在删除临时文件/n"
rm -rf $tmp_name
rm -rf $apifile
rm -rf /tmp/hc_test_api_aiziyoudao_com
echo -e "ok 已经完成本次作业/n"
#!/bin/bash
LOAD=`w |head -1 |awk -F "[, ]+" '{print $11}'`
key="SCU23824Teb720f53ae658e6df0ad720f1fe7aed35aba06e01a048"
echo $LOAD
limit=0.7
if [ `echo "$LOAD > $limit" | bc` -eq 1 ] ;then
        curl -s "https://sc.ftqq.com/$key.send?text=服务器报警" -d "&desp=pa1_CPU爆了！"   > /dev/null 2>&1 
fi
#!/bin/bash

# 地址设置
http=https://www.paiyeah.com/search.php?encode=YTozOntzOjg6ImtleXdvcmRzIjtzOjY6IuWpmue6sSI7czoxNjoic3RvcmVfc2VhcmNoX2NtdCI7czoxOiIwIjtzOjE4OiJzZWFyY2hfZW5jb2RlX3RpbWUiO2k6MTUxOTgxMzM1ODt9

function menu {
	clear
	echo
	echo -e "\t\tSys Admin Menu\n"
	echo -e "\t1. 200并发100次循环"
	echo -e "\t2. 200并发200次循环"
	echo -e "\t3. 200并发2次循环"
	echo -e "\t0. Exit program\n\n"
	echo -en "\t\tEnter option:"
	read -n 1 option
}

function choose1 {
	clear 
	siege -c 200 -r 200 $http
}

function choose2 {
	clear
	siege -c 200 -r 100 $http
}

function choose3 {
	clear
	siege -c 200 -r 2 $http
}
while [ 1 ]
do
	menu
	case $option in
	0) 
		break;;
	1) 
		choose1;;
	2)
		choose2;;
	3)
		choose3;;
	*)
		clear
		echo "Sorry, wrong selection";;
	esac
	echo -en "\n\n\t\tHit any key to continue"
	read -n 1 line
done
clear
#!/bin/bash
########################################
#check Running and Waiting Cpu Num
#$num长期大于1，说明cpu不足，需要增加cpu
########################################
TEP=0
for ((i=0; i<20; ))
do
	cpu_wait=`vmstat  |tail -1 |awk '{print $1}'`
    num=`expr $cpu_wait + $TEP`
	sleep 1
	i=$(expr $i + 1)
done
#20 times avg
cpu_wait=`expr $num \/ 20 `
echo "运行和等待cpu时间片的进程数为:"$num
if [ $num -gt 4 ] ;
        then
        curl  https://sc.ftqq.com/SCU23824Teb720f53ae658e6df0ad720f1fe7aed35aba06e01a048.send?text=blog.lijinghua.club$blog_http > /dev/null 2>&1
fi



#!/bin/bash
#------------------------------------------------------
#配合jenkins查看当前占用资源前十的服务
#------------------------------------------------------
for ((i=0; i<20; ))  
do  
	#/usr/bin/top -b   >> /tmp/top.txt
	i=$(expr $i + 1)  
	#/usr/bin/top -b   >> /tmp/top.txt
	top -b -n 1 -u www >> /tmp/top.txt
	top -b -n 1 -u mysql >> /tmp/top.txt
	awk 'NR==1,NR==20' /tmp/top.txt >> /tmp/top.log 
	tail -100 /tmp/top.log
	> /tmp/top.txt
	sleep 5
done  
#!/bin/bash
#判断基于RedHat还是Debian来安装zlib依赖
if [ -f /etc/redhat-release ]
    then
    yum -y install zlib*
    else
    apt-get -y update
    apt-get -y install zlib*
fi
#Python包的链接
Urls="https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz"
pak=`echo $Urls |awk -F '[\/| ]+' '{print $6}'`
dir=`echo $Urls |awk -F '[\/| ]+' '{print $6}'|awk -F '.tar' '{print $1}'`
wget  $Urls
tar xvf $pak  && cd $dir
./configure && make && make install
clear
echo -e "py新版安装成功～,正在创建虚拟环境"#!/bin/bash
zyd(){
cat <<zyd
    1)web02-172.18.252.142
    2)web10-172.18.252.155
    3)NFS-172.18.252.144
    4)slave100-172.18.252.147
    5)slave254-172.18.252.145
    6)slave83-172.18.252.154
    7)front-172.18.252.141
zyd
}
zyd
while [ True ];do
read -p "Select the number you want to login to the host:" num
case $num in
  1)
   echo "Land web02-172.18.252.142......."
   ssh 172.18.252.142 && echo "退出成功" || echo "连接失败(请检查网络密码是否正确；是否做免密钥登陆)"
   break
   ;;
  2)
  echo "Land web10-172.18.252.155......."
  ssh 172.18.252.155 && echo "退出成功" || echo "连接失败(请检查网络密码是否正确；是否做免密钥登陆)"
  break
  ;;
  3)
  echo "Land NFS-172.18.252.144......."
  ssh 172.18.252.144  && echo "退出成功" || echo "连接失败(请检查网络密码是否正确；是否做免密钥登陆)"
  break
  ;;
  4)
  echo "Land slave100-172.18.252.147......."
  ssh 172.18.252.147 && echo "退出成功" || echo "连接失败(请检查网络密码是否正确；是否做免密钥登陆)"
  break
  ;;
  5)
  echo "Land slave254-172.18.252.145......."
  ssh 172.18.252.145 && echo "退出成功" ||  echo "连接失败(请检查网络密码是否正确；是否做免密钥登陆)"
  break
  ;;
  6)
  echo "Land slave83-172.18.252.154......."
  ssh  172.18.252.154&& echo "退出成功" || echo "连接失败(请检查网络密码是否正确；是否做免密钥登陆)"
  break
  ;;
  7)
  echo "Land front-172.18.252.141......."
  ssh  172.18.252.141&& echo "退出成功" || echo "连接失败(请检查网络密码是否正确；是否做免密钥登陆)"
  break
  ;;
  q)
  exit
  ;;
  *)
  echo "Please select numbers, exit the input q, and exit "
  esac
zyd
done

#!/bin/bash
#Description: 切割nginx日志

logDir=/www/logs/nginx
logBackupDir=/www/backup/logs/nginx
logBackupDirByDay=$logBackupDir/`/bin/date +%F -d "1 days ago"`

# 判断nginx配置是否正常,决定是否切割日志
/usr/local/nginx-1.0.6/sbin/nginx -t
if [ $? -ne 0 ];then
        exit 1
fi

if [ ! -d "$logBackupDirByDay" ];then
        mkdir -p $logBackupDirByDay
fi

# 转移日志
# /www/nginx/logs/xxx.ttlsa.com_access.log转移到/www/backup/logs/20130131/xxxx.ttlsa.com_access.log
for logNameSource in `find $logDir -maxdepth 1 -type f | grep -E "log$"`
do
        logNameTarget=${logNameSource/$logDir/$logBackupDirByDay}
        if [ -f "$logNameSource" ];then
                if [ -f "$logNameTarget" ];then
                        echo "$logNameTarget exists!"
                else
                        mv $logNameSource  $logBackupDirByDay/ 
                fi
        else
                echo "$logNameSource:File not find!"
        fi
done

/usr/local/nginx-1.0.6/sbin/nginx -t && /usr/local/nginx-1.0.6/sbin/nginx -s reload
/usr/bin/find $logBackupDir -name "*log*"  -mtime +3 -exec rm {} \;#!/bin/bash
if [ -f /etc/redhat-release ]
    then
    yum -y install zlib*
    else
    apt-get -y update
    apt-get -y install zlib*
fi

Urls="https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tar.xz"
pak=`echo $Urls |awk -F '[\/| ]+' '{print $6}'`
dir=`echo $Urls |awk -F '[\/| ]+' '{print $6}'|awk -F '.tar' '{print $1}'`
 wget  $Urls
 tar xvf $pak  && cd $dir
 ./configure && make && make install
echo -e "py新版安装成功～"
 cd /opt
 python3 -m venv py3


clear 
echo -e "\033[32m              \n 
\n
\n输入========>>>>>>>  source /opt/py3/bin/activate   来激活python环境  \033[0m"


有些事情
虽然已经发生
但是总是感觉已经玩了



id | password | last_login | is_superuser | username | first_name | last_name | email | is_staff | is_active | date_joined | full_name | position



INSERT INTO users_userprofile (id,password ,last_login , is_superuser , username , first_name ,last_name , email , is_staff ,is_active ,date_joined , full_name , position ) VALUES (1, 'memect', null, unll,'memect','null','null','memect@memect.com','null','null','null','null','null');












INSERT INTO users_userprofile (id,password ,last_login , is_superuser , username , first_name ,last_name , email , is_staff ,is_active ,date_joined , full_name , position ) VALUES (1, 'memect', null, unll,'memect','null','null','memect@memect.com','null','null','null','null','null');#!/bin/bash
# 2018.4.21
# 姓 名:黄家辉

# 检查运行人身份信息
if [ "$UID" -ne 0 ];then
        echo "当前用户 $(whoami) 不是管理员账身份，请使用管理员身份运行"
        exit 1
fi

# 初始化 : 检查网络，安装必要工具,定义初始化变量
if ping -c2 baidu.com &>/dev/null ;then
        echo "正在初始化程序... ..."
        yum -y install net-tools wget ntpdate &>/dev/null
        ntpdate -u ntp.api.bz
        ULIMIT=`ulimit -n`
        GATEWAY=`ip r | head -1 | awk '{print $3}'`
        ETH=`ifconfig | head -1 | awk -F ":" '{print $1}'`
        MAC=`ifconfig $ETH | grep ether | awk '{print $2}'`
        IPADDR=`ifconfig $ETH | grep netmask | awk '{print $2}'`
        NETMASK=`ifconfig $ETH | grep netmask | awk '{print $4}'`
        IPEND=`ifconfig $ETH | grep netmask | awk '{print $2}' | awk -F "." '{print $4}'`
        OS_VERSION=`cat /etc/system-release | awk '{print $(NF-1)}' | awk -F"." '{print $1}'`
else
        echo "检查网络！"
        exit 2
fi

# 设置固定IP
cat > /etc/sysconfig/network-scripts/ifcfg-$ETH <<EOF
TYPE=Ethernet
BOOTPROTO=static
NAME=$ETH
DEVICE=$ETH
ONBOOT=yes
HWADDR=$MAC
IPADDR=$IPADDR
NETMASK=$NETMASK
GATEWAY=$GATEWAY
DNS1=114.114.114.114
EOF

# 修改主机名称
if [ "$OS_VERSION" -eq 7 ];then
        hostnamectl  --static set-hostname  Server-$IPEND
else
        echo -e "NETWORKING=yes\nHOSTNAME=Server-$IPEND" >/etc/sysconfig/network
fi

# 配置网络yum源
if [[ "$OS_VERSION" =~ [76] ]];then
        mkdir -p /etc/yum.repos.d/bak
        mv /etc/yum.repos.d/*.repo /etc/yum.repos.d/bak/
        wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-${OS_VERSION}.repo
	sed -i "/aliyuncs/d" /var/www/html/CentOS-${OS_VERSION}.repo
	yum clean all
	yum makecache
else
        echo "支持更改当前系统yum源"
fi

# 安装组件
yum -y install tree psmisc gc gcc-c++ lrzsz telnet dos2unix unzip vim
if [ "$OS_VERSION" -ne 7 ];then
        yum -y install bash-completion
fi

# 修改系统字符集
if [ "$LANG" == zh_CN.UTF-8 ];then
        if [ "$OS_VERSION" -ne 7 ];then
                echo LANG=\"zh_CN.UTF-8\" >/etc/locale.conf
        elif [ "$OS_VERSION" -ne 6 ];then
                echo LANG=\"zh_CN.UTF-8\" >/etc/sysconfig/i18n
        else
                echo "不支持当前操作系统修改字符集"
        fi
else
        echo "当前系统字符集已是zh_CN.UTF-8，无需修改"
fi

# 修改文件描述符
if [ "$ULIMIT" -eq 1024 ];then
        echo '* - nofile 65535' >>/etc/security/limits.conf
fi

# 关闭防火墙
sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
setenforce 0
if [ "$OS_VERSION" -eq 7 ];then
        systemctl stop firewalld.service
        systemctl disable firewalld.service
else
        servcie iptables stop
        chkconfig iptables off
fi

# 配置sshd配置文件
echo "使用ssh默认22端口将不安全，若想继续使用22端口则按回车继续"
while true;do
        read -p "请输入ssh端口号:" UPORT
        if [ -n "$UPORT" ];then
                if [[ $UPORT =~ ^[0-9]+$ ]] && [ $UPORT -le 65535 ] && [ $UPORT -ge 1024 ];then
                        PORT=`echo $UPORT`
                        break
                else
                        echo "端口只能是1024-65535以内的纯数字！"
                fi
        else
                PORT="22"
                break
        fi
done
cp /etc/ssh/sshd_config /etc/ssh/sshd.bak
sed -i 's/#Port 22/Port '$PORT'/g' /etc/ssh/sshd_config
sed -i 's/#UseDNS yes/UseDNS no/g' /etc/ssh/sshd_config
sed -i 's/#PermitRootLogin yes/PermitRootLogin no/g' /etc/ssh/sshd_config
if [ "$OS_VERSION" -eq 7 ];then
        systemctl restart sshd
else
        service sshd restart
fi

# 创建用户
while true;do
        read -p "请输入用户名:" UNAME
        if [ -z "$UNAME" ];then
                echo "用户名不能为空！请重新输入"
        else
                if [[ $UNAME =~ ^[a-Z0-9]+$ ]];then
                        id $UNAME &>/dev/null
                        if [ $? -ne 0 ];then
                                break
                        else
                                 echo "该用户已存在，请重新输入！"
                        fi
                else
                        echo "用户名不能包含特殊字符，请重新输入！"
                fi
        fi
done
while true;do
        read -p "请输入密码:" UPWD
        if [ -z "$UPWD" ];then
                echo "密码不能为空！请重新输入"
        else
                PWDL=`echo $UPWD | wc -L`
                if [ "$PWDL" -ge 6 ];then
                        read -p "请再次输入密码:" PWDY
                        if [ "$PWDY" == "$UPWD" ] ;then
                                break
                        fi
                        echo "两次输入的密码不一致！请重新输入。"
                else
                        echo "您输入的密码少于6位数，请重新输入！"
                fi
        fi
done
useradd $UNAME
echo "$UPWD" | passwd --stdin $UNAME >/dev/null

# 休眠3秒重启系统
echo "已完成初始化系统，3秒后将重启系统... ..."
sleep 3
reboot
#!/bin/bash

# 已在CentOS 6.x上进行测试
# author: digoal
# 2015-10
# 权限需求 , OS: root PG: Superuser
# 用法  . ./generate_report.sh >/tmp/report.log 2>&1
# 生成报告目录   grep -E "^----->>>|^\|" /tmp/report.log | sed 's/^----->>>---->>>/    /' | sed '1 i\ \ 目录\n\n' | sed '$ a\ \n\n\ \ 正文\n\n'

# 请将以下变量修改为与当前环境一致, 并且确保使用这个配置连接任何数据库都不需要输入密码
export PGHOST=127.0.0.1
export PGPORT=1921
export PGDATABASE=postgres
export PGUSER=postgres
export PGPASSWORD=postgres
export PGDATA=/data01/pg_root_1921
export PGHOME=/opt/pgsql

export PATH=$PGHOME/bin:$PATH:.
export DATE=`date +"%Y%m%d%H%M"`
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH


# 记住当前目录
PWD=`pwd`

# 获取postgresql日志目录
pg_log_dir=`grep '^\ *[a-z]' $PGDATA/postgresql.conf|awk -F "#" '{print $1}'|grep log_directory|awk -F "=" '{print $2}'`

# 检查是否standby
is_standby=`psql --pset=pager=off -q -A -t -c 'select pg_is_in_recovery()'`


echo "    ----- PostgreSQL 巡检报告 -----  "
echo "    ===== $DATE        =====  "


if [ $is_standby == 't' ]; then
echo "    ===== 这是standby节点     =====  "
else
echo "    ===== 这是primary节点     =====  "
fi
echo ""


echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo "|                      操作系统信息                       |"
echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo ""

echo "----->>>---->>>  主机名: "
hostname -s
echo ""
echo "----->>>---->>>  以太链路信息: "
ip link show
echo ""
echo "----->>>---->>>  IP地址信息: "
ip addr show
echo ""
echo "----->>>---->>>  路由信息: "
ip route show
echo ""
echo "----->>>---->>>  操作系统内核: "
uname -a
echo ""
echo "----->>>---->>>  内存(MB): "
free -m
echo ""
echo "----->>>---->>>  CPU: "
lscpu
echo ""
echo "----->>>---->>>  块设备: "
lsblk
echo ""
echo "----->>>---->>>  拓扑: "
lstopo-no-graphics
echo ""
echo "----->>>---->>>  进程树: "
pstree -a -A -c -l -n -p -u -U -Z
echo ""
echo "----->>>---->>>  操作系统配置文件 静态配置信息: "
echo "----->>>---->>>  /etc/sysctl.conf "
grep "^[a-z]" /etc/sysctl.conf
echo ""
echo "----->>>---->>>  /etc/security/limits.conf "
grep -v "^#" /etc/security/limits.conf|grep -v "^$"
echo ""
echo "----->>>---->>>  /etc/security/limits.d/*.conf "
for dir in `ls /etc/security/limits.d`; do echo "/etc/security/limits.d/$dir : "; grep -v "^#" /etc/security/limits.d/$dir|grep -v "^$"; done 
echo ""
echo "----->>>---->>>  /etc/sysconfig/iptables "
cat /etc/sysconfig/iptables
echo ""
echo "----->>>---->>>  /etc/fstab "
cat /etc/fstab
echo ""
echo "----->>>---->>>  /etc/rc.local "
cat /etc/rc.local
echo ""
echo "----->>>---->>>  /etc/selinux/config "
cat /etc/selinux/config
echo ""
echo "----->>>---->>>  /boot/grub/grub.conf "
cat /boot/grub/grub.conf
echo ""
echo "----->>>---->>>  /var/spool/cron 用户cron配置 "
for dir in `ls /var/spool/cron`; do echo "/var/spool/cron/$dir : "; cat /var/spool/cron/$dir; done 
echo ""
echo "----->>>---->>>  chkconfig --list "
chkconfig --list
echo ""
echo "----->>>---->>>  iptables -L -v -n -t filter 动态配置信息: "
iptables -L -v -n -t filter
echo ""
echo "----->>>---->>>  iptables -L -v -n -t nat 动态配置信息: "
iptables -L -v -n -t nat
echo ""
echo "----->>>---->>>  iptables -L -v -n -t mangle 动态配置信息: "
iptables -L -v -n -t mangle
echo ""
echo "----->>>---->>>  iptables -L -v -n -t raw 动态配置信息: "
iptables -L -v -n -t raw
echo ""
echo "----->>>---->>>  sysctl -a 动态配置信息: "
sysctl -a
echo ""
echo "----->>>---->>>  mount 动态配置信息: "
mount -l
echo ""
echo "----->>>---->>>  selinux 动态配置信息: "
getsebool
sestatus
echo ""
echo "----->>>---->>>  建议禁用Transparent Huge Pages (THP): "
cat /sys/kernel/mm/transparent_hugepage/enabled
cat /sys/kernel/mm/transparent_hugepage/defrag
cat /sys/kernel/mm/redhat_transparent_hugepage/enabled
cat /sys/kernel/mm/redhat_transparent_hugepage/defrag
echo ""
echo "----->>>---->>>  硬盘SMART信息(需要root): "
smartctl --scan|awk -F "#" '{print $1}' | while read i; do echo -e "\n\nDEVICE $i"; smartctl -a $i; done
echo ""
echo "----->>>---->>>  /var/log/boot.log "
cat /var/log/boot.log
echo ""
echo "----->>>---->>>  /var/log/cron(需要root) "
cat /var/log/cron
echo ""
echo "----->>>---->>>  /var/log/dmesg "
cat /var/log/dmesg
echo ""
echo "----->>>---->>>  /var/log/messages(需要root) "
tail -n 500 /var/log/messages
echo ""
echo "----->>>---->>>  /var/log/secure(需要root) "
cat /var/log/secure
echo ""
echo "----->>>---->>>  /var/log/wtmp "
who -a /var/log/wtmp
echo -e "\n"


echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo "|                       数据库信息                        |"
echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo ""

echo "----->>>---->>>  数据库版本: "
psql --pset=pager=off -q -c 'select version()'

echo "----->>>---->>>  用户已安装的插件版本: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -q -c 'select current_database(),* from pg_extension'
done

echo "----->>>---->>>  用户使用了多少种数据类型: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -q -c 'select current_database(),b.typname,count(*) from pg_attribute a,pg_type b where a.atttypid=b.oid and a.attrelid in (select oid from pg_class where relnamespace not in (select oid from pg_namespace where nspname ~ $$^pg_$$ or nspname=$$information_schema$$)) group by 1,2 order by 3 desc'
done

echo "----->>>---->>>  用户创建了多少对象: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -q -c 'select current_database(),rolname,nspname,relkind,count(*) from pg_class a,pg_authid b,pg_namespace c where a.relnamespace=c.oid and a.relowner=b.oid and nspname !~ $$^pg_$$ and nspname<>$$information_schema$$ group by 1,2,3,4 order by 5 desc'
done

echo "----->>>---->>>  用户对象占用空间的柱状图: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -q -c 'select current_database(),buk this_buk_no,cnt rels_in_this_buk,pg_size_pretty(min) buk_min,pg_size_pretty(max) buk_max from( select row_number() over (partition by buk order by tsize),tsize,buk,min(tsize) over (partition by buk),max(tsize) over (partition by buk),count(*) over (partition by buk) cnt from ( select pg_relation_size(a.oid) tsize, width_bucket(pg_relation_size(a.oid),tmin-1,tmax+1,10) buk from (select min(pg_relation_size(a.oid)) tmin,max(pg_relation_size(a.oid)) tmax from pg_class a,pg_namespace c where a.relnamespace=c.oid and nspname !~ $$^pg_$$ and nspname<>$$information_schema$$) t, pg_class a,pg_namespace c where a.relnamespace=c.oid and nspname !~ $$^pg_$$ and nspname<>$$information_schema$$ ) t)t where row_number=1;'
done

echo "----->>>---->>>  当前用户的操作系统定时任务: "
echo "I am `whoami`"
crontab -l
echo "建议: "
echo "    仔细检查定时任务的必要性, 以及定时任务的成功与否的评判标准, 以及监控措施. "
echo "    请以启动数据库的OS用户执行本脚本. "
echo -e "\n"


common() {
# 进入pg_log工作目录
cd $PGDATA
eval cd $pg_log_dir

echo "----->>>---->>>  获取pg_hba.conf md5值: "
md5sum $PGDATA/pg_hba.conf
echo "建议: "
echo "    主备md5值一致(判断主备配置文件是否内容一致的一种手段, 或者使用diff)."
echo -e "\n"

echo "----->>>---->>>  获取pg_hba.conf配置: "
grep '^\ *[a-z]' $PGDATA/pg_hba.conf
echo "建议: "
echo "    主备配置尽量保持一致, 注意trust和password认证方法的危害(password方法 验证时网络传输密码明文, 建议改为md5), 建议除了unix socket可以使用trust以外, 其他都使用md5或者LDAP认证方法."
echo "    建议先设置白名单(超级用户允许的来源IP, 可以访问的数据库), 再设置黑名单(不允许超级用户登陆, reject), 再设置白名单(普通应用), 参考pg_hba.conf中的描述. "
echo -e "\n"

echo "----->>>---->>>  获取postgresql.conf md5值: "
md5sum $PGDATA/postgresql.conf
echo "建议: "
echo "    主备md5值一致(判断主备配置文件是否内容一致的一种手段, 或者使用diff)."
echo -e "\n"

echo "----->>>---->>>  获取postgresql.conf配置: "
grep '^\ *[a-z]' $PGDATA/postgresql.conf|awk -F "#" '{print $1}'
echo "建议: "
echo "    主备配置尽量保持一致, 配置合理的参数值."
echo -e "    建议修改的参数列表如下  ( 假设操作系统内存为128GB, 数据库独占操作系统, 数据库版本9.4.x, 其他版本可能略有不同, 未来再更新进来 )  : 
echo ""
listen_addresses = '0.0.0.0'            # 监听所有IPV4地址
port = 1921                             # 监听非默认端口
max_connections = 4000                  # 最大允许连接数
superuser_reserved_connections = 20     # 为超级用户保留的连接
unix_socket_directories = '.'           # unix socket文件目录最好放在$PGDATA中, 确保安全
unix_socket_permissions = 0700          # 确保权限安全
tcp_keepalives_idle = 30                # 间歇性发送TCP心跳包, 防止连接被网络设备中断.
tcp_keepalives_interval = 10
tcp_keepalives_count = 10
shared_buffers = 16GB                   # 数据库自己管理的共享内存大小, 如果用大页, 建议设置为: 内存 - 100*work_mem - autovacuum_max_workers*(autovacuum_work_mem or autovacuum_work_mem) - max_connections*1MB
huge_pages = try                        # 尽量使用大页, 需要操作系统支持, 配置vm.nr_hugepages*2MB大于shared_buffers.
maintenance_work_mem = 512MB            # 可以加速创建索引, 回收垃圾(假设没有设置autovacuum_work_mem)
autovacuum_work_mem = 512MB             # 可以加速回收垃圾
shared_preload_libraries = 'auth_delay,passwordcheck,pg_stat_statements,auto_explain'           # 建议防止暴力破解, 密码复杂度检测, 开启pg_stat_statements, 开启auto_explain, 参考 http://blog.163.com/digoal@126/blog/static/16387704020149852941586  
bgwriter_delay = 10ms                   # bgwriter process间隔多久调用write接口(注意不是fsync)将shared buffer中的dirty page写到文件系统.
bgwriter_lru_maxpages = 1000            # 一个周期最多写多少脏页
max_worker_processes = 20               # 如果要使用worker process, 最多可以允许fork 多少个worker进程.
wal_level = logical                     # 如果将来打算使用logical复制, 最后先配置好, 不需要停机再改.
synchronous_commit = off                # 如果磁盘的IOPS能力一般, 建议使用异步提交来提高性能, 但是数据库crash或操作系统crash时, 最多可能丢失2*wal_writer_delay时间段产生的事务日志(在wal buffer中). 
wal_sync_method = open_datasync         # 使用pg_test_fsync测试wal所在磁盘的fsync接口, 使用性能好的.
wal_buffers = 16MB
wal_writer_delay = 10ms
checkpoint_segments = 1024              # 等于shared_buffers除以单个wal segment的大小.
checkpoint_timeout = 50min
checkpoint_completion_target = 0.8
archive_mode = on                       # 最好先开启, 否则需要重启数据库来修改
archive_command = '/bin/date'           # 最好先开启, 否则需要重启数据库来修改, 将来修改为正确的命令例如, test ! -f /home/postgres/archivedir/pg_root/%f && cp %p /home/postgres/archivedir/pg_root/%f
max_wal_senders = 32                    # 最多允许多少个wal sender进程.
wal_keep_segments = 2048                # 在pg_xlog目录中保留的WAL文件数, 根据流复制业务的延迟情况和pg_xlog目录大小来预估.
max_replication_slots = 32              # 最多允许多少个复制插槽
hot_standby = on
max_standby_archive_delay = 300s        # 如果备库要被用于只读, 有大的查询的情况下, 如果遇到conflicts, 可以考虑调整这个值来避免conflict造成cancel query.
max_standby_streaming_delay = 300s      # 如果备库要被用于只读, 有大的查询的情况下, 如果遇到conflicts, 可以考虑调整这个值来避免conflict造成cancel query.
wal_receiver_status_interval = 1s
hot_standby_feedback = off               # 建议关闭, 如果备库出现long query，可能导致主库频繁的autovacuum(比如出现无法回收被需要的垃圾时)
vacuum_defer_cleanup_age = 0             # 建议设置为0，避免主库出现频繁的autovacuum无用功，也许新版本会改进。
random_page_cost = 1.3                    # 根据IO能力调整(企业级SSD为例 1.3是个经验值)
effective_cache_size = 100GB            # 调整为与内存一样大, 或者略小(减去shared_buffer). 用来评估OS PAGE CACHE可以用到的内存大小.
log_destination = 'csvlog'
logging_collector = on
log_truncate_on_rotation = on
log_rotation_size = 10MB
log_min_duration_statement = 1s
log_checkpoints = on
log_connections = on
log_disconnections = on
log_error_verbosity = verbose           # 在日志中输出代码位置
log_lock_waits = on
log_statement = 'ddl'
autovacuum = on
log_autovacuum_min_duration = 0
autovacuum_max_workers = 10              # 根据实际频繁变更或删除记录的对象数决定
autovacuum_naptime = 30s                  # 快速唤醒, 防止膨胀
autovacuum_vacuum_scale_factor = 0.1    # 当垃圾超过比例时, 启动垃圾回收工作进程
autovacuum_analyze_scale_factor = 0.2  
autovacuum_freeze_max_age = 1600000000
autovacuum_multixact_freeze_max_age = 1600000000
vacuum_freeze_table_age = 1500000000
vacuum_multixact_freeze_table_age = 1500000000
auth_delay.milliseconds = 5000          # 认证失败, 延迟多少毫秒反馈
auto_explain.log_min_duration = 5000    # 记录超过多少毫秒的SQL当时的执行计划
auto_explain.log_analyze = true
auto_explain.log_verbose = true
auto_explain.log_buffers = true
auto_explain.log_nested_statements = true
pg_stat_statements.track_utility=off

    建议的操作系统配置(根据实际情况修改) : 
vi /etc/sysctl.conf
# add by digoal.zhou
fs.aio-max-nr = 1048576
fs.file-max = 76724600
kernel.core_pattern= /data01/corefiles/core_%e_%u_%t_%s.%p         
# /data01/corefiles事先建好，权限777
kernel.sem = 4096 2147483647 2147483646 512000    
# 信号量, ipcs -l 或 -u 查看，每16个进程一组，每组信号量需要17个信号量。
kernel.shmall = 107374182      
# 所有共享内存段相加大小限制(建议内存的80%)
kernel.shmmax = 274877906944   
# 最大单个共享内存段大小(建议为内存一半), >9.2的版本已大幅降低共享内存的使用
kernel.shmmni = 819200         
# 一共能生成多少共享内存段，每个PG数据库集群至少2个共享内存段
net.core.netdev_max_backlog = 10000
net.core.rmem_default = 262144       
# The default setting of the socket receive buffer in bytes.
net.core.rmem_max = 4194304          
# The maximum receive socket buffer size in bytes
net.core.wmem_default = 262144       
# The default setting (in bytes) of the socket send buffer.
net.core.wmem_max = 4194304          
# The maximum send socket buffer size in bytes.
net.core.somaxconn = 4096
net.ipv4.tcp_max_syn_backlog = 4096
net.ipv4.tcp_keepalive_intvl = 20
net.ipv4.tcp_keepalive_probes = 3
net.ipv4.tcp_keepalive_time = 60
net.ipv4.tcp_mem = 8388608 12582912 16777216
net.ipv4.tcp_fin_timeout = 5
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syncookies = 1    
# 开启SYN Cookies。当出现SYN等待队列溢出时，启用cookie来处理，可防范少量的SYN攻击
net.ipv4.tcp_timestamps = 1    
# 减少time_wait
net.ipv4.tcp_tw_recycle = 0    
# 如果=1则开启TCP连接中TIME-WAIT套接字的快速回收，但是NAT环境可能导致连接失败，建议服务端关闭它
net.ipv4.tcp_tw_reuse = 1      
# 开启重用。允许将TIME-WAIT套接字重新用于新的TCP连接
net.ipv4.tcp_max_tw_buckets = 262144
net.ipv4.tcp_rmem = 8192 87380 16777216
net.ipv4.tcp_wmem = 8192 65536 16777216
net.nf_conntrack_max = 1200000
net.netfilter.nf_conntrack_max = 1200000
vm.dirty_background_bytes = 409600000       
#  系统脏页到达这个值，系统后台刷脏页调度进程 pdflush（或其他） 自动将(dirty_expire_centisecs/100）秒前的脏页刷到磁盘
vm.dirty_expire_centisecs = 3000             
#  比这个值老的脏页，将被刷到磁盘。3000表示30秒。
vm.dirty_ratio = 95                          
#  如果系统进程刷脏页太慢，使得系统脏页超过内存 95 % 时，则用户进程如果有写磁盘的操作（如fsync, fdatasync等调用），则需要主动把系统脏页刷出。
#  有效防止用户进程刷脏页，在单机多实例，并且使用CGROUP限制单实例IOPS的情况下非常有效。  
vm.dirty_writeback_centisecs = 100            
#  pdflush（或其他）后台刷脏页进程的唤醒间隔， 100表示1秒。
vm.extra_free_kbytes = 4096000
vm.min_free_kbytes = 2097152
vm.mmap_min_addr = 65536
vm.overcommit_memory = 0     
#  在分配内存时，允许少量over malloc, 如果设置为 1, 则认为总是有足够的内存，内存较少的测试环境可以使用 1 .  
vm.overcommit_ratio = 90     
#  当overcommit_memory = 2 时，用于参与计算允许指派的内存大小。
vm.swappiness = 0            
#  关闭交换分区
vm.zone_reclaim_mode = 0     
# 禁用 numa, 或者在vmlinux中禁止. 
net.ipv4.ip_local_port_range = 40000 65535    
# 本地自动分配的TCP, UDP端口号范围
#  vm.nr_hugepages = 102352    
#  建议shared buffer设置超过64GB时 使用大页，页大小 /proc/meminfo Hugepagesize

vi /etc/security/limits.conf
* soft    nofile  1024000
* hard    nofile  1024000
* soft    nproc   unlimited
* hard    nproc   unlimited
* soft    core    unlimited
* hard    core    unlimited
* soft    memlock unlimited
* hard    memlock unlimited

rm -f /etc/security/limits.d/90-nproc.conf
\n "

echo "----->>>---->>>  用户或数据库级别定制参数: "
psql --pset=pager=off -q -c 'select * from pg_db_role_setting'
echo "建议: "
echo "    定制参数需要关注, 优先级高于数据库的启动参数和配置文件中的参数, 特别是排错时需要关注. "
echo -e "\n"


echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo "|                   数据库错误日志分析                    |"
echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo ""

echo "----->>>---->>>  获取错误日志信息: "
cat *.csv | grep -E "^[0-9]" | grep -E "WARNING|ERROR|FATAL|PANIC" | awk -F "," '{print $12" , "$13" , "$14}'|sort|uniq -c|sort -rn
echo "建议: "
echo "    参考 http://www.postgresql.org/docs/current/static/errcodes-appendix.html ."
echo -e "\n"

echo "----->>>---->>>  获取连接请求情况: "
find . -name "*.csv" -type f -mtime -28 -exec grep "connection authorized" {} +|awk -F "," '{print $2,$3,$5}'|sed 's/\:[0-9]*//g'|sort|uniq -c|sort -n -r
echo "建议: "
echo "    连接请求非常多时, 请考虑应用层使用连接池, 或者使用pgbouncer连接池. "
echo -e "\n"

echo "----->>>---->>>  获取认证失败情况: "
find . -name "*.csv" -type f -mtime -28 -exec grep "password authentication failed" {} +|awk -F "," '{print $2,$3,$5}'|sed 's/\:[0-9]*//g'|sort|uniq -c|sort -n -r
echo "建议: "
echo "    认证失败次数很多时, 可能是有用户在暴力破解, 建议使用auth_delay插件防止暴力破解. "
echo -e "\n"


echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo "|                   数据库慢SQL日志分析                   |"
echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo ""

echo "----->>>---->>>  慢查询统计: "
cat *.csv|awk -F "," '{print $1" "$2" "$3" "$8" "$14}' |grep "duration:"|grep -v "plan:"|awk '{print $1" "$4" "$5" "$6}'|sort|uniq -c|sort -rn
echo "建议: "
echo "    输出格式(条数,日期,用户,数据库,QUERY,耗时ms). "
echo "    慢查询反映执行时间超过log_min_duration_statement的SQL, 可以根据实际情况分析数据库或SQL语句是否有优化空间. "
echo ""
echo "----->>>---->>>  慢查询分布头10条的执行时间, ms: "
cat *.csv|awk -F "," '{print $1" "$2" "$3" "$8" "$14}' |grep "duration:"|grep -v "plan:"|awk '{print $1" "$4" "$5" "$6" "$7" "$8}'|sort -k 6 -n|head -n 10
echo ""
echo "----->>>---->>>  慢查询分布尾10条的执行时间, ms: "
cat *.csv|awk -F "," '{print $1" "$2" "$3" "$8" "$14}' |grep "duration:"|grep -v "plan:"|awk '{print $1" "$4" "$5" "$6" "$7" "$8}'|sort -k 6 -n|tail -n 10
echo -e "\n"

echo "----->>>---->>>  auto_explain 分析统计: "
cat *.csv|awk -F "," '{print $1" "$2" "$3" "$8" "$14}' |grep "plan:"|grep "duration:"|awk '{print $1" "$4" "$5" "$6}'|sort|uniq -c|sort -rn
echo "建议: "
echo "    输出格式(条数,日期,用户,数据库,QUERY). "
echo "    慢查询反映执行时间超过auto_explain.log_min_duration的SQL, 可以根据实际情况分析数据库或SQL语句是否有优化空间, 分析csvlog中auto_explain的输出可以了解语句超时时的执行计划详情. "
echo -e "\n"


echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo "|                   数据库空间使用分析                    |"
echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo ""

echo "----->>>---->>>  输出文件系统剩余空间: "
df -m
echo "建议: "
echo "    注意预留足够的空间给数据库. "
echo -e "\n"

echo "----->>>---->>>  输出表空间对应目录: "
echo $PGDATA
ls -la $PGDATA/pg_tblspc/
echo "建议: "
echo "    注意表空间如果不是软链接, 注意是否刻意所为, 正常情况下应该是软链接. "
echo -e "\n"

echo "----->>>---->>>  输出表空间使用情况: "
psql --pset=pager=off -q -c 'select spcname,pg_tablespace_location(oid),pg_size_pretty(pg_tablespace_size(oid)) from pg_tablespace order by pg_tablespace_size(oid) desc'
echo "建议: "
echo "    注意检查表空间所在文件系统的剩余空间, (默认表空间在$PGDATA/base目录下), IOPS分配是否均匀, OS的sysstat包可以观察IO使用率. "
echo -e "\n"

echo "----->>>---->>>  输出数据库使用情况: "
psql --pset=pager=off -q -c 'select datname,pg_size_pretty(pg_database_size(oid)) from pg_database order by pg_database_size(oid) desc'
echo "建议: "
echo "    注意检查数据库的大小, 是否需要清理历史数据. "
echo -e "\n"

echo "----->>>---->>>  TOP 10 size对象: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -q -c 'select current_database(),b.nspname,c.relname,c.relkind,pg_size_pretty(pg_relation_size(c.oid)),a.seq_scan,a.seq_tup_read,a.idx_scan,a.idx_tup_fetch,a.n_tup_ins,a.n_tup_upd,a.n_tup_del,a.n_tup_hot_upd,a.n_live_tup,a.n_dead_tup from pg_stat_all_tables a, pg_class c,pg_namespace b where c.relnamespace=b.oid and c.relkind=$$r$$ and a.relid=c.oid order by pg_relation_size(c.oid) desc limit 10'
done
echo "建议: "
echo "    经验值: 单表超过8GB, 并且这个表需要频繁更新 或 删除+插入的话, 建议对表根据业务逻辑进行合理拆分后获得更好的性能, 以及便于对膨胀索引进行维护; 如果是只读的表, 建议适当结合SQL语句进行优化. "
echo -e "\n"


echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo "|                     数据库连接分析                      |"
echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo ""

echo "----->>>---->>>  当前活跃度: "
psql --pset=pager=off -q -c 'select now(),state,count(*) from pg_stat_activity group by 1,2'
echo "建议: "
echo "    如果active状态很多, 说明数据库比较繁忙. 如果idle in transaction很多, 说明业务逻辑设计可能有问题. 如果idle很多, 可能使用了连接池, 并且可能没有自动回收连接到连接池的最小连接数. "
echo -e "\n"

echo "----->>>---->>>  总剩余连接数: "
psql --pset=pager=off -q -c 'select max_conn,used,res_for_super,max_conn-used-res_for_super res_for_normal from (select count(*) used from pg_stat_activity) t1,(select setting::int res_for_super from pg_settings where name=$$superuser_reserved_connections$$) t2,(select setting::int max_conn from pg_settings where name=$$max_connections$$) t3'
echo "建议: "
echo "    给超级用户和普通用户设置足够的连接, 以免不能登录数据库. "
echo -e "\n"

echo "----->>>---->>>  用户连接数限制: "
psql --pset=pager=off -q -c 'select a.rolname,a.rolconnlimit,b.connects from pg_authid a,(select usename,count(*) connects from pg_stat_activity group by usename) b where a.rolname=b.usename order by b.connects desc'
echo "建议: "
echo "    给用户设置足够的连接数, alter role ... CONNECTION LIMIT . "
echo -e "\n"

echo "----->>>---->>>  数据库连接限制: "
psql --pset=pager=off -q -c 'select a.datname, a.datconnlimit, b.connects from pg_database a,(select datname,count(*) connects from pg_stat_activity group by datname) b where a.datname=b.datname order by b.connects desc'
echo "建议: "
echo "    给数据库设置足够的连接数, alter database ... CONNECTION LIMIT . "
echo -e "\n"


echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo "|                     数据库性能分析                      |"
echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo ""

echo "----->>>---->>>  TOP 5 SQL : total_cpu_time "
psql --pset=pager=off -q -x -c 'select c.rolname,b.datname,a.total_time/a.calls per_call_time,a.* from pg_stat_statements a,pg_database b,pg_authid c where a.userid=c.oid and a.dbid=b.oid order by a.total_time desc limit 5'
echo "建议: "
echo "    检查SQL是否有优化空间, 配合auto_explain插件在csvlog中观察LONG SQL的执行计划是否正确. "
echo -e "\n"

echo "----->>>---->>>  索引数超过4并且SIZE大于10MB的表: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -q -c 'select current_database(), t2.nspname, t1.relname, pg_size_pretty(pg_relation_size(t1.oid)), t3.idx_cnt from pg_class t1, pg_namespace t2, (select indrelid,count(*) idx_cnt from pg_index group by 1 having count(*)>4) t3 where t1.oid=t3.indrelid and t1.relnamespace=t2.oid and pg_relation_size(t1.oid)/1024/1024.0>10 order by t3.idx_cnt desc'
done
echo "建议: "
echo "    索引数量太多, 影响表的增删改性能, 建议检查是否有不需要的索引. "
echo -e "\n"

echo "----->>>---->>>  上次巡检以来未使用或使用较少的索引: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -q -c 'select current_database(),t2.schemaname,t2.relname,t2.indexrelname,t2.idx_scan,t2.idx_tup_read,t2.idx_tup_fetch,pg_size_pretty(pg_relation_size(indexrelid)) from pg_stat_all_tables t1,pg_stat_all_indexes t2 where t1.relid=t2.relid and t2.idx_scan<10 and t2.schemaname not in ($$pg_toast$$,$$pg_catalog$$) and indexrelid not in (select conindid from pg_constraint where contype in ($$p$$,$$u$$,$$f$$)) and pg_relation_size(indexrelid)>65536 order by pg_relation_size(indexrelid) desc'
done
echo "建议: "
echo "    建议和应用开发人员确认后, 删除不需要的索引. "
echo -e "\n"

echo "----->>>---->>>  数据库统计信息, 回滚比例, 命中比例, 数据块读写时间, 死锁, 复制冲突: "
psql --pset=pager=off -q -c 'select datname,round(100*(xact_rollback::numeric/(case when xact_commit > 0 then xact_commit else 1 end + xact_rollback)),2)||$$ %$$ rollback_ratio, round(100*(blks_hit::numeric/(case when blks_read>0 then blks_read else 1 end + blks_hit)),2)||$$ %$$ hit_ratio, blk_read_time, blk_write_time, conflicts, deadlocks from pg_stat_database'
echo "建议: "
echo "    回滚比例大说明业务逻辑可能有问题, 命中率小说明shared_buffer要加大, 数据块读写时间长说明块设备的IO性能要提升, 死锁次数多说明业务逻辑有问题, 复制冲突次数多说明备库可能在跑LONG SQL. "
echo -e "\n"

echo "----->>>---->>>  检查点, bgwriter 统计信息: "
psql --pset=pager=off -q -x -c 'select * from pg_stat_bgwriter'
echo "建议: "
echo "    checkpoint_write_time多说明检查点持续时间长, 检查点过程中产生了较多的脏页. "
echo "    checkpoint_sync_time代表检查点开始时的shared buffer中的脏页被同步到磁盘的时间, 如果时间过长, 并且数据库在检查点时性能较差, 考虑一下提升块设备的IOPS能力. "
echo "    buffers_backend_fsync太多说明需要加大shared buffer 或者 减小bgwriter_delay参数. "
echo -e "\n"


echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo "|                     数据库垃圾分析                      |"
echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo ""

echo "----->>>---->>>  表引膨胀检查: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -q -x -c 'SELECT
  current_database() AS db, schemaname, tablename, reltuples::bigint AS tups, relpages::bigint AS pages, otta,
  ROUND(CASE WHEN otta=0 OR sml.relpages=0 OR sml.relpages=otta THEN 0.0 ELSE sml.relpages/otta::numeric END,1) AS tbloat,
  CASE WHEN relpages < otta THEN 0 ELSE relpages::bigint - otta END AS wastedpages,
  CASE WHEN relpages < otta THEN 0 ELSE bs*(sml.relpages-otta)::bigint END AS wastedbytes,
  CASE WHEN relpages < otta THEN $$0 bytes$$::text ELSE (bs*(relpages-otta))::bigint || $$ bytes$$ END AS wastedsize,
  iname, ituples::bigint AS itups, ipages::bigint AS ipages, iotta,
  ROUND(CASE WHEN iotta=0 OR ipages=0 OR ipages=iotta THEN 0.0 ELSE ipages/iotta::numeric END,1) AS ibloat,
  CASE WHEN ipages < iotta THEN 0 ELSE ipages::bigint - iotta END AS wastedipages,
  CASE WHEN ipages < iotta THEN 0 ELSE bs*(ipages-iotta) END AS wastedibytes,
  CASE WHEN ipages < iotta THEN $$0 bytes$$ ELSE (bs*(ipages-iotta))::bigint || $$ bytes$$ END AS wastedisize,
  CASE WHEN relpages < otta THEN
    CASE WHEN ipages < iotta THEN 0 ELSE bs*(ipages-iotta::bigint) END
    ELSE CASE WHEN ipages < iotta THEN bs*(relpages-otta::bigint)
      ELSE bs*(relpages-otta::bigint + ipages-iotta::bigint) END
  END AS totalwastedbytes
FROM (
  SELECT
    nn.nspname AS schemaname,
    cc.relname AS tablename,
    COALESCE(cc.reltuples,0) AS reltuples,
    COALESCE(cc.relpages,0) AS relpages,
    COALESCE(bs,0) AS bs,
    COALESCE(CEIL((cc.reltuples*((datahdr+ma-
      (CASE WHEN datahdr%ma=0 THEN ma ELSE datahdr%ma END))+nullhdr2+4))/(bs-20::float)),0) AS otta,
    COALESCE(c2.relname,$$?$$) AS iname, COALESCE(c2.reltuples,0) AS ituples, COALESCE(c2.relpages,0) AS ipages,
    COALESCE(CEIL((c2.reltuples*(datahdr-12))/(bs-20::float)),0) AS iotta -- very rough approximation, assumes all cols
  FROM
     pg_class cc
  JOIN pg_namespace nn ON cc.relnamespace = nn.oid AND nn.nspname <> $$information_schema$$
  LEFT JOIN
  (
    SELECT
      ma,bs,foo.nspname,foo.relname,
      (datawidth+(hdr+ma-(case when hdr%ma=0 THEN ma ELSE hdr%ma END)))::numeric AS datahdr,
      (maxfracsum*(nullhdr+ma-(case when nullhdr%ma=0 THEN ma ELSE nullhdr%ma END))) AS nullhdr2
    FROM (
      SELECT
        ns.nspname, tbl.relname, hdr, ma, bs,
        SUM((1-coalesce(null_frac,0))*coalesce(avg_width, 2048)) AS datawidth,
        MAX(coalesce(null_frac,0)) AS maxfracsum,
        hdr+(
          SELECT 1+count(*)/8
          FROM pg_stats s2
          WHERE null_frac<>0 AND s2.schemaname = ns.nspname AND s2.tablename = tbl.relname
        ) AS nullhdr
      FROM pg_attribute att 
      JOIN pg_class tbl ON att.attrelid = tbl.oid
      JOIN pg_namespace ns ON ns.oid = tbl.relnamespace 
      LEFT JOIN pg_stats s ON s.schemaname=ns.nspname
      AND s.tablename = tbl.relname
      AND s.inherited=false
      AND s.attname=att.attname,
      (
        SELECT
          (SELECT current_setting($$block_size$$)::numeric) AS bs,
            CASE WHEN SUBSTRING(SPLIT_PART(v, $$ $$, 2) FROM $$#"[0-9]+.[0-9]+#"%$$ for $$#$$)
              IN ($$8.0$$,$$8.1$$,$$8.2$$) THEN 27 ELSE 23 END AS hdr,
          CASE WHEN v ~ $$mingw32$$ OR v ~ $$64-bit$$ THEN 8 ELSE 4 END AS ma
        FROM (SELECT version() AS v) AS foo
      ) AS constants
      WHERE att.attnum > 0 AND tbl.relkind=$$r$$
      GROUP BY 1,2,3,4,5
    ) AS foo
  ) AS rs
  ON cc.relname = rs.relname AND nn.nspname = rs.nspname
  LEFT JOIN pg_index i ON indrelid = cc.oid
  LEFT JOIN pg_class c2 ON c2.oid = i.indexrelid
) AS sml order by wastedbytes desc limit 5'
done
echo "建议: "
echo "    根据浪费的字节数, 设置合适的autovacuum_vacuum_scale_factor, 大表如果频繁的有更新或删除和插入操作, 建议设置较小的autovacuum_vacuum_scale_factor来降低浪费空间. "
echo "    同时还需要打开autovacuum, 根据服务器的内存大小, CPU核数, 设置足够大的autovacuum_work_mem 或 autovacuum_max_workers 或 maintenance_work_mem, 以及足够小的 autovacuum_naptime . "
echo "    同时还需要分析是否对大数据库使用了逻辑备份pg_dump, 系统中是否经常有长SQL, 长事务. 这些都有可能导致膨胀. "
echo "    使用pg_reorg或者vacuum full可以回收膨胀的空间. "
echo "    参考: http://blog.163.com/digoal@126/blog/static/1638770402015329115636287/ "
echo "    otta评估出的表实际需要页数, iotta评估出的索引实际需要页数; "
echo "    bs数据库的块大小; "
echo "    tbloat表膨胀倍数, ibloat索引膨胀倍数, wastedpages表浪费了多少个数据块, wastedipages索引浪费了多少个数据块; "
echo "    wastedbytes表浪费了多少字节, wastedibytes索引浪费了多少字节; "
echo -e "\n"


echo "----->>>---->>>  索引膨胀检查: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -q -x -c 'SELECT
  current_database() AS db, schemaname, tablename, reltuples::bigint AS tups, relpages::bigint AS pages, otta,
  ROUND(CASE WHEN otta=0 OR sml.relpages=0 OR sml.relpages=otta THEN 0.0 ELSE sml.relpages/otta::numeric END,1) AS tbloat,
  CASE WHEN relpages < otta THEN 0 ELSE relpages::bigint - otta END AS wastedpages,
  CASE WHEN relpages < otta THEN 0 ELSE bs*(sml.relpages-otta)::bigint END AS wastedbytes,
  CASE WHEN relpages < otta THEN $$0 bytes$$::text ELSE (bs*(relpages-otta))::bigint || $$ bytes$$ END AS wastedsize,
  iname, ituples::bigint AS itups, ipages::bigint AS ipages, iotta,
  ROUND(CASE WHEN iotta=0 OR ipages=0 OR ipages=iotta THEN 0.0 ELSE ipages/iotta::numeric END,1) AS ibloat,
  CASE WHEN ipages < iotta THEN 0 ELSE ipages::bigint - iotta END AS wastedipages,
  CASE WHEN ipages < iotta THEN 0 ELSE bs*(ipages-iotta) END AS wastedibytes,
  CASE WHEN ipages < iotta THEN $$0 bytes$$ ELSE (bs*(ipages-iotta))::bigint || $$ bytes$$ END AS wastedisize,
  CASE WHEN relpages < otta THEN
    CASE WHEN ipages < iotta THEN 0 ELSE bs*(ipages-iotta::bigint) END
    ELSE CASE WHEN ipages < iotta THEN bs*(relpages-otta::bigint)
      ELSE bs*(relpages-otta::bigint + ipages-iotta::bigint) END
  END AS totalwastedbytes
FROM (
  SELECT
    nn.nspname AS schemaname,
    cc.relname AS tablename,
    COALESCE(cc.reltuples,0) AS reltuples,
    COALESCE(cc.relpages,0) AS relpages,
    COALESCE(bs,0) AS bs,
    COALESCE(CEIL((cc.reltuples*((datahdr+ma-
      (CASE WHEN datahdr%ma=0 THEN ma ELSE datahdr%ma END))+nullhdr2+4))/(bs-20::float)),0) AS otta,
    COALESCE(c2.relname,$$?$$) AS iname, COALESCE(c2.reltuples,0) AS ituples, COALESCE(c2.relpages,0) AS ipages,
    COALESCE(CEIL((c2.reltuples*(datahdr-12))/(bs-20::float)),0) AS iotta -- very rough approximation, assumes all cols
  FROM
     pg_class cc
  JOIN pg_namespace nn ON cc.relnamespace = nn.oid AND nn.nspname <> $$information_schema$$
  LEFT JOIN
  (
    SELECT
      ma,bs,foo.nspname,foo.relname,
      (datawidth+(hdr+ma-(case when hdr%ma=0 THEN ma ELSE hdr%ma END)))::numeric AS datahdr,
      (maxfracsum*(nullhdr+ma-(case when nullhdr%ma=0 THEN ma ELSE nullhdr%ma END))) AS nullhdr2
    FROM (
      SELECT
        ns.nspname, tbl.relname, hdr, ma, bs,
        SUM((1-coalesce(null_frac,0))*coalesce(avg_width, 2048)) AS datawidth,
        MAX(coalesce(null_frac,0)) AS maxfracsum,
        hdr+(
          SELECT 1+count(*)/8
          FROM pg_stats s2
          WHERE null_frac<>0 AND s2.schemaname = ns.nspname AND s2.tablename = tbl.relname
        ) AS nullhdr
      FROM pg_attribute att 
      JOIN pg_class tbl ON att.attrelid = tbl.oid
      JOIN pg_namespace ns ON ns.oid = tbl.relnamespace 
      LEFT JOIN pg_stats s ON s.schemaname=ns.nspname
      AND s.tablename = tbl.relname
      AND s.inherited=false
      AND s.attname=att.attname,
      (
        SELECT
          (SELECT current_setting($$block_size$$)::numeric) AS bs,
            CASE WHEN SUBSTRING(SPLIT_PART(v, $$ $$, 2) FROM $$#"[0-9]+.[0-9]+#"%$$ for $$#$$)
              IN ($$8.0$$,$$8.1$$,$$8.2$$) THEN 27 ELSE 23 END AS hdr,
          CASE WHEN v ~ $$mingw32$$ OR v ~ $$64-bit$$ THEN 8 ELSE 4 END AS ma
        FROM (SELECT version() AS v) AS foo
      ) AS constants
      WHERE att.attnum > 0 AND tbl.relkind=$$r$$
      GROUP BY 1,2,3,4,5
    ) AS foo
  ) AS rs
  ON cc.relname = rs.relname AND nn.nspname = rs.nspname
  LEFT JOIN pg_index i ON indrelid = cc.oid
  LEFT JOIN pg_class c2 ON c2.oid = i.indexrelid
) AS sml order by wastedibytes desc limit 5'
done
echo "建议: "
echo "    如果索引膨胀太大, 会影响性能, 建议重建索引, create index CONCURRENTLY ... . "
echo -e "\n"

echo "----->>>---->>>  垃圾数据: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -q -c 'select current_database(),schemaname,relname,n_dead_tup from pg_stat_all_tables where n_live_tup>0 and n_dead_tup/n_live_tup>0.2 and schemaname not in ($$pg_toast$$,$$pg_catalog$$) order by n_dead_tup desc limit 5'
done
echo "建议: "
echo "    通常垃圾过多, 可能是因为无法回收垃圾, 或者回收垃圾的进程繁忙或没有及时唤醒, 或者没有开启autovacuum, 或在短时间内产生了大量的垃圾 . "
echo "    可以等待autovacuum进行处理, 或者手工执行vacuum table . "
echo -e "\n"

echo "----->>>---->>>  未引用的大对象: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
vacuumlo -n $db -w
echo ""
done
echo "建议: "
echo "    如果大对象没有被引用时, 建议删除, 否则就类似于内存泄露, 使用vacuumlo可以删除未被引用的大对象, 例如: vacuumlo -l 1000 $db -w . "
echo "    应用开发时, 注意及时删除不需要使用的大对象, 使用lo_unlink 或 驱动对应的API . "
echo "    参考 http://www.postgresql.org/docs/9.4/static/largeobjects.html "
echo -e "\n"


echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo "|                     数据库年龄分析                      |"
echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo ""

echo "----->>>---->>>  数据库年龄: "
psql --pset=pager=off -q -c 'select datname,age(datfrozenxid),2^31-age(datfrozenxid) age_remain from pg_database order by age(datfrozenxid) desc'
echo "建议: "
echo "    数据库的年龄正常情况下应该小于vacuum_freeze_table_age, 如果剩余年龄小于5亿, 建议人为干预, 将LONG SQL或事务杀掉后, 执行vacuum freeze . "
echo -e "\n"

echo "----->>>---->>>  表年龄: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -q -c 'select current_database(),rolname,nspname,relkind,relname,age(relfrozenxid),2^31-age(relfrozenxid) age_remain from pg_authid t1 join pg_class t2 on t1.oid=t2.relowner join pg_namespace t3 on t2.relnamespace=t3.oid where t2.relkind in ($$t$$,$$r$$) order by age(relfrozenxid) desc limit 5'
done
echo "建议: "
echo "    表的年龄正常情况下应该小于vacuum_freeze_table_age, 如果剩余年龄小于5亿, 建议人为干预, 将LONG SQL或事务杀掉后, 执行vacuum freeze . "
echo -e "\n"

echo "----->>>---->>>  长事务, 2PC: "
psql --pset=pager=off -q -x -c 'select datname,usename,query,xact_start,now()-xact_start xact_duration,query_start,now()-query_start query_duration,state from pg_stat_activity where state<>$$idle$$ and (backend_xid is not null or backend_xmin is not null) and now()-xact_start > interval $$30 min$$ order by xact_start'
psql --pset=pager=off -q -x -c 'select name,statement,prepare_time,now()-prepare_time,parameter_types,from_sql from pg_prepared_statements where now()-prepare_time > interval $$30 min$$ order by prepare_time'
echo "建议: "
echo "    长事务过程中产生的垃圾, 无法回收, 建议不要在数据库中运行LONG SQL, 或者错开DML高峰时间去运行LONG SQL. 2PC事务一定要记得尽快结束掉, 否则可能会导致数据库膨胀. "
echo "    参考: http://blog.163.com/digoal@126/blog/static/1638770402015329115636287/ "
echo -e "\n"


echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo "|               数据库XLOG, 流复制状态分析                |"
echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo ""

echo "----->>>---->>>  是否开启归档, 自动垃圾回收: "
psql --pset=pager=off -q -c 'select name,setting from pg_settings where name in ($$archive_mode$$,$$autovacuum$$,$$archive_command$$)'
echo "建议: "
echo "    建议开启自动垃圾回收, 开启归档. "
echo -e "\n"

echo "----->>>---->>>  归档统计信息: "
psql --pset=pager=off -q -c 'select pg_xlogfile_name(pg_current_xlog_location()) now_xlog, * from pg_stat_archiver'
echo "建议: "
echo "    如果当前的XLOG文件和最后一个归档失败的XLOG文件之间相差很多个文件, 建议尽快排查归档失败的原因, 以便修复, 否则pg_xlog目录可能会撑爆. "
echo -e "\n"

echo "----->>>---->>>  流复制统计信息: "
psql --pset=pager=off -q -x -c 'select pg_xlog_location_diff(pg_current_xlog_location(),flush_location), * from pg_stat_replication'
echo "建议: "
echo "    关注流复制的延迟, 如果延迟非常大, 建议排查网络带宽, 以及本地读xlog的性能, 远程写xlog的性能. "
echo -e "\n"

echo "----->>>---->>>  流复制插槽: "
psql --pset=pager=off -q -c 'select pg_xlog_location_diff(pg_current_xlog_location(),restart_lsn), * from pg_replication_slots'
echo "建议: "
echo "    如果restart_lsn和当前XLOG相差非常大的字节数, 需要排查slot的订阅者是否能正常接收XLOG, 或者订阅者是否正常. 长时间不将slot的数据取走, pg_xlog目录可能会撑爆. "
echo -e "\n"


echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo "|                数据库安全或潜在风险分析                 |"
echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo ""

echo "----->>>---->>>  密码泄露检查: "
echo "    检查 ~/.psql_history :  "
grep -i "password" ~/.psql_history|grep -i -E "role|group|user"
echo ""
echo "    检查 *.csv :  "
cat *.csv | grep -E "^[0-9]" | grep -i -r -E "role|group|user" |grep -i "password"|grep -i -E "create|alter"
echo ""
echo "    检查 $PGDATA/recovery.* :  "
grep -i "password" ../recovery.*
echo ""
echo "    检查 pg_stat_statements :  "
psql --pset=pager=off -c 'select query from pg_stat_statements where (query ~* $$group$$ or query ~* $$user$$ or query ~* $$role$$) and query ~* $$password$$'
echo "    检查 pg_authid :  "
psql --pset=pager=off -q -c 'select * from pg_authid where rolpassword !~ $$^md5$$ or length(rolpassword)<>35'
echo "    检查 pg_user_mappings, pg_views :  "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -c 'select current_database(),* from pg_user_mappings where umoptions::text ~* $$password$$'
psql -d $db --pset=pager=off -c 'select current_database(),* from pg_views where definition ~* $$password$$ and definition ~* $$dblink$$'
done
echo "建议: "
echo "    如果以上输出显示密码已泄露, 尽快修改, 并通过参数避免密码又被记录到以上文件中(psql -n) (set log_statement='none'; set log_min_duration_statement=-1; set log_duration=off; set pg_stat_statements.track_utility=off;) . "
echo "    明文密码不安全, 建议使用create|alter role ... encrypted password. "
echo "    在fdw, dblink based view中不建议使用密码明文. "
echo "    在recovery.*的配置中不要使用密码, 不安全, 可以使用.pgpass配置密码 . "
echo -e "\n"

echo "----->>>---->>>  简单密码检查: "
echo "    1. 检查已有密码是否简单, 从crackdb库提取密码字典, 挨个检查 :  "
echo "    检查 md5('$pwd'||'$username')是否与pg_authid.rolpassword匹配 :  "
echo "    匹配则说明用户使用了简单密码 :  "
echo ""
echo "    2. 事前检查参考 http://blog.163.com/digoal@126/blog/static/16387704020149852941586"
echo -e "\n"

echo "----->>>---->>>  用户密码到期时间: "
psql --pset=pager=off -q -c 'select rolname,rolvaliduntil from pg_authid order by rolvaliduntil'
echo "建议: "
echo "    到期后, 用户将无法登陆, 记得修改密码, 同时将密码到期时间延长到某个时间或无限时间, alter role ... VALID UNTIL 'timestamp' . "
echo -e "\n"

echo "----->>>---->>>  SQL注入风险分析: "
cat *.csv | grep -E "^[0-9]" | grep exec_simple_query |awk -F "," '{print $2" "$3" "$5" "$NF}'|sed 's/\:[0-9]*//g'|sort|uniq -c|sort -n -r
echo "建议: "
echo "    调用exec_simple_query有风险, 允许多个SQL封装在一个接口中调用, 建议程序使用绑定变量规避SQL注入风险, 或者程序端使用SQL注入过滤插件. "
echo -e "\n"

echo "----->>>---->>>  普通用户对象上的规则安全检查: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -c 'select current_database(),a.schemaname,a.tablename,a.rulename,a.definition from pg_rules a,pg_namespace b,pg_class c,pg_authid d where a.schemaname=b.nspname and a.tablename=c.relname and d.oid=c.relowner and not d.rolsuper union all select current_database(),a.schemaname,a.viewname,a.viewowner,a.definition from pg_views a,pg_namespace b,pg_class c,pg_authid d where a.schemaname=b.nspname and a.viewname=c.relname and d.oid=c.relowner and not d.rolsuper'
done
echo "建议: "
echo "    防止普通用户在规则中设陷阱, 注意有危险的security invoker的函数调用, 超级用户可能因为规则触发后误调用这些危险函数(以invoker角色). "
echo "    参考 http://blog.163.com/digoal@126/blog/static/16387704020155131217736/ "
echo -e "\n"

echo "----->>>---->>>  普通用户自定义函数安全检查: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -c 'select current_database(),b.rolname,c.nspname,a.proname from pg_proc a,pg_authid b,pg_namespace c where a.proowner=b.oid and a.pronamespace=c.oid and not b.rolsuper and not a.prosecdef'
done
echo "建议: "
echo "    防止普通用户在函数中设陷阱, 注意有危险的security invoker的函数调用, 超级用户可能因为触发器触发后误调用这些危险函数(以invoker角色). "
echo "    参考 http://blog.163.com/digoal@126/blog/static/16387704020155131217736/ "
echo -e "\n"

echo "----->>>---->>>  unlogged table 和 哈希索引: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -q -c 'select current_database(),t3.rolname,t2.nspname,t1.relname from pg_class t1,pg_namespace t2,pg_authid t3 where t1.relnamespace=t2.oid and t1.relowner=t3.oid and t1.relpersistence=$$u$$'
psql -d $db --pset=pager=off -q -c 'select current_database(),pg_get_indexdef(oid) from pg_class where relkind=$$i$$ and pg_get_indexdef(oid) ~ $$USING hash$$'
done
echo "建议: "
echo "    unlogged table和hash index不记录XLOG, 无法使用流复制或者log shipping的方式复制到standby节点, 如果在standby节点执行某些SQL, 可能导致报错或查不到数据. "
echo "    在数据库CRASH后无法修复unlogged table和hash index, 不建议使用. "
echo "    PITR对unlogged table和hash index也不起作用. "
echo -e "\n"

echo "----->>>---->>>  剩余可使用次数不足1000万次的序列检查: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off <<EOF
create or replace function f(OUT v_datname name, OUT v_role name, OUT v_nspname name, OUT v_relname name, OUT v_times_remain int8) returns setof record as \$\$
declare
begin
  v_datname := current_database();
  for v_role,v_nspname,v_relname in select rolname,nspname,relname from pg_authid t1 , pg_class t2 , pg_namespace t3 where t1.oid=t2.relowner and t2.relnamespace=t3.oid and t2.relkind='S' 
  LOOP
    execute 'select (max_value-last_value)/increment_by from "'||v_nspname||'"."'||v_relname||'" where not is_cycled' into v_times_remain;
    return next;
  end loop;
end;
\$\$ language plpgsql;

select * from f() where v_times_remain is not null and v_times_remain < 10240000 order by v_times_remain limit 10;
EOF
done
echo "建议: "
echo "    序列剩余使用次数到了之后, 将无法使用, 报错, 请开发人员关注. "
echo -e "\n"

echo "----->>>---->>>  触发器, 事件触发器: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -q -c 'select current_database(),relname,tgname,proname,tgenabled from pg_trigger t1,pg_class t2,pg_proc t3 where t1.tgfoid=t3.oid and t1.tgrelid=t2.oid'
psql -d $db --pset=pager=off -q -c 'select current_database(),rolname,proname,evtname,evtevent,evtenabled,evttags from pg_event_trigger t1,pg_proc t2,pg_authid t3 where t1.evtfoid=t2.oid and t1.evtowner=t3.oid'
done
echo "建议: "
echo "    请管理员注意触发器和事件触发器的必要性. "
echo -e "\n"

echo "----->>>---->>>  检查是否使用了a-z 0-9 _ 以外的字母作为对象名: "
psql --pset=pager=off -q -c 'select distinct datname from (select datname,regexp_split_to_table(datname,$$$$) word from pg_database) t where (not (ascii(word) >=97 and ascii(word) <=122)) and (not (ascii(word) >=48 and ascii(word) <=57)) and ascii(word)<>95'
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -q -c 'select current_database(),relname,relkind from (select relname,relkind,regexp_split_to_table(relname,$$$$) word from pg_class) t where (not (ascii(word) >=97 and ascii(word) <=122)) and (not (ascii(word) >=48 and ascii(word) <=57)) and ascii(word)<>95 group by 1,2,3'
psql -d $db --pset=pager=off -q -c 'select current_database(), typname from (select typname,regexp_split_to_table(typname,$$$$) word from pg_type) t where (not (ascii(word) >=97 and ascii(word) <=122)) and (not (ascii(word) >=48 and ascii(word) <=57)) and ascii(word)<>95 group by 1,2'
psql -d $db --pset=pager=off -q -c 'select current_database(), proname from (select proname,regexp_split_to_table(proname,$$$$) word from pg_proc where proname !~ $$^RI_FKey_$$) t where (not (ascii(word) >=97 and ascii(word) <=122)) and (not (ascii(word) >=48 and ascii(word) <=57)) and ascii(word)<>95 group by 1,2'
psql -d $db --pset=pager=off -q -c 'select current_database(),nspname,relname,attname from (select nspname,relname,attname,regexp_split_to_table(attname,$$$$) word from pg_class a,pg_attribute b,pg_namespace c where a.oid=b.attrelid and a.relnamespace=c.oid ) t where (not (ascii(word) >=97 and ascii(word) <=122)) and (not (ascii(word) >=48 and ascii(word) <=57)) and ascii(word)<>95 group by 1,2,3,4'
done
echo "建议: "
echo "    建议任何identify都只使用 a-z, 0-9, _ (例如表名, 列名, 视图名, 函数名, 类型名, 数据库名, schema名, 物化视图名等等). "
echo "    identify 用法 https://yq.aliyun.com/articles/52883 . "
echo "    https://www.postgresql.org/docs/9.5/static/sql-keywords-appendix.html . "
echo "    https://www.postgresql.org/docs/9.5/static/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS . "
echo -e "\n"

echo "----->>>---->>>  锁等待: "
psql -x --pset=pager=off <<EOF
with    
t_wait as    
(    
  select a.mode,a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,a.granted,   
  a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a.transactionid,a.fastpath,    
  b.state,b.query,b.xact_start,b.query_start,b.usename,b.datname,b.client_addr,b.client_port,b.application_name   
    from pg_locks a,pg_stat_activity b where a.pid=b.pid and not a.granted   
),   
t_run as   
(   
  select a.mode,a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,a.granted,   
  a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a.transactionid,a.fastpath,   
  b.state,b.query,b.xact_start,b.query_start,b.usename,b.datname,b.client_addr,b.client_port,b.application_name   
    from pg_locks a,pg_stat_activity b where a.pid=b.pid and a.granted   
),   
t_overlap as   
(   
  select r.* from t_wait w join t_run r on   
  (   
    r.locktype is not distinct from w.locktype and   
    r.database is not distinct from w.database and   
    r.relation is not distinct from w.relation and   
    r.page is not distinct from w.page and   
    r.tuple is not distinct from w.tuple and   
    r.virtualxid is not distinct from w.virtualxid and   
    r.transactionid is not distinct from w.transactionid and   
    r.classid is not distinct from w.classid and   
    r.objid is not distinct from w.objid and   
    r.objsubid is not distinct from w.objsubid and   
    r.pid <> w.pid   
  )    
),    
t_unionall as    
(    
  select r.* from t_overlap r    
  union all    
  select w.* from t_wait w    
)    
select locktype,datname,relation::regclass,page,tuple,virtualxid,transactionid::text,classid::regclass,objid,objsubid,   
string_agg(   
'Pid: '||case when pid is null then 'NULL' else pid::text end||chr(10)||   
'Lock_Granted: '||case when granted is null then 'NULL' else granted::text end||' , Mode: '||case when mode is null then 'NULL' else mode::text end||' , FastPath: '||case when fastpath is null then 'NULL' else fastpath::text end||' , VirtualTransaction: '||case when virtualtransaction is null then 'NULL' else virtualtransaction::text end||' , Session_State: '||case when state is null then 'NULL' else state::text end||chr(10)||   
'Username: '||case when usename is null then 'NULL' else usename::text end||' , Database: '||case when datname is null then 'NULL' else datname::text end||' , Client_Addr: '||case when client_addr is null then 'NULL' else client_addr::text end||' , Client_Port: '||case when client_port is null then 'NULL' else client_port::text end||' , Application_Name: '||case when application_name is null then 'NULL' else application_name::text end||chr(10)||    
'Xact_Start: '||case when xact_start is null then 'NULL' else xact_start::text end||' , Query_Start: '||case when query_start is null then 'NULL' else query_start::text end||' , Xact_Elapse: '||case when (now()-xact_start) is null then 'NULL' else (now()-xact_start)::text end||' , Query_Elapse: '||case when (now()-query_start) is null then 'NULL' else (now()-query_start)::text end||chr(10)||    
'SQL (Current SQL in Transaction): '||chr(10)||  
case when query is null then 'NULL' else query::text end,    
chr(10)||'--------'||chr(10)    
order by    
  (  case mode    
    when 'INVALID' then 0   
    when 'AccessShareLock' then 1   
    when 'RowShareLock' then 2   
    when 'RowExclusiveLock' then 3   
    when 'ShareUpdateExclusiveLock' then 4   
    when 'ShareLock' then 5   
    when 'ShareRowExclusiveLock' then 6   
    when 'ExclusiveLock' then 7   
    when 'AccessExclusiveLock' then 8   
    else 0   
  end  ) desc,   
  (case when granted then 0 else 1 end)  
) as lock_conflict  
from t_unionall   
group by   
locktype,datname,relation,page,tuple,virtualxid,transactionid::text,classid,objid,objsubid ;   
EOF
echo "建议: "
echo "    锁等待状态, 反映业务逻辑的问题或者SQL性能有问题, 建议深入排查持锁的SQL. "
echo -e "\n"

echo "----->>>---->>>  继承关系检查: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -q -c 'select inhrelid::regclass,inhparent::regclass,inhseqno from pg_inherits order by 2,3'
done
echo "建议: "
echo "    如果使用继承来实现分区表, 注意分区表的触发器中逻辑是否正常, 对于时间模式的分区表是否需要及时加分区, 修改触发器函数 . "
echo "    建议继承表的权限统一, 如果权限不一致, 可能导致某些用户查询时权限不足. "
echo -e "\n"


echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo "|                      重置统计信息                       |"
echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo ""

echo "----->>>---->>>  重置统计信息: "
for db in `psql --pset=pager=off -t -A -q -c 'select datname from pg_database where datname not in ($$template0$$, $$template1$$)'`
do
psql -d $db --pset=pager=off -c 'select pg_stat_reset()'
done
psql --pset=pager=off -c 'select pg_stat_reset_shared($$bgwriter$$)'
psql --pset=pager=off -c 'select pg_stat_reset_shared($$archiver$$)'

echo "----->>>---->>>  重置pg_stat_statements统计信息: "
psql --pset=pager=off -q -A -c 'select pg_stat_statements_reset()'

}  # common function end


primary() {
echo "----->>>---->>>  获取recovery.done md5值: "
md5sum $PGDATA/recovery.done
echo "建议: "
echo "    主备md5值一致(判断主备配置文件是否内容一致的一种手段, 或者使用diff)."
echo -e "\n"

echo "----->>>---->>>  获取recovery.done配置: "
grep '^\ *[a-z]' $PGDATA/recovery.done|awk -F "#" '{print $1}'
echo "建议: "
echo "    在primary_conninfo中不要配置密码, 容易泄露. 建议为流复制用户创建replication角色的用户, 并且配置pg_hba.conf只允许需要的来源IP连接. "
echo -e "\n"
}  # primary function end


standby() {
echo "----->>>---->>>  获取recovery.conf md5值: "
md5sum $PGDATA/recovery.conf
echo "建议: "
echo "    主备md5值一致(判断主备配置文件是否内容一致的一种手段, 或者使用diff)."
echo -e "\n"

echo "----->>>---->>>  获取recovery.conf配置: "
grep '^\ *[a-z]' $PGDATA/recovery.conf|awk -F "#" '{print $1}'
echo "建议: "
echo "    在primary_conninfo中不要配置密码, 容易泄露. 建议为流复制用户创建replication角色的用户, 并且配置pg_hba.conf只允许需要的来源IP连接. "
echo -e "\n"
}  # standby function end


adds() {
echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo "|                        附加信息                         |"
echo "|+++++++++++++++++++++++++++++++++++++++++++++++++++++++++|"
echo ""

echo "----->>>---->>>  附件1 : `date -d '-1 day' +"%Y-%m-%d"` 操作系统sysstat收集的统计信息 "
sar -A -f /var/log/sa/sa`date -d '-1 day' +%d`
echo -e "\n"

echo "----->>>---->>>  其他建议: "
echo "    其他建议的巡检项: "
echo "        HA 状态是否正常, 例如检查HA程序, 检查心跳表的延迟. "
echo "        sar io, load, ...... "
echo "    巡检结束后, 清理csv日志 "
}  # adds function end


if [ $is_standby == 't' ]; then
standby
else
primary
fi

common
adds
cd $pwd
return 0

#  备注
#  csv日志分析需要优化
#  某些操作需要root## 写在前面的话

其实这个 早就在弄了，但是一直没能好，气人，今天终于有些眉目了，特此做记录




## 环境  

1.jenkins搭建好
2.maven环境搭建好
3.git仓库搭建好


[root@pa2 ~]# mvn -v
Apache Maven 3.5.3 (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; 2018-02-25T03:49:05+08:00)
Maven home: /usr/local/maven
Java version: 1.8.0_131, vendor: Oracle Corporation
Java home: /usr/java/jdk/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "3.10.0-862.2.3.el7.x86_64", arch: "amd64", family: "unix"


[root@pa2 ~]# java -version
openjdk version "1.8.0_171"
OpenJDK Runtime Environment (build 1.8.0_171-b10)
OpenJDK 64-Bit Server VM (build 25.171-b10, mixed mode)



环境一定要搭建好，因为后面需要在jenkins页面设置下

### Maven配置

jenkins页面配置如下
https://s1.ax1x.com/2018/05/21/C2UOHO.jpg

### JDK配置

jenkins页面配置如下
https://s1.ax1x.com/2018/05/21/C2UjED.jpg


## 添加新项目细节

1.新建任务 
2.构建一个自由风格的项目 
3.源码管理选择git  
4.输入git仓库地址和授权账户密码  
5.增加构建步骤，调用顶级Maven项目，版本不要选择为默认，填写之前写的maven  
6.增加构建后步骤，调用shell  shell前面要加BUILD_ID=DONTKILLME，防止任务构建完成杀死启动的进程，当然，对于tomcat也有其他的方法，


https://s1.ax1x.com/2018/05/21/C2amCj.jpg

https://s1.ax1x.com/2018/05/21/C2an8s.md.jpg

https://s1.ax1x.com/2018/05/21/C2au2n.jpg



##  参考脚本

#!/bin/bash
job=$"java"
jenkins_dir=$"/root/.jenkins"
tomcat_dir=$"/usr/local/tomcat"
ip=`curl ip.gs | head -1 |awk '{print $6}'`
sleep_time=8
cd $tomcat_dir/webapps/
rm -rf ./*

cp $jenkins_dir/workspace/$job/target/*.war $tomcat_dir/webapps/ 
# kill tomcat pid
ps -ef |grep tomcat |grep -v grep  |awk '{print $2}' |xargs kill -9 
if [ $? -eq 0 ] ;
        then
	echo -e "Tomcat be killed"
fi

echo -e "正在重启Tomcat"
sleep 3 
# tomcat start
cd $tomcat_dir
./bin/startup.sh
if [ $? -eq 0 ] ;
        then
        echo -e "Tomcat is Running"
	else
	echo -e "Tomcat No Running!"
fi

sleep `$sleep_time`
echo "Please Wait........." ; echo ".................." | pv -qL 2 
echo -e "\n"
echo -e `curl -I $ip `
echo -e "\n"




#二进制安装
cd /root
wget  http://7d9nal.com2.z0.glb.qiniucdn.com/0.11.34/linux_amd64.tar.gz
#解压并cd 
tar xf linux_amd64.tar.gz
cd  /root/gogs
#开启(挂在后台)
nohup /root/gogs/gogs web &
#该浏览器出场了(外网ip)
ip:3000
## 下载包
wget  http://teleport.eomsoft.net/static/download/opensource/teleport-server-linux-x64-2.2.10.1.tar.gz

tar xf  teleport-server-linux-x64-2.2.10.1.tar.gz
cd teleport-server-linux-x64-2.2.10.1

## 开启
sudo ./setup.sh
  
 
 
[root@local teleport-server-linux-x64-2.2.10.1]# sudo ./setup.sh 

[]===========================================================================[]
 | Teleport Server Installation                                              |
 |===========================================================================|
 |    ver: 2.2.10.1                                                          |
 | author: apexliu@eomsoft.net                                               |
[]===========================================================================[]

Welcome to install Teleport Server!

NOTICE: There are a few steps need you enter information or make choice,
        if you want to use the default settings, just press `Enter` key.
        Otherwise you need enter the highlight character to make choice.


Prepare installation...
 - check local installation ... [not exists]


Set installation path [/usr/local/teleport]: 
 - copy [/root/teleport-server-linux-x64-2.2.10.1/data/bin]
     -> [/usr/local/teleport/bin]
 - copy [/root/teleport-server-linux-x64-2.2.10.1/data/www]
     -> [/usr/local/teleport/www]
 - copy [/root/teleport-server-linux-x64-2.2.10.1/data/tmp/etc]
     -> [/usr/local/teleport/data/etc]
process [daemon.in] to [/etc/init.d/teleport]
process [start.sh.in] to [/usr/local/teleport/start.sh]
process [stop.sh.in] to [/usr/local/teleport/stop.sh]
process [status.sh.in] to [/usr/local/teleport/status.sh]

start services...
starting teleport core server ... [done]
starting teleport web ... [done]

check services status...
teleport core server is running.
teleport web server is running.

--==[ ALL DONE ]==--


Installation done.


## 浏览器检验

地址栏输入 ip+7190


如图


## windows端安装包地址
 
这将作为teleport在windows的辅助工具，windows直接安装，web页面会自动识别到端口


http://teleport.eomsoft.net/static/download/opensource/teleport-assist-2.2.6.1.exe
 
 
## 官网地址

http://teleport.eomsoft.net


### 下载编译过的包
wget https://nodejs.org/dist/v8.11.3/node-v8.11.3-linux-x64.tar.gz
### 解压
tar xf node-v8.11.3-linux-x64.tar.gz

### 移动到一个顺眼的位置
sudo mv node-v8.11.3-linux-x64 /usr/local/nodejs

### 做个系统软链接
sudo ln -s /usr/local/nodejs/bin/node /usr/local/bin/node
sudo ln -s /usr/local/nodejs/bin/npm /usr/local/bin/npm

### 看下版本

node版本
lijinghua@test:/usr/local$ node --version
v8.11.3

npm版本
lijinghua@test:/usr/local$ npm --version
5.6.0

有时会出现一个问题，npm版本不是我们想要的版本，一般是低于我们要的版本，那就做升级

### 升级姿势

npm install npm@latest -g   #升级到最新
npm install npm@6.3.0  -g   #升级到指定版本


## 主库配置 ，需要重启

log-bin=mysql-bin
binlog_format=mixed

# server-id 不能和从库一样



## 主库开账号

CREATE USER 'slave'@'%' IDENTIFIED BY '111111';
grant all privileges on *.* to 'slave' identified by '111111';
flush privileges;



## 从库配置，需要重启

master-info-repository            = table
relay-log-info-repository         = table
master-info-repository            = table
relay-log-recovery                = ON
relay_log_recovery                = 1 
 slave-parallel-type              =LOGICAL_CLOCK
slave-parallel-workers            =4

#logbin选择性开启

#log-bin                 = mysql-bin
#log-slave-updates       = 1

## 关于从库备库延迟写入


CHANGE MASTER TO MASTER_DELAY = 60;


##  从库连接账号

stop slave ;


CHANGE MASTER TO 
MASTER_HOST='10.0.0.5',
MASTER_USER='slave',
MASTER_PASSWORD='111111',
MASTER_LOG_FILE='mysql-bin.000016',
MASTER_LOG_POS=2920774;


start slave ;



## 从库查看


show slave status \G




http://nginx.org/download/

wget http://nginx.org/download/nginx-1.10.3.tar.gz



yum -y install gcc automake autoconf libtool make gcc gcc-c++
yum -y install openssl openssl-devel  
yum -y install pcre*
yum install -y zlib*
yum -y install gcc gcc-c++ autoconf automake make  
yum -y install zlib zlib-devel openssl openssl--devel pcre pcre-devel  

wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.37.tar.gz 



#tar -zxvf pcre-8.37.tar.gz
#cd pcre-8.34
#./configure
#make
#make install
#
#wget http://zlib.net/zlib-1.2.8.tar.gz
#tar -zxvf zlib-1.2.8.tar.gz
#cd zlib-1.2.8
#./configure
#make
#make install


./configure \
--prefix=/www/web/nginx \
--user=www \
--group=www \
--with-http_stub_status_module \
--with-http_ssl_module






## 



##  ik分词



      curl -XPUT http://localhost:9200/index2
      curl 'http://localhost:9200/index2/_analyze?analyzer=ik_max_word&pretty=true' -d '{"text":"我是中国人"}'

curl 'http://192.168.80.10:9200/zhouls/_analyze?pretty=true' -d '{"text":"sdsk  sd sdjsk"}'
ctrl+d: 删除当前字符。
ctrl+h: 删除之前的字符。
ctrl+u: 删除整行。
ctrl+k: 删除当前到文本末尾的字符。
ctrl+w: 删除光标前的单词。
ctrl+t: 交换当前光标和前一个位置，互换。



## 卸载旧版本
使用下面的命令检查是否安装有MySQL Server

rpm -qa | grep mysql

有的话通过下面的命令来卸载掉

rpm -e mysql   //普通删除模式
rpm -e --nodeps mysql    // 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除
## 安装MySQL

## 安装编译代码需要的包
yum -y install make gcc-c++ cmake bison-devel  ncurses-devel

yum install -y git gcc gcc-c++ ncurses-devel bison cmake.x86_64 cmake libaio.x86_64  bison.x86_64  gcc-c++.x86_64

## 下载MySQL 5.6.14
wget wget http://mirrors.sohu.com/mysql/MySQL-5.6/mysql-5.6.35.tar.gz
tar xvf mysql-5.6.35.tar.gz
cd mysql-5.6.35

## 编译安装
cmake \
-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \
-DMYSQL_DATADIR=/usr/local/mysql/data \
-DSYSCONFDIR=/etc \
-DWITH_MYISAM_STORAGE_ENGINE=1 \
-DWITH_INNOBASE_STORAGE_ENGINE=1 \
-DWITH_MEMORY_STORAGE_ENGINE=1 \
-DWITH_READLINE=1 \
-DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock \
-DMYSQL_TCP_PORT=3306 \
-DENABLED_LOCAL_INFILE=1 \
-DWITH_PARTITION_STORAGE_ENGINE=1 \
-DEXTRA_CHARSETS=all \
-DDEFAULT_CHARSET=utf8 \
-DDEFAULT_COLLATION=utf8_general_ci

make && make install

编译的参数可以参考http://dev.mysql.com/doc/refman/5.5/en/source-configuration-options.html。

整个过程需要30分钟左右……漫长的等待

## 配置MySQL

设置权限
就创建用户，用户组

groupadd mysql
useradd -g mysql mysql


修改/usr/local/mysql权限
chown -R mysql:mysql /usr/local/mysql


## 初始化配置

进入安装路径

cd /usr/local/mysql
进入安装路径，执行初始化配置脚本，创建系统自带的数据库和表

scripts/mysql_install_db --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --user=mysql
注：在启动MySQL服务时，会按照一定次序搜索my.cnf，先在/etc目录下找，找不到则会搜索"$basedir/my.cnf"，

注意：在CentOS 6.4版操作系统的最小安装完成后，在/etc目录下会存在一个my.cnf，需要将此文件更名为其他的名字，如：/etc/my.cnf.bak，否则，该文件会干扰源码安装的MySQL的正确配置，造成无法启动。

在使用"yum update"更新系统后，需要检查下/etc目录下是否会多出一个my.cnf，如果多出，将它重命名成别的。否则，MySQL将使用这个配置文件启动，可能造成无法正常启动等问题。

## 启动MySQL

添加服务，拷贝服务脚本到init.d目录，并设置开机启动

cp support-files/mysql.server /etc/init.d/mysql
chkconfig mysql on
service mysql start  # --启动MySQL


## 环境配置

设置之前，我们需要先设置PATH，要不不能直接调用mysql

vim /etc/profile  #在文件末尾添加

PATH=/usr/local/mysql/bin:$PATH
export PATH

#让配置立即生效
source /etc/profile

现在，我们可以在终端内直接输入mysql进入，mysql的环境了


## 配置用户
MySQL启动成功后，root默认没有密码，我们需要设置root密码。

先在配置文件里面加入一行

vim /etc/my.cnf
···
skip-grant-tables
···
然后重启MySQL
service mysql restart 

执行下面的命令修改root密码

mysql -uroot -p 
mysql>use mysql;
mysql>update user set password=password("new_password") where user="user_name";
mysql>flush privileges;

service mysql restart  #重启数据库测试下是否ok

若要设置root用户可以远程访问，执行

mysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'password' WITH GRANT OPTION;
mysql> flush privileges;

注：其实这种初始化后修改配置文件改密码这种方式只是我这样做，但是我知道有其他更简单的方法
CentOS 7中默认使用Firewalld做防火墙，所以修改iptables后，在重启系统后，根本不管用。

Firewalld中添加端口方法如下：

firewall-cmd --zone=public --add-port=3306/tcp --permanent

firewall-cmd --reload## ��װ����������
����ʹ��Postfix�������ʼ�,�ڰ�װ�ڼ���ѡ��'Internet Site'. ��Ҳ������sendmai���� ����SMTP���� �� ʹ��SMTP�����ʼ�.

�� Centos 6 �� 7 ϵͳ��, ����������ϵͳ����ǽ���濪��HTTP��SSH�˿�.

apt-get install curl openssh-server ca-certificates postfix
## ���GitLab�ֿ�,����װ����������(��gitlab��װԴ��ӵ�apt�У�Ȼ��ͨ��apt-get��װ������Ƚ�aptԴ�޸ĳɹ��ڵ�)
curl -sS http://packages.gitlab.cc/install/gitlab-ce/script.deb.sh | sudo bash
apt-get install gitlab-ce -y  #�Ƚ���,Ҫ����

## ����GitLab (�ڴ�Ҫ��)
gitlab-ctl reconfigure
 
## ���������ip

 
## ci --runner

���Gitlab�Ĺٷ�Դ��

# For Debian/Ubuntu
curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash

# For CentOS
curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash
��װ

# For Debian/Ubuntu
sudo apt-get -y install gitlab-ci-multi-runner

# For CentOS
sudo yum -y install gitlab-ci-multi-runner


## ע��һ��
gitlab-ci-multi-runner register

�ο����� https://blog.csdn.net/xl_lx/article/details/78329019



## �޸���Ŀpath
cd /opt/gitlab/embedded/service/gitlab-rails/config 

�޸� gitlab.yml

## GitLab settings 
gitlab: 
## Web server settings (note: host is the FQDN, do not include http://) 
host: 192.168.1.106 
port: 90 
https: false


## .gitlab-ci.yml

before_script:
- rm -rf py35env 

stages:
- pylinttests
- unittests

pylinttests:
  stage: pylinttests
  script:
    - virtualenv -p python3.5 py35env #����Python���⻯����
    - py35env/bin/python -m pip install -r requirements.txt #��װ�������
    - py35env/bin/python test.py pylinttests #���е�Ԫ����
  tags:
    - shell  #ָ��tagΪshel��runner����


unittests:
  stage: unittests
  script:
    - virtualenv -p python3.5 py35env
    - py35env/bin/python -m pip install -r requirements.txt
    - py35env/bin/coverage run --source=entity test.py unittests #ִ�в���
    - py35env/bin/coverage report 
  tags:
    - shell








    ---

stages:
  - build
  - test
  - deploy

before_script:

  - echo "begin"



after_script:
  - echo "hello"



build1:
  script:
    - cp build.shx build.sh
    - sh build.sh
    - rm build.sh
  only:
    - feature/deployment
  when: manual


developerTask:
  script:
    - export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
    - cd /opt/projects/wenyinkuaiti_project/wenyinkuaiti
    - git reset --hard
    - git checkout developer
    - git pull origin developer
    - git show
    - cd /opt/projects/wenyinkuaiti_project/wenyinkuaiti/frontend
    - cp src/config.json.dev.example src/config.json
    - npm i --registry=https://registry.npm.taobao.org
    - npm run build
    - supervisorctl reread
    - supervisorctl update
    - supervisorctl restart kuait_developer_backend8882
  only:
    - developer


masterTask:
  script:
    - cd /git/bare_wykuaiti_local/wenyinkuaiti_loc
    - git reset --hard
    - git checkout master
    - git pull origin master
    - git push onlyoffice master
  only:
    - master

## ע��
runnerע���ʱ��Ҳ��Ҫsudo


## gitlab runner ���н���
vim /etc/gitlab-runner/config.toml

concurrent = 8







#echo "1">>tmp
#exec git update-server-info
#echo "2">>tmp
#HOMEPAGE_DIR=/opt/projects/tianfeng-fluidity-management.bak/
unset GIT_DIR
#echo "3">>tmp
cd  /opt/projects/tianfeng-fluidity-management.bak/
git reset --hard
git checkout master
git pull origin  master
sed -i "s/192.168.0.101:8000/47.94.130.153:8080/g" /opt/projects/tianfeng-fluidity-management.bak/.webpackrc.js
sed -i "s/192.168.0.101:8000/47.94.130.153:8000/g" /opt/projects/tianfeng-fluidity-management.bak/.roadhogrc.mock.js
cp -rf /opt/projects/tianfeng-fluidity-management.bak/* /opt/projects/tianfeng-fluidity-management
cd /opt/projects/tianfeng-fluidity-management
npm install
node_pid=`netstat -lntup |grep node |awk '{print $7}' |tr -d [a-z][/]`
kill $node_pid
sudo service supervisor restart



docker restart gzhfront && docker exec -d gzhfront /bin/bash -c "cd /workspace && yarn && yarn start"

usermod -a -G sudo <username>
yum -y install supervisor

%sudo	ALL=(ALL:ALL) ALL


flask

unset GIT_DIR
#echo "3">>tmp
cd  /tmp/mabo_bak/
git reset --hard
git checkout master
git pull origin  master
cp -rf /tmp/mabo_bak/* /opt/mabo
cd /opt/mabo/
id=`netstat -lntup |grep /opt/mabo/env/bin/flask  |awk '{print $7}' |tr -d [a-z][/]`
kill $id
export FLASK_APP=app.py
sudo service supervisor restart



#echo "1">>tmp
#exec git update-server-info
#echo "2">>tmp
#HOMEPAGE_DIR=/opt/projects/tianfeng-fluidity-management.bak/
unset GIT_DIR
#echo "3">>tmp
cd  /opt/projects/tianfeng-fluidity-management.bak/
git reset --hard
git checkout master
git pull origin  master
sed -i "s/192.168.0.101:8000/47.94.130.153:8080/g" /opt/projects/tianfeng-fluidity-management.bak/.webpackrc.js
sed -i "s/192.168.0.101:8000/47.94.130.153:8000/g" /opt/projects/tianfeng-fluidity-management.bak/.roadhogrc.mock.js
cp -rf /opt/projects/tianfeng-fluidity-management.bak/* /opt/projects/tianfeng-fluidity-management
cd /opt/projects/tianfeng-fluidity-management
npm install
node_pid=`netstat -lntup |grep node |awk '{print $7}' |tr -d [a-z][/]`
kill $node_pid
sudo service supervisor restart


[program:mabo] ; �������ƣ��� supervisorctl ��ͨ�����ֵ���Գ������һϵ�еĲ���
command= export FLASK_APP=app.py &&  flask run
autorestart=True ; �����쳣�˳����Զ�����
autostart=True ; �� supervisord ������ʱ��Ҳ�Զ�����
redirect_stderr=True ; �� stderr �ض��� stdout��Ĭ�� false
user=labs ; ���ĸ��û�����
directory=/opt/mabo; ���������Ŀ¼
stdout_logfile_maxbytes = 20MB ; stdout ��־�ļ���С��Ĭ�� 50MB
stdout_logfile_backups = 20 ; stdout ��־�ļ�������
stdout_logfile=/tmp/python.log




#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".
echo "1">>tmp
#exec git update-server-info
echo "2">>tmp
HOMEPAGE_DIR=/opt/projects/guzhuan2_project/guzhuan2/
unset GIT_DIR
echo "3">>tmp
cd  /opt/projects/guzhuan2_project/guzhuan2/
git reset --hard
git checkout master
git pull origin  master
 docker restart gzhfront && docker exec -d gzhfront /bin/bash -c "cd /workspace && yarn && yarn start"## 安装curl
	yum install -y curl

## 下载rpm包
	curl -LJO https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-8.9.8-ce.0.el7.x86_64.rpm

## 安装rpm包
	rpm -i gitlab-ce-8.9.8-ce.0.el7.x86_64.rpm
## 初始化
    gitlab-ctl reconfigure
## 查看状态
    gitlab-ctl status
## 开启
    gitlab-ctl start 
	
## 停止 
	gitlab-ctl stop

## 浏览器输入地址
   Bud1            �                                                           I + D j a n                                           u W S G I + D j a n g o + N g i n x . m dIlocblob   ��������������                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E   �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `                                                   @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              #下载源码包
cd  /root/
wget http://mirrors.shu.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz
#解压
tar xf apache-maven-3.5.4-bin.tar.gz
#搬家
mv apache-maven-3.5.4  /usr/local/maven
#环境配置(追加)
vim /etc/profile
#maven set
export MAVEN_HOME=/usr/local/maven
export MAVEN_HOME
#生效
source  /etc/profile
#检测是否成功
mvn -v



# zshrc

export M2_HOME=/usr/local/maven
export M2=$M2_HOME/bin
export PATH=$M2:$PATH要知道的

Supervisor 是一个 C/S 模型的程序，supervisord 是 server 端，supervisorctl 是 client 端。
Supervisor安装配置管理

简介

Supervisor (https://github.com/Supervisor/supervisor) 是一个用 Python 写的进程管理工具，可以很方便的用来在 UNIX-like 系统（不支持 Windows）下启动、重启（自动重启程序）、关闭进程（不仅仅是 Python 进程

安装

yum -y install supervisor #Centos
service supervisord start #Centos开启supervisord



apt-get -y install supervisor #Ubuntu安装完会自动启动，Centos则不会
配置文件

Centos主配置文件  /etc/supervisord.conf
Ubuntu主配置文件 /etc/supervisor/supervisord.conf



以ubuntu系统示范，后面都有解释，很普通的配置

; supervisor config file

[unix_http_server]
file=/var/run/supervisor.sock   ; (the path to the socket file )
chmod=0700                       ; sockef file mode (default 0700)

[supervisord]
logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)
pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
childlogdir=/var/log/supervisor            ; ('AUTO' child log dir, default $TEMP)

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket

; The [include] section can just contain the "files" setting.  This
; setting can list multiple files (separated by whitespace or
; newlines).  It can also contain wildcards.  The filenames are
; interpreted as relative to this file.  Included files *cannot*
; include files themselves.

[include]
files = /etc/supervisor/conf.d/*.conf




program配置文件


program 的配置文件就写在，supervisord 配置中 include 项的路径下：有命名规则需要注意下

[root@docker supervisor]#tail -1 supervisord.conf
files = /etc/supervisor/conf.d/*.conf     #Ubuntu的在这里，以.conf结尾，主配置文件都会标明



[root@pa1 etc]#tail -1 supervisord.conf
files = supervisord.d/*.ini             #Centos的在这里，以.ini结尾

program配置文件解释

[program:xx] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作
command=python server.py ; 程序启动命令
autostart=true       ; 在supervisord启动的时候也自动启动
startsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒
autorestart=true     ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected          ** ****;**表示进程意外杀死后才重启
startretries=3       ; 启动失败自动重试次数，默认是3
user=tomcat          ; 用哪个用户启动进程，默认是root
priority=999         ; 进程启动优先级，默认999，值小的优先启动
redirect_stderr=true ; 把stderr重定向到stdout，默认false
stdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MB
stdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10
stdout_logfile=/opt/python/logs/python.log ; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）
stopasgroup=false     ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程
killasgroup=false     ;默认为false，向进程组发送kill信号，包括子进程

注意
supervisor无法管理后台运行的程序，需要程序为前台运行方式，所以command要特别注意

举个例子

[root@docker conf.d]#cat nginx.conf
[program:nginx] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作
command =/usr/sbin/nginx -c /etc/nginx/nginx.conf
autorestart=True ; 程序异常退出后自动重启
autostart=True ; 在 supervisord 启动的时候也自动启动
redirect_stderr=True ; 把 stderr 重定向到 stdout，默认 false
user=root ; 用哪个用户启动
directory=/home/app/ ; 程序的启动目录
stdout_logfile_maxbytes = 20MB ; stdout 日志文件大小，默认 50MB
stdout_logfile_backups = 20 ; stdout 日志文件备份数

supervisorctl 交互操作

supervisorctl 是 supervisord 的命令行客户端工具，使用的配置和 supervisord 一样，这里就不再说了。下面，主要介绍 supervisorctl 操作的常用命令：
输入命令 supervisorctl 进入 supervisorctl 的 shell 交互界面（还是纯命令行😓），就可以在下面输入命令了。：

* help # 查看帮助
* status # 查看程序状态
* stop program_name # 关闭 指定的程序
* start program_name # 启动 指定的程序
* restart program_name # 重启 指定的程序
* tail -f program_name # 查看 该程序的日志
* stop all     #表示停止所有进程
* update # 重启配置文件修改过的程序（修改了配置，通过这个命令加载新的配置)

通过 shell 终端命令操作：

* supervisorctl status
* supervisorctl restart tomcat
* supervisorctl reread
* supervisorctl update     #修改了supervisor配置文件之后 更新配置文件

参考

削微寒 (https://www.cnblogs.com/xueweihan/p/6195824.html)
## 部署 noedejs环境

略          #确保npm命令可用

## 安装hexo程序

npm install hexo-cli -g

## 新建一个文件夹放你的网站

mkdir /www/hexo 

## hexo 加入全局命令

ln -s  /usr/local/nodejs/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo

## 从github上拉取代码

hexo init

=================================================================常用的hexo命令

## 如何运行这个程序?
务必确保当前处在hexo文件夹下

nohup hexo server &

## 如何查看是否开启?

默认地址为locaohost:4000


## 清除缓存文件 (db.json) 和已生成的静态文件 (public)

hexo clean

## 显示hexo版本

hexo -version

## 自定义配置文件的路径
自定义配置文件的路径，执行后将不再使用 _config.yml。

hexo --config custom.yml

## 列出网站资料

type有: page, post, route, tag, category


## 详细分类

## hexo
npm install hexo -g #安装  
npm update hexo -g #升级  
hexo init #初始化

## 简写
hexo n "我的博客" == hexo new "我的博客" #新建文章
hexo p == hexo publish
hexo g == hexo generate#生成
hexo s == hexo server #启动服务预览
hexo d == hexo deploy#部署

## 服务器
hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。
hexo server -s #静态模式
hexo server -p 5000 #更改端口
hexo server -i 192.168.1.1 #自定义 IP

hexo clean #清除缓存 网页正常情况下可以忽略此条命令
hexo g #生成静态网页
hexo d #开始部署


## 监视文件变动
hexo generate #使用 Hexo 生成静态文件快速而且简单
hexo generate --watch #监视文件变动

## 完成后部署
两个命令的作用是相同的
hexo generate --deploy
hexo deploy --generate

hexo deploy -g
hexo server -g

## 草稿
hexo publish [layout] <title>

## 格式示范
hexo new "postName" #新建文章
hexo new page "pageName" #新建页面
hexo generate #生成静态页面至public目录
hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）
hexo deploy #将.deploy目录部署到GitHub

hexo new [layout] <title>
hexo new photo "My Gallery"
hexo new "Hello World" --lang tw

## 文章摘要示范

title: 使用Hexo搭建个人博客
layout: post
date: 2018-03-03 19:07:43
comments: true
categories: Blog
tags: [Hexo]
keywords: Hexo, Blog
description: \666。

剩余是正文

## 创建的文章在哪里?
以 ".md" 结尾

## 在哪个目录下面?
/hexo/source/_posts

## 推送到服务器上
hexo n #写文章
hexo g #生成
hexo d #部署 #可与hexo g合并为 hexo d -g

## 更多详细资料

请前往官网查看
https://hexo.io/zh-cn/docs/﻿#下载官方提供的rpm包
wget http://pkg.jenkins-ci.org/redhat/jenkins-2.97-1.1.noarch.rpm

#安装
rpm -ivh jenkins-2.97-1.1.noarch.rpm
#开启 
service jenkins start

#l浏览器输入  (阿里云服务器需要设置8080端口规则)
ip:8080  

环境 :ubuntu
1. 服务端和客户端安装*********************************************
apt-get install  nfs-kernel-server

## 开启

Ubuntu默认开启


环境 :Centos 
## 服务端和客户端安装
yum -y install nfs-utils rpcbind

## 开启

service rpcbind start
service nfs start         #centos要开启两个,谨记




文件配置(下面内容都通用)**********************************
配置文件为 /etc/exports,内容格式如下：
<共享目录> <客户端地址段>  <要给客户端的权限>

示例(这个就是现网正在使用的)

## 配置文件
vim  /etc/exports
/data   172.18.252.0/24(rw,sync,no_root_squash,no_subtree_check)

注释**************************************************

权限说明
ro：共享目录只读；
rw：共享目录可读可写；
all_squash：所有访问用户都映射为匿名用户或用户组；
no_all_squash（默认）：访问用户先与本机用户匹配，匹配失败后再映射为匿名用户或用户组；
root_squash（默认）：将来访的root用户映射为匿名用户或用户组；
no_root_squash：来访的root用户保持root帐号权限；
anonuid=<UID>：指定匿名访问用户的本地用户UID，默认为nfsnobody（65534）；
anongid=<GID>：指定匿名访问用户的本地用户组GID，默认为nfsnobody（65534）；
secure（默认）：限制客户端只能从小于1024的tcp/ip端口连接服务器；
insecure：允许客户端从大于1024的tcp/ip端口连接服务器；
sync：将数据同步写入内存缓冲区与磁盘中，效率低，但可以保证数据的一致性；
async：将数据先保存在内存缓冲区中，必要时才写入磁盘；
wdelay（默认）：检查是否有相关的写操作，如果有则将这些写操作一起执行，这样可以提高效率；
no_wdelay：若有写操作则立即执行，应与sync配合使用；
subtree_check（默认） ：若输出目录是一个子目录，则nfs服务器将检查其父目录的权限；
no_subtree_check ：即使输出目录是一个子目录，nfs服务器也不检查其父目录的权限，这样可以提高效率；


通过mount挂载，例如：

mount -t nfs 192.168.1.1:/data   /data1

/data1 是客户端的目录,要提前创建好.
192.168.1.1:/data 这是服务端的内网地址加上要挂载的目录

#查看磁盘挂载情况
df -h

服务端操作**********************************
showmount -e localhost  #查询服务端nfs共享目录情况

## 最后加入开机自动挂载
vim /etc/fstab


192.168.1.1:/data           /www/webserver    nfs rw 0 0

解释:

192.168.1.1:/data  服务端目录

/www/webserver   客户端目录




mount -t nfs 172.18.252.144:/data   /www/webserver


echo "172.18.252.144:/data /www/webserver nfs rw 0 0  " >> /etc/fstab

# Node环境部署

 

## Node下载与安装

https://nodejs.org/dist/

 

 ![node](https://s1.ax1x.com/2018/08/14/PgO6h9.png)

 

 

 

 

 

 

### 下载编译过的包

```
 wget https://nodejs.org/dist/v8.11.3/node-v8.11.3-linux-x64.tar.gz
```

### 解压

```
tar xf node-v8.11.3-linux-x64.tar.gz
```

### 移动到一个顺眼的位置

```
sudo mv node-v8.11.3-linux-x64 /usr/local/nodejs
```

 

### 做个系统软链接

```
sudo ln -s /usr/local/nodejs/bin/node /usr/local/bin/node
sudo ln -s /usr/local/nodejs/bin/npm /usr/local/bin/npm
```

 

### 看下版本

 

```
lijinghua@test:/usr/local$ node —version
v8.11.3
```

 

```
lijinghua@test:/usr/local$ npm —version
5.6.0
```

 

- 有时会出现一个问题，npm版本和我们前端er要求的版本不一致，一般是低于我们要的版本，那就做升级

 

### 升级姿势

```
npm install npm@latest -g   #升级到最新

npm install npm@6.3.0  -g   #升级到指定版本
```

[client]
port                    =3306

[mysqldump]

[mysqld]
port                    =3306
binlog_format           =row  
#gtid_mode              =on                 
bind-address		= 0.0.0.0
basedir                 =/usr/local/mysql
datadir                 =/usr/local/mysql/data
socket                  =/var/lib/mysql/mysql.sock
pid-file                =/usr/local/mysql/mysql.pid
key_buffer_size         = 1024M
max_allowed_packet      = 160M
thread_stack            = 192K
thread_cache_size       = 200
binlog_cache_size       = 512M
max_connections         = 3000
#thread_concurrency     = 500
wait_timeout            = 288000
interactive_timeout     = 288000
query_cache_limit       = 1M
query_cache_size        = 1024M
thread_cache_size       = 150 
expire_logs_days        = 10
max_binlog_size         = 1G
innodb_thread_concurrency = 0
character_set_server    =utf8
bind-address		= 0.0.0.0
server_id               = 1
log-bin                 = mysql-bin
log-slave-updates       = 1
log-error               = /usr/local/mysql/data/mysql.err
#relay log
skip_slave_start        =1 
binlog_format           =mixed
sync_binlog             =1
explicit_defaults_for_timestamp=true
slow_query_log          = ON
slow_query_log_file     = /usr/local/mysql/data/MysqlData/slow.log
long_query_time = 1
#sql_mode=''
#sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION 
#skip-grant-tables
[mysqlsafe]

#下载包
curl -O http://download.redis.io/redis-stable.tar.gz
#解压
tar xf redis-stable.tar.gz
mv redis-stable /usr/local/redis
cd /usr/local/redis

#直接make 编译
make && make  install 
## 如果你想更多的个性化设置
开始初始化配置
cd /root/redis-stable/utils
./install_server.sh

#下面这些仅供参考
[root@pa1 utils]#./install_server.sh 
Welcome to the redis service installer
This script will help you easily set up a running redis server

Please select the redis port for this instance: [6379] 6379
Please select the redis config file name [/etc/redis/6379.conf] /etc/redis/6379.conf
Please select the redis log file name [/var/log/redis_6379.log] /var/log/redis_6379.log
Please select the data directory for this instance [/var/lib/redis/6379] /var/lib/redis/6379
Please select the redis executable path [/usr/local/bin/redis-server] /usr/local/bin/redis-server
Selected config:
Port           : 6379
Config file    : /etc/redis/6379.conf
Log file       : /var/log/redis_6379.log
Data dir       : /var/lib/redis/6379
Executable     : /usr/local/bin/redis-server
Cli Executable : /usr/local/bin/redis-cli
Is this ok? Then press ENTER to go on or Ctrl-C to abort.
Copied /tmp/6379.conf => /etc/init.d/redis_6379
Installing service...
Successfully added to chkconfig!
Successfully added to runlevels 345!
Starting Redis server...
Installation successful!

#查看配置文件里面必要的参数(如有不同.请修改,只需要修改bind地址)
vim /etc/redis/6379.conf
```
bind 0.0.0.0 
daemonize yes
logfile "/var/log/redis.log"
```
#启动
/etc/init.d/redis_6379 start
#关闭
/etc/init.d/redis_6379 stop
#查看端口是否成功开启
[root@pa1 utils]#netstat -lntup |grep 6379
tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      11710/redis-server 
[root@pa1 src]#redis-cli
127.0.0.1:6379> 

成功~~~~~~~~~~



2018.4.12日添加



## Centos下yum安装redis

yum install epel-release -y 

yum install redis -y 


# /etc/redis.conf配置文件

## 启动redis服务端

chown -R redis.redis /var/log/redis/redis.log  # 给日志权限
redis-server /etc/redis.conf

## ps检查下
ps -ef|grep "redis"

## 打开客户端
redis-cli

## 简单使用下
set name "xiaoming" 
get name ## 添加官方源
 
 yum install https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm
 
 ## 安装PostgreSQL 9.6
postgresql96-server 数据库核心服务端
postgresql96-contrib 附加第三方扩展
postgresql96-devel C语言开发Header头文件和库


 yum install postgresql96-server postgresql96-contrib postgresql96-devel
 
 ## 检查是否安装上
 rpm -aq| grep postgres
 
 ## 配置文件在哪？
 
 postgresql-9.6.service
 
 find找一下
 find / -type f -name "postgresql-9.6.service"
 
 yum安装的可能会在这里
 
 vim /usr/lib/systemd/system/postgresql-9.6.service

 ···
 # Location of database directory
Environment=PGDATA=/home/postgresql  #你的数据存储目录配置，将会影响之后的权限设置，以及数据库的开启，当然，你可以使用默认的
···

 ## 检查是否安装上
 
[root@pa2 ~]# rpm -aq| grep postgres
postgresql96-libs-9.6.8-1PGDG.rhel7.x86_64
postgresql-libs-9.2.23-3.el7_4.x86_64
postgresql96-server-9.6.8-1PGDG.rhel7.x86_64
postgresql-server-9.2.23-3.el7_4.x86_64
postgresql96-9.6.8-1PGDG.rhel7.x86_64
postgresql96-devel-9.6.8-1PGDG.rhel7.x86_64
postgresql-9.2.23-3.el7_4.x86_64
postgresql96-contrib-9.6.8-1PGDG.rhel7.x86_64

## postgresql开启前的准备工作

#创建一个目录，该目录就是你要储存数据的目录
[root@pa2 ~]# mkdir /home/postgresql
#给个权限
[root@pa2 ~]#  chown -R postgres:postgres  /home/postgresql
[root@pa2 ~]# chmod 700  /home/postgresql

## 初始化
[root@pa2 ~]# /usr/pgsql-9.6/bin/postgresql96-setup initdb
Initializing database ... OK
## 开启命令
[root@pa2 ~]# service postgresql-9.6 start  #centos7以下，我的是centos7，所以会报错，你懂得
Redirecting to /bin/systemctl start postgresql-9.6.service


[root@pa2 ~]# systemctl start postgresql-9.6.service      #centos7用这个开启

## 加入开机自启
[root@pa2 ~]# systemctl enable postgresql-9.6.service
Created symlink from /etc/systemd/system/multi-user.target.wants/postgresql-9.6.service to /usr/lib/systemd/system/postgresql-9.6.service.

##检查下端口
[root@pa2 ~]# netstat -lntup 
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1/systemd           
tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      3951/java           
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      22565/nginx: master 
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1800/sshd           
tcp        0      0 127.0.0.1:5432          0.0.0.0:*               LISTEN      10157/postmaster     #在这里
          

		  
## 修改密码步骤

su postgres                              #切换postgres
psql                                     #进入数据库
ALTER USER postgres WITH PASSWORD '密码';   #修改用户postgres的密码，必须以分号结束，成功执行后会出现ALTER ROLE
\q                                       #退出，当然你也可以Ctrl + d 
su root                                  #返回root用户


## 连接用户（使用用户）配置

vim pg_hba.conf

···

"local" is for Unix domain socket connections only  # 翻译：“本地”仅适用于Unix域套接字连接
local     all     postgres                                      trust
···

systemctl start postgresql-9.6.service    #重启
## 远程访问配置

要想远程访问，需要修改两处配置，需要重启postgresql

1.
vim postgresql.conf  # 该文件作用和 mysql数据库里面的 /etc/my.cnf类似

listen_addresses = '*'

2.
vim pg_hba.conf

host  all  all 0.0.0.0/0 md5          #代表任何一个ip都能连接

#注意：这个配置是我测试用的，线上生产用请谨慎配置

systemctl start postgresql-9.6.service    #重启

##  信任指定服务器连接

pg_hba.conf ip段配置示范

# IPv4 local connections:
host    all            all      127.0.0.1/32      md5
host    all            all      10.211.55.6/32（需要连接的服务器IP）  md5

## 简单使用 


psql -U postgres postgres  #连接数据库

# 说明：-h表示主机（Host），-p表示端口（Port），-U表示用户（User）

\l  #显示所有数据库：

## 效果图



![for](https://s1.ax1x.com/2018/08/03/P0779J.png)

## 要知道的

ccat，它和cat的区别就是当我cat一个文件的时候ccat可以根据文件的格式来高亮输出。就和上图一样

## 安装

### 下载包（可能需要代理）

ubuntu软件源里面是没有的，所以我就介绍一个通用的安装方法吧，首先下载二进制文件
 `wget https://github.com/jingweno/ccat/releases/download/v1.1.0/linux-amd64-1.1.0.tar.gz`

### 解压

` tar -zxvf linux-amd64-1.1.0.tar.gz`

###  移动到二进制文件目录

 `cd linux-amd64-1.1.0`
 `sudo mv ccat /usr/local/bin`

### 赋予可执行权限

 `sudo chmod +x /usr/local/bin/ccat`
 之后就可以和cat一样执行命令了

======到这里ccat就可以用了

## 直接替代cat？

如果你觉得ccat比cat好，而且我以后不想使用cat了，想用ccat来代替cat，那么我就可以设置一个别名，在.zshrc文件中加入下面这一行，

如果你用bash的那么就在.bashrc中加入下面这一行

### 配置文件改下

 `alias cat=ccat`

### 配置文件生效

 `source ~/.zshrc`

## End



 

 

 

 

 ## Centos完全离线安装Docker

## 要了解的

1.docker需要依赖 libcgroup库
2.docker需要依赖device-mapper系列 并且该系列包版本号大于1.02.79
3.本次安装的是Centos 6.7，理论上来说Centos7系列更好安装

## 检查当前机器环境依赖
```
[root@localhost lijinghua]# rpm -qa |grep libcgroup  #检查当前机器有没有libcgroup环境，没有的话就rpm安装
```

```
[root@localhost lijinghua]# rpm -qa |grep device-mapper
device-mapper-event-libs-1.02.117-7.el6.x86_64
device-mapper-libs-1.02.117-7.el6.x86_64
device-mapper-event-1.02.117-7.el6.x86_64
device-mapper-persistent-data-0.6.2-0.1.rc7.el6.x86_64
device-mapper-1.02.117-7.el6.x86_64
```

没有哪个环境就装哪个


### 安装libcgroup
```
[root@localhost lijinghua]# rpm -ivh libcgroup-* --force --nodeps
warning: libcgroup-0.40.rc1-16.el6.i686.rpm: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEY
Preparing...                ########################################### [100%]
   1:libcgroup              ########################################### [ 20%]
   2:libcgroup              ########################################### [ 40%]
   3:libcgroup-devel        ########################################### [ 60%]
   4:libcgroup-pam          ########################################### [ 80%]
   5:libcgroup-pam          ########################################### [100%]
```
参数解释

安装rpm文件, 文件名为libcgroup- 开头的  不检查依赖并且忽略错误

### 再检查

```
[root@localhost lijinghua]# rpm -qa |grep libcgroup
libcgroup-pam-0.40.rc1-16.el6.x86_64
libcgroup-0.40.rc1-16.el6.x86_64
libcgroup-0.40.rc1-16.el6.i686
libcgroup-devel-0.40.rc1-16.el6.x86_64
libcgroup-pam-0.40.rc1-16.el6.i686
```

这两个重要的环境依赖都有了之后呢，就安装 docker的rpm包

```
[root@localhost lijinghua]# rpm -ivh docker-engine-1.7.1-1.el6.x86_64.rpm 
warning: docker-engine-1.7.1-1.el6.x86_64.rpm: Header V4 RSA/SHA1 Signature, key ID 2c52609d: NOKEY
Preparing...                ########################################### [100%]
   1:docker-engine          ########################################### [100%]
```

##  查看docker版本

```
[root@localhost lijinghua]# docker --version 
Docker version 1.7.1, build 786b29d

```

## 启动

```
[root@localhost lijinghua]# service docker start 
Starting cgconfig service:                                 [  OK  ]
Starting docker:                                    [  OK  ]
[root@localhost lijinghua]# ps -ef |grep docker 
root      42147      1  5 06:39 pts/1    00:00:00 /usr/bin/docker -d
root      42262  41264  0 06:39 pts/1    00:00:00 grep docker
```

##  包在哪里下载？

一般Centos的环境基础包，都在官网对应的系统镜像附件都有

http://vault.centos.org/

docker的包

https://yum.dockerproject.org/repo/main/

## End

#tomcat的安装(前提,java环境须配置好,且版本 java 和tomcat版本要求可能需要一致)
#下载
wget  http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.24/bin/apache-tomcat-8.5.24.tar.gz
#解压至/usr/local
tar xf apache-tomcat-8.5.13.tar.gz -C /usr/local/
#来改个名
mv  /usr/local/apache-tomcat-8.5.24 /usr/local/tomcat

#给个权限
chmod -R +x /usr/local/tomcat/bin/*

#启动(这样启动是为了方便看日志)
/usr/local/tomcat/bin/startup.sh && tailf /usr/local/tomcat/logs/catalina.out 

#关闭
/usr/local/tomcat/bin/shutdown.sh






## 为什么用uWSGI+Django
python manage.py runserver 这种的更适合测试环境的使用，
要想让Django服务的更好，就需要结合uWSGI+Nginx了。


## uWSGI+Django比单独使用Django的好处：
1. 支持的并发量更高
2. 方便管理多进程，发挥多核的优势
3. 提升性能，因为uwsgi协议比WSGI协议有优势



## 安装nginx

略


## 安装uWSGI

### pip安装
pip install uwsgi

### 源码包安装
```
wget https://files.pythonhosted.org/packages/a2/c9/a2d5737f63cd9df4317a4acc15d1ddf4952e28398601d8d7d706c16381e0/uwsgi-2.0.17.1.tar.gz
tar xf uwsgi-2.0.17.1.tar.gz
cd uwsgi-2.0.17.1/

make  #直接make
```


### 测试一下uwsgi安装成功否？

vim test.py #编辑文件

def application(env, start_response):
    start_response('200 OK', [('Content-Type','text/html')])
    return "Hello World"

uwsgi --http :8001 --wsgi-file test.py  #执行命令，前提是端口未被占用

此时访问8001端口，就可以看到 Hello World 



## 连接uwsgi与Django

###先测试 django自身能不能用？


python manage.py runserver 0:8001

浏览器打开地址输入 IP：8001

OK的话继续下一步

## 编写wsgi.py文件


编写django_wsgi.py文件，将其放在与文件manage.py同一个目录下。


vim django_wsgi.py

#!/usr/bin/env python
# coding: utf-8

import os
import sys

reload(sys)
sys.setdefaultencoding('utf8') # 将系统的编码设置为UTF8

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mysite.settings")#mysite替换为自己的项目名

from django.core.handlers.wsgi import WSGIHandler
application = WSGIHandler()


## 连接Django和uwsgi

通过Django与uwsgi就已经可以形成一个简单的web服务器了 
编写完成django_wsgi.py文件后执行：

uwsgi --http :8000 --chdir path/to/yoursite --module django_wsgi



这样，就可以在浏览器中的8000端口访问Django程序了。 
所有的请求都是经过uwsgi传递给Django程序的。 

注意到，此时是访问不了js/css静态文件的！这些静态文件将交给Nginx直接处理


## 编写配置文件连接uwsgi与Nginx

## uwsgi配置
为了实现Nginx与uWSGI的连接，两者之间将采用soket来通讯方式

将使用uWSGI配置文件的方式来改进uWSGI的启动方式

将要让Nginx采用8077端口与uWSGI通讯，请确保此端口没有被其它程序采用。

下面编写uwsgi的配置文件 
新建一个XML文件：djangochina_socket.xml，与manage.py在同一级目录

vim djangochina_socket.xml


<uwsgi>
    <socket>:8077</socket>
    <chdir>path/to/yoursite</chdir>
    <module>django_wsgi</module>
    <processes>4</processes> <!-- 进程数 --> 
    <daemonize>uwsgi.log</daemonize>
</uwsgi>

## Nginx配置

upstream django {
    # server unix:///path/to/your/mysite/mysite.sock; # for a file socket
    server 127.0.0.1:8001; # for a web port socket (we'll use this first)
}

--# configuration of the server

server {
    # the port your site will be served on
    listen      80;
    # the domain name it will serve for
    server_name 域名; # substitute your machine's IP address or FQDN
    charset     utf-8;

    # max upload size
    client_max_body_size 75M;   # adjust to taste

    # Django media
    location /media  {
        alias /path/to/your/mysite/media;  # your Django project's media files - amend as required
    }

    location /static {
        alias /path/to/your/mysite/static; # your Django project's static files - amend as required
    }

    # Finally, send all non-media requests to the Django server.
    location / {
        uwsgi_pass  django;
        include     /path/to/your/mysite/uwsgi_params; # the uwsgi_params file you installed
    }
}





## 重新加载nginx

略






## 参考
https://www.cnblogs.com/Xjng/p/aa4dd23918359c6414d54e4b972e9081.html

Web协议出现顺序： 
CGI -> FCGI -> WSGI -> uwsgi

CGI，最早的协议
FCGI，比CGI快
WSGI，Python专用的协议
uwsgi，比FCGI和WSGI都快，是uWSGI项目自有的协议，主要特征是采用二进制来存储数据，之前的协议都是使用字符串，所以在存储空间和解析速度上，都优于字符串型协议.



uwsgi --http :8000 --chdir /srv/www/databankinfo.com/projectdatabank/ --wsgi-file wsgi.py

uwsgi --http :8000 --chdir /srv/www/databankinfo.com/projectdatabank/ --wsgi-file full/path/wsgi.py## 安装hydra

wget -q -O – http://www.atomicorp.com/installers/atomic | sh
yum install hydra -y 


## 参数

-R
继续从上一次进度接着破解

-S
大写，采用SSL链接

-s <PORT>
小写，可通过这个参数指定非默认端口

-l <LOGIN>
指定破解的用户，对特定用户破解

-L <FILE>
指定用户名字典

-p <PASS>
小写，指定密码破解，少用，一般是采用密码字典

-P <FILE>
大写，指定密码字典

-e <ns>
可选选项，n：空密码试探，s：使用指定用户和密码试探

-C <FILE>
使用冒号分割格式，例如“登录名:密码”来代替-L/-P参数

-M <FILE>
指定目标列表文件一行一条

-o <FILE>
指定结果输出文件

-f
在使用-M参数以后，找到第一对登录名或者密码的时候中止破解

-t <TASKS>
同时运行的线程数，默认为16

-w <TIME>
设置最大超时的时间，单位秒，默认是30s

-v / -V
显示详细过程


## 使用示范

hydra -L root.txt -P mima.txt -t 1 -vV -e ns 139.196.90.*** ssh -o /tmp/mima.txt


##解释

涉及到三个文件，分别是用户列表及密码字典，最后一个文件是测试成功后将会把成功的账号及密码保存到这个文件



cat root.txt  ##这是用户列表，我的只有root

root


cat mima.txt   ## 密码列
-----
11
1111
111111
----



# 安装postgreSQL
add-apt-repository "deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main"
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
apt-get update
apt-get install postgresql-9.6
psql --version

###
1)安装完会自动启动
2）自动生成postgres用户作为管理员，密码随机，自行修改;生成一个postgres数据库，用户名为postgres，密码随机。


2.给postgres用户修改密码：postgres
1)登录客户端：sudo -u postgres psql（使用默认用户postgres登录客户端，psql为打开客户端的工具）
2）postgres=# ALTER USER postgres WITH PASSWORD 'postgres';

3.修改ubuntu操作系统的postgres用户的密码（密码要与数据库用户postgres的密码相同）
1) 删除PostgreSQL用户密码
   sudo passwd -d postgres  \清空用户密码的意思
2）设置PostgreSQL系统用户的密码：postgres
   sudo -u postgres passwd
#下载包
wget curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz
#解压
tar xf util-linux-2.24.tar.gz
#进入目录
cd util-linux-2.24/
#编译
./configure  --without-ncurses
make nsenter 
#复制启动命令
cp nsenter /usr/local/bin## 安装 zsh
略
## 安装 oh my zsh 


sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
 

sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"

## 若报错
编辑 .zshrc文件
ZSH_DISABLE_COMPFIX=true   ##第一行然后 


source .zshrc

## Keepalived介绍
Keepalived是一个基于VRRP协议来实现的服务高可用方案，可以利用其来避免IP单点故障，类似的工具还有heartbeat、corosync、pacemaker。但是它一般不会单独出现，而是与其它负载均衡技术（如lvs、haproxy、nginx）一起工作来达到集群的高可用。

### VRRP协议
VRRP全称 Virtual Router Redundancy Protocol，即 虚拟路由冗余协议。可以认为它是实现路由器高可用的容错协议，即将N台提供相同功能的路由器组成一个路由器组(Router Group)，这个组里面有一个master和多个backup，但在外界看来就像一台一样，构成虚拟路由器，拥有一个虚拟IP（vip，也就是路由器所在局域网内其他机器的默认路由），占有这个IP的master实际负责ARP相应和转发IP数据包，组中的其它路由器作为备份的角色处于待命状态。master会发组播消息，当backup在超时时间内收不到vrrp包时就认为master宕掉了，这时就需要根据VRRP的优先级来选举一个backup当master，保证路由器的高可用。

在VRRP协议实现里，虚拟路由器使用 00-00-5E-00-01-XX 作为虚拟MAC地址，XX就是唯一的 VRID （Virtual Router IDentifier），这个地址同一时间只有一个物理路由器占用。在虚拟路由器里面的物理路由器组里面通过多播IP地址 224.0.0.18 来定时发送通告消息。每个Router都有一个 1-255 之间的优先级别，级别最高的（highest priority）将成为主控（master）路由器。通过降低master的优先权可以让处于backup状态的路由器抢占（pro-empt）主路由器的状态，两个backup优先级相同的IP地址较大者为master，接管虚拟IP



### 工作原理
keepalived可以认为是VRRP协议在Linux上的实现，主要有三个模块，分别是core、check和vrrp。core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。check负责健康检查，包括常见的各种检查方式。vrrp模块是来实现VRRP协议的



## 部署环境

Centos6
master 10.0.0.7

backup 10.0.0.8


### 安装

yum install -y keepalived   #安装

 
keepalived -v               #查看版本
Keepalived v1.2.13 


service keepalived start|stop|restart         #开启等操作
/etc/init.d/keepalived  start|stop|restart 

### nginx监控脚本

我的脚本位置
/etc/keepalived/check_nginx.sh

#!/bin/bash
# curl -IL http://localhost/member/login.htm
# curl --data "memberName=fengkan&password=22" http://localhost/member/login.htm

count=0
for (( k=0; k<2; k++ ))
do
    check_code=$( curl --connect-timeout 3 -sL -w "%{http_code}\\n" http://url -o /dev/null )
    if [ "$check_code" != "200" ]; then
        count=$(expr $count + 1)
        sleep 3
        continue
    else
        count=0
        break
    fi
done
if [ "$count" != "0" ]; then
#   /etc/init.d/keepalived stop
    exit 1
else
    exit 0
fi


### 主配置文件

位置 

/etc/keepalived/keepalived.conf

! Configuration File for keepalived
global_defs {
    notification_email {
        lijinghua@example.com
        limeihua@example.com
    }
    notification_email_from itsection@example.com
    smtp_server mail.example.com
    smtp_connect_timeout 30
    router_id LVS_DEVEL
}

vrrp_script chk_nginx {
#    script "killall -0 nginx"
    script "/etc/keepalived/check_nginx.sh"
    interval 2
    weight -5
    fall 3  
    rise 2
}

vrrp_instance VI_1 {
    state MASTER
    interface eth0
    #mcast_src_ip 172.29.88.224
    virtual_router_id 51
    priority 101
    advert_int 2
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        10.0.0.7
    }
    track_script {
       chk_nginx
    }
}


### BACKUP配置文件

只需要改变 
state MASTER -> state BACKUP，
priority 101 -> priority 100，
mcast_src_ip 10.0.0.7 -> mcast_src_ip 10.0.0.8


### 分别重启



## nginx配置

nginx配置
当然nginx没有什么可配置的，因为它与keepalived并没有联系。但记住，2台nginx服务器上的配置应该是完全一样的（rsync同步），这样才能做到对用户透明，nginx.conf 里面的 server_name 尽量使用域名来代替，然后dns解析这个域名到虚拟IP 10.0.0.7（master）


[root@local vhost]# ip a 
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:0c:29:23:18:4a brd ff:ff:ff:ff:ff:ff
    inet 10.0.0.7/24 brd 10.0.0.255 scope global eth0
    inet 10.0.0.7/32 scope global eth0                            ## 在这里
	
	
	
	
## 测试方法

两台web站点全部解析到本地，同样的配置包括域名及站点
地址栏输入域名，查看当前访问的是哪台机器，看是10.0.0.7还是10.0.0.8
也可以用抓包工具查看

可以停掉其中一台，看下ip会不会跳转到另一台机器上



## 配置文件解释

### global_defs模块

notification_email ： keepalived在发生诸如切换操作时需要发送email通知地址，后面的 smtp_server 相比也都知道是邮件服务器地址。也可以通过其它方式报警，毕竟邮件不是实时通知的。
router_id ： 机器标识，通常可设为hostname。故障发生时，邮件通知会用到

###  vrrp_instance模块
vrrp_instance

state ： 指定instance(Initial)的初始状态，就是说在配置好后，这台服务器的初始状态就是这里指定的，但这里指定的不算，还是得要通过竞选通过优先级来确定。如果这里设置为MASTER，但如若他的优先级不及另外一台，那么这台在发送通告时，会发送自己的优先级，另外一台发现优先级不如自己的高，那么他会就回抢占为MASTER
interface ： 实例绑定的网卡，因为在配置虚拟IP的时候必须是在已有的网卡上添加的
mcast_src_ip ： 发送多播数据包时的源IP地址，这里注意了，这里实际上就是在那个地址上发送VRRP通告，这个非常重要，一定要选择稳定的网卡端口来发送，这里相当于heartbeat的心跳端口，如果没有设置那么就用默认的绑定的网卡的IP，也就是interface指定的IP地址
virtual_router_id ： 这里设置VRID，这里非常重要，相同的VRID为一个组，他将决定多播的MAC地址
priority ： 设置本节点的优先级，优先级高的为master
advert_int ： 检查间隔，默认为1秒。这就是VRRP的定时器，MASTER每隔这样一个时间间隔，就会发送一个advertisement报文以通知组内其他路由器自己工作正常
authentication ： 定义认证方式和密码，主从必须一样
virtual_ipaddress ： 这里设置的就是VIP，也就是虚拟IP地址，他随着state的变化而增加删除，当state为master的时候就添加，当state为backup的时候删除，这里主要是有优先级来决定的，和state设置的值没有多大关系，这里可以设置多个IP地址
track_script ： 引用VRRP脚本，即在 vrrp_script 部分指定的名字。定期运行它们来改变优先级，并最终引发主备切换。

###  vrrp_script模块

vrrp_script
告诉 keepalived 在什么情况下切换，所以尤为重要。可以有多个 vrrp_script

script ： 自己写的检测脚本。也可以是一行命令如killall -0 nginx
interval 2 ： 每2s检测一次
weight -5 ： 检测失败（脚本返回非0）则优先级 -5
fall 2 ： 检测连续 2 次失败才算确定是真失败。会用weight减少优先级（1-255之间）
rise 1 ： 检测 1 次成功就算成功。但不修改优先级


### script一般有2种写法：

1.通过脚本执行的返回结果，改变优先级，keepalived继续发送通告消息，backup比较优先级再决定
2.脚本里面检测到异常，直接关闭keepalived进程，backup机器接收不到advertisement会抢占IP

上文 vrrp_script 配置部分，killall -0 nginx属于第1种情况，/etc/keepalived/check_nginx.sh属于第2种情况（脚本中关闭keepalived）。个人更倾向于通过shell脚本判断，但有异常时exit 1，正常退出exit 0，然后keepalived根据动态调整的 vrrp_instance 优先级选举决定是否抢占VIP：

如果脚本执行结果为0，并且weight配置的值大于0，则优先级相应的增加
如果脚本执行结果非0，并且weight配置的值小于0，则优先级相应的减少
其他情况，原本配置的优先级不变，即配置文件中priority对应的值。

### 提示：

优先级不会不断的提高或者降低
可以编写多个检测脚本并为每个检测脚本设置不同的weight（在配置中列出就行）
不管提高优先级还是降低优先级，最终优先级的范围是在[1,254]，不会出现优先级小于等于0或者优先级大于等于255的情况
在MASTER节点的 vrrp_instance 中 配置 nopreempt ，当它异常恢复后，即使它 prio 更高也不会抢占，这样可以避免正常情况下做无谓的切换
以上可以做到利用脚本检测业务进程的状态，并动态调整优先级从而实现主备切换。

### 配置结束

在默认的keepalive.conf里面还有 virtual_server,real_server 这样的配置，我们这用不到，它是为lvs准备的。 notify 可以定义在切换成MASTER或BACKUP时执行的脚本







==================================================================java配置
#删除之前所有的java包
#先查找
rpm -qa|grep java
#删除(示例)
yum -y remove tzdata-java-2017c-1.el7.noarch

#创建java包存放目录
mkdir /usr/java
cd  /usr/java
#官网下载java的 gz包rz上传然后解压
tar -zxvf jdk-9.0.1_linux-x64_bin.tar.gz
删除掉这个包
rm -rf   jdk-9.0.1_linux-x64_bin.tar.gz
#编辑环境变量(文件最后放入,注意文件路径)
vim /etc/profile (放入)
#set java environment
JAVA_HOME=/usr/java/jdk
CLASSPATH=$JAVA_HOME/lib/
PATH=$PATH:$JAVA_HOME/bin
export PATH JAVA_HOME CLASSPATH
#生效
source /etc/profile



  JAVA_HOME=/usr/java/jdk
  CLASSPATH=$JAVA_HOME/lib/
  PATH=$PATH:$JAVA_HOME/bin
  export JAVA_HOME CLASSPATH PATH#安装tomcat
略
#安装数据库
略
#如果你想用域名打开你的网站,需要安装nginx
略
#重点来了(由于我不会打war包,咋们还是直接下载现成的吧)
#下载源码包(里面就有tomcat需要的war文件)
wget  https://github.com/JpressProjects/jpress/archive/0.4.0.tar.gz 
#解压
tar xf  0.4.0.tar.gz
#将解压后的站点目录搬家到tomcat 的webapps目录下面(我的是在/use/local/tomcat/webapps)
mv  jpress-0.4.0/wars/jpress-web-newest.war  /use/local/tomcat/webapps/
#每次上线更新war包可能都需要重新启动tomcat
#关闭
cd /usr/local/tomcat/bin
./shutdown.sh
#开启
./startup.sh

#检验端口是否正确打开(端口可在配置文件更改,我相信你们都会改,我的是8888)
netstat -lntup 

#网页端查看
地址栏 (ip+端口)
输入 ip+8888
#一旦执行完上面这个操作,tomcat会自动把这个war包(jpress-web-newest.war)解压了
#此时webapps目录下应该是这样
[root@pa1 webapps]#ll
total 20304
drwxr-xr-x 14 root root     4096 Nov 27 13:31 docs
drwxr-xr-x  6 root root     4096 Nov 27 13:31 examples
drwxr-xr-x  5 root root     4096 Nov 27 13:31 host-manager
drwxr-x---  8 root root     4096 Jan 19 14:54 jpress-web-newest
-rw-rw-r--  1 root root 20764271 Sep 19  2016 jpress-web-newest.war
drwxr-xr-x  5 root root     4096 Nov 27 13:31 manager
drwxr-xr-x  3 root root     4096 Nov 27 13:31 ROOT

#然后开始网页端初始化(注意我的端口是8888,看到这里请把下一步也看完)
地址栏输入 ip:8888/jpress-web-newest

#如若上一步操作完了在网页端看到初始化界面,停下来,该操作mysql了,创建一个库,叫jpress,我知道你们都知道这是干嘛的
mysql -uroot -p
create database jpress;

#开始初始化配置了,没截图,看你们悟性了,如有问题,联系下方扣扣

#jpress的后台地址是ip:8888/jpress-web-newest/admin/login



















## 环境准备

centos7

关闭防火墙

systemctl stop firewalld.service
systemctl disable firewalld.service
sed -i 's#SELINUX=enforcing#SELINUX=disabled#g' /etc/selinux/config
setenforce 0

## 下载安装包 

wget https://github.com/lifei6671/mindoc/releases/download/v0.10.1/mindoc_linux_amd64.zip


## 解压
unzip mindoc_linux_amd64.zip -d mindoc


## 数据库连接配置等


cd mindoc 

vim conf/app.conf   #实际上里面可多配置了


---------------------------------------------------------------------------------
#支持MySQL和sqlite3两种数据库，如果是sqlite3 则 db_database 标识数据库的物理目录
db_adapter=mysql
db_host=127.0.0.1
db_port=3306
db_database=mindoc_db
db_username=root
db_password=mimamimamima
---------------------------------------------------------------------------

## 初始化数据库
./mindoc_linux_amd64 install    

## 安装mindoc daemon
./mindoc_linux_amd64 service install   

## 启动服务
systemctl start mindocd.service   

## 添加到开机自启动
systemctl enable mindocd.service 

## 检查服务运行状态
systemctl status mindocd.service 
## 检查端口开启状态
netstat -lntup|grep 8181
tcp6       0      0 :::8181                 :::*                    LISTEN      1632/mindoc_linux_a





## 浏览器查看

ip+8181

初始账号密码 admin 123456

https://s1.ax1x.com/2018/06/24/P9Rc3F.jpg





## 导出文档功能(非必须)


## 安装依赖库
yum install -y libXrender libXext zlib fontconfig freetype libGL  libXcomposite  

## 创建测试文件

echo '123' >test.txt   #创建测试文件


## 确保已正确安装上述依赖，再执行一下命令安装Calibre：
wget -nv -O- https://download.calibre-ebook.com/linux-installer.py | sudo python -c "import sys; main=lambda:sys.stderr.write('Download failed\n'); exec(sys.stdin.read()); main()"






## 安装createrepo软件
yum -y install createrepo
## 创建Yum仓库存放目录
mkdir -p /home/yum/x86_64/
cd /home/yum/x86_64/

## 找一个rpm包放进来
rz -y


## 初始化源数据repodata索引文件

createrepo -pdo /home/yum/x86_64/ /home/yum/x86_64/

#第一个目录：yum仓库的源路径,第二个目录：索引存放的路径

#每加入一个rpm包就要更新一下
createrepo --update /home/yum/x86_64/

## 提供yum服务
# 这里用Python的http模块更简单，适用于内网环境

cd /home/yum/x86_64/ && nohup python -m SimpleHTTPServer 81 &>/dev/null &
#补充：这里用Python的http模块更简单，适用于内网环境，81表示的是81端口

## 浏览器查看

然后地址栏输入 ip+81即可查看


## yum仓库客户端使用配置

## 更改yum配置文件的目录
#切换到yum源的目录
cd /etc/yum.repos.d/
#创建新目录把原先yum源放在新建的目录下面
mkdir yum_bak
mv *repo yum_bak

## 配置本地yum源
vim localyum.repo
———————————————————
#yum源名称
[localyum]
#name随便来
name=server
#yum源服务器IP地址
baseurl=http://172.16.1.61:81
#激活yum源；0是不使用
enable=1
#校验机制；内网的就不需要（不去除，要给rpm包加密）
gpgcheck=0

## 清空本机已有yum缓存
yum clean all   #（每次有新的包都执行一遍）

## 列表显示yum仓库
yum list #（每次有新的包都执行一遍）

## 配置好直接按普通yum安装命令执行就可以了。
yum install -y 需安装的服务

解释 需安装的服务是mysql-server-5.1.73-8.el6_8.x86_64.rpm

如下图


## End



wget http://xmlsoft.org/sources/libxml2-2.7.2.tar.gz
tar xf libxml2-2.7.2.tar.gz
 cd libxml2-2.7.2
 ./configure 
make && make install
wget https://www.openssl.org/source/openssl-1.0.2n.tar.gz
tar xf openssl-1.0.2n.tar.gz
cd openssl-1.0.2n
./config
make && make install
wget http://www.zlib.net/zlib-1.2.11.tar.gz
tar xf zlib-1.2.11.tar.gz
cd zlib-1.2.11
 ./configure 
 make && make install
wget http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz
tar -zxvf bzip2-1.0.6.tar.gz -C /usr/src
cd /usr/src/bzip2-1.0.6/
make && make install
wget https://curl.haxx.se/download/curl-7.57.0.tar.gz
 tar xf curl-7.57.0.tar.gz 
 cd curl-7.57.0
 ./configure
 make && make install
============================================================glibc-2.14�������
#configure: error: you must configure in a separate build directory
#���ֻҪ�ص���һ��Ŀ¼ִ�� configure �Ϳ����ˣ�

cd ../
./glibc-2.14/configure ```````��������
 
========================================================Bison

ubuntu �� centos ֱ������ bison

=================================================


## ansible安装常用两种方式，yum安装和pip程序安装

# 使用 pip（python的包管理模块）安装
　　首先，我们需要安装一个python-pip包，安装完成以后，则直接使用pip命令来安装我们的包，具体操作过程如下

 yum install python-pip
 pip install ansible

# 使用 yum 安装
 yum install epel-release -y
yum install ansible –y


# but 还有编译安装方法
编译安装 

下载包
wget http://releases.ansible.com/ansible/ansible-2.5.0a1.tar.gz

解压
tar xf ansible-2.5.0a1.tar.gz

cd ansible-2.5.0a1
make && make  install 

## 接下来必要操作-ansible 配置公私钥

# 1.生成私钥
[root@server ~]# ssh-keygen 
# 2.向主机分发私钥
[root@server ~]# ssh-copy-id root@192.168.0.2
[root@server ~]# ssh-copy-id root@192.168.0.1

# 注意要是主机没有开通root登录,可以手动操作

End









 
 ## 安装必要的软件和依赖
 apt-get install make bison g++ build-essential libncurses5-dev cmake
 
 #创建用户mysql并加入到mysql组，不允许mysql用户直接登录系统
  groupadd mysql
  useradd –g mysql mysql –s /bin/false
 #创建Mysql安装目录
 
mkdir –p /usr/local/mysql 
mkdir -p /usr/local/mysql/data 
mkdir -p /usr/local/mysql/log
chown -R mysql:mysql /usr/local/mysql/data 
chown -R mysql:mysql /usr/local/mysql
 
 # 放源码包并解压
 
 编译配置
cd mysql-5.6.23
cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \
-DSYSCONFDIR=/etc \
 -DMYSQL_UNIX_ADDR=/tmp/mysql.sock \
 -DDEFAULT_CHARSET=utf8 \
 -DDEFAULT_COLLATION=utf8_general_ci \
 -DEXTRA_CHARSETS=all \
 -DWITH_MYISAM_STORAGE_ENGINE=1 \
 -DWITH_INNOBASE_STORAGE_ENGINE=1 \
 -DWITH_MEMORY_STORAGE_ENGINE=1 \
 -DWITH_READLINE=1 \
 -DENABLED_LOCAL_INFILE=1 \
 -DMYSQL_DATADIR=/usr/local/mysql/data \
 -DMYSQL_USER=mysql \
 -DWITH_DEBUG=0
 
 
 # 注意事项：
重新编译时，需要清除旧的对象文件和缓存信息。
 make clean
 rm -f CMakeCache.txt
 
 # 以多核心运行
 make -j4
 make install 
 
 
 #配置开机启动
 
 chmod +w /usr/local/mysql
 cp ./support-files/my-default.cnf /etc/my.cnf
 cp ./support-files/mysql.server /etc/init.d/mysqld
 chmod 755 /etc/init.d/mysqld
 
 # 常用命令软连接，设置环境变量
 ln -s /usr/local/mysql/lib/libmysqlclient.so.18 /usr/lib/libmysqlclient.so.18
 ln -s /usr/local/mysql/bin/mysql /usr/bin
 ln -s /usr/local/mysql/bin/mysqladmin /usr/bin
 
 #初始化数据库
  /usr/local/mysql/scripts/mysql_install_db --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --user=mysql
 
 #启动mysql
 /etc/init.d/mysqld start
 
 #启动成功后创建root用户的密码
 mysqladmin -u root password
 
 
 
 
 
 
 
 
 
 
 
 
 
  ## 环境

masterA 10.0.0.5  (数据库A)
masterB 10.0.0.6  (数据库B)

注意:
两台机器在同一网络,防火墙关闭

 ## 安装MYSQL
 
 分别安装两台数据库,且成功启动
 
 略
 ## 配置文件
 
 
 
 # 除了必须的一些配置,还需要加入的
 
 
master A
 
#主主复制模块
log-bin=mysql-bin 
server-id=1 
#binlog-do-db=mydb            #需要记录进制日志的数据库.如果有多个数据库可用逗号分隔,或者使用多个binlog-do-db选项 

#binlog-ignore-db=mysql     #不需要记录进制日志的数据库.如果有多个数据库可用逗号分隔,或者使用多个binlog-do-db选项 
#replicate-do-db=mydb        #需要进行同步的数据库.如果有多个数据库可用逗号分隔,或者使用多个replicate-do-db选项 
#binlog-ignore-db=mysql      #不需要同步的数据库.如果有多个数据库可用逗号分隔,或者使用多个replicate-ignore-db选项 
#同步参数: 
#保证slave挂在任何一台master上都会接收到另一个master的写入信息
#
log-slave-updates=on
sync_binlog=1 
auto_increment_offset=2 
auto_increment_increment=2 
slave-skip-errors=all             #过滤掉一些没啥大问题的错误

 

 
 master B 除了必须的一些配置,还需要加入的
 
log-bin=mysql-bin 
server-id=2
#binlog-do-db=mydb            #需要记录进制日志的数据库.如果有多个数据库可用逗号分隔,或者使用多个binlog-do-db选项 

#binlog-ignore-db=mysql     #不需要记录进制日志的数据库.如果有多个数据库可用逗号分隔,或者使用多个binlog-do-db选项 
#replicate-do-db=mydb        #需要进行同步的数据库.如果有多个数据库可用逗号分隔,或者使用多个replicate-do-db选项 
#binlog-ignore-db=mysql      #不需要同步的数据库.如果有多个数据库可用逗号分隔,或者使用多个replicate-ignore-db选项 
#同步参数: 
#保证slave挂在任何一台master上都会接收到另一个master的写入信息
#
log-slave-updates =on
sync_binlog=1 
auto_increment_offset=2 
auto_increment_increment=2 
slave-skip-errors=all             #过滤掉一些没啥大问题的错误

 
## 建立账号 

两个数据库分别执行
masterA

 grant replication slave on *.* to 'repl'@'%' identified by '123456';
 flush  privileges;
 
masterB
 grant replication slave on *.* to 'repl'@'%' identified by '123456';
 flush  privileges;
 
## 分别找出那个点
 
 show  master status \G
 
 比如
 mysql> show master status \G
*************************** 1. row ***************************
            File: mysql-bin.000019
        Position: 191
    Binlog_Do_DB: 
Binlog_Ignore_DB: 
1 row in set (0.00 sec)

File后面

Position后面


## 主从连接

 # masterA
 
 stop slave;
 
 change master to master_host='10.0.0.6',master_user='repl',master_password='123456',master_log_file='mysql-bin.000020',master_log_pos=574;
 start slave;
 
 # masterB
 
 stop slave;
 
 change master to master_host='10.0.0.5',master_user='repl',master_password='123456',master_log_file='mysql-bin.000020',master_log_pos=574;
 start slave;
 
 
 ## 查看 
 
 show slave status  \G
 
 
 主要看以下两个参数:
 
 
    Slave_IO_Running: Yes
    Slave_SQL_Running: Yes

 
 
 
 ## 可能会出现的问题
 
 1.主从账号建立连接的时候,有必要测试下从matserA机器 远程连接masterB机器上的数据库
 2.建立账号需要注意权限,网段分配,如有必要需要测试下该账号能否连接上,像这样
 
 [root@local var]# mysql -urepl -p123456 -h10.0.0.6
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 7
Server version: 5.5.56-log Source distribution

Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> 

 Python3.6虚拟环境构建

## 安装依赖包

$ yum -y install wget sqlite-devel xz gcc automake zlib-devel openssl-devel epel-release git

## 编译安装

$ wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tar.xz
$ tar xvf Python-3.6.1.tar.xz  && cd Python-3.6.1
$ ./configure && make && make install

## 建立 Python 虚拟环境


$ cd /opt
$ python3 -m venv py3
$ source /opt/py3/bin/activate

## 成功否？
看到下面的提示符代表成功，以后运行什么服务都要先运行以上 source 命令，以下所有命令均在该虚拟环境中运行
(py3) [root@localhost py3]
## 下载包

 wget http://www.keepalived.org/software/keepalived-1.2.24.tar.gz
 tar xf keepalived-1.2.24.tar.gz 
 cd keepalived-1.2.24
 ## 编译安装
 ./configure --prefix=/usr/local/keepalived
 make && make install 
 
 ## 配置文件
 
 
 mkdir /etc/keepalived
 cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf  # keepalived默认从/etc 目录读取配置文件
 cp /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/rc.d/init.d/keepalived
 cp /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/keepalived

 
chkconfig keepalived on
service keepalived start   #启动服务
service keepalived stop    #停止服务
service keepalived restart #重启服务
 
 
 另外需要注意的一点是，keepalived启动时不会检查配置文件的语法是否正确，所以我们在编写配置文件时要特别小心，别写错了，否则会出现一些意想不到的现象。
 
 
 
 
 
 
 
 ## 下载jenkisn通用war包

https://jenkins.io/download/

## 随便把包放到哪个目录,前提你得能找得到

## 配置好java环境

java -version
## 后台开启

 nohup java -jar /root/jenkins.war &

 ## 指定端口
java -jar jenkins.war --httpPort=8888

screen java -Dhudson.util.ProcessTree.disable=true -jar jenkins.war --httpPort=8888## server酱地址

http://sc.ftqq.com/3.version


如果到这里你就你一目了然知道怎么做了的话,后面的就不用看了,毕竟看我博客的IQ都很高

## 选择github登录,微信绑定

选择微信推送,选择github登录,可能登录有点慢,多试几次

按操作来,我相信大家都不笨,哈哈哈哈哈

## 微信绑定公众号之后


回到浏览器页面,会给你一条链接 类似于  https://sc.ftqq.com/SCU23824Teb720f53ae658e6df0ad******************?text=PHP内存告急~



注意:	
test= 后面是要报警的内容


## 接下来

接下来就是写脚本的时间了

整体思路就是 写个脚本,定时任务 轮训检测你要监控的内容,比如 内存 cpu  磁盘之类的 ,一旦触发, curl 一下 你的那条链接 

就是这么简单,清新

## 放一个我的脚本?

root@web1:/server/scripts# cat php_mem.sh 
#!/bin/bash
key="SCU23824Teb720f53ae658e6df0ad720f1fe7aed35aba06e01a048"
num=`free -mh |awk '{print $7}'|grep -vw "M"|grep -v ^$ |tr -d "A-Z"`
limit=2
if [ `echo "$num < $limit" | bc` -eq 1 ] ;then
        curl -s "https://sc.ftqq.com/$key.send?text=服务器报警" -d "&desp=web73内存告急主人请快快处理"   > /dev/null 2>&1 
fi


## End

## ���ذ�
��ַ:https://cache.ruby-lang.org/pub/ruby/
## ��ѹ,���밲װ
tar -zxvf ruby-2.3.3.tar.gz
cd ruby-2.3.3
./configure /usr/local/ruby
make && make install
## ���û���������
���һ�����PATH=$PATH:/usr/local/ruby/bin
vi /etc/profile  
source profile
## �鿴�汾
ruby -v


wget http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.2.tar.gz
tar xvfvz ruby-2.1.2.tar.gz
cd ruby-2.1.2
./configure
make
sudo make install







=======================�ڶ��ַ���


wget https://cache.ruby-lang.org/pub/ruby/2.2/ruby-2.2.2.tar.gz
tar -zxvf ruby-2.2.2.tar.gz 
cd ruby-2.2.2
./configure --prefix=/usr/local/ruby   #��װλ�ø����Լ�����Ҫ����ָ��
make&&make install
cd /usr/local/ruby/bin
#���������ǽ�ruby,gem,irb����������뵽���������У�����ȫ��ʹ��ruby,gem,irb�ȼ�������
ln -s /usr/local/ruby/bin/ruby /usr/local/bin/ruby
ln -s /usr/local/ruby/bin/gem /usr/local/bin/gem
ln -s /usr/local/ruby/bin/irb /usr/local/bin/irb
#�ٴ�ִ��ruby -v�鿴ruby�İ汾��Ҳ��Ϊ����֤ruby�Ƿ�װ�ɹ�
ruby -v## 写在前面的话

其实这个 早就在弄了，但是一直没能好，气人，今天终于有些眉目了，特此做记录




## 环境  

1.jenkins搭建好
2.maven环境搭建好
3.git仓库搭建好


[root@pa2 ~]# mvn -v
Apache Maven 3.5.3 (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; 2018-02-25T03:49:05+08:00)
Maven home: /usr/local/maven
Java version: 1.8.0_131, vendor: Oracle Corporation
Java home: /usr/java/jdk/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "3.10.0-862.2.3.el7.x86_64", arch: "amd64", family: "unix"


[root@pa2 ~]# java -version
openjdk version "1.8.0_171"
OpenJDK Runtime Environment (build 1.8.0_171-b10)
OpenJDK 64-Bit Server VM (build 25.171-b10, mixed mode)



环境一定要搭建好，因为后面需要在jenkins页面设置下

### Maven配置

jenkins页面配置如下
https://s1.ax1x.com/2018/05/21/C2UOHO.jpg

### JDK配置

jenkins页面配置如下
https://s1.ax1x.com/2018/05/21/C2UjED.jpg


## 添加新项目细节

1.新建任务 
2.构建一个自由风格的项目 
3.源码管理选择git  
4.输入git仓库地址和授权账户密码  
5.增加构建步骤，调用顶级Maven项目，版本不要选择为默认，填写之前写的maven，Goals填写package，POM填写pom.xml 
6.增加构建后步骤，调用shell  shell前面要加BUILD_ID=DONTKILLME，防止任务构建完成杀死启动的进程，当然，对于tomcat也有其他的方法，


https://s1.ax1x.com/2018/05/21/C2amCj.jpg

https://s1.ax1x.com/2018/05/22/CRSNYq.jpg

https://s1.ax1x.com/2018/05/21/C2an8s.md.jpg

https://s1.ax1x.com/2018/05/21/C2au2n.jpg



##  参考脚本

#!/bin/bash
job=$"java"
jenkins_dir=$"/root/.jenkins"
tomcat_dir=$"/usr/local/tomcat"
cd $tomcat_dir/webapps/
rm -rf ./*

cp $jenkins_dir/workspace/$job/target/*.war $tomcat_dir/webapps/ 
# kill tomcat pid
ps -ef |grep tomcat |grep -v grep  |awk '{print $2}' |xargs kill -9 
if [ $? -eq 0 ] ;
        then
	echo -e "Tomcat be killed"
fi

echo -e "正在重启Tomcat"
sleep 3 
# tomcat start
cd $tomcat_dir
./bin/startup.sh
if [ $? -eq 0 ] ;
        then
        echo -e "Tomcat is Running"
	else
	echo -e "Tomcat No Running!"
fi





# 下载安装

## 下载地址
[链接]: https://www.postgresql.org/ftp/source/


## 获取源码包
```
 wget https://ftp.postgresql.org/pub/source/v9.6.4/postgresql-9.6.4.tar.gz
```

## 解压
```
 tar xf postgresql-9.6.4.tar.gz 
```

## 安装需要的依赖

readline 

zlib 

make 

gcc

```
apt-get install libreadline6 libreadline6-dev make gcc  zlib1g.dev zlib1g -y
```



## 编译

```
 cd postgresql-9.6.4/ &&  ./configure --prefix=/usr/local/postgresql && make && make install
```

出现这个为ok

PostgreSQL installation complete

## 添加postgres用户

```
adduser postgres
```



##  环境变量的配置

```
su postgres
```

vim .bashrc  

```
#export PS1='[\u@\h \W]\$'
PGHOME=/usr/local/postgresql
export PGHOME
PGDATA=/home/data/postgresql   #这里的数据存储目录，在这里配置的话，后续初始化则不需要多谢，默认不写使用默认配置
export PGDATA
PATH=$PATH:$HOME/.local/bin:$HOME/bin:$PGHOME/bin
export PATH 
```

### 立即生效

```
source .bashrc
```

## 数据目录及日志文件配置

```
mkdir /home/data/postgresql -p
chown -R postgres:postgres /home/data/postgresql
```



## 二进制文件拷贝

```
cp /usr/local/postgresql/bin/* /usr/bin/
chmod +x /usr/bin/pg*
chmod +x /usr/bin/ps*
```

## 数据库初始化

```
/usr/local/postgresql/bin/initdb  
```

```
[postgres@pa2 postgresql]$initdb
The files belonging to this database system will be owned by user "postgres".
This user must also own the server process.

The database cluster will be initialized with locale "en_US.utf8".
The default database encoding has accordingly been set to "UTF8".
The default text search configuration will be set to "english".

fixing permissions on existing directory /home/data/postgresql ... ok
creating subdirectories ... ok
selecting default max_connections ... 100
selecting default shared_buffers ... 32MB
creating configuration files ... ok
creating template1 database in /home/data/postgresql/base/1 ... ok
initializing pg_authid ... ok
initializing dependencies ... ok
creating system views ... ok
loading system objects' descriptions ... ok
creating collations ... ok
creating conversions ... ok
creating dictionaries ... ok
setting privileges on built-in objects ... ok
creating information schema ... ok
loading PL/pgSQL server-side language ... ok
vacuuming database template1 ... ok
copying template1 to template0 ... ok
copying template1 to postgres ... ok

WARNING: enabling "trust" authentication for local connections
You can change this by editing pg_hba.conf or using the option -A, or
--auth-local and --auth-host, the next time you run initdb.

Success. You can now start the database server using:
```



## 开启

在postgres用户操作

```
pg_ctl -D /home/data/postgresql   start
```

## 关闭 

在postgres用户操作

```
pg_ctl -D /home/data/postgresql -m fast    stop
```

“-m fast”选项立即断开会话而不是
等待会话发起的断开


## 重启

```
在postgres用户操作
pg_ctl restart -m fast
```

## 检查下端口
```
[root@pa2 ~]# netstat -lntup 
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1/systemd           
tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      3951/java           
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      22565/nginx: master 
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1800/sshd           
tcp        0      0 127.0.0.1:5432          0.0.0.0:*               LISTEN      10157/postmaster     #在这里
```





# 使用

## 修改密码步骤

默认密码是随机的，我们进入数据库里面直接再改一个

```
su postgres                              #切换postgres用户
psql                                     #进入数据库
ALTER USER postgres WITH PASSWORD '密码';   #修改用户postgres的密码，必须以分号结束
```



## 配置文件在哪儿？


配置文件都在数据储存的目录里面，就是我的 /home/data/postgresql

包括postgresql.conf和pg_hba.conf

然后配置下远程连接及postgres用户权限等等



## 关于连接配置

```
vim pg_hba.conf

···
"local" is for Unix domain socket connections only  # 翻译：“本地”仅适用于Unix域套接字连接
local     all     postgres                                      trust
···

重启
```

这里的trust 和 md5 将会决定你切换到postgres用户之后能不能psql 直接进入到pg数据库
### 远程（http）访问配置

要想远程访问，需要修改两处配置，需要重启postgresql

```
1.
vim postgresql.conf  # 该文件作用和 mysql数据库里面的 /etc/my.cnf类似

listen_addresses = '*'

2.
vim pg_hba.conf

host  all  all 0.0.0.0/0 md5          #代表任何一个ip都能连接

#注意：这个配置是我测试用的，线上生产用请谨慎配置

重启
```



##  信任指定服务器连接

pg_hba.conf ip段配置示范

```
# IPv4 local connections:

host    all            all      127.0.0.1/32      md5
host    all            all      10.211.55.6/32（需要连接的服务器IP）  md5
重启
```





## 概念

一个web服务器面对的是外部世界。它能直接从文件系统提供文件 (HTML, 图像， CSS等等)。然而，它无法 [*](http://uwsgi-docs-zh.readthedocs.io/zh_CN/latest/tutorials/Django_and_nginx.html#id3)直接*与Django应用通信；它需要借助一些工具的帮助，这些东西会运行运用，接收来自web客户端（例如浏览器）的请求，然后返回响应。

一个Web服务器网关接口（Web Server Gateway Interface） - WSGI - 就是干这活的。 [WSGI](http://wsgi.org/) 是一种Python标准。

uWSGI是一种WSGI实现。在这个教程中，我们将设置uWSGI，让它创建一个Unix socket，并且通过WSGI协议提供响应到web服务器。最后，我们完整的组件栈看起来将是这样的:

```
the web client <-> the web server <-> the socket <-> uwsgi <-> Django
```

如下图



![uwsgi](https://s1.ax1x.com/2018/08/01/PwIMDO.png)



## uWSGI的主要特点

1. 超快的性能，支持的并发量更高
2. 低内存占用（实测为apache2的mod_wsgi的一半左右）
3. 多app管理，方便管理多进程，发挥多核的优势
4. 详尽的日志功能（可以用来分析app性能和瓶颈）
5. 高度可定制（内存大小限制，服务一定次数后重启等）

## 易混淆的概念

uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换。

### WSGI / uwsgi / uWSGI 这三个概念

1. WSGI是一种Web服务器网关接口。它是一个Web服务器（如nginx，uWSGI等服务器）与web应用（如用Flask框架写的程序）通信的一种规范。
2. uwsgi是一种线路协议而不是通信协议，在此常用于在uWSGI服务器与其他网络服务器的数据通信。
3. 而uWSGI是实现了uwsgi和WSGI两种协议的Web服务器。
4. uwsgi协议是一个uWSGI服务器自有的协议，它用于定义传输信息的类型（type of information），每一个uwsgi packet前4byte为传输信息类型描述，它与WSGI相比是两样东西。





## 在你开始设置uWSGI之前

### 把uWSGI安装到你的virtualenv中

#### pip安装

```
pip install uwsgi
```

当然，有其他安装uWSGI的方式，但这种方式如其他方式效果一样。

#### 源码包安装

```
wget https://files.pythonhosted.org/packages/a2/c9/a2d5737f63cd9df4317a4acc15d1ddf4952e28398601d8d7d706c16381e0/uwsgi-2.0.17.1.tar.gz
tar xf uwsgi-2.0.17.1.tar.gz
cd uwsgi-2.0.17.1/
make  #直接make
```

## uWSGI和Django基础测试

创建一个名为 `test.py` 文件:

```
# test.py
def application(env, start_response):
    start_response('200 OK', [('Content-Type','text/html')])
    return [b"Hello World"] # python3
    #return ["Hello World"] # python2
```

注解

需要考虑到，对于Python 3，需要 `bytes()` 。

### 运行uWSGI试试？

```
uwsgi --http :8000 --wsgi-file test.py
```

选项表示:

- `http :8000`: 使用http协议，端口8000
- `wsgi-file test.py`: 加载指定的文件，test.py

当浏览器访问8000端口时，这将直接提供一个’hello world’消息。 访问:

```
http://ip:8000
```

来看一看。如果是这样，那么意味着以下的组件栈正常:

```
the web client <-> uWSGI <-> Python
```

### 测试你的Django项目

现在，我们想让uWSGI做同样的事，但是返回一个Django站点而不是 `test.py` 模块。

如果你还没有这样做，那么请确保你的 `mysite` 项目实际上正常工作:

```
python manage.py runserver 0.0.0.0:8000
```

### uWSGI运行下Django？

而如果正常，则使用uWSGI来运行它:

```
uwsgi --http :8000 --module mysite.wsgi
```

- `module mysite.wsgi`: 加载指定的wsgi模块

将你的浏览器指向该服务器；如果站点出现，那么意味着uWSGI可以为你虚拟环境中的Django应用服务，而这个栈工作正常:

```
the web client <-> uWSGI <-> Django
```

通常我们不会让浏览器直接与uWSGI通信。那是web服务器的工作，这是个穿针引线的活。



### 部署静态文件

在运行nginx之前，你必须收集所有的Django静态文件到静态文件夹里。首先，必须编辑mysite/settings.py，添加:

```
STATIC_ROOT = os.path.join(BASE_DIR, "static/")
```

然后运行

```
python manage.py collectstatic
```

## Nginx配置文件

### 为你的站点配置nginx

你会需要 `uwsgi_params` 文件，可用在uWSGI发行版本的 `nginx` 目录下，或者从<https://github.com/nginx/nginx/blob/master/conf/uwsgi_params> 找到。

将其拷贝到你的项目目录中。一会儿，我们将告诉nginx引用它。

现在，创建一个名为django_nginx.conf的nginx子配置文件，然后将这个写入到它里面:

```
# configuration of the server
server {
    # the port your site will be served on
    listen      80;
    # the domain name it will serve for
    
    
    ==============以上负载均衡使用=====================
    server_name 58.87.104.82; # substitute your machine's IP address or FQDN
    charset     utf-8;

    # max upload size
    client_max_body_size 75M;   # adjust to taste

    # Django media
    location /media  {
        alias /path/to/your/mysite/media;  # your Django project's media files - amend as required
    }

    location /static {
        alias /tmp/my-first-blog-master/static; # your Django project's static files - amend as required
    }

    # Finally, send all non-media requests to the Django server.
    location / {
    
        uwsgi_pass  unix:/tmp/my-first-blog-master/mysite.sock;#这里写生成的sock位置
        include     /usr/local/nginx/conf/uwsgi_params; # the uwsgi_params file you installed  #这里写nginx主配置文件同目录下的uwsgi_params，全路径
        access_log  /var/log/nginx/dj_access.log  ;
    }
}
```

### 重载Nginx

/pull/path/nginx -s reload 



## Nginx与uWSGI连接

### 使用Unix socket而不是端口

目前，我们使用了一个TCP端口socket，因为它简单些，但事实上，使用Unix socket会比端口更好 - 开销更少。

编辑 `django_nginx.conf`, 修改它以匹配:

```
server unix:///path/to/your/mysite/mysite.sock; # for a file socket你生成的sock在哪里就写哪里，不论是命令行还是ini配置文件生成。
# server 127.0.0.1:8001; # for a web port socket (we'll use this first)
```

这次， `socket` 选项告诉uWSGI使用哪个文件。

###  使用uwsgi和nginx运行Django应用

### 命令行运行我们的Django应用（重点）

```
uwsgi --socket mysite.sock --module mysite.wsgi --chmod-socket=666
```

现在，命令行版的uwsgi+django+nginx就ok了

### 配置uWSGI的ini文件

我们可以将用在uWSGI上的相同的选项放到一个文件中，然后告诉 uWSGI使用该文件运行。这使得管理配置更容易。

创建一个名为 ``mysite_uwsgi.ini`` 的文件:

```
# uwsig使用配置文件启动
[uwsgi]
# 项目目录
#socket = 127.0.0.1:9090
chdir=/tmp/my-first-blog-master
# 指定项目的application
module=mysite.wsgi
#wsgi-file =/tmp/my-first-blog-master/django_wsgi.py
# 指定sock的文件路径（尽量在tmp下）       
socket=/tmp/my-first-blog-master/mysite.sock
#socket=/tmp/uwsgi.sock
#virtualenv =/opt/py3/
#pythonpath = /opt/py3/bin/
## 进程个数       
workers=8
pidfile=/tmp/uwsgi.pid
# 指定IP端口       
#http=127.0.0.1:8000
# 指定静态文件
#static-map=/static=/opt/proj/teacher/static
# 启动uwsgi的用户名和用户组
uid=root
gid=root
chmod-socket    = 666
# 启用主进程
master=true
# 自动移除unix Socket和pid文件当服务停止的时候
#vacuum=true
# 序列化接受的内容，如果可能的话
thunder-lock=true
# 启用线程
enable-threads=true
# 设置自中断时间
#harakiri=30
# 设置缓冲
post-buffering=4096
# 设置日志目录
daemonize=/tmp/uwsgi.log
```

### 运行uswgi

```
uwsgi --ini mysite_uwsgi.ini # 运行之后会在配置文件指定位置处生成sock
```

ok，现在ini配置文件版本的uwsgi+nginx+django已完成



## Emperor模式(不必要)

uWSGI可以运行在’emperor’模式。在这种模式下，它会监控uWSGI配置文件目录，然后为每个它找到的配置文件生成实例 (‘vassals’)。

每当修改了一个配置文件，emperor将会自动重启 vassal.

```
# create a directory for the vassals
sudo mkdir /etc/uwsgi
sudo mkdir /etc/uwsgi/vassals
# symlink from the default config directory to your config file
sudo ln -s /path/to/your/mysite/mysite_uwsgi.ini /etc/uwsgi/vassals/
# run the emperor
uwsgi --emperor /etc/uwsgi/vassals --uid www-data --gid www-data
```

你或许需要使用sudo来运行uWSGI:

```
sudo uwsgi --emperor /etc/uwsgi/vassals --uid www-data --gid www-data
```

选项表示:

- `emperor`: 查找vassals (配置文件)的地方
- `uid`: 进程一旦启动后的用户id
- `gid`: 进程一旦启动后的组id

检查站点；它应该在运行。

#### 系统启动时运行uWSGI

编辑 `/etc/rc.local` 然后在”exit 0”行前添加:

```
/usr/local/bin/uwsgi --emperor /etc/uwsgi/vassals --uid www-data --gid www-data --daemonize /var/log/uwsgi-emperor.log
```



## 注意

出错注意看日志，看uwsgi错误日志，假如是命令行的话，会实时输出日志。





## End## 下载包
```
wget https://neo4j.com/artifact.php?name=neo4j-community-3.4.7-unix.tar.gz
# 解压neo4j包
tar xf artifact.php?name=neo4j-community-3.4.7-unix.tar.gz
```
修改配置文件（进入到目录）

```
cd conf
vim neo4j.conf
```
## 添加下面第一条打开对外访问
```
dbms.connectors.default_listen_address=0.0.0.0  #打开对外访问
dbms.connector.bolt.address=0.0.0.0:7687  #
dbms.security.auth_enabled=false    #不使用密码访问
```
## 启动neo4j
```
./bin/neo4j start    #停止的话是stop

➜  neo4j-community-3.4.7 ./bin/neo4j start
Active database: graph.db
Directories in use:
  home:         /root/neo4j-community-3.4.7
  config:       /root/neo4j-community-3.4.7/conf
  logs:         /root/neo4j-community-3.4.7/logs
  plugins:      /root/neo4j-community-3.4.7/plugins
  import:       /root/neo4j-community-3.4.7/import
  data:         /root/neo4j-community-3.4.7/data
  certificates: /root/neo4j-community-3.4.7/certificates
  run:          /root/neo4j-community-3.4.7/run
Starting Neo4j.
Started neo4j (pid 31203). It is available at http://0.0.0.0:7474/
There may be a short delay until the server is ready.
See /root/neo4j-community-3.4.7/logs/neo4j.log for current status.
```




# Yum安装
```
cd /tmp
wget http://debian.neo4j.org/neotechnology.gpg.key
rpm --import neotechnology.gpg.key
```
```
cat <<EOF>  /etc/yum.repos.d/neo4j.repo
[neo4j]
name=Neo4j Yum Repo
baseurl=http://yum.neo4j.org/stable
enabled=1
gpgcheck=1
EOF
```
## 安装
```
yum install neo4j -y
```



# ubuntu安装
略## 下载地址 
https://sourceforge.net/projects/zabbix/files/ZABBIX%20Latest%20Stable/3.4.7/zabbix-3.4.7.tar.gz/download

## 创建用户
```
groupadd -r zabbix && useradd -s /sbin/nologin -g zabbix -r zabbix
```


## 编译安装
解压,进入目录
开始编译

```
tar xf zabbix-3.4.7.tar.gz
cd zabbix-3.4.7

./configure --prefix=/usr/local/zabbix/ --enable-server \
--enable-agent --with-mysql=/usr/local/mysql/bin/mysql_config \
--with-net-snmp --with-libcurl \
 --with-libxml2 --enable-proxy --enable-snmp --with-mbstring

./configure --prefix=/usr/local/zabbix/  --enable-agent --with-libcurl  --with-libxml2 --enable-proxy 

make && make install
```



## 启动文件优化
```
 cp /root/zabbix-3.4.7/misc/init.d/fedora/core5/zabbix_* /etc/init.d/ 
 cd  /etc/init.d/ 
 sed -i 's/ZABBIX_BIN=\"\/usr\/local\//&zabbix\//' zabbix_server  
 sed -i 's/ZABBIX_BIN=\"\/usr\/local\//&zabbix\//' zabbix_agentd
```



## 数据库配置

```
mysql -uroot -p password

create database zabbix default charset utf8;
GRANT ALL PRIVILEGES ON *.* TO zabbix@'localhost' IDENTIFIED BY 'zabbix' WITH GRANT OPTION;
FLUSH PRIVILEGES;
```


## 导入原始数据
```
mysql  -uroot -p  zabbix </root/zabbix-3.4.7/database/mysql/schema.sql s
mysql  -uroot -p  zabbix < /root/zabbix-3.4.7/database/mysql/images.sql 
mysql  -uroot -p  zabbix <  /root/zabbix-3.4.7/database/mysql/data.sql 
```



## 复制站点目录

复制zabbix自带的网站配置文件到你的web服务器站点下面,然后为zabbix配置一个站点文件,我的是在/www/下

```
cp -fr /root/zabbix-3.4.7/frontends/php /www/zabbix

chown -R www.www /www/zabbix
```


## zabbix配置文件

zabbix_server.conf,如若配置错误,可能会开启失败

```
[root@local etc]# cat zabbix_server.conf |grep -v ^# |grep -v ^$
LogFile=/tmp/zabbix_server.log
DBName=zabbix
DBUser=root
DBPassword=swl19960706
 ListenIP=127.0.0.1
Timeout=4
LogSlowQueries=3000
AlertScriptsPath=/usr/local/zabbix/alertscripts  #脚本存放位置
```




## 开启

```
/etc/init.d/zabbix_server start     #服务端

/etc/init.d/zabbix_agentd start     #客户端
```



## 检测zabbix服务端与客户端键值连接

```
zabbix_get -s 127.0.0.1 -p 10050 -k "system.cpu.load[all,avg1]"

zabbix_get -s 127.0.0.1 -p 10050 -k "key"
```



##  查看端口

```
[root@local etc]#   netstat -lntup |grep 1005
tcp        0      0 0.0.0.0:10050               0.0.0.0:*                   LISTEN      14201/zabbix_agentd 
tcp        0      0 127.0.0.1:10051             0.0.0.0:*                   LISTEN      31403/zabbix_server 
```



##  配置nginx

略 #和配置普通php站点一样

## 浏览器检验

输入域名 

End

## 常用脚本积累

```
UserParameter=blog_http,  awk '{print $1}'  /var/log/nginx/ta_access.log |sort  |wc -l
UserParameter=blog_pv_jump,  awk '{print $1}'  /var/log/nginx/ta_access.log |sort  |wc -l
UserParameter=all_pv_jump,  awk '{print $1}'  /var/log/nginx/* |sort  |uniq -c  |wc -l
UserParameter=tcp_num, netstat |grep ^tcp |wc -l
#url监控
UserParameter=user_url, curl -I  http://192.168.0.42:6788/t/m/ 2>/dev/null  |head -1 |awk '{print $2}'
Timeout=8
```

### 小问题

2>/dev/null  排除多余的字符串或者警告信息，让zabbix更好的读取

```

curl -I  http://192.168.0.42:6788/t/m/ 2>/dev/null  |head -1 |awk '{print $2}'
```





## py脚本媒介

Python2.7

使用规范

python name.py lijinghua 【】【】 #lijinghua是微信企业版已经注册的用户

```
#!/usr/bin/python2.7
#_*_coding:utf-8 _*_
#auther:火星小刘

import requests,sys,json
import urllib3
urllib3.disable_warnings()

reload(sys)
sys.setdefaultencoding('utf-8')

def GetToken(Corpid,Secret):
    Url = "https://qyapi.weixin.qq.com/cgi-bin/gettoken"
    Data = {
        "corpid":Corpid,
        "corpsecret":Secret
    }
    r = requests.get(url=Url,params=Data,verify=False)
    Token = r.json()['access_token']
    return Token

def SendMessage(Token,User,Agentid,Subject,Content):
    Url = "https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=%s" % Token
    Data = {
        "touser": User,                                 # 企业号中的用户帐号，在zabbix用户Media中配置，如果配置不正常，将按部门发送。
        #"totag": Tagid,                                # 企业号中的标签id，群发使用（推荐）
        #"toparty": Partyid                             # 企业号中的部门id，群发时使用。
        "msgtype": "text",                              # 消息类型。
        "agentid": 1000004,                             # 企业号中的应用id。
        "text": {
            "content": Subject + '\n' + Content
        },
        "safe": "0"
    }
    r = requests.post(url=Url,data=json.dumps(Data),verify=False)
    return r.text


if __name__ == '__main__':
    User = sys.argv[1]                                                              # zabbix传过来的第一个参数
    Subject = sys.argv[2]                                                           # zabbix传过来的第二个参数
    Content = sys.argv[3]                                                           # zabbix传过来的第三个参数

    Corpid = "ww13ab866295fd5e46"                                                   # CorpID是企业号的标识
    Secret = "Eh7gKI38NFYfCZZCrY5Uod9dWQ3p1PAISzGZUUbd6TQ"     # Secret是管理组凭证密钥
    #Tagid = "1"                                                                     # 通讯录标签ID
    Agentid = "1000004"                                                                   # 应用ID
    #Partyid = "1"                                                                  # 部门ID

    Token = GetToken(Corpid, Secret)
    Status = SendMessage(Token,User,Agentid,Subject,Content)
    print Status
```

## 先安装一个sendmail程序
yum -y install sendmail

## 开启服务
service sendmail start

## 安装mail命令
yum install -y mail
## 配置相关文件
此时该文件生成,文件末尾加入,注意,此时的密码不是邮箱密码,应该是授权码,且需要开通相关权限
vim /etc/mail.rc 

set from=18629359835@163.com
set smtp=smtp.163.com
set smtp-auth-user=18629359835
set smtp-auth-password=swl521521521
set smtp-auth=login

## 发送邮件试试?
 
两种形式

1.
echo "hello,echo"|mail -s "lijinghua" 598820383@qq.com

2.
touch body.txt
mail -s 'Test mail' 598820383@qq.com < body.txt[client]
user=david
password=88888888
 
[mysqld]
########basic settings########
server-id = 11
port = 3306
user = mysql
bind_address = 10.166.224.32
autocommit = 0
character_set_server=utf8mb4
skip_name_resolve = 1
max_connections = 800
max_connect_errors = 1000
datadir = /data/mysql_data
transaction_isolation = READ-COMMITTED
explicit_defaults_for_timestamp = 1
join_buffer_size = 134217728
tmp_table_size = 67108864
tmpdir = /tmp
max_allowed_packet = 16777216
sql_mode = "STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER"
interactive_timeout = 1800
wait_timeout = 1800
read_buffer_size = 16777216
read_rnd_buffer_size = 33554432
sort_buffer_size = 33554432
########log settings########
log_error = error.log
slow_query_log = 1
slow_query_log_file = slow.log
log_queries_not_using_indexes = 1
log_slow_admin_statements = 1
log_slow_slave_statements = 1
log_throttle_queries_not_using_indexes = 10
expire_logs_days = 90
long_query_time = 2
min_examined_row_limit = 100
########replication settings########
master_info_repository = TABLE
relay_log_info_repository = TABLE
log_bin = bin.log
sync_binlog = 1
gtid_mode = on
enforce_gtid_consistency = 1
log_slave_updates
binlog_format = row
relay_log = relay.log
relay_log_recovery = 1
binlog_gtid_simple_recovery = 1
slave_skip_errors = ddl_exist_errors
########innodb settings########
innodb_page_size = 8192
innodb_buffer_pool_size = 6G
innodb_buffer_pool_instances = 8
innodb_buffer_pool_load_at_startup = 1
innodb_buffer_pool_dump_at_shutdown = 1
innodb_lru_scan_depth = 2000
innodb_lock_wait_timeout = 5
innodb_io_capacity = 4000
innodb_io_capacity_max = 8000
innodb_flush_method = O_DIRECT
innodb_file_format = Barracuda
innodb_file_format_max = Barracuda
innodb_log_group_home_dir = /redolog/
innodb_undo_directory = /undolog/
innodb_undo_logs = 128
innodb_undo_tablespaces = 3
innodb_flush_neighbors = 1
innodb_log_file_size = 4G
innodb_log_buffer_size = 16777216
innodb_purge_threads = 4
innodb_large_prefix = 1
innodb_thread_concurrency = 64
innodb_print_all_deadlocks = 1
innodb_strict_mode = 1
innodb_sort_buffer_size = 67108864
########semi sync replication settings########
plugin_dir=/usr/local/mysql/lib/plugin
plugin_load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"
loose_rpl_semi_sync_master_enabled = 1
loose_rpl_semi_sync_slave_enabled = 1
loose_rpl_semi_sync_master_timeout = 5000
 
[mysqld-5.7]
innodb_buffer_pool_dump_pct = 40
innodb_page_cleaners = 4
innodb_undo_log_truncate = 1
innodb_max_undo_log_size = 2G
innodb_purge_rseg_truncate_frequency = 128
binlog_gtid_simple_recovery=1
log_timestamps=system
transaction_write_set_extraction=MURMUR32
show_compatibility_56=on安装grunt
grunt是一个很方便的构建工具，可以进行打包压缩、测试、执行等等的工作，5.0里的head插件就是通过grunt启动的。因此需要安装一下grunt：

cd elasticsearch-head
npm install -g grunt --registry=https://registry.npm.taobao.org    # 安装grunt
npm install                                             # 安装head
npm install grunt --save   # 如果 node_modules/grunt/bin/目录下没有 grunt文件, 就执行以下该命令
或者使用重定向安装：
npm install -g cnpm --registry=https://registry.npm.taobao.org
npm install
安装完成后检查一下：
[root@ m01 elasticsearch-head]# ./node_modules/grunt/bin/grunt -veriosn
>> Local Npm module "grunt-contrib-clean" not found. Is it installed?
>> Local Npm module "grunt-contrib-concat" not found. Is it installed?
>> Local Npm module "grunt-contrib-watch" not found. Is it installed?
>> Local Npm module "grunt-contrib-connect" not found. Is it installed?
>> Local Npm module "grunt-contrib-copy" not found. Is it installed?
>> Local Npm module "grunt-contrib-jasmine" not found. Is it installed?
Warning: Task "clean" not found. Use --force to continue.
Aborted due to warnings.
出现提示，为Gruntfile.js引用的，缺少以下包
安装
npm install grunt-contrib-clean --registry=https://registry.npm.taobao.org
npm install grunt-contrib-concat --registry=https://registry.npm.taobao.org
npm install grunt-contrib-watch --registry=https://registry.npm.taobao.org
npm install grunt-contrib-connect --registry=https://registry.npm.taobao.org
npm install grunt-contrib-copy --registry=https://registry.npm.taobao.org
npm install grunt-contrib-jasmine --registry=https://registry.npm.taobao.org
## 先检查是否安装了iptables
service iptables status
## 安装iptables
yum install -y iptables
## 升级iptables
yum update iptables 
## 安装iptables-services
yum install iptables-services


## 禁用/停止自带的firewalld服务

## 停止firewalld服务
systemctl stop firewalld
## 禁用firewalld服务
systemctl mask firewalld

## 基本操作

#查看iptables现有规则
iptables -L -n
#先允许所有,不然有可能会杯具
iptables -P INPUT ACCEPT
#清空所有默认规则
iptables -F
#清空所有自定义规则
iptables -X
#所有计数器归0
iptables -Z
#允许来自于lo接口的数据包(本地访问)
iptables -A INPUT -i lo -j ACCEPT
#开放22端口
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
#开放21端口(FTP)
iptables -A INPUT -p tcp --dport 21 -j ACCEPT
#开放80端口(HTTP)
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
#开放443端口(HTTPS)
iptables -A INPUT -p tcp --dport 443 -j ACCEPT
#允许ping
iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT
#允许接受本机请求之后的返回数据 RELATED,是为FTP设置的
iptables -A INPUT -m state --state  RELATED,ESTABLISHED -j ACCEPT
#其他入站一律丢弃
iptables -P INPUT DROP
#所有出站一律绿灯
iptables -P OUTPUT ACCEPT
#所有转发一律丢弃
iptables -P FORWARD DROP



## 其他规则

#如果要添加内网ip信任（接受其所有TCP请求）
iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT
#过滤所有非以上规则的请求
iptables -P INPUT DROP
#要封停一个IP，使用下面这条命令：
iptables -I INPUT -s ***.***.***.*** -j DROP
#要解封一个IP，使用下面这条命令:
iptables -D INPUT -s ***.***.***.*** -j DROP

## 开启

## 相当于以前的chkconfig iptables on (开机自启)
systemctl enable iptables.service
## 开启服务
systemctl start iptables.service
## 查看状态
systemctl status iptables.service

## 重启iptables

systemctl restart iptables.service

## 保存规则
service iptables save


## centos7 iptables脚本,请灵活使用

#!/bin/sh
iptables -P INPUT ACCEPT
iptables -F
iptables -X
iptables -Z
iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
iptables -A INPUT -p tcp --dport 21 -j ACCEPT
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -j ACCEPT
iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT
iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -P INPUT DROP
iptables -P OUTPUT ACCEPT
iptables -P FORWARD DROP
service iptables save
systemctl restart iptables.service
=======================================redis=================================================================



1����һ����Ȼ��ȥgithub����Դ���ˣ��ǵü��ϲ��� --no-check-certificate����ȻhttpsУ������

wget https://github.com/phpredis/phpredis/archive/develop.zip --no-check-certificate

2����ѹ���غõİ���

unzip develop
cd phpredis-develop/

3�����úͱ��룬ע���޸�Ϊphp�İ�װĿ¼λ��

~/php/bin/phpize   (ע�����php·��)
./configure --with-php-config=~/php/bin/php-config 
make && make install


4.����:
��һ����ɻ��ڽ�β��������ַ�,ע��鿴

Build complete.
Don't forget to run 'make test'.

Installing shared extensions:     /www/web/php/lib/php/extensions/no-debug-non-zts-20131226/

5.�����ļ����������չ

vim php.ini

extension=redis.so

6.����Ҫ��һ��
����ʱҪָ�������ļ� ����:
/www/web/php/sbin/php-fpm -c /www/web/php/etc/php.ini


================================memcahce=========================================================================

## ��������


 wget  https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz
 tar -zxf libmemcached-1.0.18.tar.gz 
 cd libmemcached-1.0.18/
 ./configure --prefix=/usr/local/libmemcached --with-memcached  
 /usr/local/php/sbin/php-fpm -m
 /usr/local/php/sbin/php-fpm -i
 
## phpmemcacheģ��
 
 
wget http://pecl.php.net/get/memcached-2.2.0.tgz

tar -zxf memcached-2.2.0.tgz

## phpize
 /usr/local/php/bin/phpize
 ./configure --with-php-config=/usr/local/php/bin/php-config --with-libmemcached-dir=/usr/local/libmemcached
 make && make install 
 
## �����ļ����������չ

vim php.ini

extension=redis.so


����ʱҪָ�������ļ� ����:
/www/web/php/sbin/php-fpm -c /www/web/php/etc/php.ini## 安装 nginx 

yum install -y nginx

## 启动
systemctl start nginx



## 安装php

yum install php php-fpm php-bcmatch php-gd php-mbstring php-mcrypt php-mysql 

## 启动


systemctl start php-fpm



## 安装mysql (需要将centos7自带的)

wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm
yum -y install mysql57-community-release-el7-10.noarch.rpm
yum -y install mysql-community-server
## 启动
systemctl start mysqld.service

## 环境

机器：Centos7
已经安装好一个redis服务
[root@pa2 src]#which redis-server
/usr/local/bin/redis-server

内网ip：172.168.1.3

## 创建一个集群目录


mkdir /usr/local/redis-cluster     
cd /usr/local/redis-cluster/
mkdir -p 9001/data 9002/data 9003/data 9004/data 9005/data 9006/data   #端口将分别为9001,9002,9003,9004,9005,9006

##  集群管理命令配置
#创建集群管理的命令目录
mkdir /usr/local/redis-cluster/bin -p 
#复制原来redis服务/bin目录下的相关二进制命令
cd /usr/local/redis/bin   #我原来的redis安装在/usr/local/redis
cp mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-dump redis-cli redis-server redis-trib.rb /usr/local/redis-cluster/bin

## 先复制一个模板
#由于集群的配置文件相似度较高，我们先配置一个模板，9001端口的redis

cp /usr/local/redis/* /usr/local/redis-cluster/9001

vim redis.conf #编辑该文件，就麻烦一会，这里要看准

port 9001（每个节点的端口号）
daemonize yes
bind 172.168.1.3（绑定当前机器 IP）
dir /usr/local/redis-cluster/9001/data/（数据文件存放位置）
pidfile /var/run/redis_9001.pid   #（pid 9001和port要对应）
cluster-enabled yes  #（启动集群模式）
cluster-config-file nodes9001.conf  #（9001和port要对应）
cluster-node-timeout 15000
appendonly yes


注意：集群的开启，重点是这三个
cluster-enabled yes  #（启动集群模式）
cluster-config-file nodes9001.conf  #（9001和port要对应）
cluster-node-timeout 15000



## 复制9001实例配置文件到其余5个redis实例

\cp -rf /usr/local/redis-cluster/9001/* /usr/local/redis-cluster/9002
\cp -rf /usr/local/redis-cluster/9001/* /usr/local/redis-cluster/9003
\cp -rf /usr/local/redis-cluster/9001/* /usr/local/redis-cluster/9004
\cp -rf /usr/local/redis-cluster/9001/* /usr/local/redis-cluster/9005
\cp -rf /usr/local/redis-cluster/9001/* /usr/local/redis-cluster/9006

## 

## 全局替换

:%s/9001/9002/g

这里需要麻烦一点，进去每个目录，更改9001为该目录对应的端口，可以使vim全局替换，但是我懒，也觉得这文件以后肯定用的到，先写个批量改

我这里用了一个sed替换

sed -i s/9001/9002/g  /usr/local/redis-cluster/9002/redis.conf 
sed -i s/9001/9003/g  /usr/local/redis-cluster/9003/redis.conf 
sed -i s/9001/9004/g  /usr/local/redis-cluster/9004/redis.conf 
sed -i s/9001/9005/g  /usr/local/redis-cluster/9005/redis.conf 
sed -i s/9001/9006/g  /usr/local/redis-cluster/9006/redis.conf 
                   



## 启动 

/usr/local/redis/src/redis-server /usr/local/redis-cluster/9001/redis.conf 
/usr/local/redis/src/redis-server /usr/local/redis-cluster/9002/redis.conf 
/usr/local/redis/src/redis-server /usr/local/redis-cluster/9003/redis.conf 
/usr/local/redis/src/redis-server /usr/local/redis-cluster/9004/redis.conf 
/usr/local/redis/src/redis-server /usr/local/redis-cluster/9005/redis.conf 
/usr/local/redis/src/redis-server /usr/local/redis-cluster/9006/redis.conf



## 进去redis看看？

redis-cli -h 172.168.1.3 -p 9001   #这里的172.168.1.3指的是bind指定的地址


set name lijinghua # 回车，报错了

(error) CLUSTERDOWN Hash slot not served

## 安装一些集群管理工具

#Ruby和rubygems


yum install ruby -y 
yum install rubygems -y 
gem install redis  


## 集群初始化启动

/usr/local/redis-cluster/bin/redis-trib.rb create --replicas 1 172.168.1.3:9001 172.168.1.3:9002 172.168.1.3:9003 172.168.1.3:9004 172.168.1.3:9005 172.168.1.3:9006



[root@pa2 src]#/usr/local/redis-cluster/bin/redis-trib.rb create --replicas 1 172.168.1.3:9001 172.168.1.3:9002 172.168.1.3:9003 172.168.1.3:9004 172.168.1.3:9005 172.168.1.3:9006
>>> Creating cluster
>>> Performing hash slots allocation on 6 nodes...
Using 3 masters:
172.168.1.3:9001
172.168.1.3:9002
172.168.1.3:9003
Adding replica 172.168.1.3:9005 to 172.168.1.3:9001
Adding replica 172.168.1.3:9006 to 172.168.1.3:9002
Adding replica 172.168.1.3:9004 to 172.168.1.3:9003
>>> Trying to optimize slaves allocation for anti-affinity
[WARNING] Some slaves are in the same host as their master
M: b33c3ba592b0280049ebc301b9f2202190a193c3 172.168.1.3:9001
   slots:0-5460 (5461 slots) master
M: 35f7e795e40183ce64dbda1b06819d4eb53da017 172.168.1.3:9002
   slots:5461-10922 (5462 slots) master
M: 762d5f76e2551ee6b9079cf9354e3c38d5eca92d 172.168.1.3:9003
   slots:10923-16383 (5461 slots) master
S: c4b0dfe713aedc0f3be777253f6ccb7d9867ad75 172.168.1.3:9004
   replicates b33c3ba592b0280049ebc301b9f2202190a193c3
S: 167f63152700fc8c62923970215a8d80f776046b 172.168.1.3:9005
   replicates 35f7e795e40183ce64dbda1b06819d4eb53da017
S: 43670c3af65049d902c22c89d12d18800cf9f2c4 172.168.1.3:9006
   replicates 762d5f76e2551ee6b9079cf9354e3c38d5eca92d
Can I set the above configuration? (type 'yes' to accept): yes
>>> Nodes configuration updated
>>> Assign a different config epoch to each node
>>> Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join.....
>>> Performing Cluster Check (using node 172.168.1.3:9001)
M: b33c3ba592b0280049ebc301b9f2202190a193c3 172.168.1.3:9001
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
S: c4b0dfe713aedc0f3be777253f6ccb7d9867ad75 172.168.1.3:9004
   slots: (0 slots) slave
   replicates b33c3ba592b0280049ebc301b9f2202190a193c3
S: 167f63152700fc8c62923970215a8d80f776046b 172.168.1.3:9005
   slots: (0 slots) slave
   replicates 35f7e795e40183ce64dbda1b06819d4eb53da017
M: 762d5f76e2551ee6b9079cf9354e3c38d5eca92d 172.168.1.3:9003
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
M: 35f7e795e40183ce64dbda1b06819d4eb53da017 172.168.1.3:9002
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
S: 43670c3af65049d902c22c89d12d18800cf9f2c4 172.168.1.3:9006
   slots: (0 slots) slave
   replicates 762d5f76e2551ee6b9079cf9354e3c38d5eca92d
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.  #出现这个绿色字体为成功




## 在进去redis里面测试看看？
[root@pa2 src]#redis-cli -p  9001 -h 172.168.1.3 -c 
172.168.1.3:9001> set name iii
(error) MOVED 5798 172.168.1.3:9002  


了解一个参数

-c 启用群集模式（按照-ASK和-MOVED重定向）


## End


 ## ��װnode.js����(���Ѿ����غ���,��ѹ������)
��������:https://nodejs.org/dist/v9.8.0/node-v9.8.0-x64.msi
��װ(����ĸ�λ��)
��װ���ҵ������ļ�,�Թ���Ա��ʽ����
## ͨ��npm���װhexo�������ǵĵ��� �ͻᰲװ��C:\Users\Admin\AppData\Roaming
npm install -g hexo
## Ȼ��׼������һ��Ŀ¼,�����ǵ�hexo��վĿ¼
������D�� wwwĿ¼
## ��װwindows��git����
## �ҵ��ոմ�����wwwĿ¼,�һ�,ѡ�� Git Bash Here
Ȼ����������,׼����ʼ��Ŀ¼,��github������HexoԴ����,������վԴ����(�ٶȽ���)
hexo init

## �˶αȽ���Ҫ,����ϸ��,����" Start blogging with Hexo!"��ʾ�ɹ�
$ hexo init
INFO  Cloning hexo-starter to D:\hexo
Cloning into 'D:\hexo'...
remote: Counting objects: 62, done.
remote: Total 62 (delta 0), reused 0 (delta 0), pack-reused 62
Unpacking objects: 100% (62/62), done.
Submodule 'themes/landscape' (https://github.com/hexojs/hexo-theme-landscape.git) registered for path 'themes/landscape'
Cloning into 'D:/hexo/themes/landscape'...
Submodule path 'themes/landscape': checked out '73a23c51f8487cfcd7c6deec96ccc7543960d350'
INFO  Install dependencies
???: ???????????????????

> nunjucks@3.1.2 postinstall D:\hexo\node_modules\nunjucks
> node postinstall-build.js src

npm WARN rollback Rolling back readable-stream@2.2.9 failed (this is probably harmless): EPERM: operation not permitted, lstat 'D:\hexo\node_modules\fsevents\node_modules'
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3 (node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})

added 341 packages in 33.346s
INFO  Start blogging with Hexo!

INFO  Install dependencies

## ��ʼ���ɹ�����������

hexo server

ע��:�˴��ڲ�Ҫ�ر�


## �鿴����windows����������ַ
win��+r
Ȼ������ ipconfig

�ҵ�iPv4 �������������Ҫ��������ַ



## �鿴�ɹ�

��ַ��:����
������ַ+4000 ## 环境准备
 
 yum install libevent-devel -y
 
 ## 下载包
 wget http://www.memcached.org/files/memcached-1.5.8.tar.gz
 tar xf memcached-1.5.8.tar.gz 
 cd memcached-1.5.8/

 ## 编译安装
 ./configure --prefix=/usr/local/memcached --with-libevent=/usr/local/lib
 make &&make install 
## 开启
 /usr/local/memcached/bin/memcached -m 16m -c 2048 -u root -p 11211 -d 
 
 cp memcached /etc/init.d/memcached
chmod a+x /etc/init.d/memcached
 
### 参数

-m：给多大内存、-c 最大并发多少用户、-u：以什么用户运行、-p：启动的端口（默认11211）、 -d：daemon（守护进程运行） 

## 检验
 netstat -lntup 
 
### nc检验

yum install -y nc 

[root@pa2 ~]# printf "set key007 0 3 10\r\nlijinghua0\r\n"|nc 127.0.0.1 11211           #这里的3代表超时时间为3秒 /n后面代表值的位数
STORED
[root@pa2 ~]# printf "get key007\r\n"|nc 127.0.0.1 11211
VALUE key007 0 10
lijinghua0
END


### telnet检验

[root@pa2 etc]# telnet 58.87.104.82 11211
Trying 58.87.104.82...
Connected to 58.87.104.82.
Escape character is '^]'.
set k1 0 0 6
oldboy
STORED

ERROR
get k1
VALUE k1 0 6
oldboy
END

quit #退出

## MySQL与Memcached操作命令对比


MySQL的insert语句  ========	Memcached的set命令
MySQL的select语句  ========	Memcached的get命令
MySQL的delete语句  ========	Memcached的delete命令


## php配置连接memcache
### 配置文件更改
[root@pa2 etc]# tail -5 php.ini 
extension=memcached.so
session.save_handler = memcache
session.save_path = "tcp://58.87.104.82:11211"


## 基础依赖


 wget  https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz
 tar -zxf libmemcached-1.0.18.tar.gz 
 cd libmemcached-1.0.18/
 ./configure --prefix=/usr/local/libmemcached --with-memcached  
 /usr/local/php/sbin/php-fpm -m
 /usr/local/php/sbin/php-fpm -i
 
### php_memcache模块
 
 
wget http://pecl.php.net/get/memcached-2.2.0.tgz

tar -zxf memcached-2.2.0.tgz

### phpize
 /usr/local/php/bin/phpize
 ./configure --with-php-config=/usr/local/php/bin/php-config --with-libmemcached-dir=/usr/local/libmemcached
 make && make install 
 
### 配置文件里面添加扩展

vim php.ini

;添加memcache依赖
;extension_dir = "/usr/local/php/lib/php/extensions/no-debug-non-zts-20131226/"
extension=redis.so   

;php配置连接memcache
 ;session.save_handler = files
  session.save_handler = memcache
 ;session.save_path = "/tmp"
   session.save_path = "tcp://58.87.104.82:11211"

重启时要指定配置文件 例如:
/www/web/php/sbin/php-fpm -c /www/web/php/etc/php.ini

### phpinfo查看页
 
 
session.save_handler	memcache	memcache
session.save_path	tcp://58.87.104.82:11211	tcp://58.87.104.82:11211
地址：
https://s1.ax1x.com/2018/06/17/Cxk56J.jpg



### memadmin了解一下


### Memcached在集群中的session共享存储的优缺点

优点：
1)	读写速度上会比普通files速度快很多
2)	可以解决多个服务器共用session的难题
缺点：
1)	session数据都保存在memory中，持久化方面有所欠缺，但对session数据来说不是问题。
2)	一般是单台，如果部署多台，多台之间无法数据同步。通过hash算法分配依然有session丢失的问题。
对于以上的缺点，解决思路如下：
1)	可以用其他的持久化系统存储session，例如：Redis、ttserver来替代Memcached。
2)	高性能高并发场景，cookies效率比session要好很多，因此，大网站都会用cookies解决会话共享问题。
3)	有初级运维网友通过牺牲LB的负载均衡的策略实现，例如：lvs-p、nginx ip_hash等，但这些都不是好的方法



### Memcached状态信息详细说明



## 适用场景

购买云服务器实例时一起购买的数据盘，这种情况购买的数据盘，阿里云已经把该盘放到我们购买的服务器上了，只不过需要最后一步挂载操作，就可以用df 命令看到我们新挂载的数据盘

## 挂载步骤第一步，检查硬盘实体

fdisk -l   #观察硬盘实体


该命令让我们可以看到当前服务器上实际硬盘情况，我们可以看到有一块500G的磁盘

## 开始挂载 

mount -t  /dev/vdb   /data 

解释 ：

这里的 /data目录是我想把500G数据盘挂载的那个目录

/dev/vdb 是我们在上图中看到的那块数据盘


## 检查 


root@nfs:~# df -h
Filesystem      Size  Used Avail Use% Mounted on
udev            3.9G     0  3.9G   0% /dev
tmpfs           799M  3.3M  796M   1% /run
/dev/vda1        40G  3.2G   35G   9% /
tmpfs           3.9G     0  3.9G   0% /dev/shm
tmpfs           5.0M     0  5.0M   0% /run/lock
tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup
/dev/vdb        493G  149G  319G  32% /data                  #数据盘在这里
tmpfs           799M     0  799M   0% /run/user/0



## 开机自动挂载

vim /etc/fstab       #配置文件写入

/dev/vdb /data ext4 defaults 0 0


注意：必要时需要重启以检查是否真正能开启自动挂载，这是建议，各位视情况而定，避免后期不必要的麻烦




